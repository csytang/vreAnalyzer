final class org.apache.mahout.clustering.kmeans.KMeansUtil extends java.lang.Object
{
    private static final org.slf4j.Logger log;

    private void <init>()
    {
        org.apache.mahout.clustering.kmeans.KMeansUtil r0;

        r0 := @this: org.apache.mahout.clustering.kmeans.KMeansUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void configureWithClusterInfo(org.apache.hadoop.conf.Configuration, org.apache.hadoop.fs.Path, java.util.Collection)
    {
        org.apache.hadoop.conf.Configuration r0;
        org.apache.hadoop.fs.Path r1;
        java.util.Collection r2;
        java.util.Iterator r3;
        org.apache.mahout.common.iterator.sequencefile.SequenceFileDirValueIterable $r4;
        org.apache.mahout.common.iterator.sequencefile.PathType $r5;
        org.apache.hadoop.fs.PathFilter $r6;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r7;
        org.slf4j.Logger $r8;
        java.lang.StringBuilder $r9, $r11, $r12;
        java.lang.IllegalStateException $r10;
        org.apache.mahout.clustering.kmeans.Kluster $r13, $r17;
        java.lang.String $r14;
        int $i0;
        org.apache.mahout.math.Vector $r15;
        org.apache.mahout.common.distance.DistanceMeasure $r16;
        org.apache.hadoop.io.Writable r18;
        java.lang.Class r19;
        org.apache.mahout.clustering.iterator.ClusterWritable r20;
        org.apache.mahout.clustering.canopy.Canopy r21;

        r0 := @parameter0: org.apache.hadoop.conf.Configuration;

        r1 := @parameter1: org.apache.hadoop.fs.Path;

        r2 := @parameter2: java.util.Collection;

        $r4 = new org.apache.mahout.common.iterator.sequencefile.SequenceFileDirValueIterable;

        $r5 = <org.apache.mahout.common.iterator.sequencefile.PathType: org.apache.mahout.common.iterator.sequencefile.PathType LIST>;

        $r6 = staticinvoke <org.apache.mahout.common.iterator.sequencefile.PathFilters: org.apache.hadoop.fs.PathFilter partFilter()>();

        specialinvoke $r4.<org.apache.mahout.common.iterator.sequencefile.SequenceFileDirValueIterable: void <init>(org.apache.hadoop.fs.Path,org.apache.mahout.common.iterator.sequencefile.PathType,org.apache.hadoop.fs.PathFilter,org.apache.hadoop.conf.Configuration)>(r1, $r5, $r6, r0);

        r3 = virtualinvoke $r4.<org.apache.mahout.common.iterator.sequencefile.SequenceFileDirValueIterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r18 = (org.apache.hadoop.io.Writable) $r7;

        r19 = virtualinvoke r18.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = virtualinvoke r19.<java.lang.Object: boolean equals(java.lang.Object)>(class "org/apache/mahout/clustering/iterator/ClusterWritable");

        if $z1 == 0 goto label2;

        r20 = (org.apache.mahout.clustering.iterator.ClusterWritable) r18;

        r18 = virtualinvoke r20.<org.apache.mahout.clustering.iterator.ClusterWritable: org.apache.mahout.clustering.Cluster getValue()>();

        r19 = virtualinvoke r18.<java.lang.Object: java.lang.Class getClass()>();

     label2:
        $r8 = <org.apache.mahout.clustering.kmeans.KMeansUtil: org.slf4j.Logger log>;

        interfaceinvoke $r8.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Read 1 Cluster from {}", r1);

        $z3 = virtualinvoke r19.<java.lang.Object: boolean equals(java.lang.Object)>(class "org/apache/mahout/clustering/kmeans/Kluster");

        if $z3 == 0 goto label3;

        $r17 = (org.apache.mahout.clustering.kmeans.Kluster) r18;

        interfaceinvoke r2.<java.util.Collection: boolean add(java.lang.Object)>($r17);

        goto label1;

     label3:
        $z2 = virtualinvoke r19.<java.lang.Object: boolean equals(java.lang.Object)>(class "org/apache/mahout/clustering/canopy/Canopy");

        if $z2 == 0 goto label4;

        r21 = (org.apache.mahout.clustering.canopy.Canopy) r18;

        $r13 = new org.apache.mahout.clustering.kmeans.Kluster;

        $r15 = virtualinvoke r21.<org.apache.mahout.clustering.canopy.Canopy: org.apache.mahout.math.Vector getCenter()>();

        $i0 = virtualinvoke r21.<org.apache.mahout.clustering.canopy.Canopy: int getId()>();

        $r16 = virtualinvoke r21.<org.apache.mahout.clustering.canopy.Canopy: org.apache.mahout.common.distance.DistanceMeasure getMeasure()>();

        specialinvoke $r13.<org.apache.mahout.clustering.kmeans.Kluster: void <init>(org.apache.mahout.math.Vector,int,org.apache.mahout.common.distance.DistanceMeasure)>($r15, $i0, $r16);

        interfaceinvoke r2.<java.util.Collection: boolean add(java.lang.Object)>($r13);

        goto label1;

     label4:
        $r10 = new java.lang.IllegalStateException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad value class: ");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r19);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r14);

        throw $r10;

     label5:
        return;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "org/apache/mahout/clustering/kmeans/KMeansUtil");

        <org.apache.mahout.clustering.kmeans.KMeansUtil: org.slf4j.Logger log> = $r0;

        return;
    }
}
