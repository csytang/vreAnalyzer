public class org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver extends java.lang.Object
{
    private double[] vARow;
    private double[] vQtRow;
    private final double[][] mQt;
    private final double[][] mR;
    private int qtStartRow;
    private int rStartRow;
    private int m;
    private final int n;
    private int cnt;
    private final double[] cs;
    static final boolean $assertionsDisabled;

    public void <init>(int, int)
    {
        org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver r0;
        int i0, i1, $i2, $i3, i4;
        double[] $r1, $r4, $r5, $r6, $r8;
        double[][] $r2, $r3, $r7, $r9;
        java.lang.IllegalArgumentException $r10;

        r0 := @this: org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (double)[2];

        r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: double[] cs> = $r1;

        if i0 >= i1 goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Givens thin QR: must be true: m>=n");

        throw $r10;

     label1:
        r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int m> = i0;

        r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int n> = i1;

        $r2 = newarray (double[])[i1];

        r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: double[][] mQt> = $r2;

        $r3 = newarray (double[])[i1];

        r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: double[][] mR> = $r3;

        $r4 = newarray (double)[i1];

        r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: double[] vARow> = $r4;

        $r5 = newarray (double)[i0];

        r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: double[] vQtRow> = $r5;

        i4 = 0;

     label2:
        if i4 >= i1 goto label3;

        $r7 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: double[][] mQt>;

        $i2 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int m>;

        $r6 = newarray (double)[$i2];

        $r7[i4] = $r6;

        $r9 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: double[][] mR>;

        $i3 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int n>;

        $r8 = newarray (double)[$i3];

        $r9[i4] = $r8;

        i4 = i4 + 1;

        goto label2;

     label3:
        r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int cnt> = 0;

        return;
    }

    public void reset()
    {
        org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver r0;

        r0 := @this: org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver;

        r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int cnt> = 0;

        return;
    }

    public void solve(org.apache.mahout.math.Matrix)
    {
        org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver r0;
        org.apache.mahout.math.Matrix r1;
        double[] r2;
        org.apache.mahout.math.Vector r3;
        boolean $z0, $z1;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i7, i8;
        double $d0;
        java.lang.AssertionError $r4, $r5;

        r0 := @this: org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver;

        r1 := @parameter0: org.apache.mahout.math.Matrix;

        $z0 = <org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i4 = interfaceinvoke r1.<org.apache.mahout.math.Matrix: int rowSize()>();

        $i5 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int m>;

        if $i4 == $i5 goto label1;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label1:
        $z1 = <org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $i2 = interfaceinvoke r1.<org.apache.mahout.math.Matrix: int columnSize()>();

        $i3 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int n>;

        if $i2 == $i3 goto label2;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label2:
        $i0 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int n>;

        r2 = newarray (double)[$i0];

        i6 = 0;

     label3:
        $i7 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int m>;

        if i6 >= $i7 goto label6;

        r3 = interfaceinvoke r1.<org.apache.mahout.math.Matrix: org.apache.mahout.math.Vector viewRow(int)>(i6);

        i8 = 0;

     label4:
        $i1 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int n>;

        if i8 >= $i1 goto label5;

        $d0 = interfaceinvoke r3.<org.apache.mahout.math.Vector: double getQuick(int)>(i8);

        r2[i8] = $d0;

        i8 = i8 + 1;

        goto label4;

     label5:
        virtualinvoke r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: void appendRow(double[])>(r2);

        i6 = i6 + 1;

        goto label3;

     label6:
        return;
    }

    public boolean isFull()
    {
        org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver;

        $i1 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int cnt>;

        $i0 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int m>;

        if $i1 != $i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int getM()
    {
        org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver r0;
        int $i0;

        r0 := @this: org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver;

        $i0 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int m>;

        return $i0;
    }

    public int getN()
    {
        org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver r0;
        int $i0;

        r0 := @this: org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver;

        $i0 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int n>;

        return $i0;
    }

    public int getCnt()
    {
        org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver r0;
        int $i0;

        r0 := @this: org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver;

        $i0 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int cnt>;

        return $i0;
    }

    public void adjust(int)
    {
        org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, i16;
        double[] $r1, $r3, $r5, $r8, $r10, $r12, $r13, $r14;
        double[][] $r2, $r4, $r6, $r7, $r9, $r11, $r15;
        java.lang.IllegalArgumentException $r16, $r17;

        r0 := @this: org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int m>;

        if i0 != $i1 goto label1;

        return;

     label1:
        $i2 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int n>;

        if i0 >= $i2 goto label2;

        $r17 = new java.lang.IllegalArgumentException;

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("new m can\'t be less than n");

        throw $r17;

     label2:
        $i3 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int cnt>;

        if i0 >= $i3 goto label3;

        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("new m can\'t be less than rows accumulated");

        throw $r16;

     label3:
        $r1 = newarray (double)[i0];

        r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: double[] vQtRow> = $r1;

        $i4 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int m>;

        if i0 <= $i4 goto label5;

        i15 = 0;

     label4:
        $i9 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int n>;

        if i15 >= $i9 goto label7;

        $r7 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: double[][] mQt>;

        $r6 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: double[][] mQt>;

        $r8 = $r6[i15];

        $r10 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>($r8, i0);

        $r7[i15] = $r10;

        $r9 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: double[][] mQt>;

        $r12 = $r9[i15];

        $r11 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: double[][] mQt>;

        $r13 = $r11[i15];

        $i10 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int m>;

        $i11 = i0 - $i10;

        $i12 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int m>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r12, 0, $r13, $i11, $i12);

        $r15 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: double[][] mQt>;

        $r14 = $r15[i15];

        $i14 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int m>;

        $i13 = i0 - $i14;

        staticinvoke <java.util.Arrays: void fill(double[],int,int,double)>($r14, 0, $i13, 0.0);

        i15 = i15 + 1;

        goto label4;

     label5:
        i16 = 0;

     label6:
        $i5 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int n>;

        if i16 >= $i5 goto label7;

        $r4 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: double[][] mQt>;

        $r2 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: double[][] mQt>;

        $r3 = $r2[i16];

        $i6 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int m>;

        $i8 = $i6 - i0;

        $i7 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int m>;

        $r5 = staticinvoke <java.util.Arrays: double[] copyOfRange(double[],int,int)>($r3, $i8, $i7);

        $r4[i16] = $r5;

        i16 = i16 + 1;

        goto label6;

     label7:
        r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int m> = i0;

        return;
    }

    public void trim()
    {
        org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver r0;
        int $i0;

        r0 := @this: org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver;

        $i0 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int cnt>;

        virtualinvoke r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: void adjust(int)>($i0);

        return;
    }

    public void appendRow(double[])
    {
        org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver r0;
        double[] r1, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, r32, r33;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, i23;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11;
        java.lang.Throwable $r30;
        java.lang.IllegalStateException $r31;

        r0 := @this: org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver;

        r1 := @parameter0: double[];

        $i2 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int cnt>;

        $i1 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int m>;

        if $i2 < $i1 goto label01;

        $r31 = new java.lang.IllegalStateException;

        specialinvoke $r31.<java.lang.IllegalStateException: void <init>(java.lang.String)>("thin QR solver fed more rows than initialized for");

        throw $r31;

     label01:
        $r3 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: double[] vQtRow>;

        staticinvoke <java.util.Arrays: void fill(double[],double)>($r3, 0.0);

        $r4 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: double[] vQtRow>;

        $i4 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int m>;

        $i3 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int cnt>;

        $i5 = $i4 - $i3;

        $i6 = $i5 - 1;

        $r4[$i6] = 1.0;

        $i8 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int cnt>;

        $i7 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int n>;

        if $i8 <= $i7 goto label02;

        $i22 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int n>;

        goto label03;

     label02:
        $i22 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int cnt>;

     label03:
        i0 = $i22;

        $r5 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: double[] vARow>;

        $i9 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int n>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r5, 0, $i9);

        if $i22 <= 0 goto label04;

        $r21 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: double[] vARow>;

        $d6 = $r21[0];

        $r20 = specialinvoke r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: double[] getRRow(int)>(0);

        $d8 = $r20[0];

        $r19 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: double[] cs>;

        staticinvoke <org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: void givens(double,double,double[])>($d6, $d8, $r19);

        $r23 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: double[] cs>;

        $d7 = $r23[0];

        $r22 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: double[] cs>;

        $d9 = $r22[1];

        $r25 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: double[] vARow>;

        $r24 = specialinvoke r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: double[] getRRow(int)>(0);

        $i18 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int n>;

        staticinvoke <org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: void applyGivensInPlace(double,double,double[],double[],int,int)>($d7, $d9, $r25, $r24, 0, $i18);

        $r27 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: double[] cs>;

        $d11 = $r27[0];

        $r26 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: double[] cs>;

        $d10 = $r26[1];

        $r28 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: double[] vQtRow>;

        $r29 = specialinvoke r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: double[] getQtRow(int)>(0);

        $i19 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int m>;

        staticinvoke <org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: void applyGivensInPlace(double,double,double[],double[],int,int)>($d11, $d10, $r28, $r29, 0, $i19);

     label04:
        i23 = 1;

     label05:
        if i23 >= i0 goto label06;

        $i11 = i23 - 1;

        $r8 = specialinvoke r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: double[] getRRow(int)>($i11);

        $d0 = $r8[i23];

        $r10 = specialinvoke r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: double[] getRRow(int)>(i23);

        $d1 = $r10[i23];

        $r9 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: double[] cs>;

        staticinvoke <org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: void givens(double,double,double[])>($d0, $d1, $r9);

        $r11 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: double[] cs>;

        $d2 = $r11[0];

        $r12 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: double[] cs>;

        $d3 = $r12[1];

        $i13 = i23 - 1;

        $r13 = specialinvoke r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: double[] getRRow(int)>($i13);

        $r14 = specialinvoke r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: double[] getRRow(int)>(i23);

        $i14 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int n>;

        $i15 = $i14 - i23;

        staticinvoke <org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: void applyGivensInPlace(double,double,double[],double[],int,int)>($d2, $d3, $r13, $r14, i23, $i15);

        $r15 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: double[] cs>;

        $d5 = $r15[0];

        $r16 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: double[] cs>;

        $d4 = $r16[1];

        $i16 = i23 - 1;

        $r17 = specialinvoke r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: double[] getQtRow(int)>($i16);

        $r18 = specialinvoke r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: double[] getQtRow(int)>(i23);

        $i17 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int m>;

        staticinvoke <org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: void applyGivensInPlace(double,double,double[],double[],int,int)>($d5, $d4, $r17, $r18, 0, $i17);

        i23 = i23 + 1;

        goto label05;

     label06:
        specialinvoke r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: void pushQtDown()>();

        r32 = specialinvoke r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: double[] getQtRow(int)>(0);

        $r6 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: double[] vQtRow>;

        specialinvoke r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: void setQtRow(int,double[])>(0, $r6);

        r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: double[] vQtRow> = r32;

        specialinvoke r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: void pushRDown()>();

        r33 = specialinvoke r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: double[] getRRow(int)>(0);

        $r7 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: double[] vARow>;

        specialinvoke r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: void setRRow(int,double[])>(0, $r7);

        r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: double[] vARow> = r33;

     label07:
        $i10 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int cnt>;

        $i12 = $i10 + 1;

        r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int cnt> = $i12;

        goto label10;

     label08:
        $r30 := @caughtexception;

     label09:
        $i20 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int cnt>;

        $i21 = $i20 + 1;

        r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int cnt> = $i21;

        throw $r30;

     label10:
        return;

        catch java.lang.Throwable from label01 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    private double[] getQtRow(int)
    {
        org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver r0;
        int $i0, $i1, $i2, $i3, i4, $i6;
        double[][] $r1;
        double[] $r2;

        r0 := @this: org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver;

        i4 := @parameter0: int;

        $r1 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: double[][] mQt>;

        $i0 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int qtStartRow>;

        $i1 = i4 + $i0;

        $i2 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int n>;

        if $i1 < $i2 goto label1;

        $i3 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int n>;

        $i6 = $i1 - $i3;

        goto label2;

     label1:
        $i6 = $i1;

     label2:
        $r2 = $r1[$i6];

        return $r2;
    }

    private void setQtRow(int, double[])
    {
        org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver r0;
        double[] r1;
        int $i0, $i1, $i2, $i3, i4, $i6;
        double[][] $r2;

        r0 := @this: org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver;

        i4 := @parameter0: int;

        r1 := @parameter1: double[];

        $r2 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: double[][] mQt>;

        $i0 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int qtStartRow>;

        $i1 = i4 + $i0;

        $i2 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int n>;

        if $i1 < $i2 goto label1;

        $i3 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int n>;

        $i6 = $i1 - $i3;

        goto label2;

     label1:
        $i6 = $i1;

     label2:
        $r2[$i6] = r1;

        return;
    }

    private void pushQtDown()
    {
        org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver r0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver;

        $i0 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int qtStartRow>;

        if $i0 != 0 goto label1;

        $i2 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int n>;

        $i3 = $i2 - 1;

        goto label2;

     label1:
        $i1 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int qtStartRow>;

        $i3 = $i1 - 1;

     label2:
        r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int qtStartRow> = $i3;

        return;
    }

    private double[] getRRow(int)
    {
        org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver r0;
        int $i0, $i1, $i2, i3, i4, $i5;
        double[][] $r1;
        double[] $r2;

        r0 := @this: org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver;

        i3 := @parameter0: int;

        $i0 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int rStartRow>;

        i4 = i3 + $i0;

        $r1 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: double[][] mR>;

        $i1 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int n>;

        if i4 < $i1 goto label1;

        $i2 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int n>;

        $i5 = i4 - $i2;

        goto label2;

     label1:
        $i5 = i4;

     label2:
        $r2 = $r1[$i5];

        return $r2;
    }

    private void setRRow(int, double[])
    {
        org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver r0;
        double[] r1;
        int $i0, $i1, $i2, $i3, i4, $i6;
        double[][] $r2;

        r0 := @this: org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver;

        i4 := @parameter0: int;

        r1 := @parameter1: double[];

        $r2 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: double[][] mR>;

        $i0 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int rStartRow>;

        $i1 = i4 + $i0;

        $i2 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int n>;

        if $i1 < $i2 goto label1;

        $i3 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int n>;

        $i6 = $i1 - $i3;

        goto label2;

     label1:
        $i6 = $i1;

     label2:
        $r2[$i6] = r1;

        return;
    }

    private void pushRDown()
    {
        org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver r0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver;

        $i0 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int rStartRow>;

        if $i0 != 0 goto label1;

        $i2 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int n>;

        $i3 = $i2 - 1;

        goto label2;

     label1:
        $i1 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int rStartRow>;

        $i3 = $i1 - 1;

     label2:
        r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int rStartRow> = $i3;

        return;
    }

    public org.apache.mahout.math.UpperTriangular getRTilde()
    {
        org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver r0;
        org.apache.mahout.math.UpperTriangular $r2;
        int $i0, $i1, i2;
        double[] $r3;

        r0 := @this: org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver;

        $r2 = new org.apache.mahout.math.UpperTriangular;

        $i0 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int n>;

        specialinvoke $r2.<org.apache.mahout.math.UpperTriangular: void <init>(int)>($i0);

        i2 = 0;

     label1:
        $i1 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int n>;

        if i2 >= $i1 goto label2;

        $r3 = specialinvoke r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: double[] getRRow(int)>(i2);

        virtualinvoke $r2.<org.apache.mahout.math.UpperTriangular: org.apache.mahout.math.Matrix assignNonZeroElementsInRow(int,double[])>(i2, $r3);

        i2 = i2 + 1;

        goto label1;

     label2:
        return $r2;
    }

    public double[][] getThinQtTilde()
    {
        org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver r0;
        double[][] r1, $r2, $r3, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;

        r0 := @this: org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver;

        $i0 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int qtStartRow>;

        if $i0 == 0 goto label1;

        $i1 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int n>;

        r1 = newarray (double[])[$i1];

        $r3 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: double[][] mQt>;

        $i5 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int qtStartRow>;

        $i3 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int n>;

        $i2 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int qtStartRow>;

        $i4 = $i3 - $i2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, $i5, r1, 0, $i4);

        $r4 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: double[][] mQt>;

        $i7 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int n>;

        $i6 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int qtStartRow>;

        $i9 = $i7 - $i6;

        $i8 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: int qtStartRow>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r1, $i9, $i8);

        return r1;

     label1:
        $r2 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: double[][] mQt>;

        return $r2;
    }

    public static void applyGivensInPlace(double, double, double[], double[], int, int)
    {
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9;
        double[] r0, r1;
        int i0, i1, i2, i3;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        r0 := @parameter2: double[];

        r1 := @parameter3: double[];

        i0 := @parameter4: int;

        i1 := @parameter5: int;

        i2 = i0 + i1;

        i3 = i0;

     label1:
        if i3 >= i2 goto label2;

        d2 = r0[i3];

        d3 = r1[i3];

        $d5 = d0 * d2;

        $d4 = d1 * d3;

        $d7 = $d5 - $d4;

        r0[i3] = $d7;

        $d9 = d1 * d2;

        $d6 = d0 * d3;

        $d8 = $d9 + $d6;

        r1[i3] = $d8;

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    public static void applyGivensInPlace(double, double, org.apache.mahout.math.Vector, org.apache.mahout.math.Vector, int, int)
    {
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9;
        org.apache.mahout.math.Vector r0, r1;
        int i0, i1, i2, i3;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        r0 := @parameter2: org.apache.mahout.math.Vector;

        r1 := @parameter3: org.apache.mahout.math.Vector;

        i0 := @parameter4: int;

        i1 := @parameter5: int;

        i2 = i0 + i1;

        i3 = i0;

     label1:
        if i3 >= i2 goto label2;

        d2 = interfaceinvoke r0.<org.apache.mahout.math.Vector: double getQuick(int)>(i3);

        d3 = interfaceinvoke r1.<org.apache.mahout.math.Vector: double getQuick(int)>(i3);

        $d4 = d0 * d2;

        $d5 = d1 * d3;

        $d7 = $d4 - $d5;

        interfaceinvoke r0.<org.apache.mahout.math.Vector: void setQuick(int,double)>(i3, $d7);

        $d9 = d1 * d2;

        $d6 = d0 * d3;

        $d8 = $d9 + $d6;

        interfaceinvoke r1.<org.apache.mahout.math.Vector: void setQuick(int,double)>(i3, $d8);

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    public static void applyGivensInPlace(double, double, int, int, org.apache.mahout.math.Matrix)
    {
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9;
        int i0, i1, i2, i3;
        org.apache.mahout.math.Matrix r0;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r0 := @parameter4: org.apache.mahout.math.Matrix;

        i2 = interfaceinvoke r0.<org.apache.mahout.math.Matrix: int columnSize()>();

        i3 = 0;

     label1:
        if i3 >= i2 goto label2;

        d2 = interfaceinvoke r0.<org.apache.mahout.math.Matrix: double get(int,int)>(i0, i3);

        d3 = interfaceinvoke r0.<org.apache.mahout.math.Matrix: double get(int,int)>(i1, i3);

        $d4 = d0 * d2;

        $d5 = d1 * d3;

        $d7 = $d4 - $d5;

        interfaceinvoke r0.<org.apache.mahout.math.Matrix: void set(int,int,double)>(i0, i3, $d7);

        $d9 = d1 * d2;

        $d6 = d0 * d3;

        $d8 = $d9 + $d6;

        interfaceinvoke r0.<org.apache.mahout.math.Matrix: void set(int,int,double)>(i1, i3, $d8);

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    public static void fromRho(double, double[])
    {
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13;
        double[] r0;
        byte $b0, $b1;

        d0 := @parameter0: double;

        r0 := @parameter1: double[];

        $b0 = d0 cmpl 1.0;

        if $b0 != 0 goto label1;

        r0[0] = 0.0;

        r0[1] = 1.0;

        return;

     label1:
        $d1 = staticinvoke <java.lang.Math: double abs(double)>(d0);

        $b1 = $d1 cmpg 1.0;

        if $b1 >= 0 goto label2;

        $d8 = 2.0 * d0;

        r0[1] = $d8;

        $d10 = r0[1];

        $d9 = r0[1];

        $d12 = $d10 * $d9;

        $d11 = 1.0 - $d12;

        $d13 = staticinvoke <java.lang.Math: double sqrt(double)>($d11);

        r0[0] = $d13;

        return;

     label2:
        $d2 = 2.0 / d0;

        r0[0] = $d2;

        $d4 = r0[0];

        $d3 = r0[0];

        $d5 = $d4 * $d3;

        $d6 = 1.0 - $d5;

        $d7 = staticinvoke <java.lang.Math: double sqrt(double)>($d6);

        r0[1] = $d7;

        return;
    }

    public static void givens(double, double, double[])
    {
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, d18, d19;
        double[] r0;
        byte $b0, $b1;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        r0 := @parameter2: double[];

        $b0 = d1 cmpl 0.0;

        if $b0 != 0 goto label1;

        r0[0] = 1.0;

        r0[1] = 0.0;

        return;

     label1:
        $d2 = staticinvoke <java.lang.Math: double abs(double)>(d1);

        $d3 = staticinvoke <java.lang.Math: double abs(double)>(d0);

        $b1 = $d2 cmpl $d3;

        if $b1 <= 0 goto label2;

        $d12 = neg d0;

        d18 = $d12 / d1;

        $d11 = d18 * d18;

        $d13 = 1.0 + $d11;

        $d14 = staticinvoke <java.lang.Math: double sqrt(double)>($d13);

        $d16 = 1.0 / $d14;

        r0[1] = $d16;

        $d15 = r0[1];

        $d17 = $d15 * d18;

        r0[0] = $d17;

        goto label3;

     label2:
        $d4 = neg d1;

        d19 = $d4 / d0;

        $d5 = d19 * d19;

        $d6 = 1.0 + $d5;

        $d8 = staticinvoke <java.lang.Math: double sqrt(double)>($d6);

        $d7 = 1.0 / $d8;

        r0[0] = $d7;

        $d10 = r0[0];

        $d9 = $d10 * d19;

        r0[1] = $d9;

     label3:
        return;
    }

    public static double toRho(double, double)
    {
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9;
        byte $b0, $b1;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        return 1.0;

     label1:
        $d2 = staticinvoke <java.lang.Math: double abs(double)>(d1);

        $d3 = staticinvoke <java.lang.Math: double abs(double)>(d0);

        $b1 = $d2 cmpg $d3;

        if $b1 >= 0 goto label2;

        $d7 = staticinvoke <java.lang.Math: double signum(double)>(d0);

        $d8 = $d7 * d1;

        $d9 = $d8 / 2.0;

        return $d9;

     label2:
        $d4 = staticinvoke <java.lang.Math: double signum(double)>(d1);

        $d5 = $d4 * 2.0;

        $d6 = $d5 / d0;

        return $d6;
    }

    public static void mergeR(org.apache.mahout.math.UpperTriangular, org.apache.mahout.math.UpperTriangular)
    {
        org.apache.mahout.math.UpperTriangular r0, r1;
        int i0, $i1, $i2, $i3, i4, i5;
        double[] r4;
        org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver$TriangularRowView $r5, $r6, $r7, $r8;
        boolean $z0;
        double $d0, $d1, $d2, $d3;
        java.lang.AssertionError $r9;

        r0 := @parameter0: org.apache.mahout.math.UpperTriangular;

        r1 := @parameter1: org.apache.mahout.math.UpperTriangular;

        $r5 = new org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver$TriangularRowView;

        specialinvoke $r5.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver$TriangularRowView: void <init>(org.apache.mahout.math.UpperTriangular,org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver$1)>(r0, null);

        $r6 = new org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver$TriangularRowView;

        specialinvoke $r6.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver$TriangularRowView: void <init>(org.apache.mahout.math.UpperTriangular,org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver$1)>(r1, null);

        i0 = virtualinvoke $r5.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver$TriangularRowView: int size()>();

        $z0 = <org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i3 = virtualinvoke $r6.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver$TriangularRowView: int size()>();

        if i0 == $i3 goto label1;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label1:
        r4 = newarray (double)[2];

        i4 = 0;

     label2:
        if i4 >= i0 goto label5;

        i5 = i4;

     label3:
        if i5 >= i0 goto label4;

        $r7 = virtualinvoke $r5.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver$TriangularRowView: org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver$TriangularRowView setViewedRow(int)>(i5);

        $d0 = virtualinvoke $r7.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver$TriangularRowView: double get(int)>(i5);

        $i1 = i5 - i4;

        $r8 = virtualinvoke $r6.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver$TriangularRowView: org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver$TriangularRowView setViewedRow(int)>($i1);

        $d1 = virtualinvoke $r8.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver$TriangularRowView: double get(int)>(i5);

        staticinvoke <org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: void givens(double,double,double[])>($d0, $d1, r4);

        $d2 = r4[0];

        $d3 = r4[1];

        $i2 = i0 - i5;

        staticinvoke <org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: void applyGivensInPlace(double,double,org.apache.mahout.math.Vector,org.apache.mahout.math.Vector,int,int)>($d2, $d3, $r5, $r6, i5, $i2);

        i5 = i5 + 1;

        goto label3;

     label4:
        i4 = i4 + 1;

        goto label2;

     label5:
        return;
    }

    public static void mergeR(double[][], double[][])
    {
        double[][] r0, r1;
        int i0, $i1, $i2, $i3, $i4, i5, i6;
        double[] r2, $r3, $r4, $r5, $r6, $r7, $r8;
        boolean $z0;
        double $d0, $d1, $d2, $d3;
        java.lang.AssertionError $r9;

        r0 := @parameter0: double[][];

        r1 := @parameter1: double[][];

        $r3 = r0[0];

        i0 = lengthof $r3;

        $z0 = <org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r8 = r1[0];

        $i4 = lengthof $r8;

        if i0 == $i4 goto label1;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label1:
        r2 = newarray (double)[2];

        i5 = 0;

     label2:
        if i5 >= i0 goto label5;

        i6 = i5;

     label3:
        if i6 >= i0 goto label4;

        $r4 = r0[i6];

        $d1 = $r4[i6];

        $i1 = i6 - i5;

        $r5 = r1[$i1];

        $d0 = $r5[i6];

        staticinvoke <org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: void givens(double,double,double[])>($d1, $d0, r2);

        $d3 = r2[0];

        $d2 = r2[1];

        $r7 = r0[i6];

        $i2 = i6 - i5;

        $r6 = r1[$i2];

        $i3 = i0 - i6;

        staticinvoke <org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: void applyGivensInPlace(double,double,double[],double[],int,int)>($d3, $d2, $r7, $r6, i6, $i3);

        i6 = i6 + 1;

        goto label3;

     label4:
        i5 = i5 + 1;

        goto label2;

     label5:
        return;
    }

    public static void mergeRonQ(org.apache.mahout.math.UpperTriangular, org.apache.mahout.math.UpperTriangular, double[][], double[][])
    {
        org.apache.mahout.math.UpperTriangular r0, r1;
        double[][] r2, r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10;
        double[] r6, $r9, $r12, $r13, $r14;
        org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver$TriangularRowView $r7, $r8, $r10, $r11;
        boolean $z0, $z1, $z2, $z3;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        java.lang.AssertionError $r15, $r16, $r17, $r18;

        r0 := @parameter0: org.apache.mahout.math.UpperTriangular;

        r1 := @parameter1: org.apache.mahout.math.UpperTriangular;

        r2 := @parameter2: double[][];

        r3 := @parameter3: double[][];

        $r7 = new org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver$TriangularRowView;

        specialinvoke $r7.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver$TriangularRowView: void <init>(org.apache.mahout.math.UpperTriangular,org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver$1)>(r0, null);

        $r8 = new org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver$TriangularRowView;

        specialinvoke $r8.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver$TriangularRowView: void <init>(org.apache.mahout.math.UpperTriangular,org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver$1)>(r1, null);

        i0 = virtualinvoke $r7.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver$TriangularRowView: int size()>();

        $z0 = <org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i8 = virtualinvoke $r8.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver$TriangularRowView: int size()>();

        if i0 == $i8 goto label1;

        $r17 = new java.lang.AssertionError;

        specialinvoke $r17.<java.lang.AssertionError: void <init>()>();

        throw $r17;

     label1:
        $z1 = <org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $i7 = lengthof r2;

        if i0 == $i7 goto label2;

        $r18 = new java.lang.AssertionError;

        specialinvoke $r18.<java.lang.AssertionError: void <init>()>();

        throw $r18;

     label2:
        $z2 = <org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: boolean $assertionsDisabled>;

        if $z2 != 0 goto label3;

        $i6 = lengthof r3;

        if i0 == $i6 goto label3;

        $r16 = new java.lang.AssertionError;

        specialinvoke $r16.<java.lang.AssertionError: void <init>()>();

        throw $r16;

     label3:
        $r9 = r2[0];

        i1 = lengthof $r9;

        $z3 = <org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: boolean $assertionsDisabled>;

        if $z3 != 0 goto label4;

        $r14 = r3[0];

        $i5 = lengthof $r14;

        if $i5 == i1 goto label4;

        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();

        throw $r15;

     label4:
        r6 = newarray (double)[2];

        i9 = 0;

     label5:
        if i9 >= i0 goto label8;

        i10 = i9;

     label6:
        if i10 >= i0 goto label7;

        $r10 = virtualinvoke $r7.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver$TriangularRowView: org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver$TriangularRowView setViewedRow(int)>(i10);

        $d0 = virtualinvoke $r10.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver$TriangularRowView: double get(int)>(i10);

        $i2 = i10 - i9;

        $r11 = virtualinvoke $r8.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver$TriangularRowView: org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver$TriangularRowView setViewedRow(int)>($i2);

        $d1 = virtualinvoke $r11.<org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver$TriangularRowView: double get(int)>(i10);

        staticinvoke <org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: void givens(double,double,double[])>($d0, $d1, r6);

        $d3 = r6[0];

        $d2 = r6[1];

        $i3 = i0 - i10;

        staticinvoke <org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: void applyGivensInPlace(double,double,org.apache.mahout.math.Vector,org.apache.mahout.math.Vector,int,int)>($d3, $d2, $r7, $r8, i10, $i3);

        $d5 = r6[0];

        $d4 = r6[1];

        $r12 = r2[i10];

        $i4 = i10 - i9;

        $r13 = r3[$i4];

        staticinvoke <org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: void applyGivensInPlace(double,double,double[],double[],int,int)>($d5, $d4, $r12, $r13, 0, i1);

        i10 = i10 + 1;

        goto label6;

     label7:
        i9 = i9 + 1;

        goto label5;

     label8:
        return;
    }

    public static void mergeRonQ(double[][], double[][], double[][], double[][])
    {
        double[][] r0, r1, r2, r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11;
        double[] r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r18;
        boolean $z0, $z1, $z2, $z3;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        java.lang.AssertionError $r14, $r15, $r16, $r17;

        r0 := @parameter0: double[][];

        r1 := @parameter1: double[][];

        r2 := @parameter2: double[][];

        r3 := @parameter3: double[][];

        $r5 = r0[0];

        i0 = lengthof $r5;

        $z0 = <org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r18 = r1[0];

        $i9 = lengthof $r18;

        if i0 == $i9 goto label1;

        $r17 = new java.lang.AssertionError;

        specialinvoke $r17.<java.lang.AssertionError: void <init>()>();

        throw $r17;

     label1:
        $z1 = <org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $i8 = lengthof r2;

        if i0 == $i8 goto label2;

        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();

        throw $r15;

     label2:
        $z2 = <org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: boolean $assertionsDisabled>;

        if $z2 != 0 goto label3;

        $i7 = lengthof r3;

        if i0 == $i7 goto label3;

        $r16 = new java.lang.AssertionError;

        specialinvoke $r16.<java.lang.AssertionError: void <init>()>();

        throw $r16;

     label3:
        $r6 = r2[0];

        i1 = lengthof $r6;

        $z3 = <org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: boolean $assertionsDisabled>;

        if $z3 != 0 goto label4;

        $r13 = r3[0];

        $i6 = lengthof $r13;

        if $i6 == i1 goto label4;

        $r14 = new java.lang.AssertionError;

        specialinvoke $r14.<java.lang.AssertionError: void <init>()>();

        throw $r14;

     label4:
        r4 = newarray (double)[2];

        i10 = 0;

     label5:
        if i10 >= i0 goto label8;

        i11 = i10;

     label6:
        if i11 >= i0 goto label7;

        $r7 = r0[i11];

        $d0 = $r7[i11];

        $i2 = i11 - i10;

        $r8 = r1[$i2];

        $d1 = $r8[i11];

        staticinvoke <org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: void givens(double,double,double[])>($d0, $d1, r4);

        $d2 = r4[0];

        $d3 = r4[1];

        $r9 = r0[i11];

        $i4 = i11 - i10;

        $r10 = r1[$i4];

        $i3 = i0 - i11;

        staticinvoke <org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: void applyGivensInPlace(double,double,double[],double[],int,int)>($d2, $d3, $r9, $r10, i11, $i3);

        $d5 = r4[0];

        $d4 = r4[1];

        $r12 = r2[i11];

        $i5 = i11 - i10;

        $r11 = r3[$i5];

        staticinvoke <org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: void applyGivensInPlace(double,double,double[],double[],int,int)>($d5, $d4, $r12, $r11, 0, i1);

        i11 = i11 + 1;

        goto label6;

     label7:
        i10 = i10 + 1;

        goto label5;

     label8:
        return;
    }

    public static double[][] mergeQrUp(double[][], double[][], double[][])
    {
        double[][] r0, r1, r2, r3;
        int i0, i1, i2;
        double[] $r4, $r5;

        r0 := @parameter0: double[][];

        r1 := @parameter1: double[][];

        r2 := @parameter2: double[][];

        i0 = lengthof r0;

        $r4 = r0[0];

        i1 = lengthof $r4;

        r3 = newarray (double[])[i0];

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $r5 = newarray (double)[i1];

        r3[i2] = $r5;

        i2 = i2 + 1;

        goto label1;

     label2:
        staticinvoke <org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: void mergeRonQ(double[][],double[][],double[][],double[][])>(r1, r2, r0, r3);

        return r0;
    }

    public static double[][] mergeQrUp(double[][], org.apache.mahout.math.UpperTriangular, org.apache.mahout.math.UpperTriangular)
    {
        double[][] r0, r3;
        org.apache.mahout.math.UpperTriangular r1, r2;
        int i0, i1, i2;
        double[] $r4, $r5;

        r0 := @parameter0: double[][];

        r1 := @parameter1: org.apache.mahout.math.UpperTriangular;

        r2 := @parameter2: org.apache.mahout.math.UpperTriangular;

        i0 = lengthof r0;

        $r4 = r0[0];

        i1 = lengthof $r4;

        r3 = newarray (double[])[i0];

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $r5 = newarray (double)[i1];

        r3[i2] = $r5;

        i2 = i2 + 1;

        goto label1;

     label2:
        staticinvoke <org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: void mergeRonQ(org.apache.mahout.math.UpperTriangular,org.apache.mahout.math.UpperTriangular,double[][],double[][])>(r1, r2, r0, r3);

        return r0;
    }

    public static double[][] mergeQrDown(double[][], double[][], double[][])
    {
        double[][] r0, r1, r2, r3;
        int i0, i1, i2;
        double[] $r4, $r5;

        r0 := @parameter0: double[][];

        r1 := @parameter1: double[][];

        r2 := @parameter2: double[][];

        i0 = lengthof r1;

        $r4 = r1[0];

        i1 = lengthof $r4;

        r3 = newarray (double[])[i0];

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $r5 = newarray (double)[i1];

        r3[i2] = $r5;

        i2 = i2 + 1;

        goto label1;

     label2:
        staticinvoke <org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: void mergeRonQ(double[][],double[][],double[][],double[][])>(r0, r2, r3, r1);

        return r3;
    }

    public static double[][] mergeQrDown(org.apache.mahout.math.UpperTriangular, double[][], org.apache.mahout.math.UpperTriangular)
    {
        org.apache.mahout.math.UpperTriangular r0, r2;
        double[][] r1, r3;
        int i0, i1, i2;
        double[] $r4, $r5;

        r0 := @parameter0: org.apache.mahout.math.UpperTriangular;

        r1 := @parameter1: double[][];

        r2 := @parameter2: org.apache.mahout.math.UpperTriangular;

        i0 = lengthof r1;

        $r4 = r1[0];

        i1 = lengthof $r4;

        r3 = newarray (double[])[i0];

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $r5 = newarray (double)[i1];

        r3[i2] = $r5;

        i2 = i2 + 1;

        goto label1;

     label2:
        staticinvoke <org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: void mergeRonQ(org.apache.mahout.math.UpperTriangular,org.apache.mahout.math.UpperTriangular,double[][],double[][])>(r0, r2, r3, r1);

        return r3;
    }

    public static double[][] computeQtHat(double[][], int, java.util.Iterator)
    {
        int i0, i1;
        java.util.Iterator r0;
        org.apache.mahout.math.UpperTriangular r1, $r4, $r6, $r8;
        java.lang.Object $r2, $r3, $r5, $r7;
        double[][] r9;
        boolean $z0;

        r9 := @parameter0: double[][];

        i0 := @parameter1: int;

        r0 := @parameter2: java.util.Iterator;

        $r2 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        r1 = (org.apache.mahout.math.UpperTriangular) $r2;

        i1 = 1;

     label1:
        if i1 >= i0 goto label2;

        $r7 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (org.apache.mahout.math.UpperTriangular) $r7;

        staticinvoke <org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: void mergeR(org.apache.mahout.math.UpperTriangular,org.apache.mahout.math.UpperTriangular)>(r1, $r8);

        i1 = i1 + 1;

        goto label1;

     label2:
        if i0 <= 0 goto label3;

        $r5 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (org.apache.mahout.math.UpperTriangular) $r5;

        r9 = staticinvoke <org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: double[][] mergeQrDown(org.apache.mahout.math.UpperTriangular,double[][],org.apache.mahout.math.UpperTriangular)>(r1, r9, $r6);

     label3:
        $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.apache.mahout.math.UpperTriangular) $r3;

        r9 = staticinvoke <org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: double[][] mergeQrUp(double[][],org.apache.mahout.math.UpperTriangular,org.apache.mahout.math.UpperTriangular)>(r9, r1, $r4);

        goto label3;

     label4:
        return r9;
    }

    public static boolean isOrthonormal(double[][], boolean, double)
    {
        double[][] r0;
        boolean z0, $z1;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8;
        int i0, i3, i4, i5;
        org.apache.mahout.math.DenseVector $r3, $r5;
        double[] $r4, $r6;
        byte $b1, $b2, $b6;

        r0 := @parameter0: double[][];

        z0 := @parameter1: boolean;

        d0 := @parameter2: double;

        i0 = lengthof r0;

        i3 = 0;

        i4 = 0;

     label01:
        if i4 >= i0 goto label09;

        $r3 = new org.apache.mahout.math.DenseVector;

        $r4 = r0[i4];

        specialinvoke $r3.<org.apache.mahout.math.DenseVector: void <init>(double[],boolean)>($r4, 1);

        d1 = interfaceinvoke $r3.<org.apache.mahout.math.Vector: double norm(double)>(2.0);

        $d4 = 1.0 - d1;

        $d3 = staticinvoke <java.lang.Math: double abs(double)>($d4);

        $b1 = $d3 cmpg d0;

        if $b1 >= 0 goto label02;

        i3 = i3 + 1;

        goto label03;

     label02:
        $d5 = staticinvoke <java.lang.Math: double abs(double)>(d1);

        $b2 = $d5 cmpl d0;

        if $b2 <= 0 goto label03;

        return 0;

     label03:
        i5 = 0;

     label04:
        if i5 > i4 goto label08;

        $r5 = new org.apache.mahout.math.DenseVector;

        $r6 = r0[i5];

        specialinvoke $r5.<org.apache.mahout.math.DenseVector: void <init>(double[],boolean)>($r6, 1);

        d2 = interfaceinvoke $r3.<org.apache.mahout.math.Vector: double dot(org.apache.mahout.math.Vector)>($r5);

        if i4 != i5 goto label05;

        if i3 <= i5 goto label05;

        $d6 = 1.0;

        goto label06;

     label05:
        $d6 = 0.0;

     label06:
        $d7 = $d6 - d2;

        $d8 = staticinvoke <java.lang.Math: double abs(double)>($d7);

        $b6 = $d8 cmpg d0;

        if $b6 < 0 goto label07;

        return 0;

     label07:
        i5 = i5 + 1;

        goto label04;

     label08:
        i4 = i4 + 1;

        goto label01;

     label09:
        if z0 == 0 goto label11;

        if i3 >= i0 goto label10;

        $z1 = 1;

        goto label13;

     label10:
        $z1 = 0;

        goto label13;

     label11:
        if i3 != i0 goto label12;

        $z1 = 1;

        goto label13;

     label12:
        $z1 = 0;

     label13:
        return $z1;
    }

    public static boolean isOrthonormalBlocked(java.lang.Iterable, boolean, double)
    {
        java.lang.Iterable r0;
        boolean z0, $z1, $z2, $z3, $z6, $z7;
        double d0, $d1, $d2, $d3, $d4, $d5, d6, d7, d8, $d9, $d10, $d11;
        int i0, $i3, i4, i5, i6, i7;
        java.util.ArrayList r1, r21;
        double[][] r2, r3, $r5;
        java.util.Iterator $r4, r18, r19, r22;
        java.lang.Object $r6, $r8, $r9, $r13, $r14, $r17;
        byte $b1, $b2, $b8;
        org.apache.mahout.math.Vector $r7, $r10, r20;
        double[] $r11, $r15;
        org.apache.mahout.math.DenseVector $r12, $r16;

        r0 := @parameter0: java.lang.Iterable;

        z0 := @parameter1: boolean;

        d0 := @parameter2: double;

        $r4 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (double[][]) $r6;

        i0 = lengthof $r5;

        i4 = 0;

        i5 = 0;

     label01:
        if i5 >= i0 goto label17;

        r1 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

        r18 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

     label02:
        $z1 = interfaceinvoke r18.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label03;

        $r17 = interfaceinvoke r18.<java.util.Iterator: java.lang.Object next()>();

        r2 = (double[][]) $r17;

        $r16 = new org.apache.mahout.math.DenseVector;

        $r15 = r2[i5];

        specialinvoke $r16.<org.apache.mahout.math.DenseVector: void <init>(double[],boolean)>($r15, 1);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r16);

        goto label02;

     label03:
        d6 = 0.0;

        r19 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z2 = interfaceinvoke r19.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label05;

        $r14 = interfaceinvoke r19.<java.util.Iterator: java.lang.Object next()>();

        r20 = (org.apache.mahout.math.Vector) $r14;

        $d5 = interfaceinvoke r20.<org.apache.mahout.math.Vector: double dot(org.apache.mahout.math.Vector)>(r20);

        d6 = d6 + $d5;

        goto label04;

     label05:
        d7 = staticinvoke <java.lang.Math: double sqrt(double)>(d6);

        $d1 = 1.0 - d7;

        $d2 = staticinvoke <java.lang.Math: double abs(double)>($d1);

        $b1 = $d2 cmpg d0;

        if $b1 >= 0 goto label06;

        i4 = i4 + 1;

        goto label07;

     label06:
        $d3 = staticinvoke <java.lang.Math: double abs(double)>(d7);

        $b2 = $d3 cmpl d0;

        if $b2 <= 0 goto label07;

        return 0;

     label07:
        i6 = 0;

     label08:
        if i6 > i5 goto label16;

        r21 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

        r22 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

     label09:
        $z3 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label10;

        $r13 = interfaceinvoke r22.<java.util.Iterator: java.lang.Object next()>();

        r3 = (double[][]) $r13;

        $r12 = new org.apache.mahout.math.DenseVector;

        $r11 = r3[i6];

        specialinvoke $r12.<org.apache.mahout.math.DenseVector: void <init>(double[],boolean)>($r11, 1);

        interfaceinvoke r21.<java.util.List: boolean add(java.lang.Object)>($r12);

        goto label09;

     label10:
        d8 = 0.0;

        i7 = 0;

     label11:
        $i3 = interfaceinvoke r1.<java.util.List: int size()>();

        if i7 >= $i3 goto label12;

        $r9 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i7);

        $r7 = (org.apache.mahout.math.Vector) $r9;

        $r8 = interfaceinvoke r21.<java.util.List: java.lang.Object get(int)>(i7);

        $r10 = (org.apache.mahout.math.Vector) $r8;

        $d4 = interfaceinvoke $r7.<org.apache.mahout.math.Vector: double dot(org.apache.mahout.math.Vector)>($r10);

        d8 = d8 + $d4;

        i7 = i7 + 1;

        goto label11;

     label12:
        if i5 != i6 goto label13;

        if i4 <= i6 goto label13;

        $z6 = 1;

        goto label14;

     label13:
        $z6 = 0;

     label14:
        $d9 = (double) $z6;

        $d10 = $d9 - d8;

        $d11 = staticinvoke <java.lang.Math: double abs(double)>($d10);

        $b8 = $d11 cmpg d0;

        if $b8 < 0 goto label15;

        return 0;

     label15:
        i6 = i6 + 1;

        goto label08;

     label16:
        i5 = i5 + 1;

        goto label01;

     label17:
        if z0 == 0 goto label19;

        if i4 >= i0 goto label18;

        $z7 = 1;

        goto label21;

     label18:
        $z7 = 0;

        goto label21;

     label19:
        if i4 != i0 goto label20;

        $z7 = 1;

        goto label21;

     label20:
        $z7 = 0;

     label21:
        return $z7;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "org/apache/mahout/math/hadoop/stochasticsvd/qr/GivensThinSolver";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.mahout.math.hadoop.stochasticsvd.qr.GivensThinSolver: boolean $assertionsDisabled> = $z1;

        return;
    }
}
