public final class org.apache.mahout.classifier.sequencelearning.hmm.BaumWelchTrainer extends java.lang.Object
{

    private void <init>()
    {
        org.apache.mahout.classifier.sequencelearning.hmm.BaumWelchTrainer r0;

        r0 := @this: org.apache.mahout.classifier.sequencelearning.hmm.BaumWelchTrainer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void main(java.lang.String[]) throws java.io.IOException
    {
        java.lang.String[] r0;
        org.apache.commons.cli2.option.DefaultOption r3, r4, r5, r6, r7, r8;
        org.apache.commons.cli2.Group r9;
        org.apache.commons.cli2.CommandLine r10;
        java.lang.String r11, r12, $r70, $r71, $r72, $r79, $r96, $r100, $r106, $r112, $r117, $r122, $r129, $r133;
        int i0, i1, i2, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, $i15, i16, $i17, i18, i19, i20, i21, i22, i23, i24;
        double d0, $d1, $d2, $d3;
        org.apache.commons.cli2.builder.ArgumentBuilder $r17, $r23, $r24, $r26, $r31, $r36, $r37, $r41, $r42, $r43, $r48, $r49, $r55;
        org.apache.commons.cli2.builder.DefaultOptionBuilder $r18, $r19, $r20, $r21, $r22, $r25, $r27, $r29, $r30, $r32, $r33, $r34, $r38, $r39, $r40, $r44, $r45, $r46, $r51, $r52, $r53, $r54, $r60;
        org.apache.commons.cli2.Argument $r28, $r35, $r47, $r50;
        org.apache.commons.cli2.builder.GroupBuilder $r56, $r57, $r58, $r59, $r61, $r62, $r66, $r67;
        java.lang.Object $r63, $r64, $r65, $r69, $r73, $r78, $r139;
        org.apache.commons.cli2.commandline.Parser $r68;
        java.util.ArrayList $r74;
        java.util.Scanner $r75;
        java.util.Date $r76;
        long $l3;
        org.apache.mahout.classifier.sequencelearning.hmm.HmmModel $r77, r156;
        java.io.FileOutputStream $r80;
        java.io.DataOutputStream $r81;
        java.io.FileInputStream $r82;
        boolean $z0;
        java.io.PrintStream $r83, $r84, $r85, $r86, $r87, $r88, $r90, $r91, $r92, $r94, $r101, $r103, $r107, $r109, $r115, $r120, $r125, $r132, $r161;
        java.lang.StringBuilder $r89, $r95, $r97, $r98, $r99, $r102, $r104, $r105, $r108, $r110, $r111, $r113, $r114, $r116, $r118, $r121, $r123, $r124, $r126, $r127, $r128, $r131, $r134, $r135;
        org.apache.mahout.math.Matrix $r93, $r119;
        org.apache.mahout.math.Vector $r130;
        java.lang.Throwable $r136, $r142, $r143, $r144, $r145, $r146, r150, r158;
        java.lang.Integer $r137, $r138;
        org.apache.commons.cli2.OptionException $r140;
        int[] r155;

        r0 := @parameter0: java.lang.String[];

        $r18 = new org.apache.commons.cli2.builder.DefaultOptionBuilder;

        specialinvoke $r18.<org.apache.commons.cli2.builder.DefaultOptionBuilder: void <init>()>();

        $r17 = new org.apache.commons.cli2.builder.ArgumentBuilder;

        specialinvoke $r17.<org.apache.commons.cli2.builder.ArgumentBuilder: void <init>()>();

        $r19 = staticinvoke <org.apache.mahout.common.commandline.DefaultOptionCreator: org.apache.commons.cli2.builder.DefaultOptionBuilder inputOption()>();

        r3 = virtualinvoke $r19.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.option.DefaultOption create()>();

        $r22 = staticinvoke <org.apache.mahout.common.commandline.DefaultOptionCreator: org.apache.commons.cli2.builder.DefaultOptionBuilder outputOption()>();

        r4 = virtualinvoke $r22.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.option.DefaultOption create()>();

        $r20 = virtualinvoke $r18.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.builder.DefaultOptionBuilder withLongName(java.lang.String)>("nrOfHiddenStates");

        $r21 = virtualinvoke $r20.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.builder.DefaultOptionBuilder withDescription(java.lang.String)>("Number of hidden states");

        $r25 = virtualinvoke $r21.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.builder.DefaultOptionBuilder withShortName(java.lang.String)>("nh");

        $r26 = virtualinvoke $r17.<org.apache.commons.cli2.builder.ArgumentBuilder: org.apache.commons.cli2.builder.ArgumentBuilder withMaximum(int)>(1);

        $r23 = virtualinvoke $r26.<org.apache.commons.cli2.builder.ArgumentBuilder: org.apache.commons.cli2.builder.ArgumentBuilder withMinimum(int)>(1);

        $r24 = virtualinvoke $r23.<org.apache.commons.cli2.builder.ArgumentBuilder: org.apache.commons.cli2.builder.ArgumentBuilder withName(java.lang.String)>("number");

        $r28 = virtualinvoke $r24.<org.apache.commons.cli2.builder.ArgumentBuilder: org.apache.commons.cli2.Argument create()>();

        $r29 = virtualinvoke $r25.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.builder.DefaultOptionBuilder withArgument(org.apache.commons.cli2.Argument)>($r28);

        $r27 = virtualinvoke $r29.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.builder.DefaultOptionBuilder withRequired(boolean)>(1);

        r5 = virtualinvoke $r27.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.option.DefaultOption create()>();

        $r32 = virtualinvoke $r18.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.builder.DefaultOptionBuilder withLongName(java.lang.String)>("nrOfObservedStates");

        $r33 = virtualinvoke $r32.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.builder.DefaultOptionBuilder withDescription(java.lang.String)>("Number of observed states");

        $r30 = virtualinvoke $r33.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.builder.DefaultOptionBuilder withShortName(java.lang.String)>("no");

        $r31 = virtualinvoke $r17.<org.apache.commons.cli2.builder.ArgumentBuilder: org.apache.commons.cli2.builder.ArgumentBuilder withMaximum(int)>(1);

        $r37 = virtualinvoke $r31.<org.apache.commons.cli2.builder.ArgumentBuilder: org.apache.commons.cli2.builder.ArgumentBuilder withMinimum(int)>(1);

        $r36 = virtualinvoke $r37.<org.apache.commons.cli2.builder.ArgumentBuilder: org.apache.commons.cli2.builder.ArgumentBuilder withName(java.lang.String)>("number");

        $r35 = virtualinvoke $r36.<org.apache.commons.cli2.builder.ArgumentBuilder: org.apache.commons.cli2.Argument create()>();

        $r34 = virtualinvoke $r30.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.builder.DefaultOptionBuilder withArgument(org.apache.commons.cli2.Argument)>($r35);

        $r40 = virtualinvoke $r34.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.builder.DefaultOptionBuilder withRequired(boolean)>(1);

        r6 = virtualinvoke $r40.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.option.DefaultOption create()>();

        $r39 = virtualinvoke $r18.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.builder.DefaultOptionBuilder withLongName(java.lang.String)>("epsilon");

        $r38 = virtualinvoke $r39.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.builder.DefaultOptionBuilder withDescription(java.lang.String)>("Convergence threshold");

        $r44 = virtualinvoke $r38.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.builder.DefaultOptionBuilder withShortName(java.lang.String)>("e");

        $r43 = virtualinvoke $r17.<org.apache.commons.cli2.builder.ArgumentBuilder: org.apache.commons.cli2.builder.ArgumentBuilder withMaximum(int)>(1);

        $r42 = virtualinvoke $r43.<org.apache.commons.cli2.builder.ArgumentBuilder: org.apache.commons.cli2.builder.ArgumentBuilder withMinimum(int)>(1);

        $r41 = virtualinvoke $r42.<org.apache.commons.cli2.builder.ArgumentBuilder: org.apache.commons.cli2.builder.ArgumentBuilder withName(java.lang.String)>("number");

        $r47 = virtualinvoke $r41.<org.apache.commons.cli2.builder.ArgumentBuilder: org.apache.commons.cli2.Argument create()>();

        $r46 = virtualinvoke $r44.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.builder.DefaultOptionBuilder withArgument(org.apache.commons.cli2.Argument)>($r47);

        $r45 = virtualinvoke $r46.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.builder.DefaultOptionBuilder withRequired(boolean)>(1);

        r7 = virtualinvoke $r45.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.option.DefaultOption create()>();

        $r52 = virtualinvoke $r18.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.builder.DefaultOptionBuilder withLongName(java.lang.String)>("max-iterations");

        $r53 = virtualinvoke $r52.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.builder.DefaultOptionBuilder withDescription(java.lang.String)>("Maximum iterations number");

        $r54 = virtualinvoke $r53.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.builder.DefaultOptionBuilder withShortName(java.lang.String)>("m");

        $r55 = virtualinvoke $r17.<org.apache.commons.cli2.builder.ArgumentBuilder: org.apache.commons.cli2.builder.ArgumentBuilder withMaximum(int)>(1);

        $r48 = virtualinvoke $r55.<org.apache.commons.cli2.builder.ArgumentBuilder: org.apache.commons.cli2.builder.ArgumentBuilder withMinimum(int)>(1);

        $r49 = virtualinvoke $r48.<org.apache.commons.cli2.builder.ArgumentBuilder: org.apache.commons.cli2.builder.ArgumentBuilder withName(java.lang.String)>("number");

        $r50 = virtualinvoke $r49.<org.apache.commons.cli2.builder.ArgumentBuilder: org.apache.commons.cli2.Argument create()>();

        $r51 = virtualinvoke $r54.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.builder.DefaultOptionBuilder withArgument(org.apache.commons.cli2.Argument)>($r50);

        $r60 = virtualinvoke $r51.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.builder.DefaultOptionBuilder withRequired(boolean)>(1);

        r8 = virtualinvoke $r60.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.option.DefaultOption create()>();

        $r61 = new org.apache.commons.cli2.builder.GroupBuilder;

        specialinvoke $r61.<org.apache.commons.cli2.builder.GroupBuilder: void <init>()>();

        $r62 = virtualinvoke $r61.<org.apache.commons.cli2.builder.GroupBuilder: org.apache.commons.cli2.builder.GroupBuilder withOption(org.apache.commons.cli2.Option)>(r3);

        $r56 = virtualinvoke $r62.<org.apache.commons.cli2.builder.GroupBuilder: org.apache.commons.cli2.builder.GroupBuilder withOption(org.apache.commons.cli2.Option)>(r4);

        $r57 = virtualinvoke $r56.<org.apache.commons.cli2.builder.GroupBuilder: org.apache.commons.cli2.builder.GroupBuilder withOption(org.apache.commons.cli2.Option)>(r5);

        $r58 = virtualinvoke $r57.<org.apache.commons.cli2.builder.GroupBuilder: org.apache.commons.cli2.builder.GroupBuilder withOption(org.apache.commons.cli2.Option)>(r6);

        $r59 = virtualinvoke $r58.<org.apache.commons.cli2.builder.GroupBuilder: org.apache.commons.cli2.builder.GroupBuilder withOption(org.apache.commons.cli2.Option)>(r7);

        $r67 = virtualinvoke $r59.<org.apache.commons.cli2.builder.GroupBuilder: org.apache.commons.cli2.builder.GroupBuilder withOption(org.apache.commons.cli2.Option)>(r8);

        $r66 = virtualinvoke $r67.<org.apache.commons.cli2.builder.GroupBuilder: org.apache.commons.cli2.builder.GroupBuilder withName(java.lang.String)>("Options");

        r9 = virtualinvoke $r66.<org.apache.commons.cli2.builder.GroupBuilder: org.apache.commons.cli2.Group create()>();

     label01:
        $r68 = new org.apache.commons.cli2.commandline.Parser;

        specialinvoke $r68.<org.apache.commons.cli2.commandline.Parser: void <init>()>();

        virtualinvoke $r68.<org.apache.commons.cli2.commandline.Parser: void setGroup(org.apache.commons.cli2.Group)>(r9);

        r10 = virtualinvoke $r68.<org.apache.commons.cli2.commandline.Parser: org.apache.commons.cli2.CommandLine parse(java.lang.String[])>(r0);

        $r63 = interfaceinvoke r10.<org.apache.commons.cli2.CommandLine: java.lang.Object getValue(org.apache.commons.cli2.Option)>(r3);

        r11 = (java.lang.String) $r63;

        $r65 = interfaceinvoke r10.<org.apache.commons.cli2.CommandLine: java.lang.Object getValue(org.apache.commons.cli2.Option)>(r4);

        r12 = (java.lang.String) $r65;

        $r64 = interfaceinvoke r10.<org.apache.commons.cli2.CommandLine: java.lang.Object getValue(org.apache.commons.cli2.Option)>(r5);

        $r71 = (java.lang.String) $r64;

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r71);

        $r73 = interfaceinvoke r10.<org.apache.commons.cli2.CommandLine: java.lang.Object getValue(org.apache.commons.cli2.Option)>(r6);

        $r72 = (java.lang.String) $r73;

        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r72);

        $r69 = interfaceinvoke r10.<org.apache.commons.cli2.CommandLine: java.lang.Object getValue(org.apache.commons.cli2.Option)>(r7);

        $r70 = (java.lang.String) $r69;

        d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r70);

        $r78 = interfaceinvoke r10.<org.apache.commons.cli2.CommandLine: java.lang.Object getValue(org.apache.commons.cli2.Option)>(r8);

        $r79 = (java.lang.String) $r78;

        i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r79);

        $r77 = new org.apache.mahout.classifier.sequencelearning.hmm.HmmModel;

        $r76 = new java.util.Date;

        specialinvoke $r76.<java.util.Date: void <init>()>();

        $l3 = virtualinvoke $r76.<java.util.Date: long getTime()>();

        specialinvoke $r77.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: void <init>(int,int,long)>(i0, i1, $l3);

        $r74 = new java.util.ArrayList;

        specialinvoke $r74.<java.util.ArrayList: void <init>()>();

        $r75 = new java.util.Scanner;

        $r82 = new java.io.FileInputStream;

        specialinvoke $r82.<java.io.FileInputStream: void <init>(java.lang.String)>(r11);

        specialinvoke $r75.<java.util.Scanner: void <init>(java.io.InputStream,java.lang.String)>($r82, "UTF-8");

        r150 = null;

     label02:
        $z0 = virtualinvoke $r75.<java.util.Scanner: boolean hasNextInt()>();

        if $z0 == 0 goto label03;

        $i11 = virtualinvoke $r75.<java.util.Scanner: int nextInt()>();

        $r137 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i11);

        interfaceinvoke $r74.<java.util.List: boolean add(java.lang.Object)>($r137);

        goto label02;

     label03:
        if $r75 == null goto label12;

        virtualinvoke $r75.<java.util.Scanner: void close()>();

        goto label12;

     label04:
        $r144 := @caughtexception;

        r150 = $r144;

        throw $r144;

     label05:
        $r143 := @caughtexception;

     label06:
        if $r75 == null goto label11;

        if r150 == null goto label10;

     label07:
        virtualinvoke $r75.<java.util.Scanner: void close()>();

     label08:
        goto label11;

     label09:
        $r146 := @caughtexception;

        virtualinvoke r150.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r146);

        goto label11;

     label10:
        virtualinvoke $r75.<java.util.Scanner: void close()>();

     label11:
        throw $r143;

     label12:
        $i13 = interfaceinvoke $r74.<java.util.List: int size()>();

        r155 = newarray (int)[$i13];

        i14 = 0;

     label13:
        $i15 = interfaceinvoke $r74.<java.util.List: int size()>();

        if i14 >= $i15 goto label14;

        $r139 = interfaceinvoke $r74.<java.util.List: java.lang.Object get(int)>(i14);

        $r138 = (java.lang.Integer) $r139;

        $i12 = virtualinvoke $r138.<java.lang.Integer: int intValue()>();

        r155[i14] = $i12;

        i14 = i14 + 1;

        goto label13;

     label14:
        r156 = staticinvoke <org.apache.mahout.classifier.sequencelearning.hmm.HmmTrainer: org.apache.mahout.classifier.sequencelearning.hmm.HmmModel trainBaumWelch(org.apache.mahout.classifier.sequencelearning.hmm.HmmModel,int[],double,int,boolean)>($r77, r155, d0, i2, 1);

        $r81 = new java.io.DataOutputStream;

        $r80 = new java.io.FileOutputStream;

        specialinvoke $r80.<java.io.FileOutputStream: void <init>(java.lang.String)>(r12);

        specialinvoke $r81.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r80);

        r158 = null;

     label15:
        staticinvoke <org.apache.mahout.classifier.sequencelearning.hmm.LossyHmmSerializer: void serialize(org.apache.mahout.classifier.sequencelearning.hmm.HmmModel,java.io.DataOutput)>(r156, $r81);

     label16:
        if $r81 == null goto label25;

        virtualinvoke $r81.<java.io.DataOutputStream: void close()>();

        goto label25;

     label17:
        $r145 := @caughtexception;

        r158 = $r145;

        throw $r145;

     label18:
        $r136 := @caughtexception;

     label19:
        if $r81 == null goto label24;

        if r158 == null goto label23;

     label20:
        virtualinvoke $r81.<java.io.DataOutputStream: void close()>();

     label21:
        goto label24;

     label22:
        $r142 := @caughtexception;

        virtualinvoke r158.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r142);

        goto label24;

     label23:
        virtualinvoke $r81.<java.io.DataOutputStream: void close()>();

     label24:
        throw $r136;

     label25:
        $r161 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r161.<java.io.PrintStream: void println(java.lang.String)>("Initial probabilities: ");

        i16 = 0;

     label26:
        $i17 = virtualinvoke r156.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        if i16 >= $i17 goto label27;

        $r125 = <java.lang.System: java.io.PrintStream out>;

        $r127 = new java.lang.StringBuilder;

        specialinvoke $r127.<java.lang.StringBuilder: void <init>()>();

        $r126 = virtualinvoke $r127.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i16);

        $r128 = virtualinvoke $r126.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r129 = virtualinvoke $r128.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r125.<java.io.PrintStream: void print(java.lang.String)>($r129);

        i16 = i16 + 1;

        goto label26;

     label27:
        $r87 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r87.<java.io.PrintStream: void println()>();

        i18 = 0;

     label28:
        $i5 = virtualinvoke r156.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        if i18 >= $i5 goto label29;

        $r132 = <java.lang.System: java.io.PrintStream out>;

        $r131 = new java.lang.StringBuilder;

        specialinvoke $r131.<java.lang.StringBuilder: void <init>()>();

        $r130 = virtualinvoke r156.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: org.apache.mahout.math.Vector getInitialProbabilities()>();

        $d3 = interfaceinvoke $r130.<org.apache.mahout.math.Vector: double get(int)>(i18);

        $r134 = virtualinvoke $r131.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d3);

        $r135 = virtualinvoke $r134.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r133 = virtualinvoke $r135.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r132.<java.io.PrintStream: void print(java.lang.String)>($r133);

        i18 = i18 + 1;

        goto label28;

     label29:
        $r86 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r86.<java.io.PrintStream: void println()>();

        $r85 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r85.<java.io.PrintStream: void println(java.lang.String)>("Transition matrix:");

        $r84 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r84.<java.io.PrintStream: void print(java.lang.String)>("  ");

        i19 = 0;

     label30:
        $i4 = virtualinvoke r156.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        if i19 >= $i4 goto label31;

        $r115 = <java.lang.System: java.io.PrintStream out>;

        $r116 = new java.lang.StringBuilder;

        specialinvoke $r116.<java.lang.StringBuilder: void <init>()>();

        $r114 = virtualinvoke $r116.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i19);

        $r118 = virtualinvoke $r114.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r117 = virtualinvoke $r118.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r115.<java.io.PrintStream: void print(java.lang.String)>($r117);

        i19 = i19 + 1;

        goto label30;

     label31:
        $r83 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r83.<java.io.PrintStream: void println()>();

        i20 = 0;

     label32:
        $i8 = virtualinvoke r156.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        if i20 >= $i8 goto label35;

        $r103 = <java.lang.System: java.io.PrintStream out>;

        $r113 = new java.lang.StringBuilder;

        specialinvoke $r113.<java.lang.StringBuilder: void <init>()>();

        $r104 = virtualinvoke $r113.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i20);

        $r105 = virtualinvoke $r104.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r106 = virtualinvoke $r105.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r103.<java.io.PrintStream: void print(java.lang.String)>($r106);

        i21 = 0;

     label33:
        $i10 = virtualinvoke r156.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        if i21 >= $i10 goto label34;

        $r120 = <java.lang.System: java.io.PrintStream out>;

        $r121 = new java.lang.StringBuilder;

        specialinvoke $r121.<java.lang.StringBuilder: void <init>()>();

        $r119 = virtualinvoke r156.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: org.apache.mahout.math.Matrix getTransitionMatrix()>();

        $d2 = interfaceinvoke $r119.<org.apache.mahout.math.Matrix: double get(int,int)>(i20, i21);

        $r124 = virtualinvoke $r121.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d2);

        $r123 = virtualinvoke $r124.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r122 = virtualinvoke $r123.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r120.<java.io.PrintStream: void print(java.lang.String)>($r122);

        i21 = i21 + 1;

        goto label33;

     label34:
        $r107 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r107.<java.io.PrintStream: void println()>();

        i20 = i20 + 1;

        goto label32;

     label35:
        $r92 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r92.<java.io.PrintStream: void println(java.lang.String)>("Emission matrix: ");

        $r91 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r91.<java.io.PrintStream: void print(java.lang.String)>("  ");

        i22 = 0;

     label36:
        $i7 = virtualinvoke r156.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfOutputStates()>();

        if i22 >= $i7 goto label37;

        $r109 = <java.lang.System: java.io.PrintStream out>;

        $r108 = new java.lang.StringBuilder;

        specialinvoke $r108.<java.lang.StringBuilder: void <init>()>();

        $r110 = virtualinvoke $r108.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i22);

        $r111 = virtualinvoke $r110.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r112 = virtualinvoke $r111.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r109.<java.io.PrintStream: void print(java.lang.String)>($r112);

        i22 = i22 + 1;

        goto label36;

     label37:
        $r90 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r90.<java.io.PrintStream: void println()>();

        i23 = 0;

     label38:
        $i6 = virtualinvoke r156.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        if i23 >= $i6 goto label42;

        $r88 = <java.lang.System: java.io.PrintStream out>;

        $r89 = new java.lang.StringBuilder;

        specialinvoke $r89.<java.lang.StringBuilder: void <init>()>();

        $r99 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i23);

        $r98 = virtualinvoke $r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r100 = virtualinvoke $r98.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r88.<java.io.PrintStream: void print(java.lang.String)>($r100);

        i24 = 0;

     label39:
        $i9 = virtualinvoke r156.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfOutputStates()>();

        if i24 >= $i9 goto label40;

        $r94 = <java.lang.System: java.io.PrintStream out>;

        $r102 = new java.lang.StringBuilder;

        specialinvoke $r102.<java.lang.StringBuilder: void <init>()>();

        $r93 = virtualinvoke r156.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: org.apache.mahout.math.Matrix getEmissionMatrix()>();

        $d1 = interfaceinvoke $r93.<org.apache.mahout.math.Matrix: double get(int,int)>(i23, i24);

        $r95 = virtualinvoke $r102.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1);

        $r97 = virtualinvoke $r95.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r96 = virtualinvoke $r97.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r94.<java.io.PrintStream: void print(java.lang.String)>($r96);

        i24 = i24 + 1;

        goto label39;

     label40:
        $r101 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r101.<java.io.PrintStream: void println()>();

        i23 = i23 + 1;

        goto label38;

     label41:
        $r140 := @caughtexception;

        staticinvoke <org.apache.mahout.common.CommandLineUtil: void printHelp(org.apache.commons.cli2.Group)>(r9);

     label42:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label06 with label05;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label15 to label16 with label18;
        catch java.lang.Throwable from label20 to label21 with label22;
        catch java.lang.Throwable from label17 to label19 with label18;
        catch org.apache.commons.cli2.OptionException from label01 to label41 with label41;
    }
}
