public final class org.apache.mahout.classifier.sequencelearning.hmm.HmmAlgorithms extends java.lang.Object
{

    private void <init>()
    {
        org.apache.mahout.classifier.sequencelearning.hmm.HmmAlgorithms r0;

        r0 := @this: org.apache.mahout.classifier.sequencelearning.hmm.HmmAlgorithms;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.apache.mahout.math.Matrix forwardAlgorithm(org.apache.mahout.classifier.sequencelearning.hmm.HmmModel, int[], boolean)
    {
        org.apache.mahout.classifier.sequencelearning.hmm.HmmModel r0;
        int[] r1;
        boolean z0;
        org.apache.mahout.math.DenseMatrix $r3;
        int $i0, $i1;

        r0 := @parameter0: org.apache.mahout.classifier.sequencelearning.hmm.HmmModel;

        r1 := @parameter1: int[];

        z0 := @parameter2: boolean;

        $r3 = new org.apache.mahout.math.DenseMatrix;

        $i0 = lengthof r1;

        $i1 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        specialinvoke $r3.<org.apache.mahout.math.DenseMatrix: void <init>(int,int)>($i0, $i1);

        staticinvoke <org.apache.mahout.classifier.sequencelearning.hmm.HmmAlgorithms: void forwardAlgorithm(org.apache.mahout.math.Matrix,org.apache.mahout.classifier.sequencelearning.hmm.HmmModel,int[],boolean)>($r3, r0, r1, z0);

        return $r3;
    }

    static void forwardAlgorithm(org.apache.mahout.math.Matrix, org.apache.mahout.classifier.sequencelearning.hmm.HmmModel, int[], boolean)
    {
        org.apache.mahout.math.Matrix r0, r4, r5;
        org.apache.mahout.classifier.sequencelearning.hmm.HmmModel r1;
        int[] r2;
        boolean z0;
        org.apache.mahout.math.Vector r3;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, d22, d23;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i14, i15, i16, i17, i18, i19, i20, i21, i22;
        byte $b13;

        r0 := @parameter0: org.apache.mahout.math.Matrix;

        r1 := @parameter1: org.apache.mahout.classifier.sequencelearning.hmm.HmmModel;

        r2 := @parameter2: int[];

        z0 := @parameter3: boolean;

        r3 = virtualinvoke r1.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: org.apache.mahout.math.Vector getInitialProbabilities()>();

        r4 = virtualinvoke r1.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: org.apache.mahout.math.Matrix getEmissionMatrix()>();

        r5 = virtualinvoke r1.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: org.apache.mahout.math.Matrix getTransitionMatrix()>();

        if z0 == 0 goto label09;

        i15 = 0;

     label01:
        $i9 = virtualinvoke r1.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        if i15 >= $i9 goto label02;

        $d19 = interfaceinvoke r3.<org.apache.mahout.math.Vector: double getQuick(int)>(i15);

        $i14 = r2[0];

        $d20 = interfaceinvoke r4.<org.apache.mahout.math.Matrix: double getQuick(int,int)>(i15, $i14);

        $d21 = $d19 * $d20;

        $d18 = staticinvoke <java.lang.Math: double log(double)>($d21);

        interfaceinvoke r0.<org.apache.mahout.math.Matrix: void setQuick(int,int,double)>(0, i15, $d18);

        i15 = i15 + 1;

        goto label01;

     label02:
        i16 = 1;

     label03:
        $i7 = lengthof r2;

        if i16 >= $i7 goto label17;

        i17 = 0;

     label04:
        $i8 = virtualinvoke r1.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        if i17 >= $i8 goto label08;

        d22 = #-Infinity;

        i18 = 0;

     label05:
        $i10 = virtualinvoke r1.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        if i18 >= $i10 goto label07;

        $i12 = i16 - 1;

        $d13 = interfaceinvoke r0.<org.apache.mahout.math.Matrix: double getQuick(int,int)>($i12, i18);

        $d12 = interfaceinvoke r5.<org.apache.mahout.math.Matrix: double getQuick(int,int)>(i18, i17);

        $d14 = staticinvoke <java.lang.Math: double log(double)>($d12);

        d0 = $d13 + $d14;

        $b13 = d0 cmpl #-Infinity;

        if $b13 <= 0 goto label06;

        $d17 = d22 - d0;

        $d16 = staticinvoke <java.lang.Math: double exp(double)>($d17);

        $d15 = staticinvoke <java.lang.Math: double log1p(double)>($d16);

        d22 = d0 + $d15;

     label06:
        i18 = i18 + 1;

        goto label05;

     label07:
        $i11 = r2[i16];

        $d11 = interfaceinvoke r4.<org.apache.mahout.math.Matrix: double getQuick(int,int)>(i17, $i11);

        $d10 = staticinvoke <java.lang.Math: double log(double)>($d11);

        $d9 = d22 + $d10;

        interfaceinvoke r0.<org.apache.mahout.math.Matrix: void setQuick(int,int,double)>(i16, i17, $d9);

        i17 = i17 + 1;

        goto label04;

     label08:
        i16 = i16 + 1;

        goto label03;

     label09:
        i19 = 0;

     label10:
        $i0 = virtualinvoke r1.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        if i19 >= $i0 goto label11;

        $d6 = interfaceinvoke r3.<org.apache.mahout.math.Vector: double getQuick(int)>(i19);

        $i6 = r2[0];

        $d8 = interfaceinvoke r4.<org.apache.mahout.math.Matrix: double getQuick(int,int)>(i19, $i6);

        $d7 = $d6 * $d8;

        interfaceinvoke r0.<org.apache.mahout.math.Matrix: void setQuick(int,int,double)>(0, i19, $d7);

        i19 = i19 + 1;

        goto label10;

     label11:
        i20 = 1;

     label12:
        $i2 = lengthof r2;

        if i20 >= $i2 goto label17;

        i21 = 0;

     label13:
        $i1 = virtualinvoke r1.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        if i21 >= $i1 goto label16;

        d23 = 0.0;

        i22 = 0;

     label14:
        $i4 = virtualinvoke r1.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        if i22 >= $i4 goto label15;

        $i5 = i20 - 1;

        $d3 = interfaceinvoke r0.<org.apache.mahout.math.Matrix: double getQuick(int,int)>($i5, i22);

        $d5 = interfaceinvoke r5.<org.apache.mahout.math.Matrix: double getQuick(int,int)>(i22, i21);

        $d4 = $d3 * $d5;

        d23 = d23 + $d4;

        i22 = i22 + 1;

        goto label14;

     label15:
        $i3 = r2[i20];

        $d2 = interfaceinvoke r4.<org.apache.mahout.math.Matrix: double getQuick(int,int)>(i21, $i3);

        $d1 = d23 * $d2;

        interfaceinvoke r0.<org.apache.mahout.math.Matrix: void setQuick(int,int,double)>(i20, i21, $d1);

        i21 = i21 + 1;

        goto label13;

     label16:
        i20 = i20 + 1;

        goto label12;

     label17:
        return;
    }

    public static org.apache.mahout.math.Matrix backwardAlgorithm(org.apache.mahout.classifier.sequencelearning.hmm.HmmModel, int[], boolean)
    {
        org.apache.mahout.classifier.sequencelearning.hmm.HmmModel r0;
        int[] r1;
        boolean z0;
        org.apache.mahout.math.DenseMatrix $r3;
        int $i0, $i1;

        r0 := @parameter0: org.apache.mahout.classifier.sequencelearning.hmm.HmmModel;

        r1 := @parameter1: int[];

        z0 := @parameter2: boolean;

        $r3 = new org.apache.mahout.math.DenseMatrix;

        $i0 = lengthof r1;

        $i1 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        specialinvoke $r3.<org.apache.mahout.math.DenseMatrix: void <init>(int,int)>($i0, $i1);

        staticinvoke <org.apache.mahout.classifier.sequencelearning.hmm.HmmAlgorithms: void backwardAlgorithm(org.apache.mahout.math.Matrix,org.apache.mahout.classifier.sequencelearning.hmm.HmmModel,int[],boolean)>($r3, r0, r1, z0);

        return $r3;
    }

    static void backwardAlgorithm(org.apache.mahout.math.Matrix, org.apache.mahout.classifier.sequencelearning.hmm.HmmModel, int[], boolean)
    {
        org.apache.mahout.math.Matrix r0, r3, r4;
        org.apache.mahout.classifier.sequencelearning.hmm.HmmModel r1;
        int[] r2;
        boolean z0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, d15, d16;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i17, $i18, i19, i20, i21, i22, i23, i24, i25, i26;
        byte $b16;

        r0 := @parameter0: org.apache.mahout.math.Matrix;

        r1 := @parameter1: org.apache.mahout.classifier.sequencelearning.hmm.HmmModel;

        r2 := @parameter2: int[];

        z0 := @parameter3: boolean;

        r3 = virtualinvoke r1.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: org.apache.mahout.math.Matrix getEmissionMatrix()>();

        r4 = virtualinvoke r1.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: org.apache.mahout.math.Matrix getTransitionMatrix()>();

        if z0 == 0 goto label09;

        i19 = 0;

     label01:
        $i10 = virtualinvoke r1.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        if i19 >= $i10 goto label02;

        $i18 = lengthof r2;

        $i17 = $i18 - 1;

        interfaceinvoke r0.<org.apache.mahout.math.Matrix: void setQuick(int,int,double)>($i17, i19, 0.0);

        i19 = i19 + 1;

        goto label01;

     label02:
        $i11 = lengthof r2;

        i20 = $i11 - 2;

     label03:
        if i20 < 0 goto label17;

        i21 = 0;

     label04:
        $i9 = virtualinvoke r1.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        if i21 >= $i9 goto label08;

        d15 = #-Infinity;

        i22 = 0;

     label05:
        $i13 = virtualinvoke r1.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        if i22 >= $i13 goto label07;

        $i12 = i20 + 1;

        $d7 = interfaceinvoke r0.<org.apache.mahout.math.Matrix: double getQuick(int,int)>($i12, i22);

        $d8 = interfaceinvoke r4.<org.apache.mahout.math.Matrix: double getQuick(int,int)>(i21, i22);

        $d6 = staticinvoke <java.lang.Math: double log(double)>($d8);

        $d11 = $d7 + $d6;

        $i14 = i20 + 1;

        $i15 = r2[$i14];

        $d10 = interfaceinvoke r3.<org.apache.mahout.math.Matrix: double getQuick(int,int)>(i22, $i15);

        $d9 = staticinvoke <java.lang.Math: double log(double)>($d10);

        d0 = $d11 + $d9;

        $b16 = d0 cmpl #-Infinity;

        if $b16 <= 0 goto label06;

        $d12 = d15 - d0;

        $d14 = staticinvoke <java.lang.Math: double exp(double)>($d12);

        $d13 = staticinvoke <java.lang.Math: double log1p(double)>($d14);

        d15 = d0 + $d13;

     label06:
        i22 = i22 + 1;

        goto label05;

     label07:
        interfaceinvoke r0.<org.apache.mahout.math.Matrix: void setQuick(int,int,double)>(i20, i21, d15);

        i21 = i21 + 1;

        goto label04;

     label08:
        i20 = i20 + -1;

        goto label03;

     label09:
        i23 = 0;

     label10:
        $i0 = virtualinvoke r1.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        if i23 >= $i0 goto label11;

        $i7 = lengthof r2;

        $i8 = $i7 - 1;

        interfaceinvoke r0.<org.apache.mahout.math.Matrix: void setQuick(int,int,double)>($i8, i23, 1.0);

        i23 = i23 + 1;

        goto label10;

     label11:
        $i2 = lengthof r2;

        i24 = $i2 - 2;

     label12:
        if i24 < 0 goto label17;

        i25 = 0;

     label13:
        $i1 = virtualinvoke r1.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        if i25 >= $i1 goto label16;

        d16 = 0.0;

        i26 = 0;

     label14:
        $i3 = virtualinvoke r1.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        if i26 >= $i3 goto label15;

        $i4 = i24 + 1;

        $d1 = interfaceinvoke r0.<org.apache.mahout.math.Matrix: double getQuick(int,int)>($i4, i26);

        $d2 = interfaceinvoke r4.<org.apache.mahout.math.Matrix: double getQuick(int,int)>(i25, i26);

        $d3 = $d1 * $d2;

        $i5 = i24 + 1;

        $i6 = r2[$i5];

        $d5 = interfaceinvoke r3.<org.apache.mahout.math.Matrix: double getQuick(int,int)>(i26, $i6);

        $d4 = $d3 * $d5;

        d16 = d16 + $d4;

        i26 = i26 + 1;

        goto label14;

     label15:
        interfaceinvoke r0.<org.apache.mahout.math.Matrix: void setQuick(int,int,double)>(i24, i25, d16);

        i25 = i25 + 1;

        goto label13;

     label16:
        i24 = i24 + -1;

        goto label12;

     label17:
        return;
    }

    public static int[] viterbiAlgorithm(org.apache.mahout.classifier.sequencelearning.hmm.HmmModel, int[], boolean)
    {
        org.apache.mahout.classifier.sequencelearning.hmm.HmmModel r0;
        int[] r1, r4;
        boolean z0;
        double[][] r2;
        int[][] r3;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @parameter0: org.apache.mahout.classifier.sequencelearning.hmm.HmmModel;

        r1 := @parameter1: int[];

        z0 := @parameter2: boolean;

        $i0 = lengthof r1;

        $i1 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        r2 = newmultiarray (double)[$i0][$i1];

        $i2 = lengthof r1;

        $i3 = $i2 - 1;

        $i4 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        r3 = newmultiarray (int)[$i3][$i4];

        $i5 = lengthof r1;

        r4 = newarray (int)[$i5];

        staticinvoke <org.apache.mahout.classifier.sequencelearning.hmm.HmmAlgorithms: void viterbiAlgorithm(int[],double[][],int[][],org.apache.mahout.classifier.sequencelearning.hmm.HmmModel,int[],boolean)>(r4, r2, r3, r0, r1, z0);

        return r4;
    }

    static void viterbiAlgorithm(int[], double[][], int[][], org.apache.mahout.classifier.sequencelearning.hmm.HmmModel, int[], boolean)
    {
        int[] r0, r4, $r8, $r13, $r18;
        double[][] r1;
        int[][] r2;
        org.apache.mahout.classifier.sequencelearning.hmm.HmmModel r3;
        boolean z0;
        org.apache.mahout.math.Vector r5;
        org.apache.mahout.math.Matrix r6, r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i29, $i30, i31, i32, i33, i34, i35, i36, i37, i38, i39, i40, i41, $i42, i43;
        double[] $r9, $r10, $r11, $r12, $r14, $r15, $r16, $r17, $r19, $r20;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, d23, d24, d25, d26, d27;
        byte $b8, $b19, $b28;

        r0 := @parameter0: int[];

        r1 := @parameter1: double[][];

        r2 := @parameter2: int[][];

        r3 := @parameter3: org.apache.mahout.classifier.sequencelearning.hmm.HmmModel;

        r4 := @parameter4: int[];

        z0 := @parameter5: boolean;

        r5 = virtualinvoke r3.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: org.apache.mahout.math.Vector getInitialProbabilities()>();

        r6 = virtualinvoke r3.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: org.apache.mahout.math.Matrix getEmissionMatrix()>();

        r7 = virtualinvoke r3.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: org.apache.mahout.math.Matrix getTransitionMatrix()>();

        if z0 == 0 goto label02;

        i31 = 0;

     label01:
        $i29 = virtualinvoke r3.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        if i31 >= $i29 goto label04;

        $r20 = r1[0];

        $d17 = interfaceinvoke r5.<org.apache.mahout.math.Vector: double getQuick(int)>(i31);

        $i30 = r4[0];

        $d22 = interfaceinvoke r6.<org.apache.mahout.math.Matrix: double getQuick(int,int)>(i31, $i30);

        $d20 = $d17 * $d22;

        $d21 = staticinvoke <java.lang.Math: double log(double)>($d20);

        $r20[i31] = $d21;

        i31 = i31 + 1;

        goto label01;

     label02:
        i32 = 0;

     label03:
        $i1 = virtualinvoke r3.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        if i32 >= $i1 goto label04;

        $r19 = r1[0];

        $d14 = interfaceinvoke r5.<org.apache.mahout.math.Vector: double getQuick(int)>(i32);

        $i27 = r4[0];

        $d18 = interfaceinvoke r6.<org.apache.mahout.math.Matrix: double getQuick(int,int)>(i32, $i27);

        $d19 = $d14 * $d18;

        $r19[i32] = $d19;

        i32 = i32 + 1;

        goto label03;

     label04:
        if z0 == 0 goto label11;

        i33 = 1;

     label05:
        $i21 = lengthof r4;

        if i33 >= $i21 goto label18;

        i34 = 0;

     label06:
        $i22 = virtualinvoke r3.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        if i34 >= $i22 goto label10;

        i35 = 0;

        $i20 = i33 - 1;

        $r15 = r1[$i20];

        $d9 = $r15[0];

        $d10 = interfaceinvoke r7.<org.apache.mahout.math.Matrix: double getQuick(int,int)>(0, i34);

        $d11 = staticinvoke <java.lang.Math: double log(double)>($d10);

        d23 = $d9 + $d11;

        i36 = 1;

     label07:
        $i24 = virtualinvoke r3.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        if i36 >= $i24 goto label09;

        $i25 = i33 - 1;

        $r17 = r1[$i25];

        $d12 = $r17[i36];

        $d16 = interfaceinvoke r7.<org.apache.mahout.math.Matrix: double getQuick(int,int)>(i36, i34);

        $d15 = staticinvoke <java.lang.Math: double log(double)>($d16);

        d24 = $d12 + $d15;

        $b28 = d24 cmpl d23;

        if $b28 <= 0 goto label08;

        d23 = d24;

        i35 = i36;

     label08:
        i36 = i36 + 1;

        goto label07;

     label09:
        $r16 = r1[i33];

        $i23 = r4[i33];

        $d7 = interfaceinvoke r6.<org.apache.mahout.math.Matrix: double getQuick(int,int)>(i34, $i23);

        $d8 = staticinvoke <java.lang.Math: double log(double)>($d7);

        $d13 = d23 + $d8;

        $r16[i34] = $d13;

        $i26 = i33 - 1;

        $r18 = r2[$i26];

        $r18[i34] = i35;

        i34 = i34 + 1;

        goto label06;

     label10:
        i33 = i33 + 1;

        goto label05;

     label11:
        i37 = 1;

     label12:
        $i0 = lengthof r4;

        if i37 >= $i0 goto label18;

        i38 = 0;

     label13:
        $i12 = virtualinvoke r3.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        if i38 >= $i12 goto label17;

        i39 = 0;

        $i14 = i37 - 1;

        $r11 = r1[$i14];

        $d1 = $r11[0];

        $d2 = interfaceinvoke r7.<org.apache.mahout.math.Matrix: double getQuick(int,int)>(0, i38);

        d25 = $d1 * $d2;

        i40 = 1;

     label14:
        $i16 = virtualinvoke r3.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        if i40 >= $i16 goto label16;

        $i18 = i37 - 1;

        $r14 = r1[$i18];

        $d6 = $r14[i40];

        $d5 = interfaceinvoke r7.<org.apache.mahout.math.Matrix: double getQuick(int,int)>(i40, i38);

        d26 = $d6 * $d5;

        $b19 = d26 cmpl d25;

        if $b19 <= 0 goto label15;

        d25 = d26;

        i39 = i40;

     label15:
        i40 = i40 + 1;

        goto label14;

     label16:
        $r12 = r1[i37];

        $i15 = r4[i37];

        $d4 = interfaceinvoke r6.<org.apache.mahout.math.Matrix: double getQuick(int,int)>(i38, $i15);

        $d3 = d25 * $d4;

        $r12[i38] = $d3;

        $i17 = i37 - 1;

        $r13 = r2[$i17];

        $r13[i38] = i39;

        i38 = i38 + 1;

        goto label13;

     label17:
        i37 = i37 + 1;

        goto label12;

     label18:
        if z0 == 0 goto label19;

        d27 = #-Infinity;

        goto label20;

     label19:
        d27 = 0.0;

     label20:
        i41 = 0;

     label21:
        $i42 = virtualinvoke r3.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        if i41 >= $i42 goto label23;

        $i6 = lengthof r4;

        $i7 = $i6 - 1;

        $r9 = r1[$i7];

        $d0 = $r9[i41];

        $b8 = $d0 cmpl d27;

        if $b8 <= 0 goto label22;

        $i10 = lengthof r4;

        $i11 = $i10 - 1;

        $r10 = r1[$i11];

        d27 = $r10[i41];

        $i9 = lengthof r4;

        $i13 = $i9 - 1;

        r0[$i13] = i41;

     label22:
        i41 = i41 + 1;

        goto label21;

     label23:
        $i2 = lengthof r4;

        i43 = $i2 - 2;

     label24:
        if i43 < 0 goto label25;

        $r8 = r2[i43];

        $i4 = i43 + 1;

        $i3 = r0[$i4];

        $i5 = $r8[$i3];

        r0[i43] = $i5;

        i43 = i43 + -1;

        goto label24;

     label25:
        return;
    }
}
