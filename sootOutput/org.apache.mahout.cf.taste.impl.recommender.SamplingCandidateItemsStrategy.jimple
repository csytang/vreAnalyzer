public class org.apache.mahout.cf.taste.impl.recommender.SamplingCandidateItemsStrategy extends org.apache.mahout.cf.taste.impl.recommender.AbstractCandidateItemsStrategy
{
    private static final org.slf4j.Logger log;
    public static final int DEFAULT_FACTOR;
    public static final int NO_LIMIT_FACTOR;
    private static final int MAX_LIMIT;
    private static final double LOG2;
    private final int maxItems;
    private final int maxUsersPerItem;
    private final int maxItemsPerUser;

    public void <init>(int, int)
    {
        org.apache.mahout.cf.taste.impl.recommender.SamplingCandidateItemsStrategy r0;
        int i0, i1;

        r0 := @this: org.apache.mahout.cf.taste.impl.recommender.SamplingCandidateItemsStrategy;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<org.apache.mahout.cf.taste.impl.recommender.SamplingCandidateItemsStrategy: void <init>(int,int,int,int,int)>(30, 30, 30, i0, i1);

        return;
    }

    public void <init>(int, int, int, int, int)
    {
        org.apache.mahout.cf.taste.impl.recommender.SamplingCandidateItemsStrategy r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10;
        java.lang.Object[] $r1;
        org.slf4j.Logger $r2;
        java.lang.Integer $r3, $r4, $r5;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: org.apache.mahout.cf.taste.impl.recommender.SamplingCandidateItemsStrategy;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        specialinvoke r0.<org.apache.mahout.cf.taste.impl.recommender.AbstractCandidateItemsStrategy: void <init>()>();

        if i0 <= 0 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "itemsFactor must be greater then 0!");

        if i1 <= 0 goto label03;

        $z1 = 1;

        goto label04;

     label03:
        $z1 = 0;

     label04:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "usersPerItemFactor must be greater then 0!");

        if i2 <= 0 goto label05;

        $z2 = 1;

        goto label06;

     label05:
        $z2 = 0;

     label06:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z2, "candidatesPerUserFactor must be greater then 0!");

        if i3 <= 0 goto label07;

        $z3 = 1;

        goto label08;

     label07:
        $z3 = 0;

     label08:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z3, "numUsers must be greater then 0!");

        if i4 <= 0 goto label09;

        $z4 = 1;

        goto label10;

     label09:
        $z4 = 0;

     label10:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z4, "numItems must be greater then 0!");

        $i5 = staticinvoke <org.apache.mahout.cf.taste.impl.recommender.SamplingCandidateItemsStrategy: int computeMaxFrom(int,int)>(i0, i4);

        r0.<org.apache.mahout.cf.taste.impl.recommender.SamplingCandidateItemsStrategy: int maxItems> = $i5;

        $i6 = staticinvoke <org.apache.mahout.cf.taste.impl.recommender.SamplingCandidateItemsStrategy: int computeMaxFrom(int,int)>(i1, i3);

        r0.<org.apache.mahout.cf.taste.impl.recommender.SamplingCandidateItemsStrategy: int maxUsersPerItem> = $i6;

        $i7 = staticinvoke <org.apache.mahout.cf.taste.impl.recommender.SamplingCandidateItemsStrategy: int computeMaxFrom(int,int)>(i2, i4);

        r0.<org.apache.mahout.cf.taste.impl.recommender.SamplingCandidateItemsStrategy: int maxItemsPerUser> = $i7;

        $r2 = <org.apache.mahout.cf.taste.impl.recommender.SamplingCandidateItemsStrategy: org.slf4j.Logger log>;

        $r1 = newarray (java.lang.Object)[3];

        $i8 = r0.<org.apache.mahout.cf.taste.impl.recommender.SamplingCandidateItemsStrategy: int maxItems>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);

        $r1[0] = $r3;

        $i9 = r0.<org.apache.mahout.cf.taste.impl.recommender.SamplingCandidateItemsStrategy: int maxUsersPerItem>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9);

        $r1[1] = $r4;

        $i10 = r0.<org.apache.mahout.cf.taste.impl.recommender.SamplingCandidateItemsStrategy: int maxItemsPerUser>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i10);

        $r1[2] = $r5;

        interfaceinvoke $r2.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("maxItems {}, maxUsersPerItem {}, maxItemsPerUser {}", $r1);

        return;
    }

    private static int computeMaxFrom(int, int)
    {
        int i0, i1, $i4;
        long l2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;
        byte $b3;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 != 2147483647 goto label1;

        return 2147483647;

     label1:
        $d1 = (double) i0;

        $d0 = (double) i1;

        $d2 = staticinvoke <java.lang.Math: double log(double)>($d0);

        $d3 = <org.apache.mahout.cf.taste.impl.recommender.SamplingCandidateItemsStrategy: double LOG2>;

        $d4 = $d2 / $d3;

        $d5 = 1.0 + $d4;

        $d6 = $d1 * $d5;

        l2 = (long) $d6;

        $b3 = l2 cmp 2147483647L;

        if $b3 <= 0 goto label2;

        $i4 = 2147483647;

        goto label3;

     label2:
        $i4 = (int) l2;

     label3:
        return $i4;
    }

    protected org.apache.mahout.cf.taste.impl.common.FastIDSet doGetCandidateItems(long[], org.apache.mahout.cf.taste.model.DataModel, boolean) throws org.apache.mahout.cf.taste.common.TasteException
    {
        org.apache.mahout.cf.taste.impl.recommender.SamplingCandidateItemsStrategy r0;
        long[] r1;
        org.apache.mahout.cf.taste.model.DataModel r2;
        boolean z0, $z2, $z3;
        long l0, $l5, $l7;
        org.apache.mahout.cf.taste.model.PreferenceArray r3;
        int i1, $i2, $i3, $i4, $i6, $i8, $i9, i10;
        org.apache.mahout.cf.taste.impl.common.FastIDSet $r6, $r10, r18;
        java.util.Iterator $r8;
        java.lang.Object $r9, r13;
        org.apache.mahout.cf.taste.model.Preference $r11;
        double $d0, $d1, d2;
        org.apache.mahout.cf.taste.impl.common.LongPrimitiveArrayIterator r16;
        org.apache.mahout.cf.taste.impl.common.SamplingLongPrimitiveIterator r17;
        org.apache.mahout.common.iterator.FixedSizeSamplingIterator r19;
        org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator r20, r21, r22;

        r0 := @this: org.apache.mahout.cf.taste.impl.recommender.SamplingCandidateItemsStrategy;

        r1 := @parameter0: long[];

        r2 := @parameter1: org.apache.mahout.cf.taste.model.DataModel;

        z0 := @parameter2: boolean;

        r16 = new org.apache.mahout.cf.taste.impl.common.LongPrimitiveArrayIterator;

        specialinvoke r16.<org.apache.mahout.cf.taste.impl.common.LongPrimitiveArrayIterator: void <init>(long[])>(r1);

        r13 = r16;

        $i3 = lengthof r1;

        $i2 = r0.<org.apache.mahout.cf.taste.impl.recommender.SamplingCandidateItemsStrategy: int maxItems>;

        if $i3 <= $i2 goto label1;

        $i8 = r0.<org.apache.mahout.cf.taste.impl.recommender.SamplingCandidateItemsStrategy: int maxItems>;

        $d1 = (double) $i8;

        $i9 = lengthof r1;

        $d0 = (double) $i9;

        d2 = $d1 / $d0;

        r17 = new org.apache.mahout.cf.taste.impl.common.SamplingLongPrimitiveIterator;

        r20 = (org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator) r16;

        specialinvoke r17.<org.apache.mahout.cf.taste.impl.common.SamplingLongPrimitiveIterator: void <init>(org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator,double)>(r20, d2);

        r13 = r17;

     label1:
        r18 = new org.apache.mahout.cf.taste.impl.common.FastIDSet;

        specialinvoke r18.<org.apache.mahout.cf.taste.impl.common.FastIDSet: void <init>()>();

     label2:
        r21 = (org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator) r13;

        $z3 = interfaceinvoke r21.<org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator: boolean hasNext()>();

        if $z3 == 0 goto label6;

        r22 = (org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator) r13;

        l0 = interfaceinvoke r22.<org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator: long nextLong()>();

        r3 = interfaceinvoke r2.<org.apache.mahout.cf.taste.model.DataModel: org.apache.mahout.cf.taste.model.PreferenceArray getPreferencesForItem(long)>(l0);

        i1 = interfaceinvoke r3.<org.apache.mahout.cf.taste.model.PreferenceArray: int length()>();

        $i4 = r0.<org.apache.mahout.cf.taste.impl.recommender.SamplingCandidateItemsStrategy: int maxUsersPerItem>;

        if i1 <= $i4 goto label4;

        r19 = new org.apache.mahout.common.iterator.FixedSizeSamplingIterator;

        $i6 = r0.<org.apache.mahout.cf.taste.impl.recommender.SamplingCandidateItemsStrategy: int maxUsersPerItem>;

        $r8 = interfaceinvoke r3.<org.apache.mahout.cf.taste.model.PreferenceArray: java.util.Iterator iterator()>();

        specialinvoke r19.<org.apache.mahout.common.iterator.FixedSizeSamplingIterator: void <init>(int,java.util.Iterator)>($i6, $r8);

     label3:
        $z2 = interfaceinvoke r19.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        $r9 = interfaceinvoke r19.<java.util.Iterator: java.lang.Object next()>();

        $r11 = (org.apache.mahout.cf.taste.model.Preference) $r9;

        $l7 = interfaceinvoke $r11.<org.apache.mahout.cf.taste.model.Preference: long getUserID()>();

        $r10 = interfaceinvoke r2.<org.apache.mahout.cf.taste.model.DataModel: org.apache.mahout.cf.taste.impl.common.FastIDSet getItemIDsFromUser(long)>($l7);

        specialinvoke r0.<org.apache.mahout.cf.taste.impl.recommender.SamplingCandidateItemsStrategy: void addSomeOf(org.apache.mahout.cf.taste.impl.common.FastIDSet,org.apache.mahout.cf.taste.impl.common.FastIDSet)>(r18, $r10);

        goto label3;

     label4:
        i10 = 0;

     label5:
        if i10 >= i1 goto label2;

        $l5 = interfaceinvoke r3.<org.apache.mahout.cf.taste.model.PreferenceArray: long getUserID(int)>(i10);

        $r6 = interfaceinvoke r2.<org.apache.mahout.cf.taste.model.DataModel: org.apache.mahout.cf.taste.impl.common.FastIDSet getItemIDsFromUser(long)>($l5);

        specialinvoke r0.<org.apache.mahout.cf.taste.impl.recommender.SamplingCandidateItemsStrategy: void addSomeOf(org.apache.mahout.cf.taste.impl.common.FastIDSet,org.apache.mahout.cf.taste.impl.common.FastIDSet)>(r18, $r6);

        i10 = i10 + 1;

        goto label5;

     label6:
        if z0 != 0 goto label7;

        virtualinvoke r18.<org.apache.mahout.cf.taste.impl.common.FastIDSet: boolean removeAll(long[])>(r1);

     label7:
        return r18;
    }

    private void addSomeOf(org.apache.mahout.cf.taste.impl.common.FastIDSet, org.apache.mahout.cf.taste.impl.common.FastIDSet)
    {
        org.apache.mahout.cf.taste.impl.recommender.SamplingCandidateItemsStrategy r0;
        org.apache.mahout.cf.taste.impl.common.FastIDSet r1, r2;
        int $i0, $i1, $i2, $i3;
        org.apache.mahout.cf.taste.impl.common.SamplingLongPrimitiveIterator $r4;
        org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator $r5;
        double $d0, $d1, $d2;
        boolean $z1;
        long $l4;

        r0 := @this: org.apache.mahout.cf.taste.impl.recommender.SamplingCandidateItemsStrategy;

        r1 := @parameter0: org.apache.mahout.cf.taste.impl.common.FastIDSet;

        r2 := @parameter1: org.apache.mahout.cf.taste.impl.common.FastIDSet;

        $i0 = virtualinvoke r2.<org.apache.mahout.cf.taste.impl.common.FastIDSet: int size()>();

        $i1 = r0.<org.apache.mahout.cf.taste.impl.recommender.SamplingCandidateItemsStrategy: int maxItemsPerUser>;

        if $i0 <= $i1 goto label2;

        $r4 = new org.apache.mahout.cf.taste.impl.common.SamplingLongPrimitiveIterator;

        $r5 = virtualinvoke r2.<org.apache.mahout.cf.taste.impl.common.FastIDSet: org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator iterator()>();

        $i2 = r0.<org.apache.mahout.cf.taste.impl.recommender.SamplingCandidateItemsStrategy: int maxItemsPerUser>;

        $d0 = (double) $i2;

        $i3 = virtualinvoke r2.<org.apache.mahout.cf.taste.impl.common.FastIDSet: int size()>();

        $d1 = (double) $i3;

        $d2 = $d0 / $d1;

        specialinvoke $r4.<org.apache.mahout.cf.taste.impl.common.SamplingLongPrimitiveIterator: void <init>(org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator,double)>($r5, $d2);

     label1:
        $z1 = interfaceinvoke $r4.<org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $l4 = interfaceinvoke $r4.<org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator: long nextLong()>();

        virtualinvoke r1.<org.apache.mahout.cf.taste.impl.common.FastIDSet: boolean add(long)>($l4);

        goto label1;

     label2:
        virtualinvoke r1.<org.apache.mahout.cf.taste.impl.common.FastIDSet: boolean addAll(org.apache.mahout.cf.taste.impl.common.FastIDSet)>(r2);

     label3:
        return;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;
        double $d0;

        <org.apache.mahout.cf.taste.impl.recommender.SamplingCandidateItemsStrategy: int MAX_LIMIT> = 2147483647;

        <org.apache.mahout.cf.taste.impl.recommender.SamplingCandidateItemsStrategy: int NO_LIMIT_FACTOR> = 2147483647;

        <org.apache.mahout.cf.taste.impl.recommender.SamplingCandidateItemsStrategy: int DEFAULT_FACTOR> = 30;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "org/apache/mahout/cf/taste/impl/recommender/SamplingCandidateItemsStrategy");

        <org.apache.mahout.cf.taste.impl.recommender.SamplingCandidateItemsStrategy: org.slf4j.Logger log> = $r0;

        $d0 = staticinvoke <java.lang.Math: double log(double)>(2.0);

        <org.apache.mahout.cf.taste.impl.recommender.SamplingCandidateItemsStrategy: double LOG2> = $d0;

        return;
    }
}
