public class org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob extends org.apache.mahout.common.AbstractJob
{
    public static final java.lang.String CLEAN_EIGENVECTORS;
    private static final org.slf4j.Logger log;
    private org.apache.mahout.math.decomposer.SingularVectorVerifier eigenVerifier;
    private org.apache.mahout.math.VectorIterable eigensToVerify;
    private org.apache.mahout.math.VectorIterable corpus;
    private double maxError;
    private double minEigenValue;
    private org.apache.hadoop.fs.Path tmpOut;
    private org.apache.hadoop.fs.Path outPath;
    private int maxEigensToKeep;
    private org.apache.hadoop.fs.Path cleanedEigensPath;

    public void <init>()
    {
        org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob r0;

        r0 := @this: org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob;

        specialinvoke r0.<org.apache.mahout.common.AbstractJob: void <init>()>();

        return;
    }

    public void setEigensToVerify(org.apache.mahout.math.VectorIterable)
    {
        org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob r0;
        org.apache.mahout.math.VectorIterable r1;

        r0 := @this: org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob;

        r1 := @parameter0: org.apache.mahout.math.VectorIterable;

        r0.<org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: org.apache.mahout.math.VectorIterable eigensToVerify> = r1;

        return;
    }

    public int run(java.lang.String[]) throws java.lang.Exception
    {
        org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob r0;
        java.lang.String[] r1;
        java.util.Map r2;
        boolean $z0, $z1;
        org.apache.hadoop.conf.Configuration $r3;
        org.apache.hadoop.fs.Path $r4, $r6, $r8;
        java.lang.String $r5, $r7, $r9, $r10, $r11;
        double $d0;
        int $i0;

        r0 := @this: org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob;

        r1 := @parameter0: java.lang.String[];

        r2 = specialinvoke r0.<org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: java.util.Map handleArgs(java.lang.String[])>(r1);

        if r2 != null goto label1;

        return -1;

     label1:
        $z0 = interfaceinvoke r2.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        return 0;

     label2:
        $r3 = virtualinvoke r0.<org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: org.apache.hadoop.conf.Configuration getConf()>();

        $r4 = new org.apache.hadoop.fs.Path;

        $r5 = virtualinvoke r0.<org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: java.lang.String getOption(java.lang.String)>("eigenInput");

        specialinvoke $r4.<org.apache.hadoop.fs.Path: void <init>(java.lang.String)>($r5);

        $r6 = new org.apache.hadoop.fs.Path;

        $r7 = virtualinvoke r0.<org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: java.lang.String getOption(java.lang.String)>("corpusInput");

        specialinvoke $r6.<org.apache.hadoop.fs.Path: void <init>(java.lang.String)>($r7);

        $r8 = virtualinvoke r0.<org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: org.apache.hadoop.fs.Path getOutputPath()>();

        $r9 = virtualinvoke r0.<org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: java.lang.String getOption(java.lang.String)>("inMemory");

        if $r9 == null goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        $r10 = virtualinvoke r0.<org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: java.lang.String getOption(java.lang.String)>("maxError");

        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r10);

        $r11 = virtualinvoke r0.<org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: java.lang.String getOption(java.lang.String)>("maxEigens");

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r11);

        virtualinvoke r0.<org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: void runJob(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,boolean,double,int)>($r3, $r4, $r6, $r8, $z1, $d0, $i0);

        return 0;
    }

    public int run(org.apache.hadoop.fs.Path, org.apache.hadoop.fs.Path, org.apache.hadoop.fs.Path, org.apache.hadoop.fs.Path, double, double, boolean, org.apache.hadoop.conf.Configuration) throws java.io.IOException
    {
        org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob r0;
        org.apache.hadoop.fs.Path r1, r2, r3, r4;
        double d0, d1;
        boolean z0;
        org.apache.hadoop.conf.Configuration r5, $r12;
        java.util.Map r7;
        java.util.List r8;
        org.apache.mahout.math.VectorIterable $r9;
        org.apache.mahout.math.hadoop.DistributedRowMatrix $r10;
        org.apache.mahout.math.decomposer.SimpleEigenVerifier $r11;

        r0 := @this: org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob;

        r1 := @parameter0: org.apache.hadoop.fs.Path;

        r2 := @parameter1: org.apache.hadoop.fs.Path;

        r3 := @parameter2: org.apache.hadoop.fs.Path;

        r4 := @parameter3: org.apache.hadoop.fs.Path;

        d0 := @parameter4: double;

        d1 := @parameter5: double;

        z0 := @parameter6: boolean;

        r5 := @parameter7: org.apache.hadoop.conf.Configuration;

        r0.<org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: org.apache.hadoop.fs.Path outPath> = r3;

        r0.<org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: org.apache.hadoop.fs.Path tmpOut> = r4;

        r0.<org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: double maxError> = d0;

        r0.<org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: double minEigenValue> = d1;

        if r2 == null goto label1;

        $r9 = r0.<org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: org.apache.mahout.math.VectorIterable eigensToVerify>;

        if $r9 != null goto label1;

        specialinvoke r0.<org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: void prepareEigens(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.Path,boolean)>(r5, r2, z0);

     label1:
        $r10 = new org.apache.mahout.math.hadoop.DistributedRowMatrix;

        specialinvoke $r10.<org.apache.mahout.math.hadoop.DistributedRowMatrix: void <init>(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,int,int)>(r1, r4, 1, 1);

        virtualinvoke $r10.<org.apache.mahout.math.hadoop.DistributedRowMatrix: void setConf(org.apache.hadoop.conf.Configuration)>(r5);

        r0.<org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: org.apache.mahout.math.VectorIterable corpus> = $r10;

        $r11 = new org.apache.mahout.math.decomposer.SimpleEigenVerifier;

        specialinvoke $r11.<org.apache.mahout.math.decomposer.SimpleEigenVerifier: void <init>()>();

        r0.<org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: org.apache.mahout.math.decomposer.SingularVectorVerifier eigenVerifier> = $r11;

        r7 = specialinvoke r0.<org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: java.util.Map verifyEigens()>();

        r8 = specialinvoke r0.<org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: java.util.List pruneEigens(java.util.Map)>(r7);

        $r12 = new org.apache.hadoop.conf.Configuration;

        specialinvoke $r12.<org.apache.hadoop.conf.Configuration: void <init>()>();

        specialinvoke r0.<org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: void saveCleanEigens(org.apache.hadoop.conf.Configuration,java.util.Collection)>($r12, r8);

        return 0;
    }

    private java.util.Map handleArgs(java.lang.String[]) throws java.io.IOException
    {
        org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob r0;
        java.lang.String[] r1;
        org.apache.commons.cli2.builder.DefaultOptionBuilder $r2;
        org.apache.commons.cli2.option.DefaultOption $r3;
        org.apache.commons.cli2.Option $r5;
        java.util.Map $r7;

        r0 := @this: org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob;

        r1 := @parameter0: java.lang.String[];

        virtualinvoke r0.<org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: void addOutputOption()>();

        virtualinvoke r0.<org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: void addOption(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("eigenInput", "ei", "The Path for purported eigenVector input files (SequenceFile<WritableComparable,VectorWritable>.", null);

        virtualinvoke r0.<org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: void addOption(java.lang.String,java.lang.String,java.lang.String)>("corpusInput", "ci", "The Path for corpus input files (SequenceFile<WritableComparable,VectorWritable>.");

        $r2 = staticinvoke <org.apache.mahout.common.commandline.DefaultOptionCreator: org.apache.commons.cli2.builder.DefaultOptionBuilder outputOption()>();

        $r3 = virtualinvoke $r2.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.option.DefaultOption create()>();

        virtualinvoke r0.<org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: org.apache.commons.cli2.Option addOption(org.apache.commons.cli2.Option)>($r3);

        $r5 = staticinvoke <org.apache.mahout.common.commandline.DefaultOptionCreator: org.apache.commons.cli2.Option helpOption()>();

        virtualinvoke r0.<org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: org.apache.commons.cli2.Option addOption(org.apache.commons.cli2.Option)>($r5);

        virtualinvoke r0.<org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: void addOption(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("inMemory", "mem", "Buffer eigen matrix into memory (if you have enough!)", "false");

        virtualinvoke r0.<org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: void addOption(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("maxError", "err", "Maximum acceptable error", "0.05");

        virtualinvoke r0.<org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: void addOption(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("minEigenvalue", "mev", "Minimum eigenvalue to keep the vector for", "0.0");

        virtualinvoke r0.<org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: void addOption(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("maxEigens", "max", "Maximum number of eigenvectors to keep (0 means all)", "0");

        $r7 = virtualinvoke r0.<org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: java.util.Map parseArguments(java.lang.String[])>(r1);

        return $r7;
    }

    private void saveCleanEigens(org.apache.hadoop.conf.Configuration, java.util.Collection) throws java.io.IOException
    {
        org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob r0;
        org.apache.hadoop.conf.Configuration r1;
        java.util.Collection r2;
        org.apache.hadoop.fs.FileSystem r4;
        java.util.Iterator r7;
        java.util.Map$Entry r8;
        org.apache.mahout.math.MatrixSlice r9;
        org.apache.mahout.math.decomposer.EigenStatus r10;
        org.apache.hadoop.fs.Path $r14, $r15;
        java.net.URI $r16;
        org.apache.hadoop.io.IntWritable $r17;
        org.apache.hadoop.io.SequenceFile$Writer $r18;
        boolean $z0;
        java.lang.Object $r19, $r20, $r22;
        org.apache.mahout.math.hadoop.decomposer.EigenVector $r21;
        double $d0, $d1, $d2, $d3;
        org.apache.mahout.math.Vector $r23;
        int $i0, $i1, $i2, $i3, $i4, i5, i6;
        org.apache.mahout.math.VectorWritable $r24;
        java.lang.Integer $r25, $r28;
        org.slf4j.Logger $r26;
        java.lang.Throwable $r27;

        r0 := @this: org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob;

        r1 := @parameter0: org.apache.hadoop.conf.Configuration;

        r2 := @parameter1: java.util.Collection;

        $r15 = new org.apache.hadoop.fs.Path;

        $r14 = r0.<org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: org.apache.hadoop.fs.Path outPath>;

        specialinvoke $r15.<org.apache.hadoop.fs.Path: void <init>(org.apache.hadoop.fs.Path,java.lang.String)>($r14, "cleanEigenvectors");

        $r16 = virtualinvoke $r15.<org.apache.hadoop.fs.Path: java.net.URI toUri()>();

        r4 = staticinvoke <org.apache.hadoop.fs.FileSystem: org.apache.hadoop.fs.FileSystem get(java.net.URI,org.apache.hadoop.conf.Configuration)>($r16, r1);

        $r18 = new org.apache.hadoop.io.SequenceFile$Writer;

        specialinvoke $r18.<org.apache.hadoop.io.SequenceFile$Writer: void <init>(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.Path,java.lang.Class,java.lang.Class)>(r4, r1, $r15, class "org/apache/hadoop/io/IntWritable", class "org/apache/mahout/math/VectorWritable");

     label1:
        $r17 = new org.apache.hadoop.io.IntWritable;

        specialinvoke $r17.<org.apache.hadoop.io.IntWritable: void <init>()>();

        i5 = 0;

        i6 = 0;

        r7 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r20 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.util.Map$Entry) $r20;

        $r19 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getKey()>();

        r9 = (org.apache.mahout.math.MatrixSlice) $r19;

        $r22 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getValue()>();

        r10 = (org.apache.mahout.math.decomposer.EigenStatus) $r22;

        $r21 = new org.apache.mahout.math.hadoop.decomposer.EigenVector;

        $r23 = virtualinvoke r9.<org.apache.mahout.math.MatrixSlice: org.apache.mahout.math.Vector vector()>();

        $d0 = virtualinvoke r10.<org.apache.mahout.math.decomposer.EigenStatus: double getEigenValue()>();

        $d1 = virtualinvoke r10.<org.apache.mahout.math.decomposer.EigenStatus: double getCosAngle()>();

        $d2 = 1.0 - $d1;

        $d3 = staticinvoke <java.lang.Math: double abs(double)>($d2);

        $i0 = virtualinvoke r9.<org.apache.mahout.math.MatrixSlice: int index()>();

        specialinvoke $r21.<org.apache.mahout.math.hadoop.decomposer.EigenVector: void <init>(org.apache.mahout.math.Vector,double,double,int)>($r23, $d0, $d3, $i0);

        $r24 = new org.apache.mahout.math.VectorWritable;

        specialinvoke $r24.<org.apache.mahout.math.VectorWritable: void <init>(org.apache.mahout.math.Vector)>($r21);

        $i2 = i6;

        i6 = i6 + 1;

        virtualinvoke $r17.<org.apache.hadoop.io.IntWritable: void set(int)>($i2);

        virtualinvoke $r18.<org.apache.hadoop.io.SequenceFile$Writer: void append(org.apache.hadoop.io.Writable,org.apache.hadoop.io.Writable)>($r17, $r24);

        i5 = i5 + 1;

        $i3 = r0.<org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: int maxEigensToKeep>;

        if i5 != $i3 goto label2;

        $r26 = <org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: org.slf4j.Logger log>;

        $i1 = r0.<org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: int maxEigensToKeep>;

        $r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $i4 = interfaceinvoke r2.<java.util.Collection: int size()>();

        $r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        interfaceinvoke $r26.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("{} of the {} total eigens have been written", $r25, $r28);

     label3:
        staticinvoke <com.google.common.io.Closeables: void close(java.io.Closeable,boolean)>($r18, 0);

        goto label6;

     label4:
        $r27 := @caughtexception;

     label5:
        staticinvoke <com.google.common.io.Closeables: void close(java.io.Closeable,boolean)>($r18, 0);

        throw $r27;

     label6:
        r0.<org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: org.apache.hadoop.fs.Path cleanedEigensPath> = $r15;

        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private java.util.List pruneEigens(java.util.Map)
    {
        org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob r0;
        java.util.Map r1;
        java.util.ArrayList r2, r25;
        java.util.Map$Entry r3, r4, r24, r26, r27;
        java.util.Set $r5;
        boolean $z0;
        org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob$1 $r6;
        java.lang.Object $r7, $r8, $r9, $r10, $r12, $r16, $r18, $r20, $r22;
        byte $b0, $b1, $b2;
        org.apache.mahout.math.MatrixSlice $r11, $r13;
        org.apache.mahout.math.Vector $r14, $r15, $r17;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, d7, d8;
        org.apache.mahout.math.decomposer.EigenStatus $r19, $r21;
        java.util.Iterator r23;
        int i3, i4, i5, i6, i7;

        r0 := @this: org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob;

        r1 := @parameter0: java.util.Map;

        r2 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

        $r5 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r23 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r23.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r20 = interfaceinvoke r23.<java.util.Iterator: java.lang.Object next()>();

        r24 = (java.util.Map$Entry) $r20;

        $r18 = interfaceinvoke r24.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r19 = (org.apache.mahout.math.decomposer.EigenStatus) $r18;

        $d4 = virtualinvoke $r19.<org.apache.mahout.math.decomposer.EigenStatus: double getCosAngle()>();

        $d3 = 1.0 - $d4;

        $d2 = staticinvoke <java.lang.Math: double abs(double)>($d3);

        $d1 = r0.<org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: double maxError>;

        $b1 = $d2 cmpg $d1;

        if $b1 >= 0 goto label1;

        $r22 = interfaceinvoke r24.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r21 = (org.apache.mahout.math.decomposer.EigenStatus) $r22;

        $d6 = virtualinvoke $r21.<org.apache.mahout.math.decomposer.EigenStatus: double getEigenValue()>();

        $d5 = r0.<org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: double minEigenValue>;

        $b2 = $d6 cmpl $d5;

        if $b2 <= 0 goto label1;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r24);

        goto label1;

     label2:
        $r6 = new org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob$1;

        specialinvoke $r6.<org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob$1: void <init>(org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob)>(r0);

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r2, $r6);

        r25 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

        $r7 = interfaceinvoke r2.<java.util.List: java.lang.Object remove(int)>(0);

        r26 = (java.util.Map$Entry) $r7;

        interfaceinvoke r25.<java.util.List: boolean add(java.lang.Object)>(r26);

        i3 = interfaceinvoke r25.<java.util.List: int size()>();

        i4 = interfaceinvoke r2.<java.util.List: int size()>();

     label3:
        if i4 <= 0 goto label9;

        d7 = 1.7976931348623157E308;

        i5 = 0;

        i6 = 0;

     label4:
        if i6 >= i4 goto label8;

        $r9 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i6);

        r3 = (java.util.Map$Entry) $r9;

        d8 = 0.0;

        i7 = 0;

     label5:
        if i7 >= i3 goto label6;

        $r12 = interfaceinvoke r25.<java.util.List: java.lang.Object get(int)>(i7);

        r4 = (java.util.Map$Entry) $r12;

        $r10 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r11 = (org.apache.mahout.math.MatrixSlice) $r10;

        $r15 = virtualinvoke $r11.<org.apache.mahout.math.MatrixSlice: org.apache.mahout.math.Vector vector()>();

        $r16 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r13 = (org.apache.mahout.math.MatrixSlice) $r16;

        $r14 = virtualinvoke $r13.<org.apache.mahout.math.MatrixSlice: org.apache.mahout.math.Vector vector()>();

        $r17 = interfaceinvoke $r15.<org.apache.mahout.math.Vector: org.apache.mahout.math.Vector times(org.apache.mahout.math.Vector)>($r14);

        $d0 = interfaceinvoke $r17.<org.apache.mahout.math.Vector: double norm(double)>(2.0);

        d8 = d8 + $d0;

        i7 = i7 + 1;

        goto label5;

     label6:
        $b0 = d8 cmpg d7;

        if $b0 >= 0 goto label7;

        d7 = d8;

        i5 = i6;

     label7:
        i6 = i6 + 1;

        goto label4;

     label8:
        $r8 = interfaceinvoke r2.<java.util.List: java.lang.Object remove(int)>(i5);

        r27 = (java.util.Map$Entry) $r8;

        interfaceinvoke r25.<java.util.List: boolean add(java.lang.Object)>(r27);

        i3 = i3 + 1;

        i4 = i4 + -1;

        goto label3;

     label9:
        return r25;
    }

    private java.util.Map verifyEigens()
    {
        org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob r0;
        java.util.HashMap r1;
        java.util.Iterator r2;
        org.apache.mahout.math.MatrixSlice r3;
        org.apache.mahout.math.decomposer.EigenStatus r4;
        org.apache.mahout.math.VectorIterable $r5, $r8;
        boolean $z0;
        java.lang.Object $r6;
        org.apache.mahout.math.decomposer.SingularVectorVerifier $r7;
        org.apache.mahout.math.Vector $r9;

        r0 := @this: org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob;

        r1 = staticinvoke <com.google.common.collect.Maps: java.util.HashMap newHashMap()>();

        $r5 = r0.<org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: org.apache.mahout.math.VectorIterable eigensToVerify>;

        r2 = interfaceinvoke $r5.<org.apache.mahout.math.VectorIterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.mahout.math.MatrixSlice) $r6;

        $r7 = r0.<org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: org.apache.mahout.math.decomposer.SingularVectorVerifier eigenVerifier>;

        $r8 = r0.<org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: org.apache.mahout.math.VectorIterable corpus>;

        $r9 = virtualinvoke r3.<org.apache.mahout.math.MatrixSlice: org.apache.mahout.math.Vector vector()>();

        r4 = interfaceinvoke $r7.<org.apache.mahout.math.decomposer.SingularVectorVerifier: org.apache.mahout.math.decomposer.EigenStatus verify(org.apache.mahout.math.VectorIterable,org.apache.mahout.math.Vector)>($r8, $r9);

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r4);

        goto label1;

     label2:
        return r1;
    }

    private void prepareEigens(org.apache.hadoop.conf.Configuration, org.apache.hadoop.fs.Path, boolean)
    {
        org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob r0;
        org.apache.hadoop.conf.Configuration r1;
        org.apache.hadoop.fs.Path r2, $r8;
        boolean z0, $z1;
        java.util.ArrayList r4;
        java.util.Iterator r5;
        org.apache.mahout.math.MatrixSlice r6;
        org.apache.mahout.math.hadoop.DistributedRowMatrix $r7;
        org.apache.mahout.math.SparseRowMatrix $r9;
        int $i0, $i1, $i2;
        java.lang.Object $r10, $r16;
        org.apache.mahout.math.Vector $r11, $r15;
        org.apache.mahout.math.Vector[] $r12, $r13;
        java.lang.Object[] $r14;

        r0 := @this: org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob;

        r1 := @parameter0: org.apache.hadoop.conf.Configuration;

        r2 := @parameter1: org.apache.hadoop.fs.Path;

        z0 := @parameter2: boolean;

        $r7 = new org.apache.mahout.math.hadoop.DistributedRowMatrix;

        $r8 = r0.<org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: org.apache.hadoop.fs.Path tmpOut>;

        specialinvoke $r7.<org.apache.mahout.math.hadoop.DistributedRowMatrix: void <init>(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,int,int)>(r2, $r8, 1, 1);

        virtualinvoke $r7.<org.apache.mahout.math.hadoop.DistributedRowMatrix: void setConf(org.apache.hadoop.conf.Configuration)>(r1);

        if z0 == 0 goto label3;

        r4 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

        r5 = virtualinvoke $r7.<org.apache.mahout.math.hadoop.DistributedRowMatrix: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r16 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.mahout.math.MatrixSlice) $r16;

        $r15 = virtualinvoke r6.<org.apache.mahout.math.MatrixSlice: org.apache.mahout.math.Vector vector()>();

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r15);

        goto label1;

     label2:
        $r9 = new org.apache.mahout.math.SparseRowMatrix;

        $i0 = interfaceinvoke r4.<java.util.List: int size()>();

        $r10 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(0);

        $r11 = (org.apache.mahout.math.Vector) $r10;

        $i1 = interfaceinvoke $r11.<org.apache.mahout.math.Vector: int size()>();

        $i2 = interfaceinvoke r4.<java.util.List: int size()>();

        $r12 = newarray (org.apache.mahout.math.Vector)[$i2];

        $r14 = interfaceinvoke r4.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r12);

        $r13 = (org.apache.mahout.math.Vector[]) $r14;

        specialinvoke $r9.<org.apache.mahout.math.SparseRowMatrix: void <init>(int,int,org.apache.mahout.math.Vector[],boolean,boolean)>($i0, $i1, $r13, 1, 1);

        r0.<org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: org.apache.mahout.math.VectorIterable eigensToVerify> = $r9;

        goto label4;

     label3:
        r0.<org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: org.apache.mahout.math.VectorIterable eigensToVerify> = $r7;

     label4:
        return;
    }

    public org.apache.hadoop.fs.Path getCleanedEigensPath()
    {
        org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob r0;
        org.apache.hadoop.fs.Path $r1;

        r0 := @this: org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob;

        $r1 = r0.<org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: org.apache.hadoop.fs.Path cleanedEigensPath>;

        return $r1;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        java.lang.String[] r0;
        org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob $r1;

        r0 := @parameter0: java.lang.String[];

        $r1 = new org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob;

        specialinvoke $r1.<org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: void <init>()>();

        staticinvoke <org.apache.hadoop.util.ToolRunner: int run(org.apache.hadoop.util.Tool,java.lang.String[])>($r1, r0);

        return;
    }

    public void runJob(org.apache.hadoop.conf.Configuration, org.apache.hadoop.fs.Path, org.apache.hadoop.fs.Path, org.apache.hadoop.fs.Path, boolean, double, int) throws java.io.IOException
    {
        org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob r0;
        org.apache.hadoop.conf.Configuration r1, $r11, $r14;
        org.apache.hadoop.fs.Path r2, r3, r4, $r8, $r9, $r13;
        boolean z0;
        double d0;
        int i0;
        java.util.Map r6;
        java.util.List r7;
        org.apache.mahout.math.VectorIterable $r10;
        org.apache.mahout.math.hadoop.DistributedRowMatrix $r12;
        org.apache.mahout.math.decomposer.SimpleEigenVerifier $r15;

        r0 := @this: org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob;

        r1 := @parameter0: org.apache.hadoop.conf.Configuration;

        r2 := @parameter1: org.apache.hadoop.fs.Path;

        r3 := @parameter2: org.apache.hadoop.fs.Path;

        r4 := @parameter3: org.apache.hadoop.fs.Path;

        z0 := @parameter4: boolean;

        d0 := @parameter5: double;

        i0 := @parameter6: int;

        r0.<org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: org.apache.hadoop.fs.Path outPath> = r4;

        $r8 = new org.apache.hadoop.fs.Path;

        $r9 = r0.<org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: org.apache.hadoop.fs.Path outPath>;

        specialinvoke $r8.<org.apache.hadoop.fs.Path: void <init>(org.apache.hadoop.fs.Path,java.lang.String)>($r9, "tmp");

        r0.<org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: org.apache.hadoop.fs.Path tmpOut> = $r8;

        r0.<org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: int maxEigensToKeep> = i0;

        r0.<org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: double maxError> = d0;

        if r2 == null goto label1;

        $r10 = r0.<org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: org.apache.mahout.math.VectorIterable eigensToVerify>;

        if $r10 != null goto label1;

        $r11 = new org.apache.hadoop.conf.Configuration;

        specialinvoke $r11.<org.apache.hadoop.conf.Configuration: void <init>(org.apache.hadoop.conf.Configuration)>(r1);

        specialinvoke r0.<org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: void prepareEigens(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.Path,boolean)>($r11, r2, z0);

     label1:
        $r12 = new org.apache.mahout.math.hadoop.DistributedRowMatrix;

        $r13 = r0.<org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: org.apache.hadoop.fs.Path tmpOut>;

        specialinvoke $r12.<org.apache.mahout.math.hadoop.DistributedRowMatrix: void <init>(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,int,int)>(r3, $r13, 1, 1);

        $r14 = new org.apache.hadoop.conf.Configuration;

        specialinvoke $r14.<org.apache.hadoop.conf.Configuration: void <init>(org.apache.hadoop.conf.Configuration)>(r1);

        virtualinvoke $r12.<org.apache.mahout.math.hadoop.DistributedRowMatrix: void setConf(org.apache.hadoop.conf.Configuration)>($r14);

        r0.<org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: org.apache.mahout.math.VectorIterable corpus> = $r12;

        $r15 = new org.apache.mahout.math.decomposer.SimpleEigenVerifier;

        specialinvoke $r15.<org.apache.mahout.math.decomposer.SimpleEigenVerifier: void <init>()>();

        r0.<org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: org.apache.mahout.math.decomposer.SingularVectorVerifier eigenVerifier> = $r15;

        r6 = specialinvoke r0.<org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: java.util.Map verifyEigens()>();

        r7 = specialinvoke r0.<org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: java.util.List pruneEigens(java.util.Map)>(r6);

        specialinvoke r0.<org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: void saveCleanEigens(org.apache.hadoop.conf.Configuration,java.util.Collection)>(r1, r7);

        return;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        <org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: java.lang.String CLEAN_EIGENVECTORS> = "cleanEigenvectors";

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "org/apache/mahout/math/hadoop/decomposer/EigenVerificationJob");

        <org.apache.mahout.math.hadoop.decomposer.EigenVerificationJob: org.slf4j.Logger log> = $r0;

        return;
    }
}
