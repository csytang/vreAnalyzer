public class org.apache.mahout.clustering.RunningSumsGaussianAccumulator extends java.lang.Object implements org.apache.mahout.clustering.GaussianAccumulator
{
    private double s0;
    private org.apache.mahout.math.Vector s1;
    private org.apache.mahout.math.Vector s2;
    private org.apache.mahout.math.Vector mean;
    private org.apache.mahout.math.Vector std;

    public void <init>()
    {
        org.apache.mahout.clustering.RunningSumsGaussianAccumulator r0;

        r0 := @this: org.apache.mahout.clustering.RunningSumsGaussianAccumulator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public double getN()
    {
        org.apache.mahout.clustering.RunningSumsGaussianAccumulator r0;
        double $d0;

        r0 := @this: org.apache.mahout.clustering.RunningSumsGaussianAccumulator;

        $d0 = r0.<org.apache.mahout.clustering.RunningSumsGaussianAccumulator: double s0>;

        return $d0;
    }

    public org.apache.mahout.math.Vector getMean()
    {
        org.apache.mahout.clustering.RunningSumsGaussianAccumulator r0;
        org.apache.mahout.math.Vector $r1;

        r0 := @this: org.apache.mahout.clustering.RunningSumsGaussianAccumulator;

        $r1 = r0.<org.apache.mahout.clustering.RunningSumsGaussianAccumulator: org.apache.mahout.math.Vector mean>;

        return $r1;
    }

    public org.apache.mahout.math.Vector getStd()
    {
        org.apache.mahout.clustering.RunningSumsGaussianAccumulator r0;
        org.apache.mahout.math.Vector $r1;

        r0 := @this: org.apache.mahout.clustering.RunningSumsGaussianAccumulator;

        $r1 = r0.<org.apache.mahout.clustering.RunningSumsGaussianAccumulator: org.apache.mahout.math.Vector std>;

        return $r1;
    }

    public double getAverageStd()
    {
        org.apache.mahout.clustering.RunningSumsGaussianAccumulator r0;
        double $d0, $d1, $d2, $d3;
        byte $b0;
        org.apache.mahout.math.Vector $r1, $r2;
        int $i1;

        r0 := @this: org.apache.mahout.clustering.RunningSumsGaussianAccumulator;

        $d0 = r0.<org.apache.mahout.clustering.RunningSumsGaussianAccumulator: double s0>;

        $b0 = $d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        return 0.0;

     label1:
        $r1 = r0.<org.apache.mahout.clustering.RunningSumsGaussianAccumulator: org.apache.mahout.math.Vector std>;

        $d1 = interfaceinvoke $r1.<org.apache.mahout.math.Vector: double zSum()>();

        $r2 = r0.<org.apache.mahout.clustering.RunningSumsGaussianAccumulator: org.apache.mahout.math.Vector std>;

        $i1 = interfaceinvoke $r2.<org.apache.mahout.math.Vector: int size()>();

        $d2 = (double) $i1;

        $d3 = $d1 / $d2;

        return $d3;
    }

    public org.apache.mahout.math.Vector getVariance()
    {
        org.apache.mahout.clustering.RunningSumsGaussianAccumulator r0;
        org.apache.mahout.math.Vector $r1, $r2, $r3;

        r0 := @this: org.apache.mahout.clustering.RunningSumsGaussianAccumulator;

        $r2 = r0.<org.apache.mahout.clustering.RunningSumsGaussianAccumulator: org.apache.mahout.math.Vector std>;

        $r1 = r0.<org.apache.mahout.clustering.RunningSumsGaussianAccumulator: org.apache.mahout.math.Vector std>;

        $r3 = interfaceinvoke $r2.<org.apache.mahout.math.Vector: org.apache.mahout.math.Vector times(org.apache.mahout.math.Vector)>($r1);

        return $r3;
    }

    public void observe(org.apache.mahout.math.Vector, double)
    {
        org.apache.mahout.clustering.RunningSumsGaussianAccumulator r0;
        org.apache.mahout.math.Vector r1, r2, r3, $r4, $r6, $r8, $r9, $r10;
        double d0, $d1, $d2;
        org.apache.mahout.math.function.DoubleDoubleFunction $r5, $r11;

        r0 := @this: org.apache.mahout.clustering.RunningSumsGaussianAccumulator;

        r1 := @parameter0: org.apache.mahout.math.Vector;

        d0 := @parameter1: double;

        $d1 = r0.<org.apache.mahout.clustering.RunningSumsGaussianAccumulator: double s0>;

        $d2 = $d1 + d0;

        r0.<org.apache.mahout.clustering.RunningSumsGaussianAccumulator: double s0> = $d2;

        r2 = interfaceinvoke r1.<org.apache.mahout.math.Vector: org.apache.mahout.math.Vector times(double)>(d0);

        $r4 = r0.<org.apache.mahout.clustering.RunningSumsGaussianAccumulator: org.apache.mahout.math.Vector s1>;

        if $r4 != null goto label1;

        r0.<org.apache.mahout.clustering.RunningSumsGaussianAccumulator: org.apache.mahout.math.Vector s1> = r2;

        goto label2;

     label1:
        $r6 = r0.<org.apache.mahout.clustering.RunningSumsGaussianAccumulator: org.apache.mahout.math.Vector s1>;

        $r5 = <org.apache.mahout.math.function.Functions: org.apache.mahout.math.function.DoubleDoubleFunction PLUS>;

        interfaceinvoke $r6.<org.apache.mahout.math.Vector: org.apache.mahout.math.Vector assign(org.apache.mahout.math.Vector,org.apache.mahout.math.function.DoubleDoubleFunction)>(r2, $r5);

     label2:
        $r8 = interfaceinvoke r1.<org.apache.mahout.math.Vector: org.apache.mahout.math.Vector times(org.apache.mahout.math.Vector)>(r1);

        r3 = interfaceinvoke $r8.<org.apache.mahout.math.Vector: org.apache.mahout.math.Vector times(double)>(d0);

        $r9 = r0.<org.apache.mahout.clustering.RunningSumsGaussianAccumulator: org.apache.mahout.math.Vector s2>;

        if $r9 != null goto label3;

        r0.<org.apache.mahout.clustering.RunningSumsGaussianAccumulator: org.apache.mahout.math.Vector s2> = r3;

        goto label4;

     label3:
        $r10 = r0.<org.apache.mahout.clustering.RunningSumsGaussianAccumulator: org.apache.mahout.math.Vector s2>;

        $r11 = <org.apache.mahout.math.function.Functions: org.apache.mahout.math.function.DoubleDoubleFunction PLUS>;

        interfaceinvoke $r10.<org.apache.mahout.math.Vector: org.apache.mahout.math.Vector assign(org.apache.mahout.math.Vector,org.apache.mahout.math.function.DoubleDoubleFunction)>(r3, $r11);

     label4:
        return;
    }

    public void compute()
    {
        org.apache.mahout.clustering.RunningSumsGaussianAccumulator r0;
        double $d0, $d1, $d2, $d3;
        byte $b0;
        org.apache.mahout.math.Vector $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r10, $r11;
        org.apache.mahout.math.function.SquareRootFunction $r9;

        r0 := @this: org.apache.mahout.clustering.RunningSumsGaussianAccumulator;

        $d0 = r0.<org.apache.mahout.clustering.RunningSumsGaussianAccumulator: double s0>;

        $b0 = $d0 cmpl 0.0;

        if $b0 == 0 goto label1;

        $r1 = r0.<org.apache.mahout.clustering.RunningSumsGaussianAccumulator: org.apache.mahout.math.Vector s1>;

        $d1 = r0.<org.apache.mahout.clustering.RunningSumsGaussianAccumulator: double s0>;

        $r2 = interfaceinvoke $r1.<org.apache.mahout.math.Vector: org.apache.mahout.math.Vector divide(double)>($d1);

        r0.<org.apache.mahout.clustering.RunningSumsGaussianAccumulator: org.apache.mahout.math.Vector mean> = $r2;

        $r3 = r0.<org.apache.mahout.clustering.RunningSumsGaussianAccumulator: org.apache.mahout.math.Vector s2>;

        $d2 = r0.<org.apache.mahout.clustering.RunningSumsGaussianAccumulator: double s0>;

        $r4 = interfaceinvoke $r3.<org.apache.mahout.math.Vector: org.apache.mahout.math.Vector times(double)>($d2);

        $r6 = r0.<org.apache.mahout.clustering.RunningSumsGaussianAccumulator: org.apache.mahout.math.Vector s1>;

        $r5 = r0.<org.apache.mahout.clustering.RunningSumsGaussianAccumulator: org.apache.mahout.math.Vector s1>;

        $r7 = interfaceinvoke $r6.<org.apache.mahout.math.Vector: org.apache.mahout.math.Vector times(org.apache.mahout.math.Vector)>($r5);

        $r8 = interfaceinvoke $r4.<org.apache.mahout.math.Vector: org.apache.mahout.math.Vector minus(org.apache.mahout.math.Vector)>($r7);

        $r9 = new org.apache.mahout.math.function.SquareRootFunction;

        specialinvoke $r9.<org.apache.mahout.math.function.SquareRootFunction: void <init>()>();

        $r10 = interfaceinvoke $r8.<org.apache.mahout.math.Vector: org.apache.mahout.math.Vector assign(org.apache.mahout.math.function.DoubleFunction)>($r9);

        $d3 = r0.<org.apache.mahout.clustering.RunningSumsGaussianAccumulator: double s0>;

        $r11 = interfaceinvoke $r10.<org.apache.mahout.math.Vector: org.apache.mahout.math.Vector divide(double)>($d3);

        r0.<org.apache.mahout.clustering.RunningSumsGaussianAccumulator: org.apache.mahout.math.Vector std> = $r11;

     label1:
        return;
    }
}
