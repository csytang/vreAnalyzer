public final class org.apache.mahout.common.StringUtils extends java.lang.Object
{
    private static final com.thoughtworks.xstream.XStream XSTREAM;
    private static final java.util.regex.Pattern NEWLINE_PATTERN;
    private static final java.util.regex.Pattern XMLRESERVED;

    private void <init>()
    {
        org.apache.mahout.common.StringUtils r0;

        r0 := @this: org.apache.mahout.common.StringUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String toString(java.lang.Object)
    {
        java.lang.Object r0;
        com.thoughtworks.xstream.XStream $r1;
        java.util.regex.Pattern $r2;
        java.lang.String $r3, $r5;
        java.util.regex.Matcher $r4;

        r0 := @parameter0: java.lang.Object;

        $r2 = <org.apache.mahout.common.StringUtils: java.util.regex.Pattern NEWLINE_PATTERN>;

        $r1 = <org.apache.mahout.common.StringUtils: com.thoughtworks.xstream.XStream XSTREAM>;

        $r3 = virtualinvoke $r1.<com.thoughtworks.xstream.XStream: java.lang.String toXML(java.lang.Object)>(r0);

        $r4 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r3);

        $r5 = virtualinvoke $r4.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>("");

        return $r5;
    }

    public static java.lang.Object fromString(java.lang.String)
    {
        java.lang.String r0;
        com.thoughtworks.xstream.XStream $r1;
        java.lang.Object $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.mahout.common.StringUtils: com.thoughtworks.xstream.XStream XSTREAM>;

        $r2 = virtualinvoke $r1.<com.thoughtworks.xstream.XStream: java.lang.Object fromXML(java.lang.String)>(r0);

        return $r2;
    }

    public static java.lang.String escapeXML(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        java.util.regex.Pattern $r1;
        java.util.regex.Matcher $r2;
        java.lang.String $r3;

        r0 := @parameter0: java.lang.CharSequence;

        $r1 = <org.apache.mahout.common.StringUtils: java.util.regex.Pattern XMLRESERVED>;

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $r3 = virtualinvoke $r2.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>("_");

        return $r3;
    }

    static void <clinit>()
    {
        com.thoughtworks.xstream.XStream $r0;
        java.util.regex.Pattern $r1, $r2;

        $r0 = new com.thoughtworks.xstream.XStream;

        specialinvoke $r0.<com.thoughtworks.xstream.XStream: void <init>()>();

        <org.apache.mahout.common.StringUtils: com.thoughtworks.xstream.XStream XSTREAM> = $r0;

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\n");

        <org.apache.mahout.common.StringUtils: java.util.regex.Pattern NEWLINE_PATTERN> = $r1;

        $r2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\"|\\&|\\<|\\>|\'");

        <org.apache.mahout.common.StringUtils: java.util.regex.Pattern XMLRESERVED> = $r2;

        return;
    }
}
