public final class org.apache.mahout.classifier.sequencelearning.hmm.HmmUtils extends java.lang.Object
{

    private void <init>()
    {
        org.apache.mahout.classifier.sequencelearning.hmm.HmmUtils r0;

        r0 := @this: org.apache.mahout.classifier.sequencelearning.hmm.HmmUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.apache.mahout.math.Matrix getCumulativeTransitionMatrix(org.apache.mahout.classifier.sequencelearning.hmm.HmmModel)
    {
        org.apache.mahout.classifier.sequencelearning.hmm.HmmModel r0;
        int i0, $i1, i2, i3;
        org.apache.mahout.math.Matrix r1;
        org.apache.mahout.math.DenseMatrix $r3;
        double $d0, d1;

        r0 := @parameter0: org.apache.mahout.classifier.sequencelearning.hmm.HmmModel;

        i0 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        r1 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: org.apache.mahout.math.Matrix getTransitionMatrix()>();

        $r3 = new org.apache.mahout.math.DenseMatrix;

        specialinvoke $r3.<org.apache.mahout.math.DenseMatrix: void <init>(int,int)>(i0, i0);

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        d1 = 0.0;

        i3 = 0;

     label2:
        if i3 >= i0 goto label3;

        $d0 = interfaceinvoke r1.<org.apache.mahout.math.Matrix: double get(int,int)>(i2, i3);

        d1 = d1 + $d0;

        interfaceinvoke $r3.<org.apache.mahout.math.Matrix: void set(int,int,double)>(i2, i3, d1);

        i3 = i3 + 1;

        goto label2;

     label3:
        $i1 = i0 - 1;

        interfaceinvoke $r3.<org.apache.mahout.math.Matrix: void set(int,int,double)>(i2, $i1, 1.0);

        i2 = i2 + 1;

        goto label1;

     label4:
        return $r3;
    }

    public static org.apache.mahout.math.Matrix getCumulativeOutputMatrix(org.apache.mahout.classifier.sequencelearning.hmm.HmmModel)
    {
        org.apache.mahout.classifier.sequencelearning.hmm.HmmModel r0;
        int i0, i1, $i2, i3, i4;
        org.apache.mahout.math.Matrix r1;
        org.apache.mahout.math.DenseMatrix $r3;
        double $d0, d1;

        r0 := @parameter0: org.apache.mahout.classifier.sequencelearning.hmm.HmmModel;

        i0 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        i1 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfOutputStates()>();

        r1 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: org.apache.mahout.math.Matrix getEmissionMatrix()>();

        $r3 = new org.apache.mahout.math.DenseMatrix;

        specialinvoke $r3.<org.apache.mahout.math.DenseMatrix: void <init>(int,int)>(i0, i1);

        i3 = 0;

     label1:
        if i3 >= i0 goto label4;

        d1 = 0.0;

        i4 = 0;

     label2:
        if i4 >= i1 goto label3;

        $d0 = interfaceinvoke r1.<org.apache.mahout.math.Matrix: double get(int,int)>(i3, i4);

        d1 = d1 + $d0;

        interfaceinvoke $r3.<org.apache.mahout.math.Matrix: void set(int,int,double)>(i3, i4, d1);

        i4 = i4 + 1;

        goto label2;

     label3:
        $i2 = i1 - 1;

        interfaceinvoke $r3.<org.apache.mahout.math.Matrix: void set(int,int,double)>(i3, $i2, 1.0);

        i3 = i3 + 1;

        goto label1;

     label4:
        return $r3;
    }

    public static org.apache.mahout.math.Vector getCumulativeInitialProbabilities(org.apache.mahout.classifier.sequencelearning.hmm.HmmModel)
    {
        org.apache.mahout.classifier.sequencelearning.hmm.HmmModel r0;
        int i0, $i1, $i2, i3;
        org.apache.mahout.math.Vector r1;
        org.apache.mahout.math.DenseVector $r3;
        double $d0, d1;

        r0 := @parameter0: org.apache.mahout.classifier.sequencelearning.hmm.HmmModel;

        i0 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        r1 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: org.apache.mahout.math.Vector getInitialProbabilities()>();

        $r3 = new org.apache.mahout.math.DenseVector;

        $i1 = interfaceinvoke r1.<org.apache.mahout.math.Vector: int size()>();

        specialinvoke $r3.<org.apache.mahout.math.DenseVector: void <init>(int)>($i1);

        d1 = 0.0;

        i3 = 0;

     label1:
        if i3 >= i0 goto label2;

        $d0 = interfaceinvoke r1.<org.apache.mahout.math.Vector: double get(int)>(i3);

        d1 = d1 + $d0;

        interfaceinvoke $r3.<org.apache.mahout.math.Vector: void set(int,double)>(i3, d1);

        i3 = i3 + 1;

        goto label1;

     label2:
        $i2 = i0 - 1;

        interfaceinvoke $r3.<org.apache.mahout.math.Vector: void set(int,double)>($i2, 1.0);

        return $r3;
    }

    public static void validate(org.apache.mahout.classifier.sequencelearning.hmm.HmmModel)
    {
        org.apache.mahout.classifier.sequencelearning.hmm.HmmModel r0;
        int $i0, $i1, $i3, $i4, $i5, $i6, $i7, $i10, $i11, $i12, $i15, $i16, $i18, $i19, i20, $i21, i22, $i23, i24, i25, $i26, i27;
        org.apache.mahout.math.Vector $r1, $r32, $r34, $r36, $r37;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, d12, d13, d14;
        byte $b2, $b8, $b9, $b13, $b14, $b17;
        org.apache.mahout.math.Matrix $r2, $r4, $r5, $r6, $r7, $r13, $r16, $r18, $r19, $r23, $r24, $r31, $r38, $r39;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r22, $r25, $r27, $r28, $r29, $r30;
        java.lang.String $r12, $r26;
        java.lang.Object[] $r14, $r21, $r35;
        java.lang.Integer $r15, $r17, $r20, $r33;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;

        r0 := @parameter0: org.apache.mahout.classifier.sequencelearning.hmm.HmmModel;

        if r0 != null goto label01;

        return;

     label01:
        $i0 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        if $i0 <= 0 goto label02;

        $z0 = 1;

        goto label03;

     label02:
        $z0 = 0;

     label03:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Error: The number of hidden states has to be greater than 0");

        $i1 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfOutputStates()>();

        if $i1 <= 0 goto label04;

        $z1 = 1;

        goto label05;

     label04:
        $z1 = 0;

     label05:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "Error: The number of output states has to be greater than 0!");

        $r1 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: org.apache.mahout.math.Vector getInitialProbabilities()>();

        if $r1 == null goto label06;

        $r36 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: org.apache.mahout.math.Vector getInitialProbabilities()>();

        $i18 = interfaceinvoke $r36.<org.apache.mahout.math.Vector: int size()>();

        $i19 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        if $i18 != $i19 goto label06;

        $z2 = 1;

        goto label07;

     label06:
        $z2 = 0;

     label07:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z2, "Error: The vector of initial probabilities is not initialized!");

        d12 = 0.0;

        i20 = 0;

     label08:
        $r37 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: org.apache.mahout.math.Vector getInitialProbabilities()>();

        $i21 = interfaceinvoke $r37.<org.apache.mahout.math.Vector: int size()>();

        if i20 >= $i21 goto label11;

        $r34 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: org.apache.mahout.math.Vector getInitialProbabilities()>();

        $d11 = interfaceinvoke $r34.<org.apache.mahout.math.Vector: double get(int)>(i20);

        $b17 = $d11 cmpl 0.0;

        if $b17 < 0 goto label09;

        $z3 = 1;

        goto label10;

     label09:
        $z3 = 0;

     label10:
        $r35 = newarray (java.lang.Object)[1];

        $r33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i20);

        $r35[0] = $r33;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z3, "Error: Initial probability of state %d is negative", $r35);

        $r32 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: org.apache.mahout.math.Vector getInitialProbabilities()>();

        $d10 = interfaceinvoke $r32.<org.apache.mahout.math.Vector: double get(int)>(i20);

        d12 = d12 + $d10;

        i20 = i20 + 1;

        goto label08;

     label11:
        $d0 = d12 - 1.0;

        $d1 = staticinvoke <java.lang.Math: double abs(double)>($d0);

        $b2 = $d1 cmpg 1.0E-5;

        if $b2 > 0 goto label12;

        $z4 = 1;

        goto label13;

     label12:
        $z4 = 0;

     label13:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z4, "Error: Initial probabilities do not add up to 1");

        $r2 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: org.apache.mahout.math.Matrix getEmissionMatrix()>();

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r2, "Error: The output state matrix is not initialized!");

        $r4 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: org.apache.mahout.math.Matrix getEmissionMatrix()>();

        $i4 = interfaceinvoke $r4.<org.apache.mahout.math.Matrix: int numRows()>();

        $i3 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        if $i4 != $i3 goto label14;

        $r31 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: org.apache.mahout.math.Matrix getEmissionMatrix()>();

        $i16 = interfaceinvoke $r31.<org.apache.mahout.math.Matrix: int numCols()>();

        $i15 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfOutputStates()>();

        if $i16 != $i15 goto label14;

        $z5 = 1;

        goto label15;

     label14:
        $z5 = 0;

     label15:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z5, "Error: The output state matrix is not of the form nrOfHiddenStates x nrOfOutputStates");

        i22 = 0;

     label16:
        $r38 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: org.apache.mahout.math.Matrix getEmissionMatrix()>();

        $i23 = interfaceinvoke $r38.<org.apache.mahout.math.Matrix: int numRows()>();

        if i22 >= $i23 goto label23;

        d13 = 0.0;

        i24 = 0;

     label17:
        $r19 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: org.apache.mahout.math.Matrix getEmissionMatrix()>();

        $i12 = interfaceinvoke $r19.<org.apache.mahout.math.Matrix: int numCols()>();

        if i24 >= $i12 goto label20;

        $r23 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: org.apache.mahout.math.Matrix getEmissionMatrix()>();

        $d8 = interfaceinvoke $r23.<org.apache.mahout.math.Matrix: double get(int,int)>(i22, i24);

        $b14 = $d8 cmpl 0.0;

        if $b14 < 0 goto label18;

        $z6 = 1;

        goto label19;

     label18:
        $z6 = 0;

     label19:
        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The output state probability from hidden state ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i22);

        $r27 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to output state ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i24);

        $r25 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is negative");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z6, $r26);

        $r24 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: org.apache.mahout.math.Matrix getEmissionMatrix()>();

        $d9 = interfaceinvoke $r24.<org.apache.mahout.math.Matrix: double get(int,int)>(i22, i24);

        d13 = d13 + $d9;

        i24 = i24 + 1;

        goto label17;

     label20:
        $d6 = d13 - 1.0;

        $d7 = staticinvoke <java.lang.Math: double abs(double)>($d6);

        $b13 = $d7 cmpg 1.0E-5;

        if $b13 > 0 goto label21;

        $z7 = 1;

        goto label22;

     label21:
        $z7 = 0;

     label22:
        $r21 = newarray (java.lang.Object)[1];

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i22);

        $r21[0] = $r20;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z7, "Error: The output state probabilities for hidden state %d don\'t add up to 1", $r21);

        i22 = i22 + 1;

        goto label16;

     label23:
        $r6 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: org.apache.mahout.math.Matrix getTransitionMatrix()>();

        if $r6 == null goto label24;

        $z8 = 1;

        goto label25;

     label24:
        $z8 = 0;

     label25:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z8, "Error: The hidden state matrix is not initialized!");

        $r5 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: org.apache.mahout.math.Matrix getTransitionMatrix()>();

        $i6 = interfaceinvoke $r5.<org.apache.mahout.math.Matrix: int numRows()>();

        $i5 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        if $i6 != $i5 goto label26;

        $r18 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: org.apache.mahout.math.Matrix getTransitionMatrix()>();

        $i11 = interfaceinvoke $r18.<org.apache.mahout.math.Matrix: int numCols()>();

        $i10 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        if $i11 != $i10 goto label26;

        $z9 = 1;

        goto label27;

     label26:
        $z9 = 0;

     label27:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z9, "Error: The output state matrix is not of the form nrOfHiddenStates x nrOfHiddenStates");

        i25 = 0;

     label28:
        $r39 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: org.apache.mahout.math.Matrix getTransitionMatrix()>();

        $i26 = interfaceinvoke $r39.<org.apache.mahout.math.Matrix: int numRows()>();

        if i25 >= $i26 goto label35;

        d14 = 0.0;

        i27 = 0;

     label29:
        $r7 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: org.apache.mahout.math.Matrix getTransitionMatrix()>();

        $i7 = interfaceinvoke $r7.<org.apache.mahout.math.Matrix: int numCols()>();

        if i27 >= $i7 goto label32;

        $r13 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: org.apache.mahout.math.Matrix getTransitionMatrix()>();

        $d4 = interfaceinvoke $r13.<org.apache.mahout.math.Matrix: double get(int,int)>(i25, i27);

        $b9 = $d4 cmpl 0.0;

        if $b9 < 0 goto label30;

        $z10 = 1;

        goto label31;

     label30:
        $z10 = 0;

     label31:
        $r14 = newarray (java.lang.Object)[2];

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i25);

        $r14[0] = $r15;

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i27);

        $r14[1] = $r17;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z10, "Error: The transition probability from hidden state %d to hidden state %d is negative", $r14);

        $r16 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: org.apache.mahout.math.Matrix getTransitionMatrix()>();

        $d5 = interfaceinvoke $r16.<org.apache.mahout.math.Matrix: double get(int,int)>(i25, i27);

        d14 = d14 + $d5;

        i27 = i27 + 1;

        goto label29;

     label32:
        $d3 = d14 - 1.0;

        $d2 = staticinvoke <java.lang.Math: double abs(double)>($d3);

        $b8 = $d2 cmpg 1.0E-5;

        if $b8 > 0 goto label33;

        $z11 = 1;

        goto label34;

     label33:
        $z11 = 0;

     label34:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: The transition probabilities for hidden state ");

        $r9 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i25);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" don\'t add up to 1.");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z11, $r12);

        i25 = i25 + 1;

        goto label28;

     label35:
        return;
    }

    public static int[] encodeStateSequence(org.apache.mahout.classifier.sequencelearning.hmm.HmmModel, java.util.Collection, boolean, int)
    {
        org.apache.mahout.classifier.sequencelearning.hmm.HmmModel r0;
        java.util.Collection r1;
        boolean z0;
        int i0, $i1, $i2, $i3, i4, i5, $i6;
        int[] r2;
        java.util.Iterator r3;
        java.lang.String r4;
        java.lang.Object $r5;

        r0 := @parameter0: org.apache.mahout.classifier.sequencelearning.hmm.HmmModel;

        r1 := @parameter1: java.util.Collection;

        z0 := @parameter2: boolean;

        i0 := @parameter3: int;

        $i1 = interfaceinvoke r1.<java.util.Collection: int size()>();

        r2 = newarray (int)[$i1];

        r3 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

        i4 = 0;

     label1:
        $i2 = interfaceinvoke r1.<java.util.Collection: int size()>();

        if i4 >= $i2 goto label6;

        $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r5;

        if z0 == 0 goto label2;

        i5 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getOutputStateID(java.lang.String)>(r4);

        goto label3;

     label2:
        i5 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getHiddenStateID(java.lang.String)>(r4);

     label3:
        $i3 = i4;

        if i5 >= 0 goto label4;

        $i6 = i0;

        goto label5;

     label4:
        $i6 = i5;

     label5:
        r2[$i3] = $i6;

        i4 = i4 + 1;

        goto label1;

     label6:
        return r2;
    }

    public static java.util.List decodeStateSequence(org.apache.mahout.classifier.sequencelearning.hmm.HmmModel, int[], boolean, java.lang.String)
    {
        org.apache.mahout.classifier.sequencelearning.hmm.HmmModel r0;
        int[] r1;
        boolean z0;
        java.lang.String r2, r7, $r8;
        int i0, i1, $i2, i3;
        java.util.ArrayList $r5;

        r0 := @parameter0: org.apache.mahout.classifier.sequencelearning.hmm.HmmModel;

        r1 := @parameter1: int[];

        z0 := @parameter2: boolean;

        r2 := @parameter3: java.lang.String;

        $r5 = new java.util.ArrayList;

        $i2 = lengthof r1;

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>($i2);

        i0 = lengthof r1;

        i3 = 0;

     label1:
        if i3 >= i0 goto label6;

        i1 = r1[i3];

        if z0 == 0 goto label2;

        r7 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: java.lang.String getOutputStateName(int)>(i1);

        goto label3;

     label2:
        r7 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: java.lang.String getHiddenStateName(int)>(i1);

     label3:
        if r7 != null goto label4;

        $r8 = r2;

        goto label5;

     label4:
        $r8 = r7;

     label5:
        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r8);

        i3 = i3 + 1;

        goto label1;

     label6:
        return $r5;
    }

    public static void normalizeModel(org.apache.mahout.classifier.sequencelearning.hmm.HmmModel)
    {
        org.apache.mahout.classifier.sequencelearning.hmm.HmmModel r0;
        org.apache.mahout.math.Vector r1;
        org.apache.mahout.math.Matrix r2, r3;
        int $i0, $i2, $i3, $i6, $i7, i8, i9, i10, i11, $i12, i13, i14;
        byte $b1, $b4, $b5;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, d9, d10, d11;

        r0 := @parameter0: org.apache.mahout.classifier.sequencelearning.hmm.HmmModel;

        r1 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: org.apache.mahout.math.Vector getInitialProbabilities()>();

        r2 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: org.apache.mahout.math.Matrix getEmissionMatrix()>();

        r3 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: org.apache.mahout.math.Matrix getTransitionMatrix()>();

        d9 = 0.0;

        i8 = 0;

     label01:
        $i0 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        if i8 >= $i0 goto label10;

        $d2 = interfaceinvoke r1.<org.apache.mahout.math.Vector: double getQuick(int)>(i8);

        d9 = d9 + $d2;

        d10 = 0.0;

        i9 = 0;

     label02:
        $i3 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        if i9 >= $i3 goto label03;

        $d8 = interfaceinvoke r3.<org.apache.mahout.math.Matrix: double getQuick(int,int)>(i8, i9);

        d10 = d10 + $d8;

        i9 = i9 + 1;

        goto label02;

     label03:
        $b4 = d10 cmpl 1.0;

        if $b4 == 0 goto label05;

        i10 = 0;

     label04:
        $i7 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        if i10 >= $i7 goto label05;

        $d6 = interfaceinvoke r3.<org.apache.mahout.math.Matrix: double getQuick(int,int)>(i8, i10);

        $d7 = $d6 / d10;

        interfaceinvoke r3.<org.apache.mahout.math.Matrix: void setQuick(int,int,double)>(i8, i10, $d7);

        i10 = i10 + 1;

        goto label04;

     label05:
        d11 = 0.0;

        i11 = 0;

     label06:
        $i12 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfOutputStates()>();

        if i11 >= $i12 goto label07;

        $d5 = interfaceinvoke r2.<org.apache.mahout.math.Matrix: double getQuick(int,int)>(i8, i11);

        d11 = d11 + $d5;

        i11 = i11 + 1;

        goto label06;

     label07:
        $b5 = d11 cmpl 1.0;

        if $b5 == 0 goto label09;

        i13 = 0;

     label08:
        $i6 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfOutputStates()>();

        if i13 >= $i6 goto label09;

        $d4 = interfaceinvoke r2.<org.apache.mahout.math.Matrix: double getQuick(int,int)>(i8, i13);

        $d3 = $d4 / d11;

        interfaceinvoke r2.<org.apache.mahout.math.Matrix: void setQuick(int,int,double)>(i8, i13, $d3);

        i13 = i13 + 1;

        goto label08;

     label09:
        i8 = i8 + 1;

        goto label01;

     label10:
        $b1 = d9 cmpl 1.0;

        if $b1 == 0 goto label12;

        i14 = 0;

     label11:
        $i2 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        if i14 >= $i2 goto label12;

        $d1 = interfaceinvoke r1.<org.apache.mahout.math.Vector: double getQuick(int)>(i14);

        $d0 = $d1 / d9;

        interfaceinvoke r1.<org.apache.mahout.math.Vector: void setQuick(int,double)>(i14, $d0);

        i14 = i14 + 1;

        goto label11;

     label12:
        return;
    }

    public static org.apache.mahout.classifier.sequencelearning.hmm.HmmModel truncateModel(org.apache.mahout.classifier.sequencelearning.hmm.HmmModel, double)
    {
        org.apache.mahout.classifier.sequencelearning.hmm.HmmModel r0, $r10;
        double d0, d1, d2, d3;
        org.apache.mahout.math.Vector r1;
        org.apache.mahout.math.Matrix r2, r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, i10, i11, $i12, i13;
        org.apache.mahout.math.RandomAccessSparseVector $r7;
        org.apache.mahout.math.SparseMatrix $r8, $r9;
        java.util.Map $r11, $r12;
        byte $b6, $b8, $b9;

        r0 := @parameter0: org.apache.mahout.classifier.sequencelearning.hmm.HmmModel;

        d0 := @parameter1: double;

        r1 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: org.apache.mahout.math.Vector getInitialProbabilities()>();

        r2 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: org.apache.mahout.math.Matrix getEmissionMatrix()>();

        r3 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: org.apache.mahout.math.Matrix getTransitionMatrix()>();

        $r7 = new org.apache.mahout.math.RandomAccessSparseVector;

        $i0 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        specialinvoke $r7.<org.apache.mahout.math.RandomAccessSparseVector: void <init>(int)>($i0);

        $r8 = new org.apache.mahout.math.SparseMatrix;

        $i1 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        $i2 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfOutputStates()>();

        specialinvoke $r8.<org.apache.mahout.math.SparseMatrix: void <init>(int,int)>($i1, $i2);

        $r9 = new org.apache.mahout.math.SparseMatrix;

        $i4 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        $i3 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        specialinvoke $r9.<org.apache.mahout.math.SparseMatrix: void <init>(int,int)>($i4, $i3);

        i10 = 0;

     label1:
        $i5 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        if i10 >= $i5 goto label9;

        d1 = interfaceinvoke r1.<org.apache.mahout.math.Vector: double getQuick(int)>(i10);

        $b6 = d1 cmpl d0;

        if $b6 <= 0 goto label2;

        virtualinvoke $r7.<org.apache.mahout.math.RandomAccessSparseVector: void setQuick(int,double)>(i10, d1);

     label2:
        i11 = 0;

     label3:
        $i12 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        if i11 >= $i12 goto label5;

        d2 = interfaceinvoke r3.<org.apache.mahout.math.Matrix: double getQuick(int,int)>(i10, i11);

        $b9 = d2 cmpl d0;

        if $b9 <= 0 goto label4;

        virtualinvoke $r9.<org.apache.mahout.math.SparseMatrix: void setQuick(int,int,double)>(i10, i11, d2);

     label4:
        i11 = i11 + 1;

        goto label3;

     label5:
        i13 = 0;

     label6:
        $i7 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfOutputStates()>();

        if i13 >= $i7 goto label8;

        d3 = interfaceinvoke r2.<org.apache.mahout.math.Matrix: double getQuick(int,int)>(i10, i13);

        $b8 = d3 cmpl d0;

        if $b8 <= 0 goto label7;

        virtualinvoke $r8.<org.apache.mahout.math.SparseMatrix: void setQuick(int,int,double)>(i10, i13, d3);

     label7:
        i13 = i13 + 1;

        goto label6;

     label8:
        i10 = i10 + 1;

        goto label1;

     label9:
        $r10 = new org.apache.mahout.classifier.sequencelearning.hmm.HmmModel;

        specialinvoke $r10.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: void <init>(org.apache.mahout.math.Matrix,org.apache.mahout.math.Matrix,org.apache.mahout.math.Vector)>($r9, $r8, $r7);

        staticinvoke <org.apache.mahout.classifier.sequencelearning.hmm.HmmUtils: void normalizeModel(org.apache.mahout.classifier.sequencelearning.hmm.HmmModel)>($r10);

        $r12 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: java.util.Map getHiddenStateNames()>();

        virtualinvoke $r10.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: void registerHiddenStateNames(java.util.Map)>($r12);

        $r11 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: java.util.Map getOutputStateNames()>();

        virtualinvoke $r10.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: void registerOutputStateNames(java.util.Map)>($r11);

        return $r10;
    }
}
