public abstract class org.apache.mahout.classifier.AbstractVectorClassifier extends java.lang.Object
{
    public static final double MIN_LOG_LIKELIHOOD;

    public void <init>()
    {
        org.apache.mahout.classifier.AbstractVectorClassifier r0;

        r0 := @this: org.apache.mahout.classifier.AbstractVectorClassifier;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public abstract int numCategories();

    public abstract org.apache.mahout.math.Vector classify(org.apache.mahout.math.Vector);

    public org.apache.mahout.math.Vector classifyNoLink(org.apache.mahout.math.Vector)
    {
        org.apache.mahout.classifier.AbstractVectorClassifier r0;
        org.apache.mahout.math.Vector r1;
        java.lang.UnsupportedOperationException $r2;
        java.lang.StringBuilder $r3, $r6, $r7;
        java.lang.Class $r4;
        java.lang.String $r5, $r8;

        r0 := @this: org.apache.mahout.classifier.AbstractVectorClassifier;

        r1 := @parameter0: org.apache.mahout.math.Vector;

        $r2 = new java.lang.UnsupportedOperationException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" doesn\'t support classification without a link");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r8);

        throw $r2;
    }

    public abstract double classifyScalar(org.apache.mahout.math.Vector);

    public org.apache.mahout.math.Vector classifyFull(org.apache.mahout.math.Vector)
    {
        org.apache.mahout.classifier.AbstractVectorClassifier r0;
        org.apache.mahout.math.Vector r1, $r3;
        org.apache.mahout.math.DenseVector $r2;
        int $i0;

        r0 := @this: org.apache.mahout.classifier.AbstractVectorClassifier;

        r1 := @parameter0: org.apache.mahout.math.Vector;

        $r2 = new org.apache.mahout.math.DenseVector;

        $i0 = virtualinvoke r0.<org.apache.mahout.classifier.AbstractVectorClassifier: int numCategories()>();

        specialinvoke $r2.<org.apache.mahout.math.DenseVector: void <init>(int)>($i0);

        $r3 = virtualinvoke r0.<org.apache.mahout.classifier.AbstractVectorClassifier: org.apache.mahout.math.Vector classifyFull(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector)>($r2, r1);

        return $r3;
    }

    public org.apache.mahout.math.Vector classifyFull(org.apache.mahout.math.Vector, org.apache.mahout.math.Vector)
    {
        org.apache.mahout.classifier.AbstractVectorClassifier r0;
        org.apache.mahout.math.Vector r1, r2, $r3, $r4;
        int $i0, $i1;
        double $d0, $d1;

        r0 := @this: org.apache.mahout.classifier.AbstractVectorClassifier;

        r1 := @parameter0: org.apache.mahout.math.Vector;

        r2 := @parameter1: org.apache.mahout.math.Vector;

        $i0 = virtualinvoke r0.<org.apache.mahout.classifier.AbstractVectorClassifier: int numCategories()>();

        $i1 = $i0 - 1;

        $r3 = interfaceinvoke r1.<org.apache.mahout.math.Vector: org.apache.mahout.math.Vector viewPart(int,int)>(1, $i1);

        $r4 = virtualinvoke r0.<org.apache.mahout.classifier.AbstractVectorClassifier: org.apache.mahout.math.Vector classify(org.apache.mahout.math.Vector)>(r2);

        interfaceinvoke $r3.<org.apache.mahout.math.Vector: org.apache.mahout.math.Vector assign(org.apache.mahout.math.Vector)>($r4);

        $d0 = interfaceinvoke r1.<org.apache.mahout.math.Vector: double zSum()>();

        $d1 = 1.0 - $d0;

        interfaceinvoke r1.<org.apache.mahout.math.Vector: void setQuick(int,double)>(0, $d1);

        return r1;
    }

    public org.apache.mahout.math.Matrix classify(org.apache.mahout.math.Matrix)
    {
        org.apache.mahout.classifier.AbstractVectorClassifier r0;
        org.apache.mahout.math.Matrix r1;
        org.apache.mahout.math.DenseMatrix $r3;
        int $i0, $i1, $i2, $i3, i4;
        org.apache.mahout.math.Vector $r4, $r5;

        r0 := @this: org.apache.mahout.classifier.AbstractVectorClassifier;

        r1 := @parameter0: org.apache.mahout.math.Matrix;

        $r3 = new org.apache.mahout.math.DenseMatrix;

        $i0 = interfaceinvoke r1.<org.apache.mahout.math.Matrix: int numRows()>();

        $i1 = virtualinvoke r0.<org.apache.mahout.classifier.AbstractVectorClassifier: int numCategories()>();

        $i2 = $i1 - 1;

        specialinvoke $r3.<org.apache.mahout.math.DenseMatrix: void <init>(int,int)>($i0, $i2);

        i4 = 0;

     label1:
        $i3 = interfaceinvoke r1.<org.apache.mahout.math.Matrix: int numRows()>();

        if i4 >= $i3 goto label2;

        $r4 = interfaceinvoke r1.<org.apache.mahout.math.Matrix: org.apache.mahout.math.Vector viewRow(int)>(i4);

        $r5 = virtualinvoke r0.<org.apache.mahout.classifier.AbstractVectorClassifier: org.apache.mahout.math.Vector classify(org.apache.mahout.math.Vector)>($r4);

        interfaceinvoke $r3.<org.apache.mahout.math.Matrix: org.apache.mahout.math.Matrix assignRow(int,org.apache.mahout.math.Vector)>(i4, $r5);

        i4 = i4 + 1;

        goto label1;

     label2:
        return $r3;
    }

    public org.apache.mahout.math.Matrix classifyFull(org.apache.mahout.math.Matrix)
    {
        org.apache.mahout.classifier.AbstractVectorClassifier r0;
        org.apache.mahout.math.Matrix r1;
        org.apache.mahout.math.DenseMatrix $r3;
        int $i0, $i1, $i2, i3;
        org.apache.mahout.math.Vector $r4, $r5;

        r0 := @this: org.apache.mahout.classifier.AbstractVectorClassifier;

        r1 := @parameter0: org.apache.mahout.math.Matrix;

        $r3 = new org.apache.mahout.math.DenseMatrix;

        $i0 = interfaceinvoke r1.<org.apache.mahout.math.Matrix: int numRows()>();

        $i1 = virtualinvoke r0.<org.apache.mahout.classifier.AbstractVectorClassifier: int numCategories()>();

        specialinvoke $r3.<org.apache.mahout.math.DenseMatrix: void <init>(int,int)>($i0, $i1);

        i3 = 0;

     label1:
        $i2 = interfaceinvoke r1.<org.apache.mahout.math.Matrix: int numRows()>();

        if i3 >= $i2 goto label2;

        $r4 = interfaceinvoke $r3.<org.apache.mahout.math.Matrix: org.apache.mahout.math.Vector viewRow(int)>(i3);

        $r5 = interfaceinvoke r1.<org.apache.mahout.math.Matrix: org.apache.mahout.math.Vector viewRow(int)>(i3);

        virtualinvoke r0.<org.apache.mahout.classifier.AbstractVectorClassifier: org.apache.mahout.math.Vector classifyFull(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector)>($r4, $r5);

        i3 = i3 + 1;

        goto label1;

     label2:
        return $r3;
    }

    public org.apache.mahout.math.Vector classifyScalar(org.apache.mahout.math.Matrix)
    {
        org.apache.mahout.classifier.AbstractVectorClassifier r0;
        org.apache.mahout.math.Matrix r1;
        int $i0, $i1, i2, $i3;
        org.apache.mahout.math.DenseVector $r3;
        org.apache.mahout.math.Vector $r4;
        double $d0;
        boolean $z0;

        r0 := @this: org.apache.mahout.classifier.AbstractVectorClassifier;

        r1 := @parameter0: org.apache.mahout.math.Matrix;

        $i0 = virtualinvoke r0.<org.apache.mahout.classifier.AbstractVectorClassifier: int numCategories()>();

        if $i0 != 2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Can only call classifyScalar with two categories");

        $r3 = new org.apache.mahout.math.DenseVector;

        $i1 = interfaceinvoke r1.<org.apache.mahout.math.Matrix: int numRows()>();

        specialinvoke $r3.<org.apache.mahout.math.DenseVector: void <init>(int)>($i1);

        i2 = 0;

     label3:
        $i3 = interfaceinvoke r1.<org.apache.mahout.math.Matrix: int numRows()>();

        if i2 >= $i3 goto label4;

        $r4 = interfaceinvoke r1.<org.apache.mahout.math.Matrix: org.apache.mahout.math.Vector viewRow(int)>(i2);

        $d0 = virtualinvoke r0.<org.apache.mahout.classifier.AbstractVectorClassifier: double classifyScalar(org.apache.mahout.math.Vector)>($r4);

        interfaceinvoke $r3.<org.apache.mahout.math.Vector: void set(int,double)>(i2, $d0);

        i2 = i2 + 1;

        goto label3;

     label4:
        return $r3;
    }

    public double logLikelihood(int, org.apache.mahout.math.Vector)
    {
        org.apache.mahout.classifier.AbstractVectorClassifier r0;
        int i0, $i1, $i2;
        org.apache.mahout.math.Vector r1, r2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, d12;

        r0 := @this: org.apache.mahout.classifier.AbstractVectorClassifier;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.mahout.math.Vector;

        $i1 = virtualinvoke r0.<org.apache.mahout.classifier.AbstractVectorClassifier: int numCategories()>();

        if $i1 != 2 goto label2;

        d12 = virtualinvoke r0.<org.apache.mahout.classifier.AbstractVectorClassifier: double classifyScalar(org.apache.mahout.math.Vector)>(r1);

        if i0 <= 0 goto label1;

        $d10 = staticinvoke <java.lang.Math: double log(double)>(d12);

        $d11 = staticinvoke <java.lang.Math: double max(double,double)>(-100.0, $d10);

        return $d11;

     label1:
        $d7 = neg d12;

        $d9 = staticinvoke <java.lang.Math: double log1p(double)>($d7);

        $d8 = staticinvoke <java.lang.Math: double max(double,double)>(-100.0, $d9);

        return $d8;

     label2:
        r2 = virtualinvoke r0.<org.apache.mahout.classifier.AbstractVectorClassifier: org.apache.mahout.math.Vector classify(org.apache.mahout.math.Vector)>(r1);

        if i0 <= 0 goto label3;

        $i2 = i0 - 1;

        $d4 = interfaceinvoke r2.<org.apache.mahout.math.Vector: double get(int)>($i2);

        $d5 = staticinvoke <java.lang.Math: double log(double)>($d4);

        $d6 = staticinvoke <java.lang.Math: double max(double,double)>(-100.0, $d5);

        return $d6;

     label3:
        $d0 = interfaceinvoke r2.<org.apache.mahout.math.Vector: double zSum()>();

        $d1 = neg $d0;

        $d2 = staticinvoke <java.lang.Math: double log1p(double)>($d1);

        $d3 = staticinvoke <java.lang.Math: double max(double,double)>(-100.0, $d2);

        return $d3;
    }

    public static void <clinit>()
    {
        <org.apache.mahout.classifier.AbstractVectorClassifier: double MIN_LOG_LIKELIHOOD> = -100.0;

        return;
    }
}
