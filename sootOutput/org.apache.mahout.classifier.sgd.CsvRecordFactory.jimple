public class org.apache.mahout.classifier.sgd.CsvRecordFactory extends java.lang.Object implements org.apache.mahout.classifier.sgd.RecordFactory
{
    private static final java.lang.String INTERCEPT_TERM;
    private static final java.util.Map TYPE_DICTIONARY;
    private final java.util.Map traceDictionary;
    private int target;
    private final org.apache.mahout.vectorizer.encoders.Dictionary targetDictionary;
    private java.lang.String idName;
    private int id;
    private java.util.List predictors;
    private java.util.Map predictorEncoders;
    private int maxTargetValue;
    private final java.lang.String targetName;
    private final java.util.Map typeMap;
    private java.util.List variableNames;
    private boolean includeBiasTerm;
    private static final java.lang.String CANNOT_CONSTRUCT_CONVERTER;

    private java.util.List parseCsvLine(java.lang.String)
    {
        org.apache.mahout.classifier.sgd.CsvRecordFactory r0;
        java.lang.String r1;
        java.lang.String[] $r4;
        java.util.List $r5;
        java.io.IOException $r6;
        java.util.ArrayList $r7;

        r0 := @this: org.apache.mahout.classifier.sgd.CsvRecordFactory;

        r1 := @parameter0: java.lang.String;

     label1:
        $r4 = staticinvoke <org.apache.commons.csv.CSVUtils: java.lang.String[] parseLine(java.lang.String)>(r1);

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>(r1);

        return $r7;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private java.util.List parseCsvLine(java.lang.CharSequence)
    {
        org.apache.mahout.classifier.sgd.CsvRecordFactory r0;
        java.lang.CharSequence r1;
        java.lang.String $r2;
        java.util.List $r3;

        r0 := @this: org.apache.mahout.classifier.sgd.CsvRecordFactory;

        r1 := @parameter0: java.lang.CharSequence;

        $r2 = interfaceinvoke r1.<java.lang.CharSequence: java.lang.String toString()>();

        $r3 = specialinvoke r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: java.util.List parseCsvLine(java.lang.String)>($r2);

        return $r3;
    }

    public void <init>(java.lang.String, java.util.Map)
    {
        org.apache.mahout.classifier.sgd.CsvRecordFactory r0;
        java.lang.String r1;
        java.util.Map r2;
        java.util.TreeMap $r3;
        org.apache.mahout.vectorizer.encoders.Dictionary $r4;

        r0 := @this: org.apache.mahout.classifier.sgd.CsvRecordFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.TreeMap;

        specialinvoke $r3.<java.util.TreeMap: void <init>()>();

        r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: java.util.Map traceDictionary> = $r3;

        r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: int id> = -1;

        r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: int maxTargetValue> = 2147483647;

        r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: java.lang.String targetName> = r1;

        r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: java.util.Map typeMap> = r2;

        $r4 = new org.apache.mahout.vectorizer.encoders.Dictionary;

        specialinvoke $r4.<org.apache.mahout.vectorizer.encoders.Dictionary: void <init>()>();

        r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: org.apache.mahout.vectorizer.encoders.Dictionary targetDictionary> = $r4;

        return;
    }

    public void <init>(java.lang.String, java.lang.String, java.util.Map)
    {
        org.apache.mahout.classifier.sgd.CsvRecordFactory r0;
        java.lang.String r1, r2;
        java.util.Map r3;

        r0 := @this: org.apache.mahout.classifier.sgd.CsvRecordFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.Map;

        specialinvoke r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: void <init>(java.lang.String,java.util.Map)>(r1, r3);

        r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: java.lang.String idName> = r2;

        return;
    }

    public void defineTargetCategories(java.util.List)
    {
        org.apache.mahout.classifier.sgd.CsvRecordFactory r0;
        java.util.List r1;
        java.util.Iterator r2;
        java.lang.String r3, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i6;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8;
        org.apache.mahout.vectorizer.encoders.Dictionary $r10;
        java.lang.Object $r11;
        boolean $z0, $z1;

        r0 := @this: org.apache.mahout.classifier.sgd.CsvRecordFactory;

        r1 := @parameter0: java.util.List;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $i1 = r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: int maxTargetValue>;

        if $i0 > $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Must have less than or equal to ");

        $i2 = r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: int maxTargetValue>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" categories for target variable, but found ");

        $i3 = interfaceinvoke r1.<java.util.List: int size()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, $r9);

        $i4 = r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: int maxTargetValue>;

        if $i4 != 2147483647 goto label3;

        $i6 = interfaceinvoke r1.<java.util.List: int size()>();

        r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: int maxTargetValue> = $i6;

     label3:
        r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r11 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r11;

        $r10 = r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: org.apache.mahout.vectorizer.encoders.Dictionary targetDictionary>;

        virtualinvoke $r10.<org.apache.mahout.vectorizer.encoders.Dictionary: int intern(java.lang.String)>(r3);

        goto label4;

     label5:
        return;
    }

    public org.apache.mahout.classifier.sgd.CsvRecordFactory maxTargetValue(int)
    {
        org.apache.mahout.classifier.sgd.CsvRecordFactory r0;
        int i0;

        r0 := @this: org.apache.mahout.classifier.sgd.CsvRecordFactory;

        i0 := @parameter0: int;

        r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: int maxTargetValue> = i0;

        return r0;
    }

    public boolean usesFirstLineAsSchema()
    {
        org.apache.mahout.classifier.sgd.CsvRecordFactory r0;

        r0 := @this: org.apache.mahout.classifier.sgd.CsvRecordFactory;

        return 1;
    }

    public void firstLine(java.lang.String)
    {
        org.apache.mahout.classifier.sgd.CsvRecordFactory r0;
        java.lang.String r1, $r7, $r10, $r41, r57, r60;
        org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder r3;
        java.util.HashMap $r4, $r16;
        java.util.List $r5, $r6, $r17, $r18, $r21, $r40;
        boolean $z0, $z1, $z3, $z4, $z5;
        java.lang.Integer $r8, $r42, $r44, $r51, r59;
        java.lang.Object $r9, $r19, $r20, $r22, $r23, $r29, $r35, $r37, $r43, $r45;
        int $i0, $i1, $i2, $i3, $i4, i5;
        java.util.Map $r11, $r24, $r25, $r27, $r28, $r33, $r34, $r38;
        java.util.ArrayList $r12;
        org.apache.mahout.classifier.sgd.CsvRecordFactory$1 $r13;
        java.util.Set $r14, $r32;
        java.util.Collection $r15;
        java.lang.Object[] $r26, $r30, $r36;
        java.lang.Class[] $r31;
        java.lang.IllegalStateException $r46, $r48, $r53, $r55;
        java.lang.reflect.InvocationTargetException $r47;
        java.lang.InstantiationException $r49;
        java.lang.IllegalAccessException $r50;
        java.lang.NoSuchMethodException $r54;
        java.util.Iterator r56, r58;
        java.lang.Class r61;
        java.lang.reflect.Constructor r62;

        r0 := @this: org.apache.mahout.classifier.sgd.CsvRecordFactory;

        r1 := @parameter0: java.lang.String;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        $r5 = specialinvoke r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: java.util.List parseCsvLine(java.lang.String)>(r1);

        r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: java.util.List variableNames> = $r5;

        i5 = 0;

        $r6 = r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: java.util.List variableNames>;

        r56 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r56.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label02;

        $r45 = interfaceinvoke r56.<java.util.Iterator: java.lang.Object next()>();

        r57 = (java.lang.String) $r45;

        $i3 = i5;

        i5 = i5 + 1;

        $r51 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r57, $r51);

        goto label01;

     label02:
        $r7 = r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: java.lang.String targetName>;

        $r9 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

        $r8 = (java.lang.Integer) $r9;

        $i0 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: int target> = $i0;

        $r10 = r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: java.lang.String idName>;

        if $r10 == null goto label03;

        $r41 = r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: java.lang.String idName>;

        $r43 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r41);

        $r42 = (java.lang.Integer) $r43;

        $i4 = virtualinvoke $r42.<java.lang.Integer: int intValue()>();

        r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: int id> = $i4;

     label03:
        $r12 = new java.util.ArrayList;

        $r11 = r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: java.util.Map typeMap>;

        $r14 = interfaceinvoke $r11.<java.util.Map: java.util.Set keySet()>();

        $r13 = new org.apache.mahout.classifier.sgd.CsvRecordFactory$1;

        specialinvoke $r13.<org.apache.mahout.classifier.sgd.CsvRecordFactory$1: void <init>(org.apache.mahout.classifier.sgd.CsvRecordFactory,java.util.Map)>(r0, $r4);

        $r15 = staticinvoke <com.google.common.collect.Collections2: java.util.Collection transform(java.util.Collection,com.google.common.base.Function)>($r14, $r13);

        specialinvoke $r12.<java.util.ArrayList: void <init>(java.util.Collection)>($r15);

        r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: java.util.List predictors> = $r12;

        $z1 = r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: boolean includeBiasTerm>;

        if $z1 == 0 goto label04;

        $r40 = r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: java.util.List predictors>;

        $r44 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        interfaceinvoke $r40.<java.util.List: boolean add(java.lang.Object)>($r44);

     label04:
        $r17 = r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: java.util.List predictors>;

        staticinvoke <java.util.Collections: void sort(java.util.List)>($r17);

        $r16 = new java.util.HashMap;

        specialinvoke $r16.<java.util.HashMap: void <init>()>();

        r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: java.util.Map predictorEncoders> = $r16;

        $r18 = r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: java.util.List predictors>;

        r58 = interfaceinvoke $r18.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z3 = interfaceinvoke r58.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label17;

        $r19 = interfaceinvoke r58.<java.util.Iterator: java.lang.Object next()>();

        r59 = (java.lang.Integer) $r19;

        $i2 = virtualinvoke r59.<java.lang.Integer: int intValue()>();

        if $i2 != -1 goto label06;

        r60 = "Intercept Term";

        r61 = class "org/apache/mahout/vectorizer/encoders/ConstantValueEncoder";

        goto label07;

     label06:
        $r21 = r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: java.util.List variableNames>;

        $i1 = virtualinvoke r59.<java.lang.Integer: int intValue()>();

        $r20 = interfaceinvoke $r21.<java.util.List: java.lang.Object get(int)>($i1);

        r60 = (java.lang.String) $r20;

        $r25 = <org.apache.mahout.classifier.sgd.CsvRecordFactory: java.util.Map TYPE_DICTIONARY>;

        $r24 = r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: java.util.Map typeMap>;

        $r22 = interfaceinvoke $r24.<java.util.Map: java.lang.Object get(java.lang.Object)>(r60);

        $r23 = interfaceinvoke $r25.<java.util.Map: java.lang.Object get(java.lang.Object)>($r22);

        r61 = (java.lang.Class) $r23;

     label07:
        if r61 == null goto label08;

        $z4 = 1;

        goto label09;

     label08:
        $z4 = 0;

     label09:
        $r26 = newarray (java.lang.Object)[2];

        $r27 = r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: java.util.Map typeMap>;

        $r29 = interfaceinvoke $r27.<java.util.Map: java.lang.Object get(java.lang.Object)>(r60);

        $r26[0] = $r29;

        $r28 = <org.apache.mahout.classifier.sgd.CsvRecordFactory: java.util.Map TYPE_DICTIONARY>;

        $r32 = interfaceinvoke $r28.<java.util.Map: java.util.Set keySet()>();

        $r26[1] = $r32;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z4, "Invalid type of variable %s,  wanted one of %s", $r26);

        $r31 = newarray (java.lang.Class)[1];

        $r31[0] = class "java/lang/String";

        r62 = virtualinvoke r61.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r31);

        if r62 == null goto label10;

        $z5 = 1;

        goto label11;

     label10:
        $z5 = 0;

     label11:
        $r30 = newarray (java.lang.Object)[1];

        $r33 = r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: java.util.Map typeMap>;

        $r37 = interfaceinvoke $r33.<java.util.Map: java.lang.Object get(java.lang.Object)>(r60);

        $r30[0] = $r37;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z5, "Can\'t find correct constructor for %s", $r30);

        $r36 = newarray (java.lang.Object)[1];

        $r36[0] = r60;

        $r35 = virtualinvoke r62.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r36);

        r3 = (org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder) $r35;

        $r34 = r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: java.util.Map predictorEncoders>;

        interfaceinvoke $r34.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r59, r3);

        $r38 = r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: java.util.Map traceDictionary>;

        virtualinvoke r3.<org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder: void setTraceDictionary(java.util.Map)>($r38);

     label12:
        goto label05;

     label13:
        $r49 := @caughtexception;

        $r46 = new java.lang.IllegalStateException;

        specialinvoke $r46.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to construct type converter... shouldn\'t be possible", $r49);

        throw $r46;

     label14:
        $r50 := @caughtexception;

        $r48 = new java.lang.IllegalStateException;

        specialinvoke $r48.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to construct type converter... shouldn\'t be possible", $r50);

        throw $r48;

     label15:
        $r47 := @caughtexception;

        $r55 = new java.lang.IllegalStateException;

        specialinvoke $r55.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to construct type converter... shouldn\'t be possible", $r47);

        throw $r55;

     label16:
        $r54 := @caughtexception;

        $r53 = new java.lang.IllegalStateException;

        specialinvoke $r53.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to construct type converter... shouldn\'t be possible", $r54);

        throw $r53;

     label17:
        return;

        catch java.lang.InstantiationException from label07 to label12 with label13;
        catch java.lang.IllegalAccessException from label07 to label12 with label14;
        catch java.lang.reflect.InvocationTargetException from label07 to label12 with label15;
        catch java.lang.NoSuchMethodException from label07 to label12 with label16;
    }

    public int processLine(java.lang.String, org.apache.mahout.math.Vector)
    {
        org.apache.mahout.classifier.sgd.CsvRecordFactory r0;
        java.lang.String r1, $r8, r15;
        org.apache.mahout.math.Vector r2;
        java.util.List r3, $r9;
        java.util.Iterator r4;
        java.lang.Integer r5;
        int $i0, $i1, $i2, $i3, $i4, i5;
        org.apache.mahout.vectorizer.encoders.Dictionary $r6;
        java.lang.Object $r7, $r10, $r11, $r14;
        java.util.Map $r12;
        org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder $r13;
        boolean $z0;

        r0 := @this: org.apache.mahout.classifier.sgd.CsvRecordFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.mahout.math.Vector;

        r3 = specialinvoke r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: java.util.List parseCsvLine(java.lang.String)>(r1);

        $r6 = r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: org.apache.mahout.vectorizer.encoders.Dictionary targetDictionary>;

        $i0 = r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: int target>;

        $r7 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>($i0);

        $r8 = (java.lang.String) $r7;

        i5 = virtualinvoke $r6.<org.apache.mahout.vectorizer.encoders.Dictionary: int intern(java.lang.String)>($r8);

        $i1 = r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: int maxTargetValue>;

        if i5 < $i1 goto label1;

        $i4 = r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: int maxTargetValue>;

        i5 = $i4 - 1;

     label1:
        $r9 = r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: java.util.List predictors>;

        r4 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r10 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.Integer) $r10;

        $i2 = virtualinvoke r5.<java.lang.Integer: int intValue()>();

        if $i2 < 0 goto label3;

        $i3 = virtualinvoke r5.<java.lang.Integer: int intValue()>();

        $r14 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>($i3);

        r15 = (java.lang.String) $r14;

        goto label4;

     label3:
        r15 = null;

     label4:
        $r12 = r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: java.util.Map predictorEncoders>;

        $r11 = interfaceinvoke $r12.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        $r13 = (org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder) $r11;

        virtualinvoke $r13.<org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder: void addToVector(java.lang.String,org.apache.mahout.math.Vector)>(r15, r2);

        goto label2;

     label5:
        return i5;
    }

    public int processLine(java.lang.CharSequence, org.apache.mahout.math.Vector, boolean)
    {
        org.apache.mahout.classifier.sgd.CsvRecordFactory r0;
        java.lang.CharSequence r1;
        org.apache.mahout.math.Vector r2;
        boolean z0, $z1;
        java.util.List r3, $r15;
        java.util.Iterator r4;
        java.lang.Integer r5;
        java.lang.Object $r7, $r10, $r11, $r14;
        int $i0, $i1, $i2, $i3, $i4, i5;
        java.util.Map $r8;
        org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder $r9;
        org.apache.mahout.vectorizer.encoders.Dictionary $r12;
        java.lang.String $r13, $r16;

        r0 := @this: org.apache.mahout.classifier.sgd.CsvRecordFactory;

        r1 := @parameter0: java.lang.CharSequence;

        r2 := @parameter1: org.apache.mahout.math.Vector;

        z0 := @parameter2: boolean;

        r3 = specialinvoke r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: java.util.List parseCsvLine(java.lang.CharSequence)>(r1);

        i5 = -1;

        if z0 == 0 goto label1;

        $r12 = r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: org.apache.mahout.vectorizer.encoders.Dictionary targetDictionary>;

        $i2 = r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: int target>;

        $r14 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>($i2);

        $r13 = (java.lang.String) $r14;

        i5 = virtualinvoke $r12.<org.apache.mahout.vectorizer.encoders.Dictionary: int intern(java.lang.String)>($r13);

        $i3 = r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: int maxTargetValue>;

        if i5 < $i3 goto label1;

        $i4 = r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: int maxTargetValue>;

        i5 = $i4 - 1;

     label1:
        $r15 = r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: java.util.List predictors>;

        r4 = interfaceinvoke $r15.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.Integer) $r7;

        $i0 = virtualinvoke r5.<java.lang.Integer: int intValue()>();

        if $i0 < 0 goto label3;

        $i1 = virtualinvoke r5.<java.lang.Integer: int intValue()>();

        $r11 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>($i1);

        $r16 = (java.lang.String) $r11;

        goto label4;

     label3:
        $r16 = null;

     label4:
        $r8 = r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: java.util.Map predictorEncoders>;

        $r10 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        $r9 = (org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder) $r10;

        virtualinvoke $r9.<org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder: void addToVector(java.lang.String,org.apache.mahout.math.Vector)>($r16, r2);

        goto label2;

     label5:
        return i5;
    }

    public java.lang.String getTargetString(java.lang.CharSequence)
    {
        org.apache.mahout.classifier.sgd.CsvRecordFactory r0;
        java.lang.CharSequence r1;
        java.util.List r2;
        int $i0;
        java.lang.Object $r3;
        java.lang.String $r4;

        r0 := @this: org.apache.mahout.classifier.sgd.CsvRecordFactory;

        r1 := @parameter0: java.lang.CharSequence;

        r2 = specialinvoke r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: java.util.List parseCsvLine(java.lang.CharSequence)>(r1);

        $i0 = r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: int target>;

        $r3 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>($i0);

        $r4 = (java.lang.String) $r3;

        return $r4;
    }

    public java.lang.String getTargetLabel(int)
    {
        org.apache.mahout.classifier.sgd.CsvRecordFactory r0;
        int i0, $i1;
        java.util.Iterator r1;
        java.lang.String r2;
        org.apache.mahout.vectorizer.encoders.Dictionary $r3, $r6;
        java.util.List $r4;
        boolean $z0;
        java.lang.Object $r5;

        r0 := @this: org.apache.mahout.classifier.sgd.CsvRecordFactory;

        i0 := @parameter0: int;

        $r3 = r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: org.apache.mahout.vectorizer.encoders.Dictionary targetDictionary>;

        $r4 = virtualinvoke $r3.<org.apache.mahout.vectorizer.encoders.Dictionary: java.util.List values()>();

        r1 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.lang.String) $r5;

        $r6 = r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: org.apache.mahout.vectorizer.encoders.Dictionary targetDictionary>;

        $i1 = virtualinvoke $r6.<org.apache.mahout.vectorizer.encoders.Dictionary: int intern(java.lang.String)>(r2);

        if $i1 != i0 goto label1;

        return r2;

     label2:
        return null;
    }

    public java.lang.String getIdString(java.lang.CharSequence)
    {
        org.apache.mahout.classifier.sgd.CsvRecordFactory r0;
        java.lang.CharSequence r1;
        java.util.List r2;
        int $i0;
        java.lang.Object $r3;
        java.lang.String $r4;

        r0 := @this: org.apache.mahout.classifier.sgd.CsvRecordFactory;

        r1 := @parameter0: java.lang.CharSequence;

        r2 = specialinvoke r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: java.util.List parseCsvLine(java.lang.CharSequence)>(r1);

        $i0 = r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: int id>;

        $r3 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>($i0);

        $r4 = (java.lang.String) $r3;

        return $r4;
    }

    public java.lang.Iterable getPredictors()
    {
        org.apache.mahout.classifier.sgd.CsvRecordFactory r0;
        org.apache.mahout.classifier.sgd.CsvRecordFactory$2 $r1;
        java.util.List $r2, $r3;

        r0 := @this: org.apache.mahout.classifier.sgd.CsvRecordFactory;

        $r2 = r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: java.util.List predictors>;

        $r1 = new org.apache.mahout.classifier.sgd.CsvRecordFactory$2;

        specialinvoke $r1.<org.apache.mahout.classifier.sgd.CsvRecordFactory$2: void <init>(org.apache.mahout.classifier.sgd.CsvRecordFactory)>(r0);

        $r3 = staticinvoke <com.google.common.collect.Lists: java.util.List transform(java.util.List,com.google.common.base.Function)>($r2, $r1);

        return $r3;
    }

    public java.util.Map getTraceDictionary()
    {
        org.apache.mahout.classifier.sgd.CsvRecordFactory r0;
        java.util.Map $r1;

        r0 := @this: org.apache.mahout.classifier.sgd.CsvRecordFactory;

        $r1 = r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: java.util.Map traceDictionary>;

        return $r1;
    }

    public org.apache.mahout.classifier.sgd.CsvRecordFactory includeBiasTerm(boolean)
    {
        org.apache.mahout.classifier.sgd.CsvRecordFactory r0;
        boolean z0;

        r0 := @this: org.apache.mahout.classifier.sgd.CsvRecordFactory;

        z0 := @parameter0: boolean;

        r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: boolean includeBiasTerm> = z0;

        return r0;
    }

    public java.util.List getTargetCategories()
    {
        org.apache.mahout.classifier.sgd.CsvRecordFactory r0;
        java.util.List r1, $r3;
        org.apache.mahout.vectorizer.encoders.Dictionary $r2;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.mahout.classifier.sgd.CsvRecordFactory;

        $r2 = r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: org.apache.mahout.vectorizer.encoders.Dictionary targetDictionary>;

        r1 = virtualinvoke $r2.<org.apache.mahout.vectorizer.encoders.Dictionary: java.util.List values()>();

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $i1 = r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: int maxTargetValue>;

        if $i0 <= $i1 goto label1;

        $i2 = r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: int maxTargetValue>;

        $i3 = interfaceinvoke r1.<java.util.List: int size()>();

        $r3 = interfaceinvoke r1.<java.util.List: java.util.List subList(int,int)>($i2, $i3);

        interfaceinvoke $r3.<java.util.List: void clear()>();

     label1:
        return r1;
    }

    public java.lang.String getIdName()
    {
        org.apache.mahout.classifier.sgd.CsvRecordFactory r0;
        java.lang.String $r1;

        r0 := @this: org.apache.mahout.classifier.sgd.CsvRecordFactory;

        $r1 = r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: java.lang.String idName>;

        return $r1;
    }

    public void setIdName(java.lang.String)
    {
        org.apache.mahout.classifier.sgd.CsvRecordFactory r0;
        java.lang.String r1;

        r0 := @this: org.apache.mahout.classifier.sgd.CsvRecordFactory;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: java.lang.String idName> = r1;

        return;
    }

    public volatile org.apache.mahout.classifier.sgd.RecordFactory includeBiasTerm(boolean)
    {
        org.apache.mahout.classifier.sgd.CsvRecordFactory r0, $r1;
        boolean z0;

        r0 := @this: org.apache.mahout.classifier.sgd.CsvRecordFactory;

        z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: org.apache.mahout.classifier.sgd.CsvRecordFactory includeBiasTerm(boolean)>(z0);

        return $r1;
    }

    public volatile org.apache.mahout.classifier.sgd.RecordFactory maxTargetValue(int)
    {
        org.apache.mahout.classifier.sgd.CsvRecordFactory r0, $r1;
        int i0;

        r0 := @this: org.apache.mahout.classifier.sgd.CsvRecordFactory;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: org.apache.mahout.classifier.sgd.CsvRecordFactory maxTargetValue(int)>(i0);

        return $r1;
    }

    static java.util.List access$000(org.apache.mahout.classifier.sgd.CsvRecordFactory)
    {
        org.apache.mahout.classifier.sgd.CsvRecordFactory r0;
        java.util.List $r1;

        r0 := @parameter0: org.apache.mahout.classifier.sgd.CsvRecordFactory;

        $r1 = r0.<org.apache.mahout.classifier.sgd.CsvRecordFactory: java.util.List variableNames>;

        return $r1;
    }

    static void <clinit>()
    {
        com.google.common.collect.ImmutableMap$Builder $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7;
        com.google.common.collect.ImmutableMap $r8;

        <org.apache.mahout.classifier.sgd.CsvRecordFactory: java.lang.String CANNOT_CONSTRUCT_CONVERTER> = "Unable to construct type converter... shouldn\'t be possible";

        <org.apache.mahout.classifier.sgd.CsvRecordFactory: java.lang.String INTERCEPT_TERM> = "Intercept Term";

        $r0 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>();

        $r1 = virtualinvoke $r0.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>("continuous", class "org/apache/mahout/vectorizer/encoders/ContinuousValueEncoder");

        $r2 = virtualinvoke $r1.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>("numeric", class "org/apache/mahout/vectorizer/encoders/ContinuousValueEncoder");

        $r3 = virtualinvoke $r2.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>("n", class "org/apache/mahout/vectorizer/encoders/ContinuousValueEncoder");

        $r4 = virtualinvoke $r3.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>("word", class "org/apache/mahout/vectorizer/encoders/StaticWordValueEncoder");

        $r5 = virtualinvoke $r4.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>("w", class "org/apache/mahout/vectorizer/encoders/StaticWordValueEncoder");

        $r6 = virtualinvoke $r5.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>("text", class "org/apache/mahout/vectorizer/encoders/TextValueEncoder");

        $r7 = virtualinvoke $r6.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>("t", class "org/apache/mahout/vectorizer/encoders/TextValueEncoder");

        $r8 = virtualinvoke $r7.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>();

        <org.apache.mahout.classifier.sgd.CsvRecordFactory: java.util.Map TYPE_DICTIONARY> = $r8;

        return;
    }
}
