public abstract class org.apache.mahout.classifier.df.mapreduce.Builder extends java.lang.Object
{
    private static final org.slf4j.Logger log;
    private final org.apache.mahout.classifier.df.builder.TreeBuilder treeBuilder;
    private final org.apache.hadoop.fs.Path dataPath;
    private final org.apache.hadoop.fs.Path datasetPath;
    private final java.lang.Long seed;
    private final org.apache.hadoop.conf.Configuration conf;
    private java.lang.String outputDirName;

    protected void <init>(org.apache.mahout.classifier.df.builder.TreeBuilder, org.apache.hadoop.fs.Path, org.apache.hadoop.fs.Path, java.lang.Long, org.apache.hadoop.conf.Configuration)
    {
        org.apache.mahout.classifier.df.mapreduce.Builder r0;
        org.apache.mahout.classifier.df.builder.TreeBuilder r1;
        org.apache.hadoop.fs.Path r2, r3;
        java.lang.Long r4;
        org.apache.hadoop.conf.Configuration r5, $r6;

        r0 := @this: org.apache.mahout.classifier.df.mapreduce.Builder;

        r1 := @parameter0: org.apache.mahout.classifier.df.builder.TreeBuilder;

        r2 := @parameter1: org.apache.hadoop.fs.Path;

        r3 := @parameter2: org.apache.hadoop.fs.Path;

        r4 := @parameter3: java.lang.Long;

        r5 := @parameter4: org.apache.hadoop.conf.Configuration;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.mahout.classifier.df.mapreduce.Builder: java.lang.String outputDirName> = "output";

        r0.<org.apache.mahout.classifier.df.mapreduce.Builder: org.apache.mahout.classifier.df.builder.TreeBuilder treeBuilder> = r1;

        r0.<org.apache.mahout.classifier.df.mapreduce.Builder: org.apache.hadoop.fs.Path dataPath> = r2;

        r0.<org.apache.mahout.classifier.df.mapreduce.Builder: org.apache.hadoop.fs.Path datasetPath> = r3;

        r0.<org.apache.mahout.classifier.df.mapreduce.Builder: java.lang.Long seed> = r4;

        $r6 = new org.apache.hadoop.conf.Configuration;

        specialinvoke $r6.<org.apache.hadoop.conf.Configuration: void <init>(org.apache.hadoop.conf.Configuration)>(r5);

        r0.<org.apache.mahout.classifier.df.mapreduce.Builder: org.apache.hadoop.conf.Configuration conf> = $r6;

        return;
    }

    protected org.apache.hadoop.fs.Path getDataPath()
    {
        org.apache.mahout.classifier.df.mapreduce.Builder r0;
        org.apache.hadoop.fs.Path $r1;

        r0 := @this: org.apache.mahout.classifier.df.mapreduce.Builder;

        $r1 = r0.<org.apache.mahout.classifier.df.mapreduce.Builder: org.apache.hadoop.fs.Path dataPath>;

        return $r1;
    }

    public static int getNumMaps(org.apache.hadoop.conf.Configuration)
    {
        org.apache.hadoop.conf.Configuration r0;
        int $i0;

        r0 := @parameter0: org.apache.hadoop.conf.Configuration;

        $i0 = virtualinvoke r0.<org.apache.hadoop.conf.Configuration: int getInt(java.lang.String,int)>("mapred.map.tasks", -1);

        return $i0;
    }

    protected static boolean isOutput(org.apache.hadoop.conf.Configuration)
    {
        org.apache.hadoop.conf.Configuration r0;
        boolean $z0;

        r0 := @parameter0: org.apache.hadoop.conf.Configuration;

        $z0 = virtualinvoke r0.<org.apache.hadoop.conf.Configuration: boolean getBoolean(java.lang.String,boolean)>("debug.mahout.rf.output", 1);

        return $z0;
    }

    public static java.lang.Long getRandomSeed(org.apache.hadoop.conf.Configuration)
    {
        org.apache.hadoop.conf.Configuration r0;
        java.lang.String r1;
        java.lang.Long $r2;

        r0 := @parameter0: org.apache.hadoop.conf.Configuration;

        r1 = virtualinvoke r0.<org.apache.hadoop.conf.Configuration: java.lang.String get(java.lang.String)>("mahout.rf.random.seed");

        if r1 != null goto label1;

        return null;

     label1:
        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(java.lang.String)>(r1);

        return $r2;
    }

    private static void setRandomSeed(org.apache.hadoop.conf.Configuration, long)
    {
        org.apache.hadoop.conf.Configuration r0;
        long l0;

        r0 := @parameter0: org.apache.hadoop.conf.Configuration;

        l0 := @parameter1: long;

        virtualinvoke r0.<org.apache.hadoop.conf.Configuration: void setLong(java.lang.String,long)>("mahout.rf.random.seed", l0);

        return;
    }

    public static org.apache.mahout.classifier.df.builder.TreeBuilder getTreeBuilder(org.apache.hadoop.conf.Configuration)
    {
        org.apache.hadoop.conf.Configuration r0;
        java.lang.String r1;
        java.lang.Object $r2;
        org.apache.mahout.classifier.df.builder.TreeBuilder $r3;

        r0 := @parameter0: org.apache.hadoop.conf.Configuration;

        r1 = virtualinvoke r0.<org.apache.hadoop.conf.Configuration: java.lang.String get(java.lang.String)>("mahout.rf.treebuilder");

        if r1 != null goto label1;

        return null;

     label1:
        $r2 = staticinvoke <org.apache.mahout.common.StringUtils: java.lang.Object fromString(java.lang.String)>(r1);

        $r3 = (org.apache.mahout.classifier.df.builder.TreeBuilder) $r2;

        return $r3;
    }

    private static void setTreeBuilder(org.apache.hadoop.conf.Configuration, org.apache.mahout.classifier.df.builder.TreeBuilder)
    {
        org.apache.hadoop.conf.Configuration r0;
        org.apache.mahout.classifier.df.builder.TreeBuilder r1;
        java.lang.String $r2;

        r0 := @parameter0: org.apache.hadoop.conf.Configuration;

        r1 := @parameter1: org.apache.mahout.classifier.df.builder.TreeBuilder;

        $r2 = staticinvoke <org.apache.mahout.common.StringUtils: java.lang.String toString(java.lang.Object)>(r1);

        virtualinvoke r0.<org.apache.hadoop.conf.Configuration: void set(java.lang.String,java.lang.String)>("mahout.rf.treebuilder", $r2);

        return;
    }

    public static int getNbTrees(org.apache.hadoop.conf.Configuration)
    {
        org.apache.hadoop.conf.Configuration r0;
        int $i0;

        r0 := @parameter0: org.apache.hadoop.conf.Configuration;

        $i0 = virtualinvoke r0.<org.apache.hadoop.conf.Configuration: int getInt(java.lang.String,int)>("mahout.rf.nbtrees", -1);

        return $i0;
    }

    public static void setNbTrees(org.apache.hadoop.conf.Configuration, int)
    {
        org.apache.hadoop.conf.Configuration r0;
        int i0;
        boolean $z0;

        r0 := @parameter0: org.apache.hadoop.conf.Configuration;

        i0 := @parameter1: int;

        if i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "nbTrees should be greater than 0");

        virtualinvoke r0.<org.apache.hadoop.conf.Configuration: void setInt(java.lang.String,int)>("mahout.rf.nbtrees", i0);

        return;
    }

    public void setOutputDirName(java.lang.String)
    {
        org.apache.mahout.classifier.df.mapreduce.Builder r0;
        java.lang.String r1;

        r0 := @this: org.apache.mahout.classifier.df.mapreduce.Builder;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.mahout.classifier.df.mapreduce.Builder: java.lang.String outputDirName> = r1;

        return;
    }

    protected org.apache.hadoop.fs.Path getOutputPath(org.apache.hadoop.conf.Configuration) throws java.io.IOException
    {
        org.apache.mahout.classifier.df.mapreduce.Builder r0;
        org.apache.hadoop.conf.Configuration r1;
        org.apache.hadoop.fs.FileSystem r2;
        org.apache.hadoop.fs.Path $r3, $r4;
        java.lang.String $r5;

        r0 := @this: org.apache.mahout.classifier.df.mapreduce.Builder;

        r1 := @parameter0: org.apache.hadoop.conf.Configuration;

        r2 = staticinvoke <org.apache.hadoop.fs.FileSystem: org.apache.hadoop.fs.FileSystem get(org.apache.hadoop.conf.Configuration)>(r1);

        $r3 = new org.apache.hadoop.fs.Path;

        $r4 = virtualinvoke r2.<org.apache.hadoop.fs.FileSystem: org.apache.hadoop.fs.Path getWorkingDirectory()>();

        $r5 = r0.<org.apache.mahout.classifier.df.mapreduce.Builder: java.lang.String outputDirName>;

        specialinvoke $r3.<org.apache.hadoop.fs.Path: void <init>(org.apache.hadoop.fs.Path,java.lang.String)>($r4, $r5);

        return $r3;
    }

    public static org.apache.hadoop.fs.Path getDistributedCacheFile(org.apache.hadoop.conf.Configuration, int) throws java.io.IOException
    {
        org.apache.hadoop.conf.Configuration r0;
        int i0, $i1;
        org.apache.hadoop.fs.Path[] r1;
        org.apache.hadoop.fs.Path $r2;
        java.io.IOException $r3;

        r0 := @parameter0: org.apache.hadoop.conf.Configuration;

        i0 := @parameter1: int;

        r1 = staticinvoke <org.apache.mahout.common.HadoopUtil: org.apache.hadoop.fs.Path[] getCachedFiles(org.apache.hadoop.conf.Configuration)>(r0);

        $i1 = lengthof r1;

        if $i1 > i0 goto label1;

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("path not found in the DistributedCache");

        throw $r3;

     label1:
        $r2 = r1[i0];

        return $r2;
    }

    public static org.apache.mahout.classifier.df.data.Dataset loadDataset(org.apache.hadoop.conf.Configuration) throws java.io.IOException
    {
        org.apache.hadoop.conf.Configuration r0;
        org.apache.hadoop.fs.Path r1;
        org.apache.mahout.classifier.df.data.Dataset $r2;

        r0 := @parameter0: org.apache.hadoop.conf.Configuration;

        r1 = staticinvoke <org.apache.mahout.classifier.df.mapreduce.Builder: org.apache.hadoop.fs.Path getDistributedCacheFile(org.apache.hadoop.conf.Configuration,int)>(r0, 0);

        $r2 = staticinvoke <org.apache.mahout.classifier.df.data.Dataset: org.apache.mahout.classifier.df.data.Dataset load(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.Path)>(r0, r1);

        return $r2;
    }

    protected abstract void configureJob(org.apache.hadoop.mapreduce.Job) throws java.io.IOException;

    protected boolean runJob(org.apache.hadoop.mapreduce.Job) throws java.lang.ClassNotFoundException, java.io.IOException, java.lang.InterruptedException
    {
        org.apache.mahout.classifier.df.mapreduce.Builder r0;
        org.apache.hadoop.mapreduce.Job r1;
        boolean $z0;

        r0 := @this: org.apache.mahout.classifier.df.mapreduce.Builder;

        r1 := @parameter0: org.apache.hadoop.mapreduce.Job;

        $z0 = virtualinvoke r1.<org.apache.hadoop.mapreduce.Job: boolean waitForCompletion(boolean)>(1);

        return $z0;
    }

    protected abstract org.apache.mahout.classifier.df.DecisionForest parseOutput(org.apache.hadoop.mapreduce.Job) throws java.io.IOException;

    public org.apache.mahout.classifier.df.DecisionForest build(int) throws java.io.IOException, java.lang.ClassNotFoundException, java.lang.InterruptedException
    {
        org.apache.mahout.classifier.df.mapreduce.Builder r0;
        int i0;
        org.apache.hadoop.fs.Path r1, $r11;
        org.apache.hadoop.fs.FileSystem r2;
        org.apache.mahout.classifier.df.DecisionForest r4;
        org.apache.hadoop.conf.Configuration $r5, $r6, $r8, $r10, $r12, $r14, $r18, $r22, $r23;
        boolean $z0, $z1, $z2;
        java.lang.Long $r7, $r24;
        org.apache.mahout.classifier.df.builder.TreeBuilder $r9;
        java.net.URI $r13;
        org.apache.hadoop.mapreduce.Job $r15;
        org.slf4j.Logger $r16, $r17, $r19, $r21;
        org.apache.hadoop.fs.Path[] $r20;
        long $l1;
        java.io.IOException $r25;
        java.lang.String $r26;
        java.lang.StringBuilder $r27, $r28, $r29;

        r0 := @this: org.apache.mahout.classifier.df.mapreduce.Builder;

        i0 := @parameter0: int;

        $r5 = r0.<org.apache.mahout.classifier.df.mapreduce.Builder: org.apache.hadoop.conf.Configuration conf>;

        r1 = virtualinvoke r0.<org.apache.mahout.classifier.df.mapreduce.Builder: org.apache.hadoop.fs.Path getOutputPath(org.apache.hadoop.conf.Configuration)>($r5);

        $r6 = r0.<org.apache.mahout.classifier.df.mapreduce.Builder: org.apache.hadoop.conf.Configuration conf>;

        r2 = virtualinvoke r1.<org.apache.hadoop.fs.Path: org.apache.hadoop.fs.FileSystem getFileSystem(org.apache.hadoop.conf.Configuration)>($r6);

        $z0 = virtualinvoke r2.<org.apache.hadoop.fs.FileSystem: boolean exists(org.apache.hadoop.fs.Path)>(r1);

        if $z0 == 0 goto label1;

        $r25 = new java.io.IOException;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Output path already exists : ");

        $r27 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r26 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<java.io.IOException: void <init>(java.lang.String)>($r26);

        throw $r25;

     label1:
        $r7 = r0.<org.apache.mahout.classifier.df.mapreduce.Builder: java.lang.Long seed>;

        if $r7 == null goto label2;

        $r23 = r0.<org.apache.mahout.classifier.df.mapreduce.Builder: org.apache.hadoop.conf.Configuration conf>;

        $r24 = r0.<org.apache.mahout.classifier.df.mapreduce.Builder: java.lang.Long seed>;

        $l1 = virtualinvoke $r24.<java.lang.Long: long longValue()>();

        staticinvoke <org.apache.mahout.classifier.df.mapreduce.Builder: void setRandomSeed(org.apache.hadoop.conf.Configuration,long)>($r23, $l1);

     label2:
        $r8 = r0.<org.apache.mahout.classifier.df.mapreduce.Builder: org.apache.hadoop.conf.Configuration conf>;

        staticinvoke <org.apache.mahout.classifier.df.mapreduce.Builder: void setNbTrees(org.apache.hadoop.conf.Configuration,int)>($r8, i0);

        $r10 = r0.<org.apache.mahout.classifier.df.mapreduce.Builder: org.apache.hadoop.conf.Configuration conf>;

        $r9 = r0.<org.apache.mahout.classifier.df.mapreduce.Builder: org.apache.mahout.classifier.df.builder.TreeBuilder treeBuilder>;

        staticinvoke <org.apache.mahout.classifier.df.mapreduce.Builder: void setTreeBuilder(org.apache.hadoop.conf.Configuration,org.apache.mahout.classifier.df.builder.TreeBuilder)>($r10, $r9);

        $r11 = r0.<org.apache.mahout.classifier.df.mapreduce.Builder: org.apache.hadoop.fs.Path datasetPath>;

        $r13 = virtualinvoke $r11.<org.apache.hadoop.fs.Path: java.net.URI toUri()>();

        $r12 = r0.<org.apache.mahout.classifier.df.mapreduce.Builder: org.apache.hadoop.conf.Configuration conf>;

        staticinvoke <org.apache.hadoop.filecache.DistributedCache: void addCacheFile(java.net.URI,org.apache.hadoop.conf.Configuration)>($r13, $r12);

        $r15 = new org.apache.hadoop.mapreduce.Job;

        $r14 = r0.<org.apache.mahout.classifier.df.mapreduce.Builder: org.apache.hadoop.conf.Configuration conf>;

        specialinvoke $r15.<org.apache.hadoop.mapreduce.Job: void <init>(org.apache.hadoop.conf.Configuration,java.lang.String)>($r14, "decision forest builder");

        $r17 = <org.apache.mahout.classifier.df.mapreduce.Builder: org.slf4j.Logger log>;

        interfaceinvoke $r17.<org.slf4j.Logger: void debug(java.lang.String)>("Configuring the job...");

        virtualinvoke r0.<org.apache.mahout.classifier.df.mapreduce.Builder: void configureJob(org.apache.hadoop.mapreduce.Job)>($r15);

        $r16 = <org.apache.mahout.classifier.df.mapreduce.Builder: org.slf4j.Logger log>;

        interfaceinvoke $r16.<org.slf4j.Logger: void debug(java.lang.String)>("Running the job...");

        $z1 = virtualinvoke r0.<org.apache.mahout.classifier.df.mapreduce.Builder: boolean runJob(org.apache.hadoop.mapreduce.Job)>($r15);

        if $z1 != 0 goto label3;

        $r21 = <org.apache.mahout.classifier.df.mapreduce.Builder: org.slf4j.Logger log>;

        interfaceinvoke $r21.<org.slf4j.Logger: void error(java.lang.String)>("Job failed!");

        return null;

     label3:
        $r18 = r0.<org.apache.mahout.classifier.df.mapreduce.Builder: org.apache.hadoop.conf.Configuration conf>;

        $z2 = staticinvoke <org.apache.mahout.classifier.df.mapreduce.Builder: boolean isOutput(org.apache.hadoop.conf.Configuration)>($r18);

        if $z2 == 0 goto label4;

        $r19 = <org.apache.mahout.classifier.df.mapreduce.Builder: org.slf4j.Logger log>;

        interfaceinvoke $r19.<org.slf4j.Logger: void debug(java.lang.String)>("Parsing the output...");

        r4 = virtualinvoke r0.<org.apache.mahout.classifier.df.mapreduce.Builder: org.apache.mahout.classifier.df.DecisionForest parseOutput(org.apache.hadoop.mapreduce.Job)>($r15);

        $r22 = r0.<org.apache.mahout.classifier.df.mapreduce.Builder: org.apache.hadoop.conf.Configuration conf>;

        $r20 = newarray (org.apache.hadoop.fs.Path)[1];

        $r20[0] = r1;

        staticinvoke <org.apache.mahout.common.HadoopUtil: void delete(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.Path[])>($r22, $r20);

        return r4;

     label4:
        return null;
    }

    public static void sortSplits(org.apache.hadoop.mapreduce.InputSplit[])
    {
        org.apache.hadoop.mapreduce.InputSplit[] r0;
        org.apache.mahout.classifier.df.mapreduce.Builder$1 $r1;

        r0 := @parameter0: org.apache.hadoop.mapreduce.InputSplit[];

        $r1 = new org.apache.mahout.classifier.df.mapreduce.Builder$1;

        specialinvoke $r1.<org.apache.mahout.classifier.df.mapreduce.Builder$1: void <init>()>();

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>(r0, $r1);

        return;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "org/apache/mahout/classifier/df/mapreduce/Builder");

        <org.apache.mahout.classifier.df.mapreduce.Builder: org.slf4j.Logger log> = $r0;

        return;
    }
}
