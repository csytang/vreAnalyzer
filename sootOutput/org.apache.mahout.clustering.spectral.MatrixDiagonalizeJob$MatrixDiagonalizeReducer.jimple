public class org.apache.mahout.clustering.spectral.MatrixDiagonalizeJob$MatrixDiagonalizeReducer extends org.apache.hadoop.mapreduce.Reducer
{

    public void <init>()
    {
        org.apache.mahout.clustering.spectral.MatrixDiagonalizeJob$MatrixDiagonalizeReducer r0;

        r0 := @this: org.apache.mahout.clustering.spectral.MatrixDiagonalizeJob$MatrixDiagonalizeReducer;

        specialinvoke r0.<org.apache.hadoop.mapreduce.Reducer: void <init>()>();

        return;
    }

    protected void reduce(org.apache.hadoop.io.NullWritable, java.lang.Iterable, org.apache.hadoop.mapreduce.Reducer$Context) throws java.io.IOException, java.lang.InterruptedException
    {
        org.apache.mahout.clustering.spectral.MatrixDiagonalizeJob$MatrixDiagonalizeReducer r0;
        org.apache.hadoop.io.NullWritable r1;
        java.lang.Iterable r2;
        org.apache.hadoop.mapreduce.Reducer$Context r3;
        java.util.Iterator r5;
        org.apache.mahout.clustering.spectral.IntDoublePairWritable r6;
        org.apache.mahout.math.DenseVector $r7;
        org.apache.hadoop.conf.Configuration $r8;
        int $i0, $i1;
        boolean $z0;
        org.apache.mahout.math.VectorWritable $r9;
        java.lang.Object $r10;
        double $d0;

        r0 := @this: org.apache.mahout.clustering.spectral.MatrixDiagonalizeJob$MatrixDiagonalizeReducer;

        r1 := @parameter0: org.apache.hadoop.io.NullWritable;

        r2 := @parameter1: java.lang.Iterable;

        r3 := @parameter2: org.apache.hadoop.mapreduce.Reducer$Context;

        $r7 = new org.apache.mahout.math.DenseVector;

        $r8 = virtualinvoke r3.<org.apache.hadoop.mapreduce.Reducer$Context: org.apache.hadoop.conf.Configuration getConfiguration()>();

        $i0 = virtualinvoke $r8.<org.apache.hadoop.conf.Configuration: int getInt(java.lang.String,int)>("org.apache.mahout.clustering.spectral.common.affinitydimensions", 2147483647);

        specialinvoke $r7.<org.apache.mahout.math.DenseVector: void <init>(int)>($i0);

        r5 = interfaceinvoke r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r10 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.mahout.clustering.spectral.IntDoublePairWritable) $r10;

        $i1 = virtualinvoke r6.<org.apache.mahout.clustering.spectral.IntDoublePairWritable: int getKey()>();

        $d0 = virtualinvoke r6.<org.apache.mahout.clustering.spectral.IntDoublePairWritable: double getValue()>();

        interfaceinvoke $r7.<org.apache.mahout.math.Vector: void setQuick(int,double)>($i1, $d0);

        goto label1;

     label2:
        $r9 = new org.apache.mahout.math.VectorWritable;

        specialinvoke $r9.<org.apache.mahout.math.VectorWritable: void <init>(org.apache.mahout.math.Vector)>($r7);

        virtualinvoke r3.<org.apache.hadoop.mapreduce.Reducer$Context: void write(java.lang.Object,java.lang.Object)>(r1, $r9);

        return;
    }

    protected volatile void reduce(java.lang.Object, java.lang.Iterable, org.apache.hadoop.mapreduce.Reducer$Context) throws java.io.IOException, java.lang.InterruptedException
    {
        org.apache.mahout.clustering.spectral.MatrixDiagonalizeJob$MatrixDiagonalizeReducer r0;
        java.lang.Object r1;
        java.lang.Iterable r2;
        org.apache.hadoop.mapreduce.Reducer$Context r3;
        org.apache.hadoop.io.NullWritable $r4;

        r0 := @this: org.apache.mahout.clustering.spectral.MatrixDiagonalizeJob$MatrixDiagonalizeReducer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Iterable;

        r3 := @parameter2: org.apache.hadoop.mapreduce.Reducer$Context;

        $r4 = (org.apache.hadoop.io.NullWritable) r1;

        virtualinvoke r0.<org.apache.mahout.clustering.spectral.MatrixDiagonalizeJob$MatrixDiagonalizeReducer: void reduce(org.apache.hadoop.io.NullWritable,java.lang.Iterable,org.apache.hadoop.mapreduce.Reducer$Context)>($r4, r2, r3);

        return;
    }
}
