public abstract class org.apache.mahout.cf.taste.impl.eval.AbstractDifferenceRecommenderEvaluator extends java.lang.Object implements org.apache.mahout.cf.taste.eval.RecommenderEvaluator
{
    private static final org.slf4j.Logger log;
    private final java.util.Random random;
    private float maxPreference;
    private float minPreference;

    protected void <init>()
    {
        org.apache.mahout.cf.taste.impl.eval.AbstractDifferenceRecommenderEvaluator r0;
        org.apache.mahout.common.RandomWrapper $r1;

        r0 := @this: org.apache.mahout.cf.taste.impl.eval.AbstractDifferenceRecommenderEvaluator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.apache.mahout.common.RandomUtils: org.apache.mahout.common.RandomWrapper getRandom()>();

        r0.<org.apache.mahout.cf.taste.impl.eval.AbstractDifferenceRecommenderEvaluator: java.util.Random random> = $r1;

        r0.<org.apache.mahout.cf.taste.impl.eval.AbstractDifferenceRecommenderEvaluator: float maxPreference> = #NaNF;

        r0.<org.apache.mahout.cf.taste.impl.eval.AbstractDifferenceRecommenderEvaluator: float minPreference> = #NaNF;

        return;
    }

    public final float getMaxPreference()
    {
        org.apache.mahout.cf.taste.impl.eval.AbstractDifferenceRecommenderEvaluator r0;
        float $f0;

        r0 := @this: org.apache.mahout.cf.taste.impl.eval.AbstractDifferenceRecommenderEvaluator;

        $f0 = r0.<org.apache.mahout.cf.taste.impl.eval.AbstractDifferenceRecommenderEvaluator: float maxPreference>;

        return $f0;
    }

    public final void setMaxPreference(float)
    {
        org.apache.mahout.cf.taste.impl.eval.AbstractDifferenceRecommenderEvaluator r0;
        float f0;

        r0 := @this: org.apache.mahout.cf.taste.impl.eval.AbstractDifferenceRecommenderEvaluator;

        f0 := @parameter0: float;

        r0.<org.apache.mahout.cf.taste.impl.eval.AbstractDifferenceRecommenderEvaluator: float maxPreference> = f0;

        return;
    }

    public final float getMinPreference()
    {
        org.apache.mahout.cf.taste.impl.eval.AbstractDifferenceRecommenderEvaluator r0;
        float $f0;

        r0 := @this: org.apache.mahout.cf.taste.impl.eval.AbstractDifferenceRecommenderEvaluator;

        $f0 = r0.<org.apache.mahout.cf.taste.impl.eval.AbstractDifferenceRecommenderEvaluator: float minPreference>;

        return $f0;
    }

    public final void setMinPreference(float)
    {
        org.apache.mahout.cf.taste.impl.eval.AbstractDifferenceRecommenderEvaluator r0;
        float f0;

        r0 := @this: org.apache.mahout.cf.taste.impl.eval.AbstractDifferenceRecommenderEvaluator;

        f0 := @parameter0: float;

        r0.<org.apache.mahout.cf.taste.impl.eval.AbstractDifferenceRecommenderEvaluator: float minPreference> = f0;

        return;
    }

    public double evaluate(org.apache.mahout.cf.taste.eval.RecommenderBuilder, org.apache.mahout.cf.taste.eval.DataModelBuilder, org.apache.mahout.cf.taste.model.DataModel, double, double) throws org.apache.mahout.cf.taste.common.TasteException
    {
        org.apache.mahout.cf.taste.impl.eval.AbstractDifferenceRecommenderEvaluator r0;
        org.apache.mahout.cf.taste.eval.RecommenderBuilder r1;
        org.apache.mahout.cf.taste.eval.DataModelBuilder r2;
        org.apache.mahout.cf.taste.model.DataModel r3, $r27;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7;
        int i0, $i6, $i7, $i8, $i9;
        org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator r6;
        org.apache.mahout.cf.taste.recommender.Recommender r7;
        byte $b1, $b2, $b3, $b4, $b5;
        org.slf4j.Logger $r10, $r23;
        java.lang.Double $r11, $r24;
        java.util.Random $r12;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r14, $r15, $r16, $r19, $r20, $r21, r29, r30;
        java.lang.String $r17, $r22;
        long l10;
        org.apache.mahout.cf.taste.impl.common.FastByIDMap r31, r32;
        org.apache.mahout.cf.taste.impl.model.GenericDataModel r33;

        r0 := @this: org.apache.mahout.cf.taste.impl.eval.AbstractDifferenceRecommenderEvaluator;

        r1 := @parameter0: org.apache.mahout.cf.taste.eval.RecommenderBuilder;

        r2 := @parameter1: org.apache.mahout.cf.taste.eval.DataModelBuilder;

        r3 := @parameter2: org.apache.mahout.cf.taste.model.DataModel;

        d0 := @parameter3: double;

        d1 := @parameter4: double;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r3);

        $b1 = d0 cmpl 0.0;

        if $b1 < 0 goto label1;

        $b4 = d0 cmpg 1.0;

        if $b4 > 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        r29 = new java.lang.StringBuilder;

        specialinvoke r29.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid trainingPercentage: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Must be: 0.0 <= trainingPercentage <= 1.0");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, $r17);

        $b5 = d1 cmpl 0.0;

        if $b5 < 0 goto label3;

        $b3 = d1 cmpg 1.0;

        if $b3 > 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        r30 = new java.lang.StringBuilder;

        specialinvoke r30.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid evaluationPercentage: ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d1);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Must be: 0.0 <= evaluationPercentage <= 1.0");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, $r22);

        $r23 = <org.apache.mahout.cf.taste.impl.eval.AbstractDifferenceRecommenderEvaluator: org.slf4j.Logger log>;

        $r24 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        interfaceinvoke $r23.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Beginning evaluation using {} of {}", $r24, r3);

        i0 = interfaceinvoke r3.<org.apache.mahout.cf.taste.model.DataModel: int getNumUsers()>();

        r31 = new org.apache.mahout.cf.taste.impl.common.FastByIDMap;

        $d4 = (double) i0;

        $d5 = d1 * $d4;

        $i6 = (int) $d5;

        $i7 = 1 + $i6;

        specialinvoke r31.<org.apache.mahout.cf.taste.impl.common.FastByIDMap: void <init>(int)>($i7);

        r32 = new org.apache.mahout.cf.taste.impl.common.FastByIDMap;

        $d6 = (double) i0;

        $d7 = d1 * $d6;

        $i8 = (int) $d7;

        $i9 = 1 + $i8;

        specialinvoke r32.<org.apache.mahout.cf.taste.impl.common.FastByIDMap: void <init>(int)>($i9);

        r6 = interfaceinvoke r3.<org.apache.mahout.cf.taste.model.DataModel: org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator getUserIDs()>();

     label5:
        $z2 = interfaceinvoke r6.<org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        l10 = interfaceinvoke r6.<org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator: long nextLong()>();

        $r12 = r0.<org.apache.mahout.cf.taste.impl.eval.AbstractDifferenceRecommenderEvaluator: java.util.Random random>;

        $d3 = virtualinvoke $r12.<java.util.Random: double nextDouble()>();

        $b2 = $d3 cmpg d1;

        if $b2 >= 0 goto label5;

        specialinvoke r0.<org.apache.mahout.cf.taste.impl.eval.AbstractDifferenceRecommenderEvaluator: void splitOneUsersPrefs(double,org.apache.mahout.cf.taste.impl.common.FastByIDMap,org.apache.mahout.cf.taste.impl.common.FastByIDMap,long,org.apache.mahout.cf.taste.model.DataModel)>(d0, r31, r32, l10, r3);

        goto label5;

     label6:
        if r2 != null goto label7;

        r33 = new org.apache.mahout.cf.taste.impl.model.GenericDataModel;

        $r27 = r33;

        specialinvoke r33.<org.apache.mahout.cf.taste.impl.model.GenericDataModel: void <init>(org.apache.mahout.cf.taste.impl.common.FastByIDMap)>(r31);

        goto label8;

     label7:
        $r27 = interfaceinvoke r2.<org.apache.mahout.cf.taste.eval.DataModelBuilder: org.apache.mahout.cf.taste.model.DataModel buildDataModel(org.apache.mahout.cf.taste.impl.common.FastByIDMap)>(r31);

     label8:
        r7 = interfaceinvoke r1.<org.apache.mahout.cf.taste.eval.RecommenderBuilder: org.apache.mahout.cf.taste.recommender.Recommender buildRecommender(org.apache.mahout.cf.taste.model.DataModel)>($r27);

        d2 = specialinvoke r0.<org.apache.mahout.cf.taste.impl.eval.AbstractDifferenceRecommenderEvaluator: double getEvaluation(org.apache.mahout.cf.taste.impl.common.FastByIDMap,org.apache.mahout.cf.taste.recommender.Recommender)>(r32, r7);

        $r10 = <org.apache.mahout.cf.taste.impl.eval.AbstractDifferenceRecommenderEvaluator: org.slf4j.Logger log>;

        $r11 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d2);

        interfaceinvoke $r10.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Evaluation result: {}", $r11);

        return d2;
    }

    private void splitOneUsersPrefs(double, org.apache.mahout.cf.taste.impl.common.FastByIDMap, org.apache.mahout.cf.taste.impl.common.FastByIDMap, long, org.apache.mahout.cf.taste.model.DataModel) throws org.apache.mahout.cf.taste.common.TasteException
    {
        org.apache.mahout.cf.taste.impl.eval.AbstractDifferenceRecommenderEvaluator r0;
        double d0, $d1;
        org.apache.mahout.cf.taste.impl.common.FastByIDMap r1, r2;
        long l0, $l2;
        org.apache.mahout.cf.taste.model.DataModel r3;
        org.apache.mahout.cf.taste.model.PreferenceArray r4;
        int i1, i4;
        org.apache.mahout.cf.taste.impl.model.GenericUserPreferenceArray $r7, $r9;
        org.apache.mahout.cf.taste.impl.model.GenericPreference $r10;
        java.util.Random $r11;
        float $f0;
        byte $b3;
        java.util.ArrayList $r12, $r13, r14, r15;

        r0 := @this: org.apache.mahout.cf.taste.impl.eval.AbstractDifferenceRecommenderEvaluator;

        d0 := @parameter0: double;

        r1 := @parameter1: org.apache.mahout.cf.taste.impl.common.FastByIDMap;

        r2 := @parameter2: org.apache.mahout.cf.taste.impl.common.FastByIDMap;

        l0 := @parameter3: long;

        r3 := @parameter4: org.apache.mahout.cf.taste.model.DataModel;

        r14 = null;

        r15 = null;

        r4 = interfaceinvoke r3.<org.apache.mahout.cf.taste.model.DataModel: org.apache.mahout.cf.taste.model.PreferenceArray getPreferencesFromUser(long)>(l0);

        i1 = interfaceinvoke r4.<org.apache.mahout.cf.taste.model.PreferenceArray: int length()>();

        i4 = 0;

     label1:
        if i4 >= i1 goto label6;

        $r10 = new org.apache.mahout.cf.taste.impl.model.GenericPreference;

        $l2 = interfaceinvoke r4.<org.apache.mahout.cf.taste.model.PreferenceArray: long getItemID(int)>(i4);

        $f0 = interfaceinvoke r4.<org.apache.mahout.cf.taste.model.PreferenceArray: float getValue(int)>(i4);

        specialinvoke $r10.<org.apache.mahout.cf.taste.impl.model.GenericPreference: void <init>(long,long,float)>(l0, $l2, $f0);

        $r11 = r0.<org.apache.mahout.cf.taste.impl.eval.AbstractDifferenceRecommenderEvaluator: java.util.Random random>;

        $d1 = virtualinvoke $r11.<java.util.Random: double nextDouble()>();

        $b3 = $d1 cmpg d0;

        if $b3 >= 0 goto label3;

        if r14 != null goto label2;

        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>(int)>(3);

        r14 = $r13;

     label2:
        interfaceinvoke r14.<java.util.List: boolean add(java.lang.Object)>($r10);

        goto label5;

     label3:
        if r15 != null goto label4;

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>(int)>(3);

        r15 = $r12;

     label4:
        interfaceinvoke r15.<java.util.List: boolean add(java.lang.Object)>($r10);

     label5:
        i4 = i4 + 1;

        goto label1;

     label6:
        if r14 == null goto label7;

        $r7 = new org.apache.mahout.cf.taste.impl.model.GenericUserPreferenceArray;

        specialinvoke $r7.<org.apache.mahout.cf.taste.impl.model.GenericUserPreferenceArray: void <init>(java.util.List)>(r14);

        virtualinvoke r1.<org.apache.mahout.cf.taste.impl.common.FastByIDMap: java.lang.Object put(long,java.lang.Object)>(l0, $r7);

        if r15 == null goto label7;

        $r9 = new org.apache.mahout.cf.taste.impl.model.GenericUserPreferenceArray;

        specialinvoke $r9.<org.apache.mahout.cf.taste.impl.model.GenericUserPreferenceArray: void <init>(java.util.List)>(r15);

        virtualinvoke r2.<org.apache.mahout.cf.taste.impl.common.FastByIDMap: java.lang.Object put(long,java.lang.Object)>(l0, $r9);

     label7:
        return;
    }

    private float capEstimatedPreference(float)
    {
        org.apache.mahout.cf.taste.impl.eval.AbstractDifferenceRecommenderEvaluator r0;
        float f0, $f1, $f2, $f3, $f4;
        byte $b0, $b1;

        r0 := @this: org.apache.mahout.cf.taste.impl.eval.AbstractDifferenceRecommenderEvaluator;

        f0 := @parameter0: float;

        $f1 = r0.<org.apache.mahout.cf.taste.impl.eval.AbstractDifferenceRecommenderEvaluator: float maxPreference>;

        $b0 = f0 cmpl $f1;

        if $b0 <= 0 goto label1;

        $f4 = r0.<org.apache.mahout.cf.taste.impl.eval.AbstractDifferenceRecommenderEvaluator: float maxPreference>;

        return $f4;

     label1:
        $f2 = r0.<org.apache.mahout.cf.taste.impl.eval.AbstractDifferenceRecommenderEvaluator: float minPreference>;

        $b1 = f0 cmpg $f2;

        if $b1 >= 0 goto label2;

        $f3 = r0.<org.apache.mahout.cf.taste.impl.eval.AbstractDifferenceRecommenderEvaluator: float minPreference>;

        return $f3;

     label2:
        return f0;
    }

    private double getEvaluation(org.apache.mahout.cf.taste.impl.common.FastByIDMap, org.apache.mahout.cf.taste.recommender.Recommender) throws org.apache.mahout.cf.taste.common.TasteException
    {
        org.apache.mahout.cf.taste.impl.eval.AbstractDifferenceRecommenderEvaluator r0;
        org.apache.mahout.cf.taste.impl.common.FastByIDMap r1;
        org.apache.mahout.cf.taste.recommender.Recommender r2;
        java.util.Map$Entry r5;
        java.util.ArrayList $r6;
        java.util.concurrent.atomic.AtomicInteger $r7;
        java.util.Set $r8;
        boolean $z0;
        org.slf4j.Logger $r9;
        int $i0;
        java.lang.Integer $r10;
        double $d0;
        org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev $r11;
        org.apache.mahout.cf.taste.impl.eval.AbstractDifferenceRecommenderEvaluator$PreferenceEstimateCallable $r12;
        java.lang.Object $r13, $r15, $r16;
        java.lang.Long $r14;
        long $l1;
        org.apache.mahout.cf.taste.model.PreferenceArray $r17;
        java.util.Iterator r18;

        r0 := @this: org.apache.mahout.cf.taste.impl.eval.AbstractDifferenceRecommenderEvaluator;

        r1 := @parameter0: org.apache.mahout.cf.taste.impl.common.FastByIDMap;

        r2 := @parameter1: org.apache.mahout.cf.taste.recommender.Recommender;

        virtualinvoke r0.<org.apache.mahout.cf.taste.impl.eval.AbstractDifferenceRecommenderEvaluator: void reset()>();

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        $r7 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r7.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        $r8 = virtualinvoke r1.<org.apache.mahout.cf.taste.impl.common.FastByIDMap: java.util.Set entrySet()>();

        r18 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r18.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r13 = interfaceinvoke r18.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r13;

        $r12 = new org.apache.mahout.cf.taste.impl.eval.AbstractDifferenceRecommenderEvaluator$PreferenceEstimateCallable;

        $r15 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r14 = (java.lang.Long) $r15;

        $l1 = virtualinvoke $r14.<java.lang.Long: long longValue()>();

        $r16 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r17 = (org.apache.mahout.cf.taste.model.PreferenceArray) $r16;

        specialinvoke $r12.<org.apache.mahout.cf.taste.impl.eval.AbstractDifferenceRecommenderEvaluator$PreferenceEstimateCallable: void <init>(org.apache.mahout.cf.taste.impl.eval.AbstractDifferenceRecommenderEvaluator,org.apache.mahout.cf.taste.recommender.Recommender,long,org.apache.mahout.cf.taste.model.PreferenceArray,java.util.concurrent.atomic.AtomicInteger)>(r0, r2, $l1, $r17, $r7);

        interfaceinvoke $r6.<java.util.Collection: boolean add(java.lang.Object)>($r12);

        goto label1;

     label2:
        $r9 = <org.apache.mahout.cf.taste.impl.eval.AbstractDifferenceRecommenderEvaluator: org.slf4j.Logger log>;

        $i0 = interfaceinvoke $r6.<java.util.Collection: int size()>();

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r9.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Beginning evaluation of {} users", $r10);

        $r11 = new org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev;

        specialinvoke $r11.<org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev: void <init>()>();

        staticinvoke <org.apache.mahout.cf.taste.impl.eval.AbstractDifferenceRecommenderEvaluator: void execute(java.util.Collection,java.util.concurrent.atomic.AtomicInteger,org.apache.mahout.cf.taste.impl.common.RunningAverageAndStdDev)>($r6, $r7, $r11);

        $d0 = virtualinvoke r0.<org.apache.mahout.cf.taste.impl.eval.AbstractDifferenceRecommenderEvaluator: double computeFinalEvaluation()>();

        return $d0;
    }

    protected static void execute(java.util.Collection, java.util.concurrent.atomic.AtomicInteger, org.apache.mahout.cf.taste.impl.common.RunningAverageAndStdDev) throws org.apache.mahout.cf.taste.common.TasteException
    {
        java.util.Collection r0, r3;
        java.util.concurrent.atomic.AtomicInteger r1;
        org.apache.mahout.cf.taste.impl.common.RunningAverageAndStdDev r2;
        int i0, $i1;
        java.util.concurrent.ExecutorService r4;
        java.util.Iterator r5;
        java.util.concurrent.Future r6;
        java.lang.Runtime $r7;
        org.slf4j.Logger $r8;
        java.lang.Integer $r9, $r10;
        java.util.concurrent.TimeUnit $r11;
        boolean $z0;
        java.lang.Object $r12;
        org.apache.mahout.cf.taste.common.TasteException $r14, $r19, $r20;
        java.lang.InterruptedException $r15, $r16;
        java.lang.Throwable $r17, $r21;
        java.util.concurrent.ExecutionException $r18;
        java.util.List r22;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.util.concurrent.atomic.AtomicInteger;

        r2 := @parameter2: org.apache.mahout.cf.taste.impl.common.RunningAverageAndStdDev;

        r3 = staticinvoke <org.apache.mahout.cf.taste.impl.eval.AbstractDifferenceRecommenderEvaluator: java.util.Collection wrapWithStatsCallables(java.lang.Iterable,java.util.concurrent.atomic.AtomicInteger,org.apache.mahout.cf.taste.impl.common.RunningAverageAndStdDev)>(r0, r1, r2);

        $r7 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        i0 = virtualinvoke $r7.<java.lang.Runtime: int availableProcessors()>();

        r4 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int)>(i0);

        $r8 = <org.apache.mahout.cf.taste.impl.eval.AbstractDifferenceRecommenderEvaluator: org.slf4j.Logger log>;

        $i1 = interfaceinvoke r3.<java.util.Collection: int size()>();

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r8.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Starting timing of {} tasks in {} threads", $r10, $r9);

     label1:
        r22 = interfaceinvoke r4.<java.util.concurrent.ExecutorService: java.util.List invokeAll(java.util.Collection)>(r3);

        r5 = interfaceinvoke r22.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r12 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.concurrent.Future) $r12;

        interfaceinvoke r6.<java.util.concurrent.Future: java.lang.Object get()>();

        goto label2;

     label3:
        $r16 := @caughtexception;

        $r19 = new org.apache.mahout.cf.taste.common.TasteException;

        specialinvoke $r19.<org.apache.mahout.cf.taste.common.TasteException: void <init>(java.lang.Throwable)>($r16);

        throw $r19;

     label4:
        $r18 := @caughtexception;

        $r20 = new org.apache.mahout.cf.taste.common.TasteException;

        $r21 = virtualinvoke $r18.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        specialinvoke $r20.<org.apache.mahout.cf.taste.common.TasteException: void <init>(java.lang.Throwable)>($r21);

        throw $r20;

     label5:
        interfaceinvoke r4.<java.util.concurrent.ExecutorService: void shutdown()>();

     label6:
        $r11 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        interfaceinvoke r4.<java.util.concurrent.ExecutorService: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>(10L, $r11);

     label7:
        goto label9;

     label8:
        $r15 := @caughtexception;

        $r14 = new org.apache.mahout.cf.taste.common.TasteException;

        $r17 = virtualinvoke $r15.<java.lang.InterruptedException: java.lang.Throwable getCause()>();

        specialinvoke $r14.<org.apache.mahout.cf.taste.common.TasteException: void <init>(java.lang.Throwable)>($r17);

        throw $r14;

     label9:
        return;

        catch java.lang.InterruptedException from label1 to label3 with label3;
        catch java.util.concurrent.ExecutionException from label1 to label3 with label4;
        catch java.lang.InterruptedException from label6 to label7 with label8;
    }

    private static java.util.Collection wrapWithStatsCallables(java.lang.Iterable, java.util.concurrent.atomic.AtomicInteger, org.apache.mahout.cf.taste.impl.common.RunningAverageAndStdDev)
    {
        java.lang.Iterable r0;
        java.util.concurrent.atomic.AtomicInteger r1;
        org.apache.mahout.cf.taste.impl.common.RunningAverageAndStdDev r2;
        java.util.Iterator r4;
        java.util.concurrent.Callable r5;
        java.util.ArrayList $r6;
        boolean $z1, $z3;
        java.lang.Object $r7;
        int $i0, $i1, i2;
        org.apache.mahout.cf.taste.impl.eval.StatsCallable $r8;

        r0 := @parameter0: java.lang.Iterable;

        r1 := @parameter1: java.util.concurrent.atomic.AtomicInteger;

        r2 := @parameter2: org.apache.mahout.cf.taste.impl.common.RunningAverageAndStdDev;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        i2 = 0;

        r4 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.concurrent.Callable) $r7;

        $i0 = i2;

        i2 = i2 + 1;

        $i1 = $i0 % 1000;

        if $i1 != 0 goto label2;

        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        $r8 = new org.apache.mahout.cf.taste.impl.eval.StatsCallable;

        specialinvoke $r8.<org.apache.mahout.cf.taste.impl.eval.StatsCallable: void <init>(java.util.concurrent.Callable,boolean,org.apache.mahout.cf.taste.impl.common.RunningAverageAndStdDev,java.util.concurrent.atomic.AtomicInteger)>(r5, $z3, r2, r1);

        interfaceinvoke $r6.<java.util.Collection: boolean add(java.lang.Object)>($r8);

        goto label1;

     label4:
        return $r6;
    }

    protected abstract void reset();

    protected abstract void processOneEstimate(float, org.apache.mahout.cf.taste.model.Preference);

    protected abstract double computeFinalEvaluation();

    static org.slf4j.Logger access$000()
    {
        org.slf4j.Logger $r0;

        $r0 = <org.apache.mahout.cf.taste.impl.eval.AbstractDifferenceRecommenderEvaluator: org.slf4j.Logger log>;

        return $r0;
    }

    static float access$100(org.apache.mahout.cf.taste.impl.eval.AbstractDifferenceRecommenderEvaluator, float)
    {
        org.apache.mahout.cf.taste.impl.eval.AbstractDifferenceRecommenderEvaluator r0;
        float f0, $f1;

        r0 := @parameter0: org.apache.mahout.cf.taste.impl.eval.AbstractDifferenceRecommenderEvaluator;

        f0 := @parameter1: float;

        $f1 = specialinvoke r0.<org.apache.mahout.cf.taste.impl.eval.AbstractDifferenceRecommenderEvaluator: float capEstimatedPreference(float)>(f0);

        return $f1;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "org/apache/mahout/cf/taste/impl/eval/AbstractDifferenceRecommenderEvaluator");

        <org.apache.mahout.cf.taste.impl.eval.AbstractDifferenceRecommenderEvaluator: org.slf4j.Logger log> = $r0;

        return;
    }
}
