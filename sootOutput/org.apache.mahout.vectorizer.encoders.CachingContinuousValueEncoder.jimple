public class org.apache.mahout.vectorizer.encoders.CachingContinuousValueEncoder extends org.apache.mahout.vectorizer.encoders.ContinuousValueEncoder
{
    private final int dataSize;
    private org.apache.mahout.math.map.OpenIntIntHashMap[] caches;

    public void <init>(java.lang.String, int)
    {
        org.apache.mahout.vectorizer.encoders.CachingContinuousValueEncoder r0;
        java.lang.String r1;
        int i0;

        r0 := @this: org.apache.mahout.vectorizer.encoders.CachingContinuousValueEncoder;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<org.apache.mahout.vectorizer.encoders.ContinuousValueEncoder: void <init>(java.lang.String)>(r1);

        r0.<org.apache.mahout.vectorizer.encoders.CachingContinuousValueEncoder: int dataSize> = i0;

        specialinvoke r0.<org.apache.mahout.vectorizer.encoders.CachingContinuousValueEncoder: void initCaches()>();

        return;
    }

    private void initCaches()
    {
        org.apache.mahout.vectorizer.encoders.CachingContinuousValueEncoder r0;
        int $i0, $i1, i2;
        org.apache.mahout.math.map.OpenIntIntHashMap[] $r1, $r3;
        org.apache.mahout.math.map.OpenIntIntHashMap $r2;

        r0 := @this: org.apache.mahout.vectorizer.encoders.CachingContinuousValueEncoder;

        $i0 = virtualinvoke r0.<org.apache.mahout.vectorizer.encoders.CachingContinuousValueEncoder: int getProbes()>();

        $r1 = newarray (org.apache.mahout.math.map.OpenIntIntHashMap)[$i0];

        r0.<org.apache.mahout.vectorizer.encoders.CachingContinuousValueEncoder: org.apache.mahout.math.map.OpenIntIntHashMap[] caches> = $r1;

        i2 = 0;

     label1:
        $i1 = virtualinvoke r0.<org.apache.mahout.vectorizer.encoders.CachingContinuousValueEncoder: int getProbes()>();

        if i2 >= $i1 goto label2;

        $r3 = r0.<org.apache.mahout.vectorizer.encoders.CachingContinuousValueEncoder: org.apache.mahout.math.map.OpenIntIntHashMap[] caches>;

        $r2 = new org.apache.mahout.math.map.OpenIntIntHashMap;

        specialinvoke $r2.<org.apache.mahout.math.map.OpenIntIntHashMap: void <init>()>();

        $r3[i2] = $r2;

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    org.apache.mahout.math.map.OpenIntIntHashMap[] getCaches()
    {
        org.apache.mahout.vectorizer.encoders.CachingContinuousValueEncoder r0;
        org.apache.mahout.math.map.OpenIntIntHashMap[] $r1;

        r0 := @this: org.apache.mahout.vectorizer.encoders.CachingContinuousValueEncoder;

        $r1 = r0.<org.apache.mahout.vectorizer.encoders.CachingContinuousValueEncoder: org.apache.mahout.math.map.OpenIntIntHashMap[] caches>;

        return $r1;
    }

    public void setProbes(int)
    {
        org.apache.mahout.vectorizer.encoders.CachingContinuousValueEncoder r0;
        int i0;

        r0 := @this: org.apache.mahout.vectorizer.encoders.CachingContinuousValueEncoder;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.mahout.vectorizer.encoders.ContinuousValueEncoder: void setProbes(int)>(i0);

        specialinvoke r0.<org.apache.mahout.vectorizer.encoders.CachingContinuousValueEncoder: void initCaches()>();

        return;
    }

    protected int hashForProbe(byte[], int, java.lang.String, int)
    {
        org.apache.mahout.vectorizer.encoders.CachingContinuousValueEncoder r0;
        byte[] r1;
        int i0, i1, i2, i3, $i4, $i5, $i6;
        java.lang.String r2, $r9;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r8;
        org.apache.mahout.math.map.OpenIntIntHashMap $r10, $r12, $r15;
        org.apache.mahout.math.map.OpenIntIntHashMap[] $r11, $r13, $r14;
        boolean $z0, $z2;

        r0 := @this: org.apache.mahout.vectorizer.encoders.CachingContinuousValueEncoder;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        i1 := @parameter3: int;

        $i4 = r0.<org.apache.mahout.vectorizer.encoders.CachingContinuousValueEncoder: int dataSize>;

        if i0 != $i4 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dataSize argument [");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] does not match expected dataSize [");

        $i5 = r0.<org.apache.mahout.vectorizer.encoders.CachingContinuousValueEncoder: int dataSize>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z2, $r9);

        i2 = staticinvoke <java.util.Arrays: int hashCode(byte[])>(r1);

        $r11 = r0.<org.apache.mahout.vectorizer.encoders.CachingContinuousValueEncoder: org.apache.mahout.math.map.OpenIntIntHashMap[] caches>;

        $r10 = $r11[i1];

        $z0 = virtualinvoke $r10.<org.apache.mahout.math.map.OpenIntIntHashMap: boolean containsKey(int)>(i2);

        if $z0 == 0 goto label3;

        $r14 = r0.<org.apache.mahout.vectorizer.encoders.CachingContinuousValueEncoder: org.apache.mahout.math.map.OpenIntIntHashMap[] caches>;

        $r15 = $r14[i1];

        $i6 = virtualinvoke $r15.<org.apache.mahout.math.map.OpenIntIntHashMap: int get(int)>(i2);

        return $i6;

     label3:
        i3 = specialinvoke r0.<org.apache.mahout.vectorizer.encoders.ContinuousValueEncoder: int hashForProbe(byte[],int,java.lang.String,int)>(r1, i0, r2, i1);

        $r13 = r0.<org.apache.mahout.vectorizer.encoders.CachingContinuousValueEncoder: org.apache.mahout.math.map.OpenIntIntHashMap[] caches>;

        $r12 = $r13[i1];

        virtualinvoke $r12.<org.apache.mahout.math.map.OpenIntIntHashMap: boolean put(int,int)>(i2, i3);

        return i3;
    }
}
