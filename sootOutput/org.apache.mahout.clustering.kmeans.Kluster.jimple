public class org.apache.mahout.clustering.kmeans.Kluster extends org.apache.mahout.clustering.iterator.DistanceMeasureCluster
{
    private boolean converged;

    public void <init>()
    {
        org.apache.mahout.clustering.kmeans.Kluster r0;

        r0 := @this: org.apache.mahout.clustering.kmeans.Kluster;

        specialinvoke r0.<org.apache.mahout.clustering.iterator.DistanceMeasureCluster: void <init>()>();

        return;
    }

    public void <init>(org.apache.mahout.math.Vector, int, org.apache.mahout.common.distance.DistanceMeasure)
    {
        org.apache.mahout.clustering.kmeans.Kluster r0;
        org.apache.mahout.math.Vector r1;
        int i0;
        org.apache.mahout.common.distance.DistanceMeasure r2;

        r0 := @this: org.apache.mahout.clustering.kmeans.Kluster;

        r1 := @parameter0: org.apache.mahout.math.Vector;

        i0 := @parameter1: int;

        r2 := @parameter2: org.apache.mahout.common.distance.DistanceMeasure;

        specialinvoke r0.<org.apache.mahout.clustering.iterator.DistanceMeasureCluster: void <init>(org.apache.mahout.math.Vector,int,org.apache.mahout.common.distance.DistanceMeasure)>(r1, i0, r2);

        return;
    }

    public static java.lang.String formatCluster(org.apache.mahout.clustering.kmeans.Kluster)
    {
        org.apache.mahout.clustering.kmeans.Kluster r0;
        java.lang.StringBuilder $r1, $r3, $r4, $r7;
        java.lang.String $r2, $r6, $r8;
        org.apache.mahout.math.Vector $r5;

        r0 := @parameter0: org.apache.mahout.clustering.kmeans.Kluster;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r0.<org.apache.mahout.clustering.kmeans.Kluster: java.lang.String getIdentifier()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r5 = virtualinvoke r0.<org.apache.mahout.clustering.kmeans.Kluster: org.apache.mahout.math.Vector computeCentroid()>();

        $r6 = interfaceinvoke $r5.<org.apache.mahout.math.Vector: java.lang.String asFormatString()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public java.lang.String asFormatString()
    {
        org.apache.mahout.clustering.kmeans.Kluster r0;
        java.lang.String $r1;

        r0 := @this: org.apache.mahout.clustering.kmeans.Kluster;

        $r1 = staticinvoke <org.apache.mahout.clustering.kmeans.Kluster: java.lang.String formatCluster(org.apache.mahout.clustering.kmeans.Kluster)>(r0);

        return $r1;
    }

    public void write(java.io.DataOutput) throws java.io.IOException
    {
        org.apache.mahout.clustering.kmeans.Kluster r0;
        java.io.DataOutput r1;
        boolean $z0;

        r0 := @this: org.apache.mahout.clustering.kmeans.Kluster;

        r1 := @parameter0: java.io.DataOutput;

        specialinvoke r0.<org.apache.mahout.clustering.iterator.DistanceMeasureCluster: void write(java.io.DataOutput)>(r1);

        $z0 = r0.<org.apache.mahout.clustering.kmeans.Kluster: boolean converged>;

        interfaceinvoke r1.<java.io.DataOutput: void writeBoolean(boolean)>($z0);

        return;
    }

    public void readFields(java.io.DataInput) throws java.io.IOException
    {
        org.apache.mahout.clustering.kmeans.Kluster r0;
        java.io.DataInput r1;
        boolean $z0;

        r0 := @this: org.apache.mahout.clustering.kmeans.Kluster;

        r1 := @parameter0: java.io.DataInput;

        specialinvoke r0.<org.apache.mahout.clustering.iterator.DistanceMeasureCluster: void readFields(java.io.DataInput)>(r1);

        $z0 = interfaceinvoke r1.<java.io.DataInput: boolean readBoolean()>();

        r0.<org.apache.mahout.clustering.kmeans.Kluster: boolean converged> = $z0;

        return;
    }

    public java.lang.String toString()
    {
        org.apache.mahout.clustering.kmeans.Kluster r0;
        java.lang.String $r1;

        r0 := @this: org.apache.mahout.clustering.kmeans.Kluster;

        $r1 = virtualinvoke r0.<org.apache.mahout.clustering.kmeans.Kluster: java.lang.String asFormatString(java.lang.String[])>(null);

        return $r1;
    }

    public java.lang.String getIdentifier()
    {
        org.apache.mahout.clustering.kmeans.Kluster r0;
        java.lang.StringBuilder $r1, $r2, $r3;
        boolean $z0;
        int $i0;
        java.lang.String $r4, $r5;

        r0 := @this: org.apache.mahout.clustering.kmeans.Kluster;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $z0 = r0.<org.apache.mahout.clustering.kmeans.Kluster: boolean converged>;

        if $z0 == 0 goto label1;

        $r5 = "VL-";

        goto label2;

     label1:
        $r5 = "CL-";

     label2:
        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $i0 = virtualinvoke r0.<org.apache.mahout.clustering.kmeans.Kluster: int getId()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public boolean computeConvergence(org.apache.mahout.common.distance.DistanceMeasure, double)
    {
        org.apache.mahout.clustering.kmeans.Kluster r0;
        org.apache.mahout.common.distance.DistanceMeasure r1;
        double d0, $d1, $d2;
        org.apache.mahout.math.Vector r2, $r3;
        byte $b0;
        boolean $z0, $z1;

        r0 := @this: org.apache.mahout.clustering.kmeans.Kluster;

        r1 := @parameter0: org.apache.mahout.common.distance.DistanceMeasure;

        d0 := @parameter1: double;

        r2 = virtualinvoke r0.<org.apache.mahout.clustering.kmeans.Kluster: org.apache.mahout.math.Vector computeCentroid()>();

        $d1 = interfaceinvoke r2.<org.apache.mahout.math.Vector: double getLengthSquared()>();

        $r3 = virtualinvoke r0.<org.apache.mahout.clustering.kmeans.Kluster: org.apache.mahout.math.Vector getCenter()>();

        $d2 = interfaceinvoke r1.<org.apache.mahout.common.distance.DistanceMeasure: double distance(double,org.apache.mahout.math.Vector,org.apache.mahout.math.Vector)>($d1, r2, $r3);

        $b0 = $d2 cmpg d0;

        if $b0 > 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        r0.<org.apache.mahout.clustering.kmeans.Kluster: boolean converged> = $z1;

        $z0 = r0.<org.apache.mahout.clustering.kmeans.Kluster: boolean converged>;

        return $z0;
    }

    public boolean isConverged()
    {
        org.apache.mahout.clustering.kmeans.Kluster r0;
        boolean $z0;

        r0 := @this: org.apache.mahout.clustering.kmeans.Kluster;

        $z0 = r0.<org.apache.mahout.clustering.kmeans.Kluster: boolean converged>;

        return $z0;
    }

    protected void setConverged(boolean)
    {
        org.apache.mahout.clustering.kmeans.Kluster r0;
        boolean z0;

        r0 := @this: org.apache.mahout.clustering.kmeans.Kluster;

        z0 := @parameter0: boolean;

        r0.<org.apache.mahout.clustering.kmeans.Kluster: boolean converged> = z0;

        return;
    }

    public boolean calculateConvergence(double)
    {
        org.apache.mahout.clustering.kmeans.Kluster r0;
        double d0, $d1, $d2;
        org.apache.mahout.math.Vector r1, $r3;
        org.apache.mahout.common.distance.DistanceMeasure $r2;
        byte $b0;
        boolean $z0, $z1;

        r0 := @this: org.apache.mahout.clustering.kmeans.Kluster;

        d0 := @parameter0: double;

        r1 = virtualinvoke r0.<org.apache.mahout.clustering.kmeans.Kluster: org.apache.mahout.math.Vector computeCentroid()>();

        $r2 = virtualinvoke r0.<org.apache.mahout.clustering.kmeans.Kluster: org.apache.mahout.common.distance.DistanceMeasure getMeasure()>();

        $d1 = interfaceinvoke r1.<org.apache.mahout.math.Vector: double getLengthSquared()>();

        $r3 = virtualinvoke r0.<org.apache.mahout.clustering.kmeans.Kluster: org.apache.mahout.math.Vector getCenter()>();

        $d2 = interfaceinvoke $r2.<org.apache.mahout.common.distance.DistanceMeasure: double distance(double,org.apache.mahout.math.Vector,org.apache.mahout.math.Vector)>($d1, r1, $r3);

        $b0 = $d2 cmpg d0;

        if $b0 > 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        r0.<org.apache.mahout.clustering.kmeans.Kluster: boolean converged> = $z1;

        $z0 = r0.<org.apache.mahout.clustering.kmeans.Kluster: boolean converged>;

        return $z0;
    }
}
