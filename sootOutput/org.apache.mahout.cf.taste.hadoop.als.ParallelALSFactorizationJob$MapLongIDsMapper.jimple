class org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob$MapLongIDsMapper extends org.apache.hadoop.mapreduce.Mapper
{
    private int tokenPos;
    private final org.apache.mahout.math.VarIntWritable index;
    private final org.apache.mahout.math.VarLongWritable idWritable;

    void <init>()
    {
        org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob$MapLongIDsMapper r0;
        org.apache.mahout.math.VarIntWritable $r1;
        org.apache.mahout.math.VarLongWritable $r2;

        r0 := @this: org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob$MapLongIDsMapper;

        specialinvoke r0.<org.apache.hadoop.mapreduce.Mapper: void <init>()>();

        $r1 = new org.apache.mahout.math.VarIntWritable;

        specialinvoke $r1.<org.apache.mahout.math.VarIntWritable: void <init>()>();

        r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob$MapLongIDsMapper: org.apache.mahout.math.VarIntWritable index> = $r1;

        $r2 = new org.apache.mahout.math.VarLongWritable;

        specialinvoke $r2.<org.apache.mahout.math.VarLongWritable: void <init>()>();

        r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob$MapLongIDsMapper: org.apache.mahout.math.VarLongWritable idWritable> = $r2;

        return;
    }

    protected void setup(org.apache.hadoop.mapreduce.Mapper$Context) throws java.io.IOException, java.lang.InterruptedException
    {
        org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob$MapLongIDsMapper r0;
        org.apache.hadoop.mapreduce.Mapper$Context r1;
        org.apache.hadoop.conf.Configuration $r2;
        java.lang.String $r3;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob$MapLongIDsMapper;

        r1 := @parameter0: org.apache.hadoop.mapreduce.Mapper$Context;

        $r2 = virtualinvoke r1.<org.apache.hadoop.mapreduce.Mapper$Context: org.apache.hadoop.conf.Configuration getConfiguration()>();

        $r3 = <org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: java.lang.String TOKEN_POS>;

        $i0 = virtualinvoke $r2.<org.apache.hadoop.conf.Configuration: int getInt(java.lang.String,int)>($r3, -1);

        r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob$MapLongIDsMapper: int tokenPos> = $i0;

        $i1 = r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob$MapLongIDsMapper: int tokenPos>;

        if $i1 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean)>($z0);

        return;
    }

    protected void map(org.apache.hadoop.io.LongWritable, org.apache.hadoop.io.Text, org.apache.hadoop.mapreduce.Mapper$Context) throws java.io.IOException, java.lang.InterruptedException
    {
        org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob$MapLongIDsMapper r0;
        org.apache.hadoop.io.LongWritable r1;
        org.apache.hadoop.io.Text r2;
        org.apache.hadoop.mapreduce.Mapper$Context r3;
        java.lang.String[] r4;
        long l0;
        java.lang.String $r5, $r6;
        int $i1, $i2;
        org.apache.mahout.math.VarIntWritable $r7, $r10;
        org.apache.mahout.math.VarLongWritable $r8, $r9;

        r0 := @this: org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob$MapLongIDsMapper;

        r1 := @parameter0: org.apache.hadoop.io.LongWritable;

        r2 := @parameter1: org.apache.hadoop.io.Text;

        r3 := @parameter2: org.apache.hadoop.mapreduce.Mapper$Context;

        $r5 = virtualinvoke r2.<org.apache.hadoop.io.Text: java.lang.String toString()>();

        r4 = staticinvoke <org.apache.mahout.cf.taste.hadoop.TasteHadoopUtils: java.lang.String[] splitPrefTokens(java.lang.CharSequence)>($r5);

        $i1 = r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob$MapLongIDsMapper: int tokenPos>;

        $r6 = r4[$i1];

        l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r6);

        $r7 = r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob$MapLongIDsMapper: org.apache.mahout.math.VarIntWritable index>;

        $i2 = staticinvoke <org.apache.mahout.cf.taste.hadoop.TasteHadoopUtils: int idToIndex(long)>(l0);

        virtualinvoke $r7.<org.apache.mahout.math.VarIntWritable: void set(int)>($i2);

        $r8 = r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob$MapLongIDsMapper: org.apache.mahout.math.VarLongWritable idWritable>;

        virtualinvoke $r8.<org.apache.mahout.math.VarLongWritable: void set(long)>(l0);

        $r10 = r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob$MapLongIDsMapper: org.apache.mahout.math.VarIntWritable index>;

        $r9 = r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob$MapLongIDsMapper: org.apache.mahout.math.VarLongWritable idWritable>;

        virtualinvoke r3.<org.apache.hadoop.mapreduce.Mapper$Context: void write(java.lang.Object,java.lang.Object)>($r10, $r9);

        return;
    }

    protected volatile void map(java.lang.Object, java.lang.Object, org.apache.hadoop.mapreduce.Mapper$Context) throws java.io.IOException, java.lang.InterruptedException
    {
        org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob$MapLongIDsMapper r0;
        java.lang.Object r1, r2;
        org.apache.hadoop.mapreduce.Mapper$Context r3;
        org.apache.hadoop.io.Text $r4;
        org.apache.hadoop.io.LongWritable $r5;

        r0 := @this: org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob$MapLongIDsMapper;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: org.apache.hadoop.mapreduce.Mapper$Context;

        $r5 = (org.apache.hadoop.io.LongWritable) r1;

        $r4 = (org.apache.hadoop.io.Text) r2;

        virtualinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob$MapLongIDsMapper: void map(org.apache.hadoop.io.LongWritable,org.apache.hadoop.io.Text,org.apache.hadoop.mapreduce.Mapper$Context)>($r5, $r4, r3);

        return;
    }
}
