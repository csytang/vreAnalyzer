public class org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit extends org.apache.hadoop.mapreduce.InputSplit implements org.apache.hadoop.io.Writable
{
    private static final java.lang.String[] NO_LOCATIONS;
    private int firstId;
    private int nbTrees;
    private java.lang.Long seed;

    public void <init>()
    {
        org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit r0;

        r0 := @this: org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit;

        specialinvoke r0.<org.apache.hadoop.mapreduce.InputSplit: void <init>()>();

        return;
    }

    public void <init>(int, int, java.lang.Long)
    {
        org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit r0;
        int i0, i1;
        java.lang.Long r1;

        r0 := @this: org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.Long;

        specialinvoke r0.<org.apache.hadoop.mapreduce.InputSplit: void <init>()>();

        r0.<org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit: int firstId> = i0;

        r0.<org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit: int nbTrees> = i1;

        r0.<org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit: java.lang.Long seed> = r1;

        return;
    }

    public int getFirstId()
    {
        org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit r0;
        int $i0;

        r0 := @this: org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit;

        $i0 = r0.<org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit: int firstId>;

        return $i0;
    }

    public int getNbTrees()
    {
        org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit r0;
        int $i0;

        r0 := @this: org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit;

        $i0 = r0.<org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit: int nbTrees>;

        return $i0;
    }

    public java.lang.Long getSeed()
    {
        org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit r0;
        java.lang.Long $r1;

        r0 := @this: org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit;

        $r1 = r0.<org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit: java.lang.Long seed>;

        return $r1;
    }

    public long getLength() throws java.io.IOException
    {
        org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit r0;
        int $i0;
        long $l1;

        r0 := @this: org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit;

        $i0 = r0.<org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit: int nbTrees>;

        $l1 = (long) $i0;

        return $l1;
    }

    public java.lang.String[] getLocations() throws java.io.IOException
    {
        org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit r0;
        java.lang.String[] $r1;

        r0 := @this: org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit;

        $r1 = <org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit: java.lang.String[] NO_LOCATIONS>;

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2, $i3;
        java.lang.Long $r3, $r4, $r5, $r6;

        r0 := @this: org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit) r1;

        $i1 = r0.<org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit: int firstId>;

        $i0 = r2.<org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit: int firstId>;

        if $i1 != $i0 goto label3;

        $i3 = r0.<org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit: int nbTrees>;

        $i2 = r2.<org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit: int nbTrees>;

        if $i3 == $i2 goto label4;

     label3:
        return 0;

     label4:
        $r3 = r0.<org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit: java.lang.Long seed>;

        if $r3 != null goto label7;

        $r6 = r2.<org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit: java.lang.Long seed>;

        if $r6 != null goto label5;

        $z2 = 1;

        goto label6;

     label5:
        $z2 = 0;

     label6:
        return $z2;

     label7:
        $r5 = r0.<org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit: java.lang.Long seed>;

        $r4 = r2.<org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit: java.lang.Long seed>;

        $z1 = virtualinvoke $r5.<java.lang.Long: boolean equals(java.lang.Object)>($r4);

        return $z1;
    }

    public int hashCode()
    {
        org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit r0;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Long $r1, $r2;

        r0 := @this: org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit;

        $i1 = r0.<org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit: int firstId>;

        $i0 = r0.<org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit: int nbTrees>;

        $i2 = $i1 + $i0;

        $r1 = r0.<org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit: java.lang.Long seed>;

        if $r1 != null goto label1;

        $i4 = 0;

        goto label2;

     label1:
        $r2 = r0.<org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit: java.lang.Long seed>;

        $i4 = virtualinvoke $r2.<java.lang.Long: int intValue()>();

     label2:
        $i3 = $i2 + $i4;

        return $i3;
    }

    public java.lang.String toString()
    {
        org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit r0;
        java.lang.Object[] $r1;
        int $i0, $i1;
        java.util.Locale $r2;
        java.lang.Integer $r3, $r4;
        java.lang.Long $r5;
        java.lang.String $r6;

        r0 := @this: org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit;

        $r2 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r1 = newarray (java.lang.Object)[3];

        $i0 = r0.<org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit: int firstId>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r1[0] = $r3;

        $i1 = r0.<org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit: int nbTrees>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r1[1] = $r4;

        $r5 = r0.<org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit: java.lang.Long seed>;

        $r1[2] = $r5;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r2, "[firstId:%d, nbTrees:%d, seed:%d]", $r1);

        return $r6;
    }

    public void readFields(java.io.DataInput) throws java.io.IOException
    {
        org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit r0;
        java.io.DataInput r1;
        boolean z0;
        int $i0, $i1;
        long $l2;
        java.lang.Long $r3;

        r0 := @this: org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit;

        r1 := @parameter0: java.io.DataInput;

        $i0 = interfaceinvoke r1.<java.io.DataInput: int readInt()>();

        r0.<org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit: int firstId> = $i0;

        $i1 = interfaceinvoke r1.<java.io.DataInput: int readInt()>();

        r0.<org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit: int nbTrees> = $i1;

        z0 = interfaceinvoke r1.<java.io.DataInput: boolean readBoolean()>();

        if z0 == 0 goto label1;

        $l2 = interfaceinvoke r1.<java.io.DataInput: long readLong()>();

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        goto label2;

     label1:
        $r3 = null;

     label2:
        r0.<org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit: java.lang.Long seed> = $r3;

        return;
    }

    public void write(java.io.DataOutput) throws java.io.IOException
    {
        org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit r0;
        java.io.DataOutput r1;
        int $i0, $i1;
        java.lang.Long $r2, $r3, $r4;
        long $l2;
        boolean $z0;

        r0 := @this: org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit;

        r1 := @parameter0: java.io.DataOutput;

        $i0 = r0.<org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit: int firstId>;

        interfaceinvoke r1.<java.io.DataOutput: void writeInt(int)>($i0);

        $i1 = r0.<org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit: int nbTrees>;

        interfaceinvoke r1.<java.io.DataOutput: void writeInt(int)>($i1);

        $r2 = r0.<org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit: java.lang.Long seed>;

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        interfaceinvoke r1.<java.io.DataOutput: void writeBoolean(boolean)>($z0);

        $r3 = r0.<org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit: java.lang.Long seed>;

        if $r3 == null goto label3;

        $r4 = r0.<org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit: java.lang.Long seed>;

        $l2 = virtualinvoke $r4.<java.lang.Long: long longValue()>();

        interfaceinvoke r1.<java.io.DataOutput: void writeLong(long)>($l2);

     label3:
        return;
    }

    public static org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit read(java.io.DataInput) throws java.io.IOException
    {
        java.io.DataInput r0;
        org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit $r2;

        r0 := @parameter0: java.io.DataInput;

        $r2 = new org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit;

        specialinvoke $r2.<org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit: void <init>()>();

        virtualinvoke $r2.<org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit: void readFields(java.io.DataInput)>(r0);

        return $r2;
    }

    static int access$000(org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit)
    {
        org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit r0;
        int $i0;

        r0 := @parameter0: org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit;

        $i0 = r0.<org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit: int nbTrees>;

        return $i0;
    }

    static int access$100(org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit)
    {
        org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit r0;
        int $i0;

        r0 := @parameter0: org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit;

        $i0 = r0.<org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit: int firstId>;

        return $i0;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0;

        $r0 = newarray (java.lang.String)[0];

        <org.apache.mahout.classifier.df.mapreduce.inmem.InMemInputFormat$InMemInputSplit: java.lang.String[] NO_LOCATIONS> = $r0;

        return;
    }
}
