public final class org.apache.mahout.classifier.sequencelearning.hmm.HmmTrainer extends java.lang.Object
{

    private void <init>()
    {
        org.apache.mahout.classifier.sequencelearning.hmm.HmmTrainer r0;

        r0 := @this: org.apache.mahout.classifier.sequencelearning.hmm.HmmTrainer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.apache.mahout.classifier.sequencelearning.hmm.HmmModel trainSupervised(int, int, int[], int[], double)
    {
        int i0, i1, i3, i4, i5, i6, i7;
        int[] r0, r1;
        byte $b2;
        org.apache.mahout.math.DenseMatrix $r5, $r6;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, d8, $d9, d11, d12;
        org.apache.mahout.math.DenseVector $r9;
        org.apache.mahout.classifier.sequencelearning.hmm.HmmModel $r11;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: int[];

        r1 := @parameter3: int[];

        d8 := @parameter4: double;

        $b2 = d8 cmpl 0.0;

        if $b2 != 0 goto label01;

        $d9 = 4.9E-324;

        goto label02;

     label01:
        $d9 = d8;

     label02:
        $r5 = new org.apache.mahout.math.DenseMatrix;

        specialinvoke $r5.<org.apache.mahout.math.DenseMatrix: void <init>(int,int)>(i0, i0);

        $r6 = new org.apache.mahout.math.DenseMatrix;

        specialinvoke $r6.<org.apache.mahout.math.DenseMatrix: void <init>(int,int)>(i0, i1);

        virtualinvoke $r5.<org.apache.mahout.math.DenseMatrix: org.apache.mahout.math.Matrix assign(double)>($d9);

        virtualinvoke $r6.<org.apache.mahout.math.DenseMatrix: org.apache.mahout.math.Matrix assign(double)>($d9);

        $r9 = new org.apache.mahout.math.DenseVector;

        specialinvoke $r9.<org.apache.mahout.math.DenseVector: void <init>(int)>(i0);

        $d0 = (double) i0;

        $d1 = 1.0 / $d0;

        virtualinvoke $r9.<org.apache.mahout.math.DenseVector: org.apache.mahout.math.Vector assign(double)>($d1);

        staticinvoke <org.apache.mahout.classifier.sequencelearning.hmm.HmmTrainer: void countTransitions(org.apache.mahout.math.Matrix,org.apache.mahout.math.Matrix,int[],int[])>($r5, $r6, r0, r1);

        i3 = 0;

     label03:
        if i3 >= i0 goto label12;

        d11 = 0.0;

        i4 = 0;

     label04:
        if i4 >= i0 goto label05;

        $d7 = virtualinvoke $r5.<org.apache.mahout.math.DenseMatrix: double getQuick(int,int)>(i3, i4);

        d11 = d11 + $d7;

        i4 = i4 + 1;

        goto label04;

     label05:
        i5 = 0;

     label06:
        if i5 >= i0 goto label07;

        $d5 = virtualinvoke $r5.<org.apache.mahout.math.DenseMatrix: double getQuick(int,int)>(i3, i5);

        $d6 = $d5 / d11;

        virtualinvoke $r5.<org.apache.mahout.math.DenseMatrix: void setQuick(int,int,double)>(i3, i5, $d6);

        i5 = i5 + 1;

        goto label06;

     label07:
        d12 = 0.0;

        i6 = 0;

     label08:
        if i6 >= i1 goto label09;

        $d4 = virtualinvoke $r6.<org.apache.mahout.math.DenseMatrix: double getQuick(int,int)>(i3, i6);

        d12 = d12 + $d4;

        i6 = i6 + 1;

        goto label08;

     label09:
        i7 = 0;

     label10:
        if i7 >= i1 goto label11;

        $d2 = virtualinvoke $r6.<org.apache.mahout.math.DenseMatrix: double getQuick(int,int)>(i3, i7);

        $d3 = $d2 / d12;

        virtualinvoke $r6.<org.apache.mahout.math.DenseMatrix: void setQuick(int,int,double)>(i3, i7, $d3);

        i7 = i7 + 1;

        goto label10;

     label11:
        i3 = i3 + 1;

        goto label03;

     label12:
        $r11 = new org.apache.mahout.classifier.sequencelearning.hmm.HmmModel;

        specialinvoke $r11.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: void <init>(org.apache.mahout.math.Matrix,org.apache.mahout.math.Matrix,org.apache.mahout.math.Vector)>($r5, $r6, $r9);

        return $r11;
    }

    private static void countTransitions(org.apache.mahout.math.Matrix, org.apache.mahout.math.Matrix, int[], int[])
    {
        org.apache.mahout.math.Matrix r0, r1;
        int[] r2, r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @parameter0: org.apache.mahout.math.Matrix;

        r1 := @parameter1: org.apache.mahout.math.Matrix;

        r2 := @parameter2: int[];

        r3 := @parameter3: int[];

        $i2 = r3[0];

        $i3 = r2[0];

        $i1 = r3[0];

        $i0 = r2[0];

        $d0 = interfaceinvoke r1.<org.apache.mahout.math.Matrix: double getQuick(int,int)>($i1, $i0);

        $d1 = $d0 + 1.0;

        interfaceinvoke r1.<org.apache.mahout.math.Matrix: void setQuick(int,int,double)>($i2, $i3, $d1);

        i15 = 1;

     label1:
        $i4 = lengthof r2;

        if i15 >= $i4 goto label2;

        $i5 = i15 - 1;

        $i10 = r3[$i5];

        $i9 = r3[i15];

        $i6 = i15 - 1;

        $i8 = r3[$i6];

        $i7 = r3[i15];

        $d3 = interfaceinvoke r0.<org.apache.mahout.math.Matrix: double getQuick(int,int)>($i8, $i7);

        $d2 = $d3 + 1.0;

        interfaceinvoke r0.<org.apache.mahout.math.Matrix: void setQuick(int,int,double)>($i10, $i9, $d2);

        $i14 = r3[i15];

        $i13 = r2[i15];

        $i11 = r3[i15];

        $i12 = r2[i15];

        $d5 = interfaceinvoke r1.<org.apache.mahout.math.Matrix: double getQuick(int,int)>($i11, $i12);

        $d4 = $d5 + 1.0;

        interfaceinvoke r1.<org.apache.mahout.math.Matrix: void setQuick(int,int,double)>($i14, $i13, $d4);

        i15 = i15 + 1;

        goto label1;

     label2:
        return;
    }

    public static org.apache.mahout.classifier.sequencelearning.hmm.HmmModel trainSupervisedSequence(int, int, java.util.Collection, java.util.Collection, double)
    {
        int i0, i1, $i3, $i4, i5, i6, i7, i8, i9, i10;
        java.util.Collection r0, r1;
        java.util.Iterator r5, r6;
        int[] r7, r17;
        byte $b2;
        org.apache.mahout.math.DenseMatrix $r8, $r9;
        org.apache.mahout.math.DenseVector $r11;
        org.apache.mahout.classifier.sequencelearning.hmm.HmmModel $r14;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, d11, $d12, d14, d15, d16;
        boolean $z0, $z1;
        java.lang.Object $r15, $r16;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: java.util.Collection;

        r1 := @parameter3: java.util.Collection;

        d11 := @parameter4: double;

        $b2 = d11 cmpl 0.0;

        if $b2 != 0 goto label01;

        $d12 = 4.9E-324;

        goto label02;

     label01:
        $d12 = d11;

     label02:
        $r9 = new org.apache.mahout.math.DenseMatrix;

        specialinvoke $r9.<org.apache.mahout.math.DenseMatrix: void <init>(int,int)>(i0, i0);

        $r8 = new org.apache.mahout.math.DenseMatrix;

        specialinvoke $r8.<org.apache.mahout.math.DenseMatrix: void <init>(int,int)>(i0, i1);

        $r11 = new org.apache.mahout.math.DenseVector;

        specialinvoke $r11.<org.apache.mahout.math.DenseVector: void <init>(int)>(i0);

        virtualinvoke $r9.<org.apache.mahout.math.DenseMatrix: org.apache.mahout.math.Matrix assign(double)>($d12);

        virtualinvoke $r8.<org.apache.mahout.math.DenseMatrix: org.apache.mahout.math.Matrix assign(double)>($d12);

        virtualinvoke $r11.<org.apache.mahout.math.DenseVector: org.apache.mahout.math.Vector assign(double)>($d12);

        r5 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

        r6 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label03:
        $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label04;

        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label04;

        $r16 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r17 = (int[]) $r16;

        $r15 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (int[]) $r15;

        $i3 = r17[0];

        $i4 = r17[0];

        $d10 = virtualinvoke $r11.<org.apache.mahout.math.DenseVector: double getQuick(int)>($i4);

        $d9 = $d10 + 1.0;

        virtualinvoke $r11.<org.apache.mahout.math.DenseVector: void setQuick(int,double)>($i3, $d9);

        staticinvoke <org.apache.mahout.classifier.sequencelearning.hmm.HmmTrainer: void countTransitions(org.apache.mahout.math.Matrix,org.apache.mahout.math.Matrix,int[],int[])>($r9, $r8, r7, r17);

        goto label03;

     label04:
        d14 = 0.0;

        i5 = 0;

     label05:
        if i5 >= i0 goto label14;

        $d3 = virtualinvoke $r11.<org.apache.mahout.math.DenseVector: double getQuick(int)>(i5);

        d14 = d14 + $d3;

        d15 = 0.0;

        i6 = 0;

     label06:
        if i6 >= i0 goto label07;

        $d8 = virtualinvoke $r9.<org.apache.mahout.math.DenseMatrix: double getQuick(int,int)>(i5, i6);

        d15 = d15 + $d8;

        i6 = i6 + 1;

        goto label06;

     label07:
        i7 = 0;

     label08:
        if i7 >= i0 goto label09;

        $d6 = virtualinvoke $r9.<org.apache.mahout.math.DenseMatrix: double getQuick(int,int)>(i5, i7);

        $d7 = $d6 / d15;

        virtualinvoke $r9.<org.apache.mahout.math.DenseMatrix: void setQuick(int,int,double)>(i5, i7, $d7);

        i7 = i7 + 1;

        goto label08;

     label09:
        d16 = 0.0;

        i8 = 0;

     label10:
        if i8 >= i1 goto label11;

        $d4 = virtualinvoke $r8.<org.apache.mahout.math.DenseMatrix: double getQuick(int,int)>(i5, i8);

        d16 = d16 + $d4;

        i8 = i8 + 1;

        goto label10;

     label11:
        i9 = 0;

     label12:
        if i9 >= i1 goto label13;

        $d2 = virtualinvoke $r8.<org.apache.mahout.math.DenseMatrix: double getQuick(int,int)>(i5, i9);

        $d5 = $d2 / d16;

        virtualinvoke $r8.<org.apache.mahout.math.DenseMatrix: void setQuick(int,int,double)>(i5, i9, $d5);

        i9 = i9 + 1;

        goto label12;

     label13:
        i5 = i5 + 1;

        goto label05;

     label14:
        i10 = 0;

     label15:
        if i10 >= i0 goto label16;

        $d1 = virtualinvoke $r11.<org.apache.mahout.math.DenseVector: double getQuick(int)>(i10);

        $d0 = $d1 / d14;

        virtualinvoke $r11.<org.apache.mahout.math.DenseVector: void setQuick(int,double)>(i10, $d0);

        i10 = i10 + 1;

        goto label15;

     label16:
        $r14 = new org.apache.mahout.classifier.sequencelearning.hmm.HmmModel;

        specialinvoke $r14.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: void <init>(org.apache.mahout.math.Matrix,org.apache.mahout.math.Matrix,org.apache.mahout.math.Vector)>($r9, $r8, $r11);

        return $r14;
    }

    public static org.apache.mahout.classifier.sequencelearning.hmm.HmmModel trainViterbi(org.apache.mahout.classifier.sequencelearning.hmm.HmmModel, int[], double, double, int, boolean)
    {
        org.apache.mahout.classifier.sequencelearning.hmm.HmmModel r0, r2, r3;
        int[] r1, r4;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, d7, $d8, d9, d10, d11;
        int i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14, i15, i16, i17, i18;
        boolean z0, $z1;
        int[][] r5;
        double[][] r6;
        org.apache.mahout.math.Matrix r7, r8;
        byte $b1;

        r0 := @parameter0: org.apache.mahout.classifier.sequencelearning.hmm.HmmModel;

        r1 := @parameter1: int[];

        d7 := @parameter2: double;

        d0 := @parameter3: double;

        i0 := @parameter4: int;

        z0 := @parameter5: boolean;

        $b1 = d7 cmpl 0.0;

        if $b1 != 0 goto label01;

        $d8 = 4.9E-324;

        goto label02;

     label01:
        $d8 = d7;

     label02:
        d9 = $d8;

        r2 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: org.apache.mahout.classifier.sequencelearning.hmm.HmmModel clone()>();

        r3 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: org.apache.mahout.classifier.sequencelearning.hmm.HmmModel clone()>();

        $i2 = lengthof r1;

        r4 = newarray (int)[$i2];

        $i4 = lengthof r1;

        $i3 = $i4 - 1;

        $i6 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        r5 = newmultiarray (int)[$i3][$i6];

        $i5 = lengthof r1;

        $i7 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        r6 = newmultiarray (double)[$i5][$i7];

        i13 = 0;

     label03:
        if i13 >= i0 goto label15;

        staticinvoke <org.apache.mahout.classifier.sequencelearning.hmm.HmmAlgorithms: void viterbiAlgorithm(int[],double[][],int[][],org.apache.mahout.classifier.sequencelearning.hmm.HmmModel,int[],boolean)>(r4, r6, r5, r2, r1, z0);

        r7 = virtualinvoke r3.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: org.apache.mahout.math.Matrix getEmissionMatrix()>();

        r8 = virtualinvoke r3.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: org.apache.mahout.math.Matrix getTransitionMatrix()>();

        interfaceinvoke r7.<org.apache.mahout.math.Matrix: org.apache.mahout.math.Matrix assign(double)>(d9);

        interfaceinvoke r8.<org.apache.mahout.math.Matrix: org.apache.mahout.math.Matrix assign(double)>(d9);

        staticinvoke <org.apache.mahout.classifier.sequencelearning.hmm.HmmTrainer: void countTransitions(org.apache.mahout.math.Matrix,org.apache.mahout.math.Matrix,int[],int[])>(r8, r7, r1, r4);

        i14 = 0;

     label04:
        $i8 = virtualinvoke r3.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        if i14 >= $i8 goto label13;

        d10 = 0.0;

        i15 = 0;

     label05:
        $i9 = virtualinvoke r3.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        if i15 >= $i9 goto label06;

        $d5 = interfaceinvoke r8.<org.apache.mahout.math.Matrix: double getQuick(int,int)>(i14, i15);

        d10 = d10 + $d5;

        i15 = i15 + 1;

        goto label05;

     label06:
        i16 = 0;

     label07:
        $i10 = virtualinvoke r3.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        if i16 >= $i10 goto label08;

        $d3 = interfaceinvoke r8.<org.apache.mahout.math.Matrix: double getQuick(int,int)>(i14, i16);

        $d6 = $d3 / d10;

        interfaceinvoke r8.<org.apache.mahout.math.Matrix: void setQuick(int,int,double)>(i14, i16, $d6);

        i16 = i16 + 1;

        goto label07;

     label08:
        d11 = 0.0;

        i17 = 0;

     label09:
        $i11 = virtualinvoke r3.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfOutputStates()>();

        if i17 >= $i11 goto label10;

        $d4 = interfaceinvoke r7.<org.apache.mahout.math.Matrix: double getQuick(int,int)>(i14, i17);

        d11 = d11 + $d4;

        i17 = i17 + 1;

        goto label09;

     label10:
        i18 = 0;

     label11:
        $i12 = virtualinvoke r3.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfOutputStates()>();

        if i18 >= $i12 goto label12;

        $d1 = interfaceinvoke r7.<org.apache.mahout.math.Matrix: double getQuick(int,int)>(i14, i18);

        $d2 = $d1 / d11;

        interfaceinvoke r7.<org.apache.mahout.math.Matrix: void setQuick(int,int,double)>(i14, i18, $d2);

        i18 = i18 + 1;

        goto label11;

     label12:
        i14 = i14 + 1;

        goto label04;

     label13:
        $z1 = staticinvoke <org.apache.mahout.classifier.sequencelearning.hmm.HmmTrainer: boolean checkConvergence(org.apache.mahout.classifier.sequencelearning.hmm.HmmModel,org.apache.mahout.classifier.sequencelearning.hmm.HmmModel,double)>(r2, r3, d0);

        if $z1 == 0 goto label14;

        goto label15;

     label14:
        virtualinvoke r2.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: void assign(org.apache.mahout.classifier.sequencelearning.hmm.HmmModel)>(r3);

        i13 = i13 + 1;

        goto label03;

     label15:
        return r3;
    }

    public static org.apache.mahout.classifier.sequencelearning.hmm.HmmModel trainBaumWelch(org.apache.mahout.classifier.sequencelearning.hmm.HmmModel, int[], double, int, boolean)
    {
        org.apache.mahout.classifier.sequencelearning.hmm.HmmModel r0, r2, r3;
        int[] r1;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, d10, d11, d12;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, i8, i9, $i10, i11, i12, i13, i14, i15;
        boolean z0, $z1;
        org.apache.mahout.math.Vector r6;
        org.apache.mahout.math.Matrix r7, r8;
        org.apache.mahout.math.DenseMatrix $r9, $r10;

        r0 := @parameter0: org.apache.mahout.classifier.sequencelearning.hmm.HmmModel;

        r1 := @parameter1: int[];

        d0 := @parameter2: double;

        i0 := @parameter3: int;

        z0 := @parameter4: boolean;

        r2 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: org.apache.mahout.classifier.sequencelearning.hmm.HmmModel clone()>();

        r3 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: org.apache.mahout.classifier.sequencelearning.hmm.HmmModel clone()>();

        i1 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        i2 = lengthof r1;

        $r9 = new org.apache.mahout.math.DenseMatrix;

        specialinvoke $r9.<org.apache.mahout.math.DenseMatrix: void <init>(int,int)>(i2, i1);

        $r10 = new org.apache.mahout.math.DenseMatrix;

        specialinvoke $r10.<org.apache.mahout.math.DenseMatrix: void <init>(int,int)>(i2, i1);

        i8 = 0;

     label01:
        if i8 >= i0 goto label17;

        r6 = virtualinvoke r3.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: org.apache.mahout.math.Vector getInitialProbabilities()>();

        r7 = virtualinvoke r3.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: org.apache.mahout.math.Matrix getEmissionMatrix()>();

        r8 = virtualinvoke r3.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: org.apache.mahout.math.Matrix getTransitionMatrix()>();

        staticinvoke <org.apache.mahout.classifier.sequencelearning.hmm.HmmAlgorithms: void forwardAlgorithm(org.apache.mahout.math.Matrix,org.apache.mahout.classifier.sequencelearning.hmm.HmmModel,int[],boolean)>($r9, r3, r1, z0);

        staticinvoke <org.apache.mahout.classifier.sequencelearning.hmm.HmmAlgorithms: void backwardAlgorithm(org.apache.mahout.math.Matrix,org.apache.mahout.classifier.sequencelearning.hmm.HmmModel,int[],boolean)>($r10, r3, r1, z0);

        if z0 == 0 goto label02;

        staticinvoke <org.apache.mahout.classifier.sequencelearning.hmm.HmmTrainer: void logScaledBaumWelch(int[],org.apache.mahout.classifier.sequencelearning.hmm.HmmModel,org.apache.mahout.math.Matrix,org.apache.mahout.math.Matrix)>(r1, r3, $r9, $r10);

        goto label03;

     label02:
        staticinvoke <org.apache.mahout.classifier.sequencelearning.hmm.HmmTrainer: void unscaledBaumWelch(int[],org.apache.mahout.classifier.sequencelearning.hmm.HmmModel,org.apache.mahout.math.Matrix,org.apache.mahout.math.Matrix)>(r1, r3, $r9, $r10);

     label03:
        d10 = 0.0;

        i9 = 0;

     label04:
        $i10 = virtualinvoke r3.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        if i9 >= $i10 goto label13;

        d11 = 0.0;

        i11 = 0;

     label05:
        $i6 = virtualinvoke r3.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        if i11 >= $i6 goto label06;

        $d9 = interfaceinvoke r8.<org.apache.mahout.math.Matrix: double getQuick(int,int)>(i9, i11);

        d11 = d11 + $d9;

        i11 = i11 + 1;

        goto label05;

     label06:
        i12 = 0;

     label07:
        $i7 = virtualinvoke r3.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        if i12 >= $i7 goto label08;

        $d8 = interfaceinvoke r8.<org.apache.mahout.math.Matrix: double getQuick(int,int)>(i9, i12);

        $d7 = $d8 / d11;

        interfaceinvoke r8.<org.apache.mahout.math.Matrix: void setQuick(int,int,double)>(i9, i12, $d7);

        i12 = i12 + 1;

        goto label07;

     label08:
        d12 = 0.0;

        i13 = 0;

     label09:
        $i4 = virtualinvoke r3.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfOutputStates()>();

        if i13 >= $i4 goto label10;

        $d5 = interfaceinvoke r7.<org.apache.mahout.math.Matrix: double getQuick(int,int)>(i9, i13);

        d12 = d12 + $d5;

        i13 = i13 + 1;

        goto label09;

     label10:
        i14 = 0;

     label11:
        $i5 = virtualinvoke r3.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfOutputStates()>();

        if i14 >= $i5 goto label12;

        $d3 = interfaceinvoke r7.<org.apache.mahout.math.Matrix: double getQuick(int,int)>(i9, i14);

        $d6 = $d3 / d12;

        interfaceinvoke r7.<org.apache.mahout.math.Matrix: void setQuick(int,int,double)>(i9, i14, $d6);

        i14 = i14 + 1;

        goto label11;

     label12:
        $d4 = interfaceinvoke r6.<org.apache.mahout.math.Vector: double getQuick(int)>(i9);

        d10 = d10 + $d4;

        i9 = i9 + 1;

        goto label04;

     label13:
        i15 = 0;

     label14:
        $i3 = virtualinvoke r3.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        if i15 >= $i3 goto label15;

        $d1 = interfaceinvoke r6.<org.apache.mahout.math.Vector: double getQuick(int)>(i15);

        $d2 = $d1 / d10;

        interfaceinvoke r6.<org.apache.mahout.math.Vector: void setQuick(int,double)>(i15, $d2);

        i15 = i15 + 1;

        goto label14;

     label15:
        $z1 = staticinvoke <org.apache.mahout.classifier.sequencelearning.hmm.HmmTrainer: boolean checkConvergence(org.apache.mahout.classifier.sequencelearning.hmm.HmmModel,org.apache.mahout.classifier.sequencelearning.hmm.HmmModel,double)>(r2, r3, d0);

        if $z1 == 0 goto label16;

        goto label17;

     label16:
        virtualinvoke r2.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: void assign(org.apache.mahout.classifier.sequencelearning.hmm.HmmModel)>(r3);

        i8 = i8 + 1;

        goto label01;

     label17:
        return r3;
    }

    private static void unscaledBaumWelch(int[], org.apache.mahout.classifier.sequencelearning.hmm.HmmModel, org.apache.mahout.math.Matrix, org.apache.mahout.math.Matrix)
    {
        int[] r0;
        org.apache.mahout.classifier.sequencelearning.hmm.HmmModel r1;
        org.apache.mahout.math.Matrix r2, r3, r5, r6;
        org.apache.mahout.math.Vector r4;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, d16, d17;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14, i15, i16, i17, i18;

        r0 := @parameter0: int[];

        r1 := @parameter1: org.apache.mahout.classifier.sequencelearning.hmm.HmmModel;

        r2 := @parameter2: org.apache.mahout.math.Matrix;

        r3 := @parameter3: org.apache.mahout.math.Matrix;

        r4 = virtualinvoke r1.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: org.apache.mahout.math.Vector getInitialProbabilities()>();

        r5 = virtualinvoke r1.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: org.apache.mahout.math.Matrix getEmissionMatrix()>();

        r6 = virtualinvoke r1.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: org.apache.mahout.math.Matrix getTransitionMatrix()>();

        d0 = staticinvoke <org.apache.mahout.classifier.sequencelearning.hmm.HmmEvaluator: double modelLikelihood(org.apache.mahout.math.Matrix,boolean)>(r2, 0);

        i12 = 0;

     label01:
        $i1 = virtualinvoke r1.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        if i12 >= $i1 goto label02;

        $d13 = interfaceinvoke r2.<org.apache.mahout.math.Matrix: double getQuick(int,int)>(0, i12);

        $d15 = interfaceinvoke r3.<org.apache.mahout.math.Matrix: double getQuick(int,int)>(0, i12);

        $d14 = $d13 * $d15;

        interfaceinvoke r4.<org.apache.mahout.math.Vector: void setQuick(int,double)>(i12, $d14);

        i12 = i12 + 1;

        goto label01;

     label02:
        i13 = 0;

     label03:
        $i0 = virtualinvoke r1.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        if i13 >= $i0 goto label08;

        i14 = 0;

     label04:
        $i6 = virtualinvoke r1.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        if i14 >= $i6 goto label07;

        d16 = 0.0;

        i15 = 0;

     label05:
        $i8 = lengthof r0;

        $i7 = $i8 - 1;

        if i15 >= $i7 goto label06;

        $d9 = interfaceinvoke r2.<org.apache.mahout.math.Matrix: double getQuick(int,int)>(i15, i13);

        $i10 = i15 + 1;

        $i9 = r0[$i10];

        $d8 = interfaceinvoke r5.<org.apache.mahout.math.Matrix: double getQuick(int,int)>(i14, $i9);

        $d12 = $d9 * $d8;

        $i11 = i15 + 1;

        $d11 = interfaceinvoke r3.<org.apache.mahout.math.Matrix: double getQuick(int,int)>($i11, i14);

        $d10 = $d12 * $d11;

        d16 = d16 + $d10;

        i15 = i15 + 1;

        goto label05;

     label06:
        $d5 = interfaceinvoke r6.<org.apache.mahout.math.Matrix: double getQuick(int,int)>(i13, i14);

        $d6 = $d5 * d16;

        $d7 = $d6 / d0;

        interfaceinvoke r6.<org.apache.mahout.math.Matrix: void setQuick(int,int,double)>(i13, i14, $d7);

        i14 = i14 + 1;

        goto label04;

     label07:
        i13 = i13 + 1;

        goto label03;

     label08:
        i16 = 0;

     label09:
        $i3 = virtualinvoke r1.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        if i16 >= $i3 goto label15;

        i17 = 0;

     label10:
        $i2 = virtualinvoke r1.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfOutputStates()>();

        if i17 >= $i2 goto label14;

        d17 = 0.0;

        i18 = 0;

     label11:
        $i4 = lengthof r0;

        if i18 >= $i4 goto label13;

        $i5 = r0[i18];

        if $i5 != i17 goto label12;

        $d2 = interfaceinvoke r2.<org.apache.mahout.math.Matrix: double getQuick(int,int)>(i18, i16);

        $d3 = interfaceinvoke r3.<org.apache.mahout.math.Matrix: double getQuick(int,int)>(i18, i16);

        $d4 = $d2 * $d3;

        d17 = d17 + $d4;

     label12:
        i18 = i18 + 1;

        goto label11;

     label13:
        $d1 = d17 / d0;

        interfaceinvoke r5.<org.apache.mahout.math.Matrix: void setQuick(int,int,double)>(i16, i17, $d1);

        i17 = i17 + 1;

        goto label10;

     label14:
        i16 = i16 + 1;

        goto label09;

     label15:
        return;
    }

    private static void logScaledBaumWelch(int[], org.apache.mahout.classifier.sequencelearning.hmm.HmmModel, org.apache.mahout.math.Matrix, org.apache.mahout.math.Matrix)
    {
        int[] r0;
        org.apache.mahout.classifier.sequencelearning.hmm.HmmModel r1;
        org.apache.mahout.math.Matrix r2, r3, r5, r6;
        org.apache.mahout.math.Vector r4;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, d24, d25, d26, d27;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i8, $i9, $i10, $i11, $i13, i14, i15, i16, i17, i18, i19, i20;
        byte $b6, $b12;

        r0 := @parameter0: int[];

        r1 := @parameter1: org.apache.mahout.classifier.sequencelearning.hmm.HmmModel;

        r2 := @parameter2: org.apache.mahout.math.Matrix;

        r3 := @parameter3: org.apache.mahout.math.Matrix;

        r4 = virtualinvoke r1.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: org.apache.mahout.math.Vector getInitialProbabilities()>();

        r5 = virtualinvoke r1.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: org.apache.mahout.math.Matrix getEmissionMatrix()>();

        r6 = virtualinvoke r1.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: org.apache.mahout.math.Matrix getTransitionMatrix()>();

        d0 = staticinvoke <org.apache.mahout.classifier.sequencelearning.hmm.HmmEvaluator: double modelLikelihood(org.apache.mahout.math.Matrix,boolean)>(r2, 1);

        i14 = 0;

     label01:
        $i1 = virtualinvoke r1.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        if i14 >= $i1 goto label02;

        $d22 = interfaceinvoke r2.<org.apache.mahout.math.Matrix: double getQuick(int,int)>(0, i14);

        $d23 = interfaceinvoke r3.<org.apache.mahout.math.Matrix: double getQuick(int,int)>(0, i14);

        $d18 = $d22 + $d23;

        $d19 = staticinvoke <java.lang.Math: double exp(double)>($d18);

        interfaceinvoke r4.<org.apache.mahout.math.Vector: void setQuick(int,double)>(i14, $d19);

        i14 = i14 + 1;

        goto label01;

     label02:
        i15 = 0;

     label03:
        $i0 = virtualinvoke r1.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        if i15 >= $i0 goto label09;

        i16 = 0;

     label04:
        $i8 = virtualinvoke r1.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        if i16 >= $i8 goto label08;

        d24 = #-Infinity;

        i17 = 0;

     label05:
        $i7 = lengthof r0;

        $i9 = $i7 - 1;

        if i17 >= $i9 goto label07;

        $d11 = interfaceinvoke r2.<org.apache.mahout.math.Matrix: double getQuick(int,int)>(i17, i15);

        $i11 = i17 + 1;

        $i10 = r0[$i11];

        $d14 = interfaceinvoke r5.<org.apache.mahout.math.Matrix: double getQuick(int,int)>(i16, $i10);

        $d13 = staticinvoke <java.lang.Math: double log(double)>($d14);

        $d16 = $d11 + $d13;

        $i13 = i17 + 1;

        $d15 = interfaceinvoke r3.<org.apache.mahout.math.Matrix: double getQuick(int,int)>($i13, i16);

        d25 = $d16 + $d15;

        $b12 = d25 cmpl #-Infinity;

        if $b12 <= 0 goto label06;

        $d17 = d24 - d25;

        $d20 = staticinvoke <java.lang.Math: double exp(double)>($d17);

        $d21 = staticinvoke <java.lang.Math: double log1p(double)>($d20);

        d24 = d25 + $d21;

     label06:
        i17 = i17 + 1;

        goto label05;

     label07:
        $d10 = interfaceinvoke r6.<org.apache.mahout.math.Matrix: double getQuick(int,int)>(i15, i16);

        $d8 = d24 - d0;

        $d9 = staticinvoke <java.lang.Math: double exp(double)>($d8);

        $d12 = $d10 * $d9;

        interfaceinvoke r6.<org.apache.mahout.math.Matrix: void setQuick(int,int,double)>(i15, i16, $d12);

        i16 = i16 + 1;

        goto label04;

     label08:
        i15 = i15 + 1;

        goto label03;

     label09:
        i18 = 0;

     label10:
        $i3 = virtualinvoke r1.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        if i18 >= $i3 goto label16;

        i19 = 0;

     label11:
        $i2 = virtualinvoke r1.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfOutputStates()>();

        if i19 >= $i2 goto label15;

        d26 = #-Infinity;

        i20 = 0;

     label12:
        $i4 = lengthof r0;

        if i20 >= $i4 goto label14;

        $i5 = r0[i20];

        if $i5 != i19 goto label13;

        $d3 = interfaceinvoke r2.<org.apache.mahout.math.Matrix: double getQuick(int,int)>(i20, i18);

        $d4 = interfaceinvoke r3.<org.apache.mahout.math.Matrix: double getQuick(int,int)>(i20, i18);

        d27 = $d3 + $d4;

        $b6 = d27 cmpl #-Infinity;

        if $b6 <= 0 goto label13;

        $d7 = d26 - d27;

        $d5 = staticinvoke <java.lang.Math: double exp(double)>($d7);

        $d6 = staticinvoke <java.lang.Math: double log1p(double)>($d5);

        d26 = d27 + $d6;

     label13:
        i20 = i20 + 1;

        goto label12;

     label14:
        $d1 = d26 - d0;

        $d2 = staticinvoke <java.lang.Math: double exp(double)>($d1);

        interfaceinvoke r5.<org.apache.mahout.math.Matrix: void setQuick(int,int,double)>(i18, i19, $d2);

        i19 = i19 + 1;

        goto label11;

     label15:
        i18 = i18 + 1;

        goto label10;

     label16:
        return;
    }

    private static boolean checkConvergence(org.apache.mahout.classifier.sequencelearning.hmm.HmmModel, org.apache.mahout.classifier.sequencelearning.hmm.HmmModel, double)
    {
        org.apache.mahout.classifier.sequencelearning.hmm.HmmModel r0, r1;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, d9, d10, d11, d12, d13;
        org.apache.mahout.math.Matrix r2, r3, r4, r5;
        int $i0, $i1, $i3, $i4, i5, i6, i7, i8;
        byte $b2;
        boolean $z0;

        r0 := @parameter0: org.apache.mahout.classifier.sequencelearning.hmm.HmmModel;

        r1 := @parameter1: org.apache.mahout.classifier.sequencelearning.hmm.HmmModel;

        d0 := @parameter2: double;

        r2 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: org.apache.mahout.math.Matrix getTransitionMatrix()>();

        r3 = virtualinvoke r1.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: org.apache.mahout.math.Matrix getTransitionMatrix()>();

        d9 = 0.0;

        i5 = 0;

     label01:
        $i0 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        if i5 >= $i0 goto label04;

        i6 = 0;

     label02:
        $i4 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        if i6 >= $i4 goto label03;

        $d8 = interfaceinvoke r2.<org.apache.mahout.math.Matrix: double getQuick(int,int)>(i5, i6);

        $d6 = interfaceinvoke r3.<org.apache.mahout.math.Matrix: double getQuick(int,int)>(i5, i6);

        d10 = $d8 - $d6;

        $d7 = d10 * d10;

        d9 = d9 + $d7;

        i6 = i6 + 1;

        goto label02;

     label03:
        i5 = i5 + 1;

        goto label01;

     label04:
        d11 = staticinvoke <java.lang.Math: double sqrt(double)>(d9);

        d12 = 0.0;

        r5 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: org.apache.mahout.math.Matrix getEmissionMatrix()>();

        r4 = virtualinvoke r1.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: org.apache.mahout.math.Matrix getEmissionMatrix()>();

        i7 = 0;

     label05:
        $i1 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        if i7 >= $i1 goto label08;

        i8 = 0;

     label06:
        $i3 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfOutputStates()>();

        if i8 >= $i3 goto label07;

        $d3 = interfaceinvoke r5.<org.apache.mahout.math.Matrix: double getQuick(int,int)>(i7, i8);

        $d5 = interfaceinvoke r4.<org.apache.mahout.math.Matrix: double getQuick(int,int)>(i7, i8);

        d1 = $d3 - $d5;

        $d4 = d1 * d1;

        d12 = d12 + $d4;

        i8 = i8 + 1;

        goto label06;

     label07:
        i7 = i7 + 1;

        goto label05;

     label08:
        $d2 = staticinvoke <java.lang.Math: double sqrt(double)>(d12);

        d13 = d11 + $d2;

        $b2 = d13 cmpg d0;

        if $b2 >= 0 goto label09;

        $z0 = 1;

        goto label10;

     label09:
        $z0 = 0;

     label10:
        return $z0;
    }
}
