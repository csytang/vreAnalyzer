public class org.apache.mahout.vectorizer.term.TermCountMapper extends org.apache.hadoop.mapreduce.Mapper
{

    public void <init>()
    {
        org.apache.mahout.vectorizer.term.TermCountMapper r0;

        r0 := @this: org.apache.mahout.vectorizer.term.TermCountMapper;

        specialinvoke r0.<org.apache.hadoop.mapreduce.Mapper: void <init>()>();

        return;
    }

    protected void map(org.apache.hadoop.io.Text, org.apache.mahout.common.StringTuple, org.apache.hadoop.mapreduce.Mapper$Context) throws java.io.IOException, java.lang.InterruptedException
    {
        org.apache.mahout.vectorizer.term.TermCountMapper r0;
        org.apache.hadoop.io.Text r1;
        org.apache.mahout.common.StringTuple r2;
        org.apache.hadoop.mapreduce.Mapper$Context r3;
        java.util.Iterator r5;
        java.lang.String r6;
        org.apache.mahout.math.map.OpenObjectLongHashMap $r7;
        java.util.List $r8;
        boolean $z0, $z2;
        org.apache.mahout.vectorizer.term.TermCountMapper$1 $r9;
        java.lang.Object $r10;
        long $l0, $l1;

        r0 := @this: org.apache.mahout.vectorizer.term.TermCountMapper;

        r1 := @parameter0: org.apache.hadoop.io.Text;

        r2 := @parameter1: org.apache.mahout.common.StringTuple;

        r3 := @parameter2: org.apache.hadoop.mapreduce.Mapper$Context;

        $r7 = new org.apache.mahout.math.map.OpenObjectLongHashMap;

        specialinvoke $r7.<org.apache.mahout.math.map.OpenObjectLongHashMap: void <init>()>();

        $r8 = virtualinvoke r2.<org.apache.mahout.common.StringTuple: java.util.List getEntries()>();

        r5 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r10 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r10;

        $z2 = virtualinvoke $r7.<org.apache.mahout.math.map.OpenObjectLongHashMap: boolean containsKey(java.lang.Object)>(r6);

        if $z2 == 0 goto label2;

        $l0 = virtualinvoke $r7.<org.apache.mahout.math.map.OpenObjectLongHashMap: long get(java.lang.Object)>(r6);

        $l1 = $l0 + 1L;

        virtualinvoke $r7.<org.apache.mahout.math.map.OpenObjectLongHashMap: boolean put(java.lang.Object,long)>(r6, $l1);

        goto label1;

     label2:
        virtualinvoke $r7.<org.apache.mahout.math.map.OpenObjectLongHashMap: boolean put(java.lang.Object,long)>(r6, 1L);

        goto label1;

     label3:
        $r9 = new org.apache.mahout.vectorizer.term.TermCountMapper$1;

        specialinvoke $r9.<org.apache.mahout.vectorizer.term.TermCountMapper$1: void <init>(org.apache.mahout.vectorizer.term.TermCountMapper,org.apache.hadoop.mapreduce.Mapper$Context)>(r0, r3);

        virtualinvoke $r7.<org.apache.mahout.math.map.OpenObjectLongHashMap: boolean forEachPair(org.apache.mahout.math.function.ObjectLongProcedure)>($r9);

        return;
    }

    protected volatile void map(java.lang.Object, java.lang.Object, org.apache.hadoop.mapreduce.Mapper$Context) throws java.io.IOException, java.lang.InterruptedException
    {
        org.apache.mahout.vectorizer.term.TermCountMapper r0;
        java.lang.Object r1, r2;
        org.apache.hadoop.mapreduce.Mapper$Context r3;
        org.apache.mahout.common.StringTuple $r4;
        org.apache.hadoop.io.Text $r5;

        r0 := @this: org.apache.mahout.vectorizer.term.TermCountMapper;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: org.apache.hadoop.mapreduce.Mapper$Context;

        $r5 = (org.apache.hadoop.io.Text) r1;

        $r4 = (org.apache.mahout.common.StringTuple) r2;

        virtualinvoke r0.<org.apache.mahout.vectorizer.term.TermCountMapper: void map(org.apache.hadoop.io.Text,org.apache.mahout.common.StringTuple,org.apache.hadoop.mapreduce.Mapper$Context)>($r5, $r4, r3);

        return;
    }
}
