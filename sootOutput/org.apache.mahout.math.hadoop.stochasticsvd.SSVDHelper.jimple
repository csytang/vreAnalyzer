public final class org.apache.mahout.math.hadoop.stochasticsvd.SSVDHelper extends java.lang.Object
{
    private static final java.util.regex.Pattern OUTPUT_FILE_PATTERN;
    static final java.util.Comparator PARTITION_COMPARATOR;

    private void <init>()
    {
        org.apache.mahout.math.hadoop.stochasticsvd.SSVDHelper r0;

        r0 := @this: org.apache.mahout.math.hadoop.stochasticsvd.SSVDHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static org.apache.mahout.math.Vector loadVector(org.apache.hadoop.fs.Path, org.apache.hadoop.conf.Configuration) throws java.io.IOException
    {
        org.apache.hadoop.fs.Path r0;
        org.apache.hadoop.conf.Configuration r1;
        org.apache.mahout.math.VectorWritable r3;
        org.apache.mahout.math.Vector r4;
        org.apache.mahout.common.iterator.sequencefile.SequenceFileDirValueIterator $r6;
        org.apache.mahout.common.iterator.sequencefile.PathType $r7;
        boolean $z0, $z1;
        java.lang.Object $r8;
        java.io.IOException $r9, $r10;
        java.lang.Throwable $r11;

        r0 := @parameter0: org.apache.hadoop.fs.Path;

        r1 := @parameter1: org.apache.hadoop.conf.Configuration;

        $r6 = new org.apache.mahout.common.iterator.sequencefile.SequenceFileDirValueIterator;

        $r7 = <org.apache.mahout.common.iterator.sequencefile.PathType: org.apache.mahout.common.iterator.sequencefile.PathType GLOB>;

        specialinvoke $r6.<org.apache.mahout.common.iterator.sequencefile.SequenceFileDirValueIterator: void <init>(org.apache.hadoop.fs.Path,org.apache.mahout.common.iterator.sequencefile.PathType,org.apache.hadoop.fs.PathFilter,java.util.Comparator,boolean,org.apache.hadoop.conf.Configuration)>(r0, $r7, null, null, 1, r1);

     label1:
        $z0 = virtualinvoke $r6.<org.apache.mahout.common.iterator.sequencefile.SequenceFileDirValueIterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        $r10 = new java.io.IOException;

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>("Empty input while reading vector");

        throw $r10;

     label2:
        $r8 = virtualinvoke $r6.<org.apache.mahout.common.iterator.sequencefile.SequenceFileDirValueIterator: java.lang.Object next()>();

        r3 = (org.apache.mahout.math.VectorWritable) $r8;

        $z1 = virtualinvoke $r6.<org.apache.mahout.common.iterator.sequencefile.SequenceFileDirValueIterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r9 = new java.io.IOException;

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>("Unexpected data after the end of vector file");

        throw $r9;

     label3:
        r4 = virtualinvoke r3.<org.apache.mahout.math.VectorWritable: org.apache.mahout.math.Vector get()>();

     label4:
        staticinvoke <com.google.common.io.Closeables: void close(java.io.Closeable,boolean)>($r6, 1);

        return r4;

     label5:
        $r11 := @caughtexception;

     label6:
        staticinvoke <com.google.common.io.Closeables: void close(java.io.Closeable,boolean)>($r6, 1);

        throw $r11;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public static void saveVector(org.apache.mahout.math.Vector, org.apache.hadoop.fs.Path, org.apache.hadoop.conf.Configuration) throws java.io.IOException
    {
        org.apache.mahout.math.Vector r0;
        org.apache.hadoop.fs.Path r1;
        org.apache.hadoop.conf.Configuration r2;
        org.apache.hadoop.fs.FileSystem r4;
        org.apache.mahout.math.VectorWritable $r8;
        org.apache.hadoop.io.SequenceFile$Writer $r9;
        org.apache.hadoop.io.IntWritable $r10;
        java.lang.Throwable $r11, $r13, $r14, r15;

        r0 := @parameter0: org.apache.mahout.math.Vector;

        r1 := @parameter1: org.apache.hadoop.fs.Path;

        r2 := @parameter2: org.apache.hadoop.conf.Configuration;

        $r8 = new org.apache.mahout.math.VectorWritable;

        specialinvoke $r8.<org.apache.mahout.math.VectorWritable: void <init>(org.apache.mahout.math.Vector)>(r0);

        r4 = staticinvoke <org.apache.hadoop.fs.FileSystem: org.apache.hadoop.fs.FileSystem get(org.apache.hadoop.conf.Configuration)>(r2);

        $r9 = new org.apache.hadoop.io.SequenceFile$Writer;

        specialinvoke $r9.<org.apache.hadoop.io.SequenceFile$Writer: void <init>(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.Path,java.lang.Class,java.lang.Class)>(r4, r2, r1, class "org/apache/hadoop/io/IntWritable", class "org/apache/mahout/math/VectorWritable");

        r15 = null;

     label01:
        $r10 = new org.apache.hadoop.io.IntWritable;

        specialinvoke $r10.<org.apache.hadoop.io.IntWritable: void <init>()>();

        virtualinvoke $r9.<org.apache.hadoop.io.SequenceFile$Writer: void append(org.apache.hadoop.io.Writable,org.apache.hadoop.io.Writable)>($r10, $r8);

     label02:
        if $r9 == null goto label11;

        virtualinvoke $r9.<org.apache.hadoop.io.SequenceFile$Writer: void close()>();

        goto label11;

     label03:
        $r14 := @caughtexception;

        r15 = $r14;

        throw $r14;

     label04:
        $r11 := @caughtexception;

     label05:
        if $r9 == null goto label10;

        if r15 == null goto label09;

     label06:
        virtualinvoke $r9.<org.apache.hadoop.io.SequenceFile$Writer: void close()>();

     label07:
        goto label10;

     label08:
        $r13 := @caughtexception;

        virtualinvoke r15.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r13);

        goto label10;

     label09:
        virtualinvoke $r9.<org.apache.hadoop.io.SequenceFile$Writer: void close()>();

     label10:
        throw $r11;

     label11:
        return;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label03 to label05 with label04;
    }

    static java.lang.Class sniffInputLabelType(org.apache.hadoop.fs.Path[], org.apache.hadoop.conf.Configuration) throws java.io.IOException
    {
        org.apache.hadoop.fs.Path[] r0;
        org.apache.hadoop.conf.Configuration r1;
        org.apache.hadoop.fs.FileSystem r2;
        int i0, $i1, i2;
        org.apache.hadoop.fs.Path r4, $r10, $r13;
        org.apache.hadoop.fs.FileStatus[] r5, $r15;
        java.lang.Class r6, $r12;
        java.io.IOException $r8;
        boolean $z0;
        org.apache.hadoop.fs.FileStatus $r9, $r14, r18;
        org.apache.hadoop.io.SequenceFile$Reader $r11, r19;
        org.apache.hadoop.fs.PathFilter $r16;
        java.lang.Throwable $r17;

        r0 := @parameter0: org.apache.hadoop.fs.Path[];

        r1 := @parameter1: org.apache.hadoop.conf.Configuration;

        r2 = staticinvoke <org.apache.hadoop.fs.FileSystem: org.apache.hadoop.fs.FileSystem get(org.apache.hadoop.conf.Configuration)>(r1);

        i0 = lengthof r0;

        i2 = 0;

     label01:
        if i2 >= i0 goto label10;

        r4 = r0[i2];

        r5 = virtualinvoke r2.<org.apache.hadoop.fs.FileSystem: org.apache.hadoop.fs.FileStatus[] globStatus(org.apache.hadoop.fs.Path)>(r4);

        if r5 == null goto label09;

        $i1 = lengthof r5;

        if $i1 != 0 goto label02;

        goto label09;

     label02:
        $r9 = r5[0];

        $z0 = virtualinvoke $r9.<org.apache.hadoop.fs.FileStatus: boolean isDir()>();

        if $z0 == 0 goto label03;

        $r14 = r5[0];

        $r13 = virtualinvoke $r14.<org.apache.hadoop.fs.FileStatus: org.apache.hadoop.fs.Path getPath()>();

        $r16 = staticinvoke <org.apache.mahout.common.iterator.sequencefile.PathFilters: org.apache.hadoop.fs.PathFilter logsCRCFilter()>();

        $r15 = virtualinvoke r2.<org.apache.hadoop.fs.FileSystem: org.apache.hadoop.fs.FileStatus[] listStatus(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.PathFilter)>($r13, $r16);

        r18 = $r15[0];

        goto label04;

     label03:
        r18 = r5[0];

     label04:
        r19 = null;

     label05:
        $r11 = new org.apache.hadoop.io.SequenceFile$Reader;

        $r10 = virtualinvoke r18.<org.apache.hadoop.fs.FileStatus: org.apache.hadoop.fs.Path getPath()>();

        specialinvoke $r11.<org.apache.hadoop.io.SequenceFile$Reader: void <init>(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,org.apache.hadoop.conf.Configuration)>(r2, $r10, r1);

        r19 = $r11;

        $r12 = virtualinvoke $r11.<org.apache.hadoop.io.SequenceFile$Reader: java.lang.Class getKeyClass()>();

        r6 = virtualinvoke $r12.<java.lang.Class: java.lang.Class asSubclass(java.lang.Class)>(class "org/apache/hadoop/io/Writable");

     label06:
        staticinvoke <com.google.common.io.Closeables: void close(java.io.Closeable,boolean)>($r11, 1);

        return r6;

     label07:
        $r17 := @caughtexception;

     label08:
        staticinvoke <com.google.common.io.Closeables: void close(java.io.Closeable,boolean)>(r19, 1);

        throw $r17;

     label09:
        i2 = i2 + 1;

        goto label01;

     label10:
        $r8 = new java.io.IOException;

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>("Unable to open input files to determine input label type.");

        throw $r8;

        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
    }

    public static java.util.Iterator drmIterator(org.apache.hadoop.fs.FileSystem, org.apache.hadoop.fs.Path, org.apache.hadoop.conf.Configuration, java.util.Deque) throws java.io.IOException
    {
        org.apache.hadoop.fs.FileSystem r0;
        org.apache.hadoop.fs.Path r1;
        org.apache.hadoop.conf.Configuration r2;
        java.util.Deque r3;
        org.apache.mahout.common.iterator.sequencefile.SequenceFileDirIterator $r5;
        org.apache.mahout.common.iterator.sequencefile.PathType $r6;
        org.apache.hadoop.fs.PathFilter $r7;
        java.util.Comparator $r8;
        org.apache.mahout.math.hadoop.stochasticsvd.SSVDHelper$2 $r9;
        java.util.Iterator $r10;

        r0 := @parameter0: org.apache.hadoop.fs.FileSystem;

        r1 := @parameter1: org.apache.hadoop.fs.Path;

        r2 := @parameter2: org.apache.hadoop.conf.Configuration;

        r3 := @parameter3: java.util.Deque;

        $r5 = new org.apache.mahout.common.iterator.sequencefile.SequenceFileDirIterator;

        $r6 = <org.apache.mahout.common.iterator.sequencefile.PathType: org.apache.mahout.common.iterator.sequencefile.PathType GLOB>;

        $r7 = staticinvoke <org.apache.mahout.common.iterator.sequencefile.PathFilters: org.apache.hadoop.fs.PathFilter logsCRCFilter()>();

        $r8 = <org.apache.mahout.math.hadoop.stochasticsvd.SSVDHelper: java.util.Comparator PARTITION_COMPARATOR>;

        specialinvoke $r5.<org.apache.mahout.common.iterator.sequencefile.SequenceFileDirIterator: void <init>(org.apache.hadoop.fs.Path,org.apache.mahout.common.iterator.sequencefile.PathType,org.apache.hadoop.fs.PathFilter,java.util.Comparator,boolean,org.apache.hadoop.conf.Configuration)>(r1, $r6, $r7, $r8, 1, r2);

        interfaceinvoke r3.<java.util.Deque: void addFirst(java.lang.Object)>($r5);

        $r9 = new org.apache.mahout.math.hadoop.stochasticsvd.SSVDHelper$2;

        specialinvoke $r9.<org.apache.mahout.math.hadoop.stochasticsvd.SSVDHelper$2: void <init>()>();

        $r10 = staticinvoke <com.google.common.collect.Iterators: java.util.Iterator transform(java.util.Iterator,com.google.common.base.Function)>($r5, $r9);

        return $r10;
    }

    public static org.apache.mahout.math.DenseMatrix drmLoadAsDense(org.apache.hadoop.fs.FileSystem, org.apache.hadoop.fs.Path, org.apache.hadoop.conf.Configuration) throws java.io.IOException
    {
        org.apache.hadoop.fs.FileSystem r0;
        org.apache.hadoop.fs.Path r1;
        org.apache.hadoop.conf.Configuration r2;
        org.apache.mahout.common.Pair r5;
        org.apache.mahout.math.Vector r6;
        double[] r7;
        org.apache.mahout.math.Vector$Element r8;
        java.util.ArrayDeque $r10;
        java.util.ArrayList $r11;
        boolean $z0, $z1, $z2;
        org.apache.mahout.math.DenseMatrix $r12;
        int $i0, $i1, $i2, $i3, $i4, i5;
        double[][] $r13, $r14;
        java.lang.Object[] $r15;
        java.lang.Object $r16, $r17, $r19;
        java.lang.Iterable $r18;
        double $d0, $d1;
        java.lang.Throwable $r20;
        java.util.Iterator r21, r22;

        r0 := @parameter0: org.apache.hadoop.fs.FileSystem;

        r1 := @parameter1: org.apache.hadoop.fs.Path;

        r2 := @parameter2: org.apache.hadoop.conf.Configuration;

        $r10 = new java.util.ArrayDeque;

        specialinvoke $r10.<java.util.ArrayDeque: void <init>()>();

     label01:
        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>()>();

        r21 = staticinvoke <org.apache.mahout.math.hadoop.stochasticsvd.SSVDHelper: java.util.Iterator drmIterator(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,org.apache.hadoop.conf.Configuration,java.util.Deque)>(r0, r1, r2, $r10);

     label02:
        $z0 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label07;

        $r17 = interfaceinvoke r21.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.mahout.common.Pair) $r17;

        $r16 = virtualinvoke r5.<org.apache.mahout.common.Pair: java.lang.Object getSecond()>();

        r6 = (org.apache.mahout.math.Vector) $r16;

        $i2 = interfaceinvoke r6.<org.apache.mahout.math.Vector: int size()>();

        r7 = newarray (double)[$i2];

        $z1 = interfaceinvoke r6.<org.apache.mahout.math.Vector: boolean isDense()>();

        if $z1 == 0 goto label04;

        i5 = 0;

     label03:
        $i3 = interfaceinvoke r6.<org.apache.mahout.math.Vector: int size()>();

        if i5 >= $i3 goto label06;

        $d1 = interfaceinvoke r6.<org.apache.mahout.math.Vector: double getQuick(int)>(i5);

        r7[i5] = $d1;

        i5 = i5 + 1;

        goto label03;

     label04:
        $r18 = interfaceinvoke r6.<org.apache.mahout.math.Vector: java.lang.Iterable nonZeroes()>();

        r22 = interfaceinvoke $r18.<java.lang.Iterable: java.util.Iterator iterator()>();

     label05:
        $z2 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label06;

        $r19 = interfaceinvoke r22.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.apache.mahout.math.Vector$Element) $r19;

        $i4 = interfaceinvoke r8.<org.apache.mahout.math.Vector$Element: int index()>();

        $d0 = interfaceinvoke r8.<org.apache.mahout.math.Vector$Element: double get()>();

        r7[$i4] = $d0;

        goto label05;

     label06:
        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>(r7);

        goto label02;

     label07:
        $i0 = interfaceinvoke $r11.<java.util.List: int size()>();

        if $i0 != 0 goto label09;

     label08:
        staticinvoke <org.apache.mahout.common.IOUtils: void close(java.util.Collection)>($r10);

        return null;

     label09:
        $r12 = new org.apache.mahout.math.DenseMatrix;

        $i1 = interfaceinvoke $r11.<java.util.List: int size()>();

        $r13 = newarray (double[])[$i1];

        $r15 = interfaceinvoke $r11.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r13);

        $r14 = (double[][]) $r15;

        specialinvoke $r12.<org.apache.mahout.math.DenseMatrix: void <init>(double[][])>($r14);

     label10:
        staticinvoke <org.apache.mahout.common.IOUtils: void close(java.util.Collection)>($r10);

        return $r12;

     label11:
        $r20 := @caughtexception;

     label12:
        staticinvoke <org.apache.mahout.common.IOUtils: void close(java.util.Collection)>($r10);

        throw $r20;

        catch java.lang.Throwable from label01 to label08 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public static org.apache.mahout.math.DenseSymmetricMatrix loadAndSumUpperTriangularMatricesAsSymmetric(org.apache.hadoop.fs.Path, org.apache.hadoop.conf.Configuration) throws java.io.IOException
    {
        org.apache.hadoop.fs.Path r0;
        org.apache.hadoop.conf.Configuration r1;
        org.apache.mahout.math.Vector r2;
        org.apache.mahout.math.DenseSymmetricMatrix $r3;

        r0 := @parameter0: org.apache.hadoop.fs.Path;

        r1 := @parameter1: org.apache.hadoop.conf.Configuration;

        r2 = staticinvoke <org.apache.mahout.math.hadoop.stochasticsvd.SSVDHelper: org.apache.mahout.math.Vector loadAndSumUpVectors(org.apache.hadoop.fs.Path,org.apache.hadoop.conf.Configuration)>(r0, r1);

        if r2 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r3 = new org.apache.mahout.math.DenseSymmetricMatrix;

        specialinvoke $r3.<org.apache.mahout.math.DenseSymmetricMatrix: void <init>(org.apache.mahout.math.Vector)>(r2);

     label2:
        return $r3;
    }

    public static org.apache.mahout.math.Vector loadAndSumUpVectors(org.apache.hadoop.fs.Path, org.apache.hadoop.conf.Configuration) throws java.io.IOException
    {
        org.apache.hadoop.fs.Path r0;
        org.apache.hadoop.conf.Configuration r1;
        org.apache.mahout.common.iterator.sequencefile.SequenceFileDirValueIterator $r5;
        java.util.Comparator $r6;
        org.apache.mahout.common.iterator.sequencefile.PathType $r7;
        java.lang.Object $r8, $r13;
        org.apache.mahout.math.VectorWritable $r9, $r16;
        org.apache.mahout.math.Vector $r10, $r15;
        org.apache.mahout.math.function.DoubleDoubleFunction $r11;
        org.apache.mahout.math.DenseVector $r14, r18;
        java.lang.Throwable $r17;
        boolean $z0;

        r0 := @parameter0: org.apache.hadoop.fs.Path;

        r1 := @parameter1: org.apache.hadoop.conf.Configuration;

        $r5 = new org.apache.mahout.common.iterator.sequencefile.SequenceFileDirValueIterator;

        $r7 = <org.apache.mahout.common.iterator.sequencefile.PathType: org.apache.mahout.common.iterator.sequencefile.PathType GLOB>;

        $r6 = <org.apache.mahout.math.hadoop.stochasticsvd.SSVDHelper: java.util.Comparator PARTITION_COMPARATOR>;

        specialinvoke $r5.<org.apache.mahout.common.iterator.sequencefile.SequenceFileDirValueIterator: void <init>(org.apache.hadoop.fs.Path,org.apache.mahout.common.iterator.sequencefile.PathType,org.apache.hadoop.fs.PathFilter,java.util.Comparator,boolean,org.apache.hadoop.conf.Configuration)>(r0, $r7, null, $r6, 1, r1);

     label1:
        r18 = null;

     label2:
        $z0 = virtualinvoke $r5.<org.apache.mahout.common.iterator.sequencefile.SequenceFileDirValueIterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        if r18 != null goto label3;

        $r14 = new org.apache.mahout.math.DenseVector;

        $r13 = virtualinvoke $r5.<org.apache.mahout.common.iterator.sequencefile.SequenceFileDirValueIterator: java.lang.Object next()>();

        $r16 = (org.apache.mahout.math.VectorWritable) $r13;

        $r15 = virtualinvoke $r16.<org.apache.mahout.math.VectorWritable: org.apache.mahout.math.Vector get()>();

        specialinvoke $r14.<org.apache.mahout.math.DenseVector: void <init>(org.apache.mahout.math.Vector)>($r15);

        r18 = $r14;

        goto label2;

     label3:
        $r8 = virtualinvoke $r5.<org.apache.mahout.common.iterator.sequencefile.SequenceFileDirValueIterator: java.lang.Object next()>();

        $r9 = (org.apache.mahout.math.VectorWritable) $r8;

        $r10 = virtualinvoke $r9.<org.apache.mahout.math.VectorWritable: org.apache.mahout.math.Vector get()>();

        $r11 = <org.apache.mahout.math.function.Functions: org.apache.mahout.math.function.DoubleDoubleFunction PLUS>;

        interfaceinvoke r18.<org.apache.mahout.math.Vector: org.apache.mahout.math.Vector assign(org.apache.mahout.math.Vector,org.apache.mahout.math.function.DoubleDoubleFunction)>($r10, $r11);

        goto label2;

     label4:
        staticinvoke <com.google.common.io.Closeables: void close(java.io.Closeable,boolean)>($r5, 1);

        return r18;

     label5:
        $r17 := @caughtexception;

     label6:
        staticinvoke <com.google.common.io.Closeables: void close(java.io.Closeable,boolean)>($r5, 1);

        throw $r17;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public static org.apache.mahout.math.UpperTriangular loadUpperTriangularMatrix(org.apache.hadoop.fs.Path, org.apache.hadoop.conf.Configuration) throws java.io.IOException
    {
        org.apache.hadoop.fs.Path r0;
        org.apache.hadoop.conf.Configuration r1;
        org.apache.mahout.common.iterator.sequencefile.SequenceFileDirValueIterator $r8;
        org.apache.mahout.common.iterator.sequencefile.PathType $r9;
        boolean $z0, $z1;
        java.lang.Object $r10;
        org.apache.mahout.math.VectorWritable $r11;
        org.apache.mahout.math.UpperTriangular $r12;
        java.io.IOException $r13, $r15;
        java.lang.Throwable $r14, $r16, $r18, r19;
        org.apache.mahout.math.Vector r20;

        r0 := @parameter0: org.apache.hadoop.fs.Path;

        r1 := @parameter1: org.apache.hadoop.conf.Configuration;

        $r8 = new org.apache.mahout.common.iterator.sequencefile.SequenceFileDirValueIterator;

        $r9 = <org.apache.mahout.common.iterator.sequencefile.PathType: org.apache.mahout.common.iterator.sequencefile.PathType GLOB>;

        specialinvoke $r8.<org.apache.mahout.common.iterator.sequencefile.SequenceFileDirValueIterator: void <init>(org.apache.hadoop.fs.Path,org.apache.mahout.common.iterator.sequencefile.PathType,org.apache.hadoop.fs.PathFilter,java.util.Comparator,boolean,org.apache.hadoop.conf.Configuration)>(r0, $r9, null, null, 1, r1);

        r19 = null;

     label01:
        $z0 = virtualinvoke $r8.<org.apache.mahout.common.iterator.sequencefile.SequenceFileDirValueIterator: boolean hasNext()>();

        if $z0 != 0 goto label02;

        $r15 = new java.io.IOException;

        specialinvoke $r15.<java.io.IOException: void <init>(java.lang.String)>("No triangular matrices found");

        throw $r15;

     label02:
        $r10 = virtualinvoke $r8.<org.apache.mahout.common.iterator.sequencefile.SequenceFileDirValueIterator: java.lang.Object next()>();

        $r11 = (org.apache.mahout.math.VectorWritable) $r10;

        r20 = virtualinvoke $r11.<org.apache.mahout.math.VectorWritable: org.apache.mahout.math.Vector get()>();

        $r12 = new org.apache.mahout.math.UpperTriangular;

        specialinvoke $r12.<org.apache.mahout.math.UpperTriangular: void <init>(org.apache.mahout.math.Vector)>(r20);

        $z1 = virtualinvoke $r8.<org.apache.mahout.common.iterator.sequencefile.SequenceFileDirValueIterator: boolean hasNext()>();

        if $z1 == 0 goto label03;

        $r13 = new java.io.IOException;

        specialinvoke $r13.<java.io.IOException: void <init>(java.lang.String)>("Unexpected overrun in upper triangular matrix files");

        throw $r13;

     label03:
        if $r8 == null goto label04;

        virtualinvoke $r8.<org.apache.mahout.common.iterator.sequencefile.SequenceFileDirValueIterator: void close()>();

     label04:
        return $r12;

     label05:
        $r18 := @caughtexception;

        r19 = $r18;

        throw $r18;

     label06:
        $r16 := @caughtexception;

     label07:
        if $r8 == null goto label12;

        if r19 == null goto label11;

     label08:
        virtualinvoke $r8.<org.apache.mahout.common.iterator.sequencefile.SequenceFileDirValueIterator: void close()>();

     label09:
        goto label12;

     label10:
        $r14 := @caughtexception;

        virtualinvoke r19.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r14);

        goto label12;

     label11:
        virtualinvoke $r8.<org.apache.mahout.common.iterator.sequencefile.SequenceFileDirValueIterator: void close()>();

     label12:
        throw $r16;

        catch java.lang.Throwable from label01 to label03 with label05;
        catch java.lang.Throwable from label01 to label03 with label06;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label05 to label07 with label06;
    }

    public static double[][] extractRawData(org.apache.mahout.math.Matrix)
    {
        org.apache.mahout.math.Matrix r0;
        int i0, i1, i2, i3;
        double[][] r1;
        double[] $r2, $r3;
        double $d0;

        r0 := @parameter0: org.apache.mahout.math.Matrix;

        i0 = interfaceinvoke r0.<org.apache.mahout.math.Matrix: int numRows()>();

        i1 = interfaceinvoke r0.<org.apache.mahout.math.Matrix: int numCols()>();

        r1 = newarray (double[])[i0];

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        $r2 = newarray (double)[i1];

        r1[i2] = $r2;

        i3 = 0;

     label2:
        if i3 >= i1 goto label3;

        $r3 = r1[i2];

        $d0 = interfaceinvoke r0.<org.apache.mahout.math.Matrix: double getQuick(int,int)>(i2, i3);

        $r3[i3] = $d0;

        i3 = i3 + 1;

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return r1;
    }

    static java.util.regex.Pattern access$000()
    {
        java.util.regex.Pattern $r0;

        $r0 = <org.apache.mahout.math.hadoop.stochasticsvd.SSVDHelper: java.util.regex.Pattern OUTPUT_FILE_PATTERN>;

        return $r0;
    }

    static void <clinit>()
    {
        java.util.regex.Pattern $r0;
        org.apache.mahout.math.hadoop.stochasticsvd.SSVDHelper$1 $r1;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(\\w+)-(m|r)-(\\d+)(\\.\\w+)?");

        <org.apache.mahout.math.hadoop.stochasticsvd.SSVDHelper: java.util.regex.Pattern OUTPUT_FILE_PATTERN> = $r0;

        $r1 = new org.apache.mahout.math.hadoop.stochasticsvd.SSVDHelper$1;

        specialinvoke $r1.<org.apache.mahout.math.hadoop.stochasticsvd.SSVDHelper$1: void <init>()>();

        <org.apache.mahout.math.hadoop.stochasticsvd.SSVDHelper: java.util.Comparator PARTITION_COMPARATOR> = $r1;

        return;
    }
}
