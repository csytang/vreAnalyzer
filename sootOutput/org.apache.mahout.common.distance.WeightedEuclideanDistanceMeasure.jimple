public class org.apache.mahout.common.distance.WeightedEuclideanDistanceMeasure extends org.apache.mahout.common.distance.WeightedDistanceMeasure
{

    public void <init>()
    {
        org.apache.mahout.common.distance.WeightedEuclideanDistanceMeasure r0;

        r0 := @this: org.apache.mahout.common.distance.WeightedEuclideanDistanceMeasure;

        specialinvoke r0.<org.apache.mahout.common.distance.WeightedDistanceMeasure: void <init>()>();

        return;
    }

    public double distance(org.apache.mahout.math.Vector, org.apache.mahout.math.Vector)
    {
        org.apache.mahout.common.distance.WeightedEuclideanDistanceMeasure r0;
        org.apache.mahout.math.Vector r1, r2, r3, r4;
        java.lang.Iterable $r5, $r7;
        boolean $z0, $z1;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, d9;
        java.lang.Object $r6, $r8;
        int $i0;
        java.util.Iterator r9, r11;
        org.apache.mahout.math.Vector$Element r10, r12;

        r0 := @this: org.apache.mahout.common.distance.WeightedEuclideanDistanceMeasure;

        r1 := @parameter0: org.apache.mahout.math.Vector;

        r2 := @parameter1: org.apache.mahout.math.Vector;

        d9 = 0.0;

        r3 = interfaceinvoke r2.<org.apache.mahout.math.Vector: org.apache.mahout.math.Vector minus(org.apache.mahout.math.Vector)>(r1);

        r4 = virtualinvoke r0.<org.apache.mahout.common.distance.WeightedEuclideanDistanceMeasure: org.apache.mahout.math.Vector getWeights()>();

        if r4 != null goto label2;

        $r7 = interfaceinvoke r3.<org.apache.mahout.math.Vector: java.lang.Iterable nonZeroes()>();

        r9 = interfaceinvoke $r7.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r8 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.apache.mahout.math.Vector$Element) $r8;

        $d7 = interfaceinvoke r10.<org.apache.mahout.math.Vector$Element: double get()>();

        $d6 = interfaceinvoke r10.<org.apache.mahout.math.Vector$Element: double get()>();

        $d8 = $d7 * $d6;

        d9 = d9 + $d8;

        goto label1;

     label2:
        $r5 = interfaceinvoke r3.<org.apache.mahout.math.Vector: java.lang.Iterable nonZeroes()>();

        r11 = interfaceinvoke $r5.<java.lang.Iterable: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        r12 = (org.apache.mahout.math.Vector$Element) $r6;

        $d2 = interfaceinvoke r12.<org.apache.mahout.math.Vector$Element: double get()>();

        $d1 = interfaceinvoke r12.<org.apache.mahout.math.Vector$Element: double get()>();

        $d3 = $d2 * $d1;

        $i0 = interfaceinvoke r12.<org.apache.mahout.math.Vector$Element: int index()>();

        $d5 = interfaceinvoke r4.<org.apache.mahout.math.Vector: double get(int)>($i0);

        $d4 = $d3 * $d5;

        d9 = d9 + $d4;

        goto label3;

     label4:
        $d0 = staticinvoke <java.lang.Math: double sqrt(double)>(d9);

        return $d0;
    }

    public double distance(double, org.apache.mahout.math.Vector, org.apache.mahout.math.Vector)
    {
        org.apache.mahout.common.distance.WeightedEuclideanDistanceMeasure r0;
        double d0, $d1;
        org.apache.mahout.math.Vector r1, r2;

        r0 := @this: org.apache.mahout.common.distance.WeightedEuclideanDistanceMeasure;

        d0 := @parameter0: double;

        r1 := @parameter1: org.apache.mahout.math.Vector;

        r2 := @parameter2: org.apache.mahout.math.Vector;

        $d1 = virtualinvoke r0.<org.apache.mahout.common.distance.WeightedEuclideanDistanceMeasure: double distance(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector)>(r1, r2);

        return $d1;
    }
}
