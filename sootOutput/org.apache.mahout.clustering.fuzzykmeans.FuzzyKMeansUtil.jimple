final class org.apache.mahout.clustering.fuzzykmeans.FuzzyKMeansUtil extends java.lang.Object
{

    private void <init>()
    {
        org.apache.mahout.clustering.fuzzykmeans.FuzzyKMeansUtil r0;

        r0 := @this: org.apache.mahout.clustering.fuzzykmeans.FuzzyKMeansUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void configureWithClusterInfo(org.apache.hadoop.conf.Configuration, org.apache.hadoop.fs.Path, java.util.List)
    {
        org.apache.hadoop.conf.Configuration r0;
        org.apache.hadoop.fs.Path r1;
        java.util.List r2;
        java.util.Iterator r3;
        org.apache.mahout.common.iterator.sequencefile.SequenceFileDirValueIterable $r4;
        org.apache.mahout.common.iterator.sequencefile.PathType $r5;
        org.apache.hadoop.fs.PathFilter $r6;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Object $r7;
        java.lang.StringBuilder $r8, $r10, $r11;
        java.lang.IllegalStateException $r9;
        org.apache.mahout.clustering.fuzzykmeans.SoftCluster $r12, $r16, $r17;
        java.lang.String $r13;
        int $i0, $i1;
        org.apache.mahout.math.Vector $r14, $r19;
        org.apache.mahout.common.distance.DistanceMeasure $r15, $r18;
        org.apache.hadoop.io.Writable r20;
        java.lang.Class r21;
        org.apache.mahout.clustering.iterator.ClusterWritable r22;
        org.apache.mahout.clustering.kmeans.Kluster r23;
        org.apache.mahout.clustering.canopy.Canopy r24;

        r0 := @parameter0: org.apache.hadoop.conf.Configuration;

        r1 := @parameter1: org.apache.hadoop.fs.Path;

        r2 := @parameter2: java.util.List;

        $r4 = new org.apache.mahout.common.iterator.sequencefile.SequenceFileDirValueIterable;

        $r5 = <org.apache.mahout.common.iterator.sequencefile.PathType: org.apache.mahout.common.iterator.sequencefile.PathType LIST>;

        $r6 = staticinvoke <org.apache.mahout.common.iterator.sequencefile.PathFilters: org.apache.hadoop.fs.PathFilter partFilter()>();

        specialinvoke $r4.<org.apache.mahout.common.iterator.sequencefile.SequenceFileDirValueIterable: void <init>(org.apache.hadoop.fs.Path,org.apache.mahout.common.iterator.sequencefile.PathType,org.apache.hadoop.fs.PathFilter,org.apache.hadoop.conf.Configuration)>(r1, $r5, $r6, r0);

        r3 = virtualinvoke $r4.<org.apache.mahout.common.iterator.sequencefile.SequenceFileDirValueIterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r20 = (org.apache.hadoop.io.Writable) $r7;

        r21 = virtualinvoke r20.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = virtualinvoke r21.<java.lang.Object: boolean equals(java.lang.Object)>(class "org/apache/mahout/clustering/iterator/ClusterWritable");

        if $z1 == 0 goto label2;

        r22 = (org.apache.mahout.clustering.iterator.ClusterWritable) r20;

        r20 = virtualinvoke r22.<org.apache.mahout.clustering.iterator.ClusterWritable: org.apache.mahout.clustering.Cluster getValue()>();

        r21 = virtualinvoke r20.<java.lang.Object: java.lang.Class getClass()>();

     label2:
        $z2 = virtualinvoke r21.<java.lang.Object: boolean equals(java.lang.Object)>(class "org/apache/mahout/clustering/kmeans/Kluster");

        if $z2 == 0 goto label3;

        r23 = (org.apache.mahout.clustering.kmeans.Kluster) r20;

        $r17 = new org.apache.mahout.clustering.fuzzykmeans.SoftCluster;

        $r19 = virtualinvoke r23.<org.apache.mahout.clustering.kmeans.Kluster: org.apache.mahout.math.Vector getCenter()>();

        $i1 = virtualinvoke r23.<org.apache.mahout.clustering.kmeans.Kluster: int getId()>();

        $r18 = virtualinvoke r23.<org.apache.mahout.clustering.kmeans.Kluster: org.apache.mahout.common.distance.DistanceMeasure getMeasure()>();

        specialinvoke $r17.<org.apache.mahout.clustering.fuzzykmeans.SoftCluster: void <init>(org.apache.mahout.math.Vector,int,org.apache.mahout.common.distance.DistanceMeasure)>($r19, $i1, $r18);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r17);

        goto label1;

     label3:
        $z4 = virtualinvoke r21.<java.lang.Object: boolean equals(java.lang.Object)>(class "org/apache/mahout/clustering/fuzzykmeans/SoftCluster");

        if $z4 == 0 goto label4;

        $r16 = (org.apache.mahout.clustering.fuzzykmeans.SoftCluster) r20;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r16);

        goto label1;

     label4:
        $z3 = virtualinvoke r21.<java.lang.Object: boolean equals(java.lang.Object)>(class "org/apache/mahout/clustering/canopy/Canopy");

        if $z3 == 0 goto label5;

        r24 = (org.apache.mahout.clustering.canopy.Canopy) r20;

        $r12 = new org.apache.mahout.clustering.fuzzykmeans.SoftCluster;

        $r14 = virtualinvoke r24.<org.apache.mahout.clustering.canopy.Canopy: org.apache.mahout.math.Vector getCenter()>();

        $i0 = virtualinvoke r24.<org.apache.mahout.clustering.canopy.Canopy: int getId()>();

        $r15 = virtualinvoke r24.<org.apache.mahout.clustering.canopy.Canopy: org.apache.mahout.common.distance.DistanceMeasure getMeasure()>();

        specialinvoke $r12.<org.apache.mahout.clustering.fuzzykmeans.SoftCluster: void <init>(org.apache.mahout.math.Vector,int,org.apache.mahout.common.distance.DistanceMeasure)>($r14, $i0, $r15);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r12);

        goto label1;

     label5:
        $r9 = new java.lang.IllegalStateException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad value class: ");

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r21);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r13);

        throw $r9;

     label6:
        return;
    }
}
