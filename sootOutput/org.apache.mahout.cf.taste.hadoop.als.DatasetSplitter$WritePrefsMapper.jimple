class org.apache.mahout.cf.taste.hadoop.als.DatasetSplitter$WritePrefsMapper extends org.apache.hadoop.mapreduce.Mapper
{
    private java.lang.String partToUse;

    void <init>()
    {
        org.apache.mahout.cf.taste.hadoop.als.DatasetSplitter$WritePrefsMapper r0;

        r0 := @this: org.apache.mahout.cf.taste.hadoop.als.DatasetSplitter$WritePrefsMapper;

        specialinvoke r0.<org.apache.hadoop.mapreduce.Mapper: void <init>()>();

        return;
    }

    protected void setup(org.apache.hadoop.mapreduce.Mapper$Context) throws java.io.IOException, java.lang.InterruptedException
    {
        org.apache.mahout.cf.taste.hadoop.als.DatasetSplitter$WritePrefsMapper r0;
        org.apache.hadoop.mapreduce.Mapper$Context r1;
        org.apache.hadoop.conf.Configuration $r2;
        java.lang.String $r3, $r4;

        r0 := @this: org.apache.mahout.cf.taste.hadoop.als.DatasetSplitter$WritePrefsMapper;

        r1 := @parameter0: org.apache.hadoop.mapreduce.Mapper$Context;

        $r2 = virtualinvoke r1.<org.apache.hadoop.mapreduce.Mapper$Context: org.apache.hadoop.conf.Configuration getConfiguration()>();

        $r3 = staticinvoke <org.apache.mahout.cf.taste.hadoop.als.DatasetSplitter: java.lang.String access$400()>();

        $r4 = virtualinvoke $r2.<org.apache.hadoop.conf.Configuration: java.lang.String get(java.lang.String)>($r3);

        r0.<org.apache.mahout.cf.taste.hadoop.als.DatasetSplitter$WritePrefsMapper: java.lang.String partToUse> = $r4;

        return;
    }

    protected void map(org.apache.hadoop.io.Text, org.apache.hadoop.io.Text, org.apache.hadoop.mapreduce.Mapper$Context) throws java.io.IOException, java.lang.InterruptedException
    {
        org.apache.mahout.cf.taste.hadoop.als.DatasetSplitter$WritePrefsMapper r0;
        org.apache.hadoop.io.Text r1, r2;
        org.apache.hadoop.mapreduce.Mapper$Context r3;
        java.lang.String $r4, $r5;
        boolean $z0;
        org.apache.hadoop.io.NullWritable $r6;

        r0 := @this: org.apache.mahout.cf.taste.hadoop.als.DatasetSplitter$WritePrefsMapper;

        r1 := @parameter0: org.apache.hadoop.io.Text;

        r2 := @parameter1: org.apache.hadoop.io.Text;

        r3 := @parameter2: org.apache.hadoop.mapreduce.Mapper$Context;

        $r4 = r0.<org.apache.mahout.cf.taste.hadoop.als.DatasetSplitter$WritePrefsMapper: java.lang.String partToUse>;

        $r5 = virtualinvoke r1.<org.apache.hadoop.io.Text: java.lang.String toString()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label1;

        $r6 = staticinvoke <org.apache.hadoop.io.NullWritable: org.apache.hadoop.io.NullWritable get()>();

        virtualinvoke r3.<org.apache.hadoop.mapreduce.Mapper$Context: void write(java.lang.Object,java.lang.Object)>($r6, r2);

     label1:
        return;
    }

    protected volatile void map(java.lang.Object, java.lang.Object, org.apache.hadoop.mapreduce.Mapper$Context) throws java.io.IOException, java.lang.InterruptedException
    {
        org.apache.mahout.cf.taste.hadoop.als.DatasetSplitter$WritePrefsMapper r0;
        java.lang.Object r1, r2;
        org.apache.hadoop.mapreduce.Mapper$Context r3;
        org.apache.hadoop.io.Text $r4, $r5;

        r0 := @this: org.apache.mahout.cf.taste.hadoop.als.DatasetSplitter$WritePrefsMapper;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: org.apache.hadoop.mapreduce.Mapper$Context;

        $r5 = (org.apache.hadoop.io.Text) r1;

        $r4 = (org.apache.hadoop.io.Text) r2;

        virtualinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.DatasetSplitter$WritePrefsMapper: void map(org.apache.hadoop.io.Text,org.apache.hadoop.io.Text,org.apache.hadoop.mapreduce.Mapper$Context)>($r5, $r4, r3);

        return;
    }
}
