public class org.apache.mahout.clustering.streaming.tools.ResplitSequenceFiles extends java.lang.Object
{
    private java.lang.String inputFile;
    private java.lang.String outputFileBase;
    private int numSplits;
    private org.apache.hadoop.conf.Configuration conf;
    private org.apache.hadoop.fs.FileSystem fs;

    private void <init>()
    {
        org.apache.mahout.clustering.streaming.tools.ResplitSequenceFiles r0;

        r0 := @this: org.apache.mahout.clustering.streaming.tools.ResplitSequenceFiles;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private void writeSplit(java.util.Iterator, int, int) throws java.io.IOException
    {
        org.apache.mahout.clustering.streaming.tools.ResplitSequenceFiles r0;
        java.util.Iterator r1;
        int i0, i1, i2;
        org.apache.mahout.common.Pair r2;
        java.lang.Object $r3, $r4, $r6, $r16, $r21;
        org.apache.hadoop.io.Writable $r5, $r7, $r19, $r20;
        org.apache.hadoop.fs.Path $r8;
        java.lang.StringBuilder $r9, $r12, $r14, $r15;
        org.apache.hadoop.conf.Configuration $r10;
        org.apache.hadoop.fs.FileSystem $r11;
        java.lang.String $r13, $r17;
        java.lang.Class $r18, $r22;
        org.apache.hadoop.io.SequenceFile$Writer r23;

        r0 := @this: org.apache.mahout.clustering.streaming.tools.ResplitSequenceFiles;

        r1 := @parameter0: java.util.Iterator;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r23 = null;

        i2 = 0;

     label1:
        if i2 >= i1 goto label3;

        $r3 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (org.apache.mahout.common.Pair) $r3;

        if r23 != null goto label2;

        $r11 = r0.<org.apache.mahout.clustering.streaming.tools.ResplitSequenceFiles: org.apache.hadoop.fs.FileSystem fs>;

        $r10 = r0.<org.apache.mahout.clustering.streaming.tools.ResplitSequenceFiles: org.apache.hadoop.conf.Configuration conf>;

        $r8 = new org.apache.hadoop.fs.Path;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r13 = r0.<org.apache.mahout.clustering.streaming.tools.ResplitSequenceFiles: java.lang.String outputFileBase>;

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<org.apache.hadoop.fs.Path: void <init>(java.lang.String)>($r17);

        $r16 = virtualinvoke r2.<org.apache.mahout.common.Pair: java.lang.Object getFirst()>();

        $r19 = (org.apache.hadoop.io.Writable) $r16;

        $r18 = virtualinvoke $r19.<java.lang.Object: java.lang.Class getClass()>();

        $r21 = virtualinvoke r2.<org.apache.mahout.common.Pair: java.lang.Object getSecond()>();

        $r20 = (org.apache.hadoop.io.Writable) $r21;

        $r22 = virtualinvoke $r20.<java.lang.Object: java.lang.Class getClass()>();

        r23 = staticinvoke <org.apache.hadoop.io.SequenceFile: org.apache.hadoop.io.SequenceFile$Writer createWriter(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.Path,java.lang.Class,java.lang.Class)>($r11, $r10, $r8, $r18, $r22);

     label2:
        $r4 = virtualinvoke r2.<org.apache.mahout.common.Pair: java.lang.Object getFirst()>();

        $r5 = (org.apache.hadoop.io.Writable) $r4;

        $r6 = virtualinvoke r2.<org.apache.mahout.common.Pair: java.lang.Object getSecond()>();

        $r7 = (org.apache.hadoop.io.Writable) $r6;

        virtualinvoke r23.<org.apache.hadoop.io.SequenceFile$Writer: void append(org.apache.hadoop.io.Writable,org.apache.hadoop.io.Writable)>($r5, $r7);

        i2 = i2 + 1;

        goto label1;

     label3:
        if r23 == null goto label4;

        virtualinvoke r23.<org.apache.hadoop.io.SequenceFile$Writer: void close()>();

     label4:
        return;
    }

    private void run(java.io.PrintWriter) throws java.io.IOException
    {
        org.apache.mahout.clustering.streaming.tools.ResplitSequenceFiles r0;
        java.io.PrintWriter r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14;
        java.util.Iterator r3;
        org.apache.hadoop.conf.Configuration $r4, $r8, $r10;
        org.apache.mahout.common.iterator.sequencefile.SequenceFileDirIterable $r5;
        org.apache.hadoop.fs.Path $r6;
        java.lang.String $r7;
        org.apache.mahout.common.iterator.sequencefile.PathType $r9;
        org.apache.hadoop.fs.FileSystem $r11;
        java.lang.Object[] $r12, $r15, $r17;
        java.lang.Integer $r14, $r16, $r19;

        r0 := @this: org.apache.mahout.clustering.streaming.tools.ResplitSequenceFiles;

        r1 := @parameter0: java.io.PrintWriter;

        $r4 = new org.apache.hadoop.conf.Configuration;

        specialinvoke $r4.<org.apache.hadoop.conf.Configuration: void <init>()>();

        r0.<org.apache.mahout.clustering.streaming.tools.ResplitSequenceFiles: org.apache.hadoop.conf.Configuration conf> = $r4;

        $r5 = new org.apache.mahout.common.iterator.sequencefile.SequenceFileDirIterable;

        $r6 = new org.apache.hadoop.fs.Path;

        $r7 = r0.<org.apache.mahout.clustering.streaming.tools.ResplitSequenceFiles: java.lang.String inputFile>;

        specialinvoke $r6.<org.apache.hadoop.fs.Path: void <init>(java.lang.String)>($r7);

        $r9 = <org.apache.mahout.common.iterator.sequencefile.PathType: org.apache.mahout.common.iterator.sequencefile.PathType LIST>;

        $r8 = r0.<org.apache.mahout.clustering.streaming.tools.ResplitSequenceFiles: org.apache.hadoop.conf.Configuration conf>;

        specialinvoke $r5.<org.apache.mahout.common.iterator.sequencefile.SequenceFileDirIterable: void <init>(org.apache.hadoop.fs.Path,org.apache.mahout.common.iterator.sequencefile.PathType,org.apache.hadoop.conf.Configuration)>($r6, $r9, $r8);

        $r10 = r0.<org.apache.mahout.clustering.streaming.tools.ResplitSequenceFiles: org.apache.hadoop.conf.Configuration conf>;

        $r11 = staticinvoke <org.apache.hadoop.fs.FileSystem: org.apache.hadoop.fs.FileSystem get(org.apache.hadoop.conf.Configuration)>($r10);

        r0.<org.apache.mahout.clustering.streaming.tools.ResplitSequenceFiles: org.apache.hadoop.fs.FileSystem fs> = $r11;

        i0 = staticinvoke <com.google.common.collect.Iterables: int size(java.lang.Iterable)>($r5);

        $i3 = r0.<org.apache.mahout.clustering.streaming.tools.ResplitSequenceFiles: int numSplits>;

        i1 = i0 / $i3;

        $i6 = i1 + i0;

        $i5 = r0.<org.apache.mahout.clustering.streaming.tools.ResplitSequenceFiles: int numSplits>;

        $i4 = i1 * $i5;

        i2 = $i6 - $i4;

        r3 = virtualinvoke $r5.<org.apache.mahout.common.iterator.sequencefile.SequenceFileDirIterable: java.util.Iterator iterator()>();

        $r12 = newarray (java.lang.Object)[1];

        $i7 = r0.<org.apache.mahout.clustering.streaming.tools.ResplitSequenceFiles: int numSplits>;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        $r12[0] = $r14;

        virtualinvoke r1.<java.io.PrintWriter: java.io.PrintWriter printf(java.lang.String,java.lang.Object[])>("Writing %d splits\n", $r12);

        i14 = 0;

     label1:
        $i9 = r0.<org.apache.mahout.clustering.streaming.tools.ResplitSequenceFiles: int numSplits>;

        $i8 = $i9 - 1;

        if i14 >= $i8 goto label2;

        $r17 = newarray (java.lang.Object)[1];

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i14);

        $r17[0] = $r19;

        virtualinvoke r1.<java.io.PrintWriter: java.io.PrintWriter printf(java.lang.String,java.lang.Object[])>("Writing split %d\n", $r17);

        specialinvoke r0.<org.apache.mahout.clustering.streaming.tools.ResplitSequenceFiles: void writeSplit(java.util.Iterator,int,int)>(r3, i14, i1);

        i14 = i14 + 1;

        goto label1;

     label2:
        $r15 = newarray (java.lang.Object)[1];

        $i10 = r0.<org.apache.mahout.clustering.streaming.tools.ResplitSequenceFiles: int numSplits>;

        $i11 = $i10 - 1;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i11);

        $r15[0] = $r16;

        virtualinvoke r1.<java.io.PrintWriter: java.io.PrintWriter printf(java.lang.String,java.lang.Object[])>("Writing split %d\n", $r15);

        $i13 = r0.<org.apache.mahout.clustering.streaming.tools.ResplitSequenceFiles: int numSplits>;

        $i12 = $i13 - 1;

        specialinvoke r0.<org.apache.mahout.clustering.streaming.tools.ResplitSequenceFiles: void writeSplit(java.util.Iterator,int,int)>(r3, $i12, i2);

        return;
    }

    private boolean parseArgs(java.lang.String[])
    {
        org.apache.mahout.clustering.streaming.tools.ResplitSequenceFiles r0;
        java.lang.String[] r1;
        org.apache.commons.cli2.option.DefaultOption r3, r5, r6, r7;
        org.apache.commons.cli2.Group r8;
        org.apache.commons.cli2.CommandLine r10;
        org.apache.commons.cli2.builder.DefaultOptionBuilder $r11, $r12, $r13, $r15, $r16, $r18, $r21, $r22, $r23, $r24, $r25, $r28, $r30, $r31, $r32, $r35, $r38, $r39;
        org.apache.commons.cli2.builder.ArgumentBuilder $r14, $r17, $r20, $r26, $r27, $r33, $r36;
        org.apache.commons.cli2.Argument $r19, $r29, $r34;
        org.apache.commons.cli2.builder.GroupBuilder $r37, $r40, $r41, $r42, $r43;
        org.apache.commons.cli2.util.HelpFormatter $r44;
        org.apache.commons.cli2.commandline.Parser $r45;
        java.lang.String $r46, $r48, $r50;
        java.lang.Object $r47, $r49, $r51;
        int $i0;

        r0 := @this: org.apache.mahout.clustering.streaming.tools.ResplitSequenceFiles;

        r1 := @parameter0: java.lang.String[];

        $r11 = new org.apache.commons.cli2.builder.DefaultOptionBuilder;

        specialinvoke $r11.<org.apache.commons.cli2.builder.DefaultOptionBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.builder.DefaultOptionBuilder withLongName(java.lang.String)>("help");

        $r13 = virtualinvoke $r12.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.builder.DefaultOptionBuilder withDescription(java.lang.String)>("print this list");

        r3 = virtualinvoke $r13.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.option.DefaultOption create()>();

        $r14 = new org.apache.commons.cli2.builder.ArgumentBuilder;

        specialinvoke $r14.<org.apache.commons.cli2.builder.ArgumentBuilder: void <init>()>();

        $r16 = virtualinvoke $r11.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.builder.DefaultOptionBuilder withLongName(java.lang.String)>("input");

        $r15 = virtualinvoke $r16.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.builder.DefaultOptionBuilder withShortName(java.lang.String)>("i");

        $r18 = virtualinvoke $r15.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.builder.DefaultOptionBuilder withRequired(boolean)>(1);

        $r17 = virtualinvoke $r14.<org.apache.commons.cli2.builder.ArgumentBuilder: org.apache.commons.cli2.builder.ArgumentBuilder withName(java.lang.String)>("input");

        $r20 = virtualinvoke $r17.<org.apache.commons.cli2.builder.ArgumentBuilder: org.apache.commons.cli2.builder.ArgumentBuilder withMaximum(int)>(1);

        $r19 = virtualinvoke $r20.<org.apache.commons.cli2.builder.ArgumentBuilder: org.apache.commons.cli2.Argument create()>();

        $r22 = virtualinvoke $r18.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.builder.DefaultOptionBuilder withArgument(org.apache.commons.cli2.Argument)>($r19);

        $r21 = virtualinvoke $r22.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.builder.DefaultOptionBuilder withDescription(java.lang.String)>("what the base folder for sequence files is (they all must have the same key/value type");

        r5 = virtualinvoke $r21.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.option.DefaultOption create()>();

        $r23 = virtualinvoke $r11.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.builder.DefaultOptionBuilder withLongName(java.lang.String)>("output");

        $r25 = virtualinvoke $r23.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.builder.DefaultOptionBuilder withShortName(java.lang.String)>("o");

        $r24 = virtualinvoke $r25.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.builder.DefaultOptionBuilder withRequired(boolean)>(1);

        $r27 = virtualinvoke $r14.<org.apache.commons.cli2.builder.ArgumentBuilder: org.apache.commons.cli2.builder.ArgumentBuilder withName(java.lang.String)>("output");

        $r26 = virtualinvoke $r27.<org.apache.commons.cli2.builder.ArgumentBuilder: org.apache.commons.cli2.builder.ArgumentBuilder withMaximum(int)>(1);

        $r29 = virtualinvoke $r26.<org.apache.commons.cli2.builder.ArgumentBuilder: org.apache.commons.cli2.Argument create()>();

        $r28 = virtualinvoke $r24.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.builder.DefaultOptionBuilder withArgument(org.apache.commons.cli2.Argument)>($r29);

        $r32 = virtualinvoke $r28.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.builder.DefaultOptionBuilder withDescription(java.lang.String)>("the base name of the file split that the files will be split it; the i\'th split has the suffix -i");

        r6 = virtualinvoke $r32.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.option.DefaultOption create()>();

        $r30 = virtualinvoke $r11.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.builder.DefaultOptionBuilder withLongName(java.lang.String)>("numSplits");

        $r31 = virtualinvoke $r30.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.builder.DefaultOptionBuilder withShortName(java.lang.String)>("ns");

        $r35 = virtualinvoke $r31.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.builder.DefaultOptionBuilder withRequired(boolean)>(1);

        $r36 = virtualinvoke $r14.<org.apache.commons.cli2.builder.ArgumentBuilder: org.apache.commons.cli2.builder.ArgumentBuilder withName(java.lang.String)>("numSplits");

        $r33 = virtualinvoke $r36.<org.apache.commons.cli2.builder.ArgumentBuilder: org.apache.commons.cli2.builder.ArgumentBuilder withMaximum(int)>(1);

        $r34 = virtualinvoke $r33.<org.apache.commons.cli2.builder.ArgumentBuilder: org.apache.commons.cli2.Argument create()>();

        $r38 = virtualinvoke $r35.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.builder.DefaultOptionBuilder withArgument(org.apache.commons.cli2.Argument)>($r34);

        $r39 = virtualinvoke $r38.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.builder.DefaultOptionBuilder withDescription(java.lang.String)>("how many splits to use for the given files");

        r7 = virtualinvoke $r39.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.option.DefaultOption create()>();

        $r37 = new org.apache.commons.cli2.builder.GroupBuilder;

        specialinvoke $r37.<org.apache.commons.cli2.builder.GroupBuilder: void <init>()>();

        $r42 = virtualinvoke $r37.<org.apache.commons.cli2.builder.GroupBuilder: org.apache.commons.cli2.builder.GroupBuilder withOption(org.apache.commons.cli2.Option)>(r3);

        $r43 = virtualinvoke $r42.<org.apache.commons.cli2.builder.GroupBuilder: org.apache.commons.cli2.builder.GroupBuilder withOption(org.apache.commons.cli2.Option)>(r5);

        $r40 = virtualinvoke $r43.<org.apache.commons.cli2.builder.GroupBuilder: org.apache.commons.cli2.builder.GroupBuilder withOption(org.apache.commons.cli2.Option)>(r6);

        $r41 = virtualinvoke $r40.<org.apache.commons.cli2.builder.GroupBuilder: org.apache.commons.cli2.builder.GroupBuilder withOption(org.apache.commons.cli2.Option)>(r7);

        r8 = virtualinvoke $r41.<org.apache.commons.cli2.builder.GroupBuilder: org.apache.commons.cli2.Group create()>();

        $r45 = new org.apache.commons.cli2.commandline.Parser;

        specialinvoke $r45.<org.apache.commons.cli2.commandline.Parser: void <init>()>();

        virtualinvoke $r45.<org.apache.commons.cli2.commandline.Parser: void setHelpOption(org.apache.commons.cli2.Option)>(r3);

        virtualinvoke $r45.<org.apache.commons.cli2.commandline.Parser: void setHelpTrigger(java.lang.String)>("--help");

        virtualinvoke $r45.<org.apache.commons.cli2.commandline.Parser: void setGroup(org.apache.commons.cli2.Group)>(r8);

        $r44 = new org.apache.commons.cli2.util.HelpFormatter;

        specialinvoke $r44.<org.apache.commons.cli2.util.HelpFormatter: void <init>(java.lang.String,java.lang.String,java.lang.String,int)>(" ", "", " ", 130);

        virtualinvoke $r45.<org.apache.commons.cli2.commandline.Parser: void setHelpFormatter(org.apache.commons.cli2.util.HelpFormatter)>($r44);

        r10 = virtualinvoke $r45.<org.apache.commons.cli2.commandline.Parser: org.apache.commons.cli2.CommandLine parseAndHelp(java.lang.String[])>(r1);

        if r10 != null goto label1;

        return 0;

     label1:
        $r49 = interfaceinvoke r10.<org.apache.commons.cli2.CommandLine: java.lang.Object getValue(org.apache.commons.cli2.Option)>(r5);

        $r48 = (java.lang.String) $r49;

        r0.<org.apache.mahout.clustering.streaming.tools.ResplitSequenceFiles: java.lang.String inputFile> = $r48;

        $r47 = interfaceinvoke r10.<org.apache.commons.cli2.CommandLine: java.lang.Object getValue(org.apache.commons.cli2.Option)>(r6);

        $r46 = (java.lang.String) $r47;

        r0.<org.apache.mahout.clustering.streaming.tools.ResplitSequenceFiles: java.lang.String outputFileBase> = $r46;

        $r51 = interfaceinvoke r10.<org.apache.commons.cli2.CommandLine: java.lang.Object getValue(org.apache.commons.cli2.Option)>(r7);

        $r50 = (java.lang.String) $r51;

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r50);

        r0.<org.apache.mahout.clustering.streaming.tools.ResplitSequenceFiles: int numSplits> = $i0;

        return 1;
    }

    public static void main(java.lang.String[]) throws java.io.IOException
    {
        java.lang.String[] r0;
        org.apache.mahout.clustering.streaming.tools.ResplitSequenceFiles $r2;
        boolean $z0;
        java.io.PrintWriter $r3;
        java.io.OutputStreamWriter $r4;
        java.nio.charset.Charset $r5;
        java.io.PrintStream $r6;

        r0 := @parameter0: java.lang.String[];

        $r2 = new org.apache.mahout.clustering.streaming.tools.ResplitSequenceFiles;

        specialinvoke $r2.<org.apache.mahout.clustering.streaming.tools.ResplitSequenceFiles: void <init>()>();

        $z0 = specialinvoke $r2.<org.apache.mahout.clustering.streaming.tools.ResplitSequenceFiles: boolean parseArgs(java.lang.String[])>(r0);

        if $z0 == 0 goto label1;

        $r3 = new java.io.PrintWriter;

        $r4 = new java.io.OutputStreamWriter;

        $r6 = <java.lang.System: java.io.PrintStream out>;

        $r5 = <org.apache.commons.io.Charsets: java.nio.charset.Charset UTF_8>;

        specialinvoke $r4.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)>($r6, $r5);

        specialinvoke $r3.<java.io.PrintWriter: void <init>(java.io.Writer,boolean)>($r4, 1);

        specialinvoke $r2.<org.apache.mahout.clustering.streaming.tools.ResplitSequenceFiles: void run(java.io.PrintWriter)>($r3);

     label1:
        return;
    }
}
