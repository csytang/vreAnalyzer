public class org.apache.mahout.vectorizer.collocations.llr.Gram extends org.apache.hadoop.io.BinaryComparable implements org.apache.hadoop.io.WritableComparable
{
    private byte[] bytes;
    private int length;
    private int frequency;

    public void <init>()
    {
        org.apache.mahout.vectorizer.collocations.llr.Gram r0;

        r0 := @this: org.apache.mahout.vectorizer.collocations.llr.Gram;

        specialinvoke r0.<org.apache.hadoop.io.BinaryComparable: void <init>()>();

        return;
    }

    public void <init>(org.apache.mahout.vectorizer.collocations.llr.Gram)
    {
        org.apache.mahout.vectorizer.collocations.llr.Gram r0, r1;
        int $i0, $i1;
        byte[] $r2, $r4;
        java.lang.Object $r3;

        r0 := @this: org.apache.mahout.vectorizer.collocations.llr.Gram;

        r1 := @parameter0: org.apache.mahout.vectorizer.collocations.llr.Gram;

        specialinvoke r0.<org.apache.hadoop.io.BinaryComparable: void <init>()>();

        $i0 = r1.<org.apache.mahout.vectorizer.collocations.llr.Gram: int frequency>;

        r0.<org.apache.mahout.vectorizer.collocations.llr.Gram: int frequency> = $i0;

        $i1 = r1.<org.apache.mahout.vectorizer.collocations.llr.Gram: int length>;

        r0.<org.apache.mahout.vectorizer.collocations.llr.Gram: int length> = $i1;

        $r2 = r1.<org.apache.mahout.vectorizer.collocations.llr.Gram: byte[] bytes>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r4 = (byte[]) $r3;

        r0.<org.apache.mahout.vectorizer.collocations.llr.Gram: byte[] bytes> = $r4;

        return;
    }

    public void <init>(java.lang.String, org.apache.mahout.vectorizer.collocations.llr.Gram$Type)
    {
        org.apache.mahout.vectorizer.collocations.llr.Gram r0;
        java.lang.String r1;
        org.apache.mahout.vectorizer.collocations.llr.Gram$Type r2;

        r0 := @this: org.apache.mahout.vectorizer.collocations.llr.Gram;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.mahout.vectorizer.collocations.llr.Gram$Type;

        specialinvoke r0.<org.apache.mahout.vectorizer.collocations.llr.Gram: void <init>(java.lang.String,int,org.apache.mahout.vectorizer.collocations.llr.Gram$Type)>(r1, 1, r2);

        return;
    }

    public void <init>(java.lang.String, int, org.apache.mahout.vectorizer.collocations.llr.Gram$Type)
    {
        org.apache.mahout.vectorizer.collocations.llr.Gram r0;
        java.lang.String r1, $r7;
        int i0, $i1;
        org.apache.mahout.vectorizer.collocations.llr.Gram$Type r2;
        java.lang.StringBuilder $r4, $r5, $r6;
        byte[] $r8, $r9;
        java.nio.charset.CharacterCodingException $r10;
        java.lang.IllegalStateException $r11;
        java.nio.ByteBuffer r12;

        r0 := @this: org.apache.mahout.vectorizer.collocations.llr.Gram;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: org.apache.mahout.vectorizer.collocations.llr.Gram$Type;

        specialinvoke r0.<org.apache.hadoop.io.BinaryComparable: void <init>()>();

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        r12 = staticinvoke <org.apache.hadoop.io.Text: java.nio.ByteBuffer encode(java.lang.String,boolean)>($r7, 1);

        $r8 = virtualinvoke r12.<java.nio.ByteBuffer: byte[] array()>();

        r0.<org.apache.mahout.vectorizer.collocations.llr.Gram: byte[] bytes> = $r8;

        $i1 = virtualinvoke r12.<java.nio.ByteBuffer: int limit()>();

        r0.<org.apache.mahout.vectorizer.collocations.llr.Gram: int length> = $i1;

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        $r11 = new java.lang.IllegalStateException;

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Should not have happened ", $r10);

        throw $r11;

     label4:
        $r9 = r0.<org.apache.mahout.vectorizer.collocations.llr.Gram: byte[] bytes>;

        staticinvoke <org.apache.mahout.vectorizer.collocations.llr.Gram: void encodeType(org.apache.mahout.vectorizer.collocations.llr.Gram$Type,byte[],int)>(r2, $r9, 0);

        r0.<org.apache.mahout.vectorizer.collocations.llr.Gram: int frequency> = i0;

        return;

        catch java.nio.charset.CharacterCodingException from label1 to label2 with label3;
    }

    public byte[] getBytes()
    {
        org.apache.mahout.vectorizer.collocations.llr.Gram r0;
        byte[] $r1;

        r0 := @this: org.apache.mahout.vectorizer.collocations.llr.Gram;

        $r1 = r0.<org.apache.mahout.vectorizer.collocations.llr.Gram: byte[] bytes>;

        return $r1;
    }

    public int getLength()
    {
        org.apache.mahout.vectorizer.collocations.llr.Gram r0;
        int $i0;

        r0 := @this: org.apache.mahout.vectorizer.collocations.llr.Gram;

        $i0 = r0.<org.apache.mahout.vectorizer.collocations.llr.Gram: int length>;

        return $i0;
    }

    public org.apache.mahout.vectorizer.collocations.llr.Gram$Type getType()
    {
        org.apache.mahout.vectorizer.collocations.llr.Gram r0;
        byte[] $r1;
        org.apache.mahout.vectorizer.collocations.llr.Gram$Type $r2;

        r0 := @this: org.apache.mahout.vectorizer.collocations.llr.Gram;

        $r1 = r0.<org.apache.mahout.vectorizer.collocations.llr.Gram: byte[] bytes>;

        $r2 = staticinvoke <org.apache.mahout.vectorizer.collocations.llr.Gram: org.apache.mahout.vectorizer.collocations.llr.Gram$Type decodeType(byte[],int)>($r1, 0);

        return $r2;
    }

    public java.lang.String getString()
    {
        org.apache.mahout.vectorizer.collocations.llr.Gram r0;
        int $i0, $i1;
        byte[] $r2;
        java.lang.String $r3, $r9;
        java.nio.charset.CharacterCodingException $r4;
        java.lang.IllegalStateException $r5;
        java.lang.StringBuilder $r6, $r7, $r8;

        r0 := @this: org.apache.mahout.vectorizer.collocations.llr.Gram;

     label1:
        $r2 = r0.<org.apache.mahout.vectorizer.collocations.llr.Gram: byte[] bytes>;

        $i0 = r0.<org.apache.mahout.vectorizer.collocations.llr.Gram: int length>;

        $i1 = $i0 - 1;

        $r3 = staticinvoke <org.apache.hadoop.io.Text: java.lang.String decode(byte[],int,int)>($r2, 1, $i1);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalStateException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Should not have happened ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw $r5;

        catch java.nio.charset.CharacterCodingException from label1 to label2 with label3;
    }

    public int getFrequency()
    {
        org.apache.mahout.vectorizer.collocations.llr.Gram r0;
        int $i0;

        r0 := @this: org.apache.mahout.vectorizer.collocations.llr.Gram;

        $i0 = r0.<org.apache.mahout.vectorizer.collocations.llr.Gram: int frequency>;

        return $i0;
    }

    public void setFrequency(int)
    {
        org.apache.mahout.vectorizer.collocations.llr.Gram r0;
        int i0;

        r0 := @this: org.apache.mahout.vectorizer.collocations.llr.Gram;

        i0 := @parameter0: int;

        r0.<org.apache.mahout.vectorizer.collocations.llr.Gram: int frequency> = i0;

        return;
    }

    public void incrementFrequency(int)
    {
        org.apache.mahout.vectorizer.collocations.llr.Gram r0;
        int i0, $i1, $i2;

        r0 := @this: org.apache.mahout.vectorizer.collocations.llr.Gram;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.mahout.vectorizer.collocations.llr.Gram: int frequency>;

        $i2 = $i1 + i0;

        r0.<org.apache.mahout.vectorizer.collocations.llr.Gram: int frequency> = $i2;

        return;
    }

    public void readFields(java.io.DataInput) throws java.io.IOException
    {
        org.apache.mahout.vectorizer.collocations.llr.Gram r0;
        java.io.DataInput r1;
        int i0, i1;
        byte[] $r2;

        r0 := @this: org.apache.mahout.vectorizer.collocations.llr.Gram;

        r1 := @parameter0: java.io.DataInput;

        i0 = staticinvoke <org.apache.mahout.math.Varint: int readUnsignedVarInt(java.io.DataInput)>(r1);

        specialinvoke r0.<org.apache.mahout.vectorizer.collocations.llr.Gram: void setCapacity(int,boolean)>(i0, 0);

        $r2 = r0.<org.apache.mahout.vectorizer.collocations.llr.Gram: byte[] bytes>;

        interfaceinvoke r1.<java.io.DataInput: void readFully(byte[],int,int)>($r2, 0, i0);

        i1 = staticinvoke <org.apache.mahout.math.Varint: int readUnsignedVarInt(java.io.DataInput)>(r1);

        r0.<org.apache.mahout.vectorizer.collocations.llr.Gram: int length> = i0;

        r0.<org.apache.mahout.vectorizer.collocations.llr.Gram: int frequency> = i1;

        return;
    }

    public void write(java.io.DataOutput) throws java.io.IOException
    {
        org.apache.mahout.vectorizer.collocations.llr.Gram r0;
        java.io.DataOutput r1;
        int $i0, $i1, $i2;
        byte[] $r2;

        r0 := @this: org.apache.mahout.vectorizer.collocations.llr.Gram;

        r1 := @parameter0: java.io.DataOutput;

        $i0 = r0.<org.apache.mahout.vectorizer.collocations.llr.Gram: int length>;

        staticinvoke <org.apache.mahout.math.Varint: void writeUnsignedVarInt(int,java.io.DataOutput)>($i0, r1);

        $r2 = r0.<org.apache.mahout.vectorizer.collocations.llr.Gram: byte[] bytes>;

        $i1 = r0.<org.apache.mahout.vectorizer.collocations.llr.Gram: int length>;

        interfaceinvoke r1.<java.io.DataOutput: void write(byte[],int,int)>($r2, 0, $i1);

        $i2 = r0.<org.apache.mahout.vectorizer.collocations.llr.Gram: int frequency>;

        staticinvoke <org.apache.mahout.math.Varint: void writeUnsignedVarInt(int,java.io.DataOutput)>($i2, r1);

        return;
    }

    private void setCapacity(int, boolean)
    {
        org.apache.mahout.vectorizer.collocations.llr.Gram r0;
        boolean z0;
        byte[] r1, $r2, $r3, $r4, $r5;
        int $i0, $i1, i2, i3;

        r0 := @this: org.apache.mahout.vectorizer.collocations.llr.Gram;

        i2 := @parameter0: int;

        z0 := @parameter1: boolean;

        i3 = i2 + 1;

        $r2 = r0.<org.apache.mahout.vectorizer.collocations.llr.Gram: byte[] bytes>;

        if $r2 == null goto label1;

        $r5 = r0.<org.apache.mahout.vectorizer.collocations.llr.Gram: byte[] bytes>;

        $i1 = lengthof $r5;

        if $i1 >= i3 goto label3;

     label1:
        r1 = newarray (byte)[i3];

        $r3 = r0.<org.apache.mahout.vectorizer.collocations.llr.Gram: byte[] bytes>;

        if $r3 == null goto label2;

        if z0 == 0 goto label2;

        $r4 = r0.<org.apache.mahout.vectorizer.collocations.llr.Gram: byte[] bytes>;

        $i0 = r0.<org.apache.mahout.vectorizer.collocations.llr.Gram: int length>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r1, 0, $i0);

     label2:
        r0.<org.apache.mahout.vectorizer.collocations.llr.Gram: byte[] bytes> = r1;

     label3:
        return;
    }

    public java.lang.String toString()
    {
        org.apache.mahout.vectorizer.collocations.llr.Gram r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r7, $r8, $r9;
        java.lang.String $r3, $r10;
        org.apache.mahout.vectorizer.collocations.llr.Gram$Type $r6;
        int $i0;

        r0 := @this: org.apache.mahout.vectorizer.collocations.llr.Gram;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39);

        $r3 = virtualinvoke r0.<org.apache.mahout.vectorizer.collocations.llr.Gram: java.lang.String getString()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'[");

        $r6 = virtualinvoke r0.<org.apache.mahout.vectorizer.collocations.llr.Gram: org.apache.mahout.vectorizer.collocations.llr.Gram$Type getType()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]:");

        $i0 = r0.<org.apache.mahout.vectorizer.collocations.llr.Gram: int frequency>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    public static void encodeType(org.apache.mahout.vectorizer.collocations.llr.Gram$Type, byte[], int)
    {
        org.apache.mahout.vectorizer.collocations.llr.Gram$Type r0;
        byte[] r1;
        int i0, $i1, $i2;
        int[] $r2;
        java.lang.IllegalStateException $r3;

        r0 := @parameter0: org.apache.mahout.vectorizer.collocations.llr.Gram$Type;

        r1 := @parameter1: byte[];

        i0 := @parameter2: int;

        $r2 = <org.apache.mahout.vectorizer.collocations.llr.Gram$1: int[] $SwitchMap$org$apache$mahout$vectorizer$collocations$llr$Gram$Type>;

        $i1 = virtualinvoke r0.<org.apache.mahout.vectorizer.collocations.llr.Gram$Type: int ordinal()>();

        $i2 = $r2[$i1];

        tableswitch($i2)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            default: goto label5;
        };

     label1:
        r1[i0] = 1;

        goto label6;

     label2:
        r1[i0] = 2;

        goto label6;

     label3:
        r1[i0] = 3;

        goto label6;

     label4:
        r1[i0] = 4;

        goto label6;

     label5:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("switch/case problem in encodeType");

        throw $r3;

     label6:
        return;
    }

    public static org.apache.mahout.vectorizer.collocations.llr.Gram$Type decodeType(byte[], int)
    {
        byte[] r0;
        int i0;
        byte $b1;
        org.apache.mahout.vectorizer.collocations.llr.Gram$Type $r1, $r2, $r3, $r4;
        java.lang.IllegalStateException $r5;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $b1 = r0[i0];

        tableswitch($b1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            default: goto label5;
        };

     label1:
        $r1 = <org.apache.mahout.vectorizer.collocations.llr.Gram$Type: org.apache.mahout.vectorizer.collocations.llr.Gram$Type HEAD>;

        return $r1;

     label2:
        $r4 = <org.apache.mahout.vectorizer.collocations.llr.Gram$Type: org.apache.mahout.vectorizer.collocations.llr.Gram$Type TAIL>;

        return $r4;

     label3:
        $r3 = <org.apache.mahout.vectorizer.collocations.llr.Gram$Type: org.apache.mahout.vectorizer.collocations.llr.Gram$Type UNIGRAM>;

        return $r3;

     label4:
        $r2 = <org.apache.mahout.vectorizer.collocations.llr.Gram$Type: org.apache.mahout.vectorizer.collocations.llr.Gram$Type NGRAM>;

        return $r2;

     label5:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("switch/case problem in decodeType");

        throw $r5;
    }
}
