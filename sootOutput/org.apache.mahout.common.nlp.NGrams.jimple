public class org.apache.mahout.common.nlp.NGrams extends java.lang.Object
{
    private static final com.google.common.base.Splitter SPACE_TAB;
    private final java.lang.String line;
    private final int gramSize;

    public void <init>(java.lang.String, int)
    {
        org.apache.mahout.common.nlp.NGrams r0;
        java.lang.String r1;
        int i0;

        r0 := @this: org.apache.mahout.common.nlp.NGrams;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.mahout.common.nlp.NGrams: java.lang.String line> = r1;

        r0.<org.apache.mahout.common.nlp.NGrams: int gramSize> = i0;

        return;
    }

    public java.util.Map generateNGrams()
    {
        org.apache.mahout.common.nlp.NGrams r0;
        java.util.HashMap r1;
        java.util.Iterator r2, r8;
        java.util.ArrayList r3, r5;
        java.lang.String r4, r6, r9, r10, $r11;
        com.google.common.base.Splitter $r12;
        java.lang.Iterable $r13;
        java.lang.Object $r14, $r15, $r18;
        boolean $z0, $z3;
        int $i0, $i1;
        java.lang.StringBuilder $r17;

        r0 := @this: org.apache.mahout.common.nlp.NGrams;

        r1 = staticinvoke <com.google.common.collect.Maps: java.util.HashMap newHashMap()>();

        $r12 = <org.apache.mahout.common.nlp.NGrams: com.google.common.base.Splitter SPACE_TAB>;

        $r11 = r0.<org.apache.mahout.common.nlp.NGrams: java.lang.String line>;

        $r13 = virtualinvoke $r12.<com.google.common.base.Splitter: java.lang.Iterable split(java.lang.CharSequence)>($r11);

        r2 = interfaceinvoke $r13.<java.lang.Iterable: java.util.Iterator iterator()>();

        r3 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

        $r14 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r14;

        r5 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r15 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r15;

        $i1 = interfaceinvoke r5.<java.util.List: int size()>();

        $i0 = r0.<org.apache.mahout.common.nlp.NGrams: int gramSize>;

        if $i1 != $i0 goto label2;

        interfaceinvoke r5.<java.util.List: java.lang.Object remove(int)>(0);

     label2:
        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>(r6);

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        r8 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z3 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label1;

        $r18 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r9 = (java.lang.String) $r18;

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        r10 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r10);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        goto label3;

     label4:
        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r3);

        return r1;
    }

    public java.util.List generateNGramsWithoutLabel()
    {
        org.apache.mahout.common.nlp.NGrams r0;
        java.util.ArrayList r1, r2;
        java.util.Iterator r3, r6;
        java.lang.String r4, r7, r8, $r9;
        com.google.common.base.Splitter $r10;
        java.lang.Iterable $r11;
        boolean $z0, $z3;
        int $i0, $i1;
        java.lang.Object $r12, $r15;
        java.lang.StringBuilder $r13;

        r0 := @this: org.apache.mahout.common.nlp.NGrams;

        r1 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

        r2 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

        $r10 = <org.apache.mahout.common.nlp.NGrams: com.google.common.base.Splitter SPACE_TAB>;

        $r9 = r0.<org.apache.mahout.common.nlp.NGrams: java.lang.String line>;

        $r11 = virtualinvoke $r10.<com.google.common.base.Splitter: java.lang.Iterable split(java.lang.CharSequence)>($r9);

        r3 = interfaceinvoke $r11.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r12 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r12;

        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        $i1 = r0.<org.apache.mahout.common.nlp.NGrams: int gramSize>;

        if $i0 != $i1 goto label2;

        interfaceinvoke r2.<java.util.List: java.lang.Object remove(int)>(0);

     label2:
        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r4);

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        r6 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z3 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label1;

        $r15 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.String) $r15;

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        r8 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r8);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        goto label3;

     label4:
        return r1;
    }

    static void <clinit>()
    {
        com.google.common.base.CharMatcher $r0;
        com.google.common.base.Splitter $r1;

        $r0 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher anyOf(java.lang.CharSequence)>(" \t");

        $r1 = staticinvoke <com.google.common.base.Splitter: com.google.common.base.Splitter on(com.google.common.base.CharMatcher)>($r0);

        <org.apache.mahout.common.nlp.NGrams: com.google.common.base.Splitter SPACE_TAB> = $r1;

        return;
    }
}
