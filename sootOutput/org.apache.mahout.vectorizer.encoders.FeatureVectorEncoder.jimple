public abstract class org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder extends java.lang.Object
{
    protected static final int CONTINUOUS_VALUE_HASH_SEED;
    protected static final int WORD_LIKE_VALUE_HASH_SEED;
    private static final byte[] EMPTY_ARRAY;
    private final java.lang.String name;
    private int probes;
    private java.util.Map traceDictionary;

    protected void <init>(java.lang.String)
    {
        org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder r0;
        java.lang.String r1;

        r0 := @this: org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder: void <init>(java.lang.String,int)>(r1, 1);

        return;
    }

    protected void <init>(java.lang.String, int)
    {
        org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder r0;
        java.lang.String r1;
        int i0;

        r0 := @this: org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder: java.lang.String name> = r1;

        r0.<org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder: int probes> = i0;

        return;
    }

    public void addToVector(java.lang.String, org.apache.mahout.math.Vector)
    {
        org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder r0;
        java.lang.String r1;
        org.apache.mahout.math.Vector r2;

        r0 := @this: org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.mahout.math.Vector;

        virtualinvoke r0.<org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder: void addToVector(java.lang.String,double,org.apache.mahout.math.Vector)>(r1, 1.0, r2);

        return;
    }

    public void addToVector(byte[], org.apache.mahout.math.Vector)
    {
        org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder r0;
        byte[] r1;
        org.apache.mahout.math.Vector r2;

        r0 := @this: org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder;

        r1 := @parameter0: byte[];

        r2 := @parameter1: org.apache.mahout.math.Vector;

        virtualinvoke r0.<org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder: void addToVector(byte[],double,org.apache.mahout.math.Vector)>(r1, 1.0, r2);

        return;
    }

    public void addToVector(java.lang.String, double, org.apache.mahout.math.Vector)
    {
        org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder r0;
        java.lang.String r1;
        double d0;
        org.apache.mahout.math.Vector r2;
        byte[] $r3;

        r0 := @this: org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder;

        r1 := @parameter0: java.lang.String;

        d0 := @parameter1: double;

        r2 := @parameter2: org.apache.mahout.math.Vector;

        $r3 = staticinvoke <org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder: byte[] bytesForString(java.lang.String)>(r1);

        virtualinvoke r0.<org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder: void addToVector(byte[],double,org.apache.mahout.math.Vector)>($r3, d0, r2);

        return;
    }

    public abstract void addToVector(byte[], double, org.apache.mahout.math.Vector);

    protected abstract int hashForProbe(byte[], int, java.lang.String, int);

    protected java.lang.Iterable hashesForProbe(byte[], int, java.lang.String, int)
    {
        org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder r0;
        byte[] r1;
        int i0, i1, $i2;
        java.lang.String r2;
        java.lang.Integer $r3;
        java.util.List $r4;

        r0 := @this: org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        i1 := @parameter3: int;

        $i2 = virtualinvoke r0.<org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder: int hashForProbe(byte[],int,java.lang.String,int)>(r1, i0, r2, i1);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r4 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r3);

        return $r4;
    }

    protected double getWeight(byte[], double)
    {
        org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder r0;
        byte[] r1;
        double d0;

        r0 := @this: org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder;

        r1 := @parameter0: byte[];

        d0 := @parameter1: double;

        return 1.0;
    }

    protected int hash(java.lang.String, int, int)
    {
        org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder r0;
        java.lang.String r1;
        int i0, i1, $i5;
        byte[] $r2;
        long $l2, $l3, $l6, l7;
        byte $b4;

        r0 := @this: org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = staticinvoke <org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder: byte[] bytesForString(java.lang.String)>(r1);

        $l2 = staticinvoke <org.apache.mahout.math.MurmurHash: long hash64A(byte[],int)>($r2, i0);

        $l3 = (long) i1;

        l7 = $l2 % $l3;

        $b4 = l7 cmp 0L;

        if $b4 >= 0 goto label1;

        $l6 = (long) i1;

        l7 = l7 + $l6;

     label1:
        $i5 = (int) l7;

        return $i5;
    }

    protected static int hash(byte[], int, int)
    {
        byte[] r0;
        int i0, i1, $i5;
        long $l2, $l3, $l6, l7;
        byte $b4;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $l2 = staticinvoke <org.apache.mahout.math.MurmurHash: long hash64A(byte[],int)>(r0, i0);

        $l3 = (long) i1;

        l7 = $l2 % $l3;

        $b4 = l7 cmp 0L;

        if $b4 >= 0 goto label1;

        $l6 = (long) i1;

        l7 = l7 + $l6;

     label1:
        $i5 = (int) l7;

        return $i5;
    }

    protected static int hash(java.lang.String, java.lang.String, int, int)
    {
        java.lang.String r0, r1;
        int i0, i1, $i2, $i6;
        byte[] $r2, $r3;
        long $l3, $l4, $l7, l8, l9;
        byte $b5;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r2 = staticinvoke <org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder: byte[] bytesForString(java.lang.String)>(r0);

        l8 = staticinvoke <org.apache.mahout.math.MurmurHash: long hash64A(byte[],int)>($r2, i0);

        $r3 = staticinvoke <org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder: byte[] bytesForString(java.lang.String)>(r1);

        $i2 = (int) l8;

        $l3 = staticinvoke <org.apache.mahout.math.MurmurHash: long hash64A(byte[],int)>($r3, $i2);

        $l4 = (long) i1;

        l9 = $l3 % $l4;

        $b5 = l9 cmp 0L;

        if $b5 >= 0 goto label1;

        $l7 = (long) i1;

        l9 = l9 + $l7;

     label1:
        $i6 = (int) l9;

        return $i6;
    }

    protected int hash(byte[], byte[], int, int)
    {
        org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder r0;
        byte[] r1, r2;
        int i0, i1, $i2, $i6;
        long $l3, $l4, $l7, l8, l9;
        byte $b5;

        r0 := @this: org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder;

        r1 := @parameter0: byte[];

        r2 := @parameter1: byte[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        l8 = staticinvoke <org.apache.mahout.math.MurmurHash: long hash64A(byte[],int)>(r1, i0);

        $i2 = (int) l8;

        $l3 = staticinvoke <org.apache.mahout.math.MurmurHash: long hash64A(byte[],int)>(r2, $i2);

        $l4 = (long) i1;

        l9 = $l3 % $l4;

        $b5 = l9 cmp 0L;

        if $b5 >= 0 goto label1;

        $l7 = (long) i1;

        l9 = l9 + $l7;

     label1:
        $i6 = (int) l9;

        return $i6;
    }

    protected int hash(java.lang.String, java.lang.String, java.lang.String, java.lang.String, int, int)
    {
        org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder r0;
        java.lang.String r1, r2, r3, r4;
        int i0, i1, $i2, $i6, $i9, $i13;
        byte[] $r5, $r6, $r7, $r8;
        long $l3, $l4, $l5, $l7, $l8, $l11, $l12, l14, l15, l16, l17;
        byte $b10;

        r0 := @this: org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        i0 := @parameter4: int;

        i1 := @parameter5: int;

        $r5 = staticinvoke <org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder: byte[] bytesForString(java.lang.String)>(r1);

        l14 = staticinvoke <org.apache.mahout.math.MurmurHash: long hash64A(byte[],int)>($r5, i0);

        $r6 = staticinvoke <org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder: byte[] bytesForString(java.lang.String)>(r2);

        $i2 = (int) l14;

        $l3 = staticinvoke <org.apache.mahout.math.MurmurHash: long hash64A(byte[],int)>($r6, $i2);

        $l4 = (long) i1;

        l15 = $l3 % $l4;

        $r7 = staticinvoke <org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder: byte[] bytesForString(java.lang.String)>(r3);

        $i6 = (int) l15;

        $l5 = staticinvoke <org.apache.mahout.math.MurmurHash: long hash64A(byte[],int)>($r7, $i6);

        $l7 = (long) i1;

        l16 = $l5 % $l7;

        $r8 = staticinvoke <org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder: byte[] bytesForString(java.lang.String)>(r4);

        $i9 = (int) l16;

        $l8 = staticinvoke <org.apache.mahout.math.MurmurHash: long hash64A(byte[],int)>($r8, $i9);

        $l11 = (long) i1;

        l17 = $l8 % $l11;

        $b10 = l17 cmp 0L;

        if $b10 >= 0 goto label1;

        $l12 = (long) i1;

        l17 = l17 + $l12;

     label1:
        $i13 = (int) l17;

        return $i13;
    }

    public abstract java.lang.String asString(java.lang.String);

    public int getProbes()
    {
        org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder r0;
        int $i0;

        r0 := @this: org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder;

        $i0 = r0.<org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder: int probes>;

        return $i0;
    }

    public void setProbes(int)
    {
        org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder r0;
        int i0;

        r0 := @this: org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder;

        i0 := @parameter0: int;

        r0.<org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder: int probes> = i0;

        return;
    }

    public java.lang.String getName()
    {
        org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder r0;
        java.lang.String $r1;

        r0 := @this: org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder;

        $r1 = r0.<org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder: java.lang.String name>;

        return $r1;
    }

    protected boolean isTraceEnabled()
    {
        org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder r0;
        java.util.Map $r1;
        boolean $z0;

        r0 := @this: org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder;

        $r1 = r0.<org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder: java.util.Map traceDictionary>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected void trace(java.lang.String, int)
    {
        org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder r0;
        java.lang.String r1, $r10, r15;
        int i0;
        java.util.Map $r2, $r3, $r8;
        java.lang.Object $r4;
        java.lang.Integer $r5, $r7;
        java.lang.Integer[] $r6;
        java.lang.StringBuilder $r11, $r12, $r13, $r14;
        java.util.Set r16;
        java.util.HashSet r17;

        r0 := @this: org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder: java.util.Map traceDictionary>;

        if $r2 == null goto label3;

        r15 = r0.<org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder: java.lang.String name>;

        if r1 == null goto label1;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r10 = r0.<org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder: java.lang.String name>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r3 = r0.<org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder: java.util.Map traceDictionary>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r15);

        r16 = (java.util.Set) $r4;

        if r16 != null goto label2;

        $r6 = newarray (java.lang.Integer)[1];

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r6[0] = $r7;

        r17 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet(java.lang.Object[])>($r6);

        $r8 = r0.<org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder: java.util.Map traceDictionary>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r15, r17);

        goto label3;

     label2:
        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke r16.<java.util.Set: boolean add(java.lang.Object)>($r5);

     label3:
        return;
    }

    protected void trace(byte[], int)
    {
        org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder r0;
        byte[] r1;
        int i0;
        java.lang.String $r2;
        java.nio.charset.Charset $r3;

        r0 := @this: org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        $r2 = new java.lang.String;

        $r3 = <com.google.common.base.Charsets: java.nio.charset.Charset UTF_8>;

        specialinvoke $r2.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>(r1, $r3);

        virtualinvoke r0.<org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder: void trace(java.lang.String,int)>($r2, i0);

        return;
    }

    public void setTraceDictionary(java.util.Map)
    {
        org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder r0;
        java.util.Map r1;

        r0 := @this: org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder;

        r1 := @parameter0: java.util.Map;

        r0.<org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder: java.util.Map traceDictionary> = r1;

        return;
    }

    protected static byte[] bytesForString(java.lang.String)
    {
        java.lang.String r0;
        java.nio.charset.Charset $r1;
        byte[] $r2;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r2 = <org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder: byte[] EMPTY_ARRAY>;

        goto label2;

     label1:
        $r1 = <com.google.common.base.Charsets: java.nio.charset.Charset UTF_8>;

        $r2 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r1);

     label2:
        return $r2;
    }

    static void <clinit>()
    {
        byte[] $r0;

        <org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder: int WORD_LIKE_VALUE_HASH_SEED> = 100;

        <org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder: int CONTINUOUS_VALUE_HASH_SEED> = 1;

        $r0 = newarray (byte)[0];

        <org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder: byte[] EMPTY_ARRAY> = $r0;

        return;
    }
}
