public final class org.apache.mahout.math.MatrixUtils extends java.lang.Object
{

    private void <init>()
    {
        org.apache.mahout.math.MatrixUtils r0;

        r0 := @this: org.apache.mahout.math.MatrixUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void write(org.apache.hadoop.fs.Path, org.apache.hadoop.conf.Configuration, org.apache.mahout.math.VectorIterable) throws java.io.IOException
    {
        org.apache.hadoop.fs.Path r0;
        org.apache.hadoop.conf.Configuration r1;
        org.apache.mahout.math.VectorIterable r2;
        org.apache.hadoop.fs.FileSystem r3;
        org.apache.hadoop.io.SequenceFile$Writer r4;
        java.util.Iterator r7;
        org.apache.mahout.math.MatrixSlice r8;
        org.apache.hadoop.io.IntWritable $r9;
        org.apache.mahout.math.VectorWritable $r10;
        boolean $z1;
        int $i0;
        java.lang.Object $r11;
        org.apache.mahout.math.Vector $r12;

        r0 := @parameter0: org.apache.hadoop.fs.Path;

        r1 := @parameter1: org.apache.hadoop.conf.Configuration;

        r2 := @parameter2: org.apache.mahout.math.VectorIterable;

        r3 = virtualinvoke r0.<org.apache.hadoop.fs.Path: org.apache.hadoop.fs.FileSystem getFileSystem(org.apache.hadoop.conf.Configuration)>(r1);

        virtualinvoke r3.<org.apache.hadoop.fs.FileSystem: boolean delete(org.apache.hadoop.fs.Path,boolean)>(r0, 1);

        r4 = staticinvoke <org.apache.hadoop.io.SequenceFile: org.apache.hadoop.io.SequenceFile$Writer createWriter(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.Path,java.lang.Class,java.lang.Class)>(r3, r1, r0, class "org/apache/hadoop/io/IntWritable", class "org/apache/mahout/math/VectorWritable");

        $r9 = new org.apache.hadoop.io.IntWritable;

        specialinvoke $r9.<org.apache.hadoop.io.IntWritable: void <init>()>();

        $r10 = new org.apache.mahout.math.VectorWritable;

        specialinvoke $r10.<org.apache.mahout.math.VectorWritable: void <init>()>();

        r7 = interfaceinvoke r2.<org.apache.mahout.math.VectorIterable: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r11 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.apache.mahout.math.MatrixSlice) $r11;

        $i0 = virtualinvoke r8.<org.apache.mahout.math.MatrixSlice: int index()>();

        virtualinvoke $r9.<org.apache.hadoop.io.IntWritable: void set(int)>($i0);

        $r12 = virtualinvoke r8.<org.apache.mahout.math.MatrixSlice: org.apache.mahout.math.Vector vector()>();

        virtualinvoke $r10.<org.apache.mahout.math.VectorWritable: void set(org.apache.mahout.math.Vector)>($r12);

        virtualinvoke r4.<org.apache.hadoop.io.SequenceFile$Writer: void append(org.apache.hadoop.io.Writable,org.apache.hadoop.io.Writable)>($r9, $r10);

        goto label1;

     label2:
        virtualinvoke r4.<org.apache.hadoop.io.SequenceFile$Writer: void close()>();

        return;
    }

    public static transient org.apache.mahout.math.Matrix read(org.apache.hadoop.conf.Configuration, org.apache.hadoop.fs.Path[]) throws java.io.IOException
    {
        org.apache.hadoop.conf.Configuration r0;
        org.apache.hadoop.fs.Path[] r1;
        java.util.ArrayList r2;
        org.apache.hadoop.fs.Path r3;
        java.util.Iterator r4, r40;
        org.apache.mahout.common.Pair r5, $r29, r41;
        boolean $z0, $z1, $z2, $z4, z5, $z6;
        org.apache.mahout.math.Vector $r6, $r14, $r30, $r33, $r35;
        org.apache.mahout.math.DenseMatrix $r7;
        org.apache.mahout.math.SparseRowMatrix $r9;
        java.lang.Object $r10, $r12, $r13, $r22, $r24, $r25, $r28, $r31, $r37;
        java.lang.Integer $r11, $r27;
        int $i0, $i1, $i2, i3, i4, i5, i6, i7, i8;
        java.lang.StringBuilder $r15, $r17, $r20;
        java.io.IOException $r16;
        java.lang.String $r18, $r19;
        org.apache.mahout.common.iterator.sequencefile.SequenceFileIterable $r21;
        org.apache.hadoop.io.IntWritable $r23, $r32;
        org.apache.mahout.math.VectorWritable $r26, $r34, $r36;
        org.apache.mahout.math.Vector[] r39;
        org.apache.mahout.math.AbstractMatrix r42;

        r0 := @parameter0: org.apache.hadoop.conf.Configuration;

        r1 := @parameter1: org.apache.hadoop.fs.Path[];

        i3 = -1;

        i4 = -1;

        z5 = 0;

        r2 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

        i5 = lengthof r1;

        i6 = 0;

     label01:
        if i6 >= i5 goto label06;

        r3 = r1[i6];

        $r21 = new org.apache.mahout.common.iterator.sequencefile.SequenceFileIterable;

        specialinvoke $r21.<org.apache.mahout.common.iterator.sequencefile.SequenceFileIterable: void <init>(org.apache.hadoop.fs.Path,boolean,org.apache.hadoop.conf.Configuration)>(r3, 1, r0);

        r4 = virtualinvoke $r21.<org.apache.mahout.common.iterator.sequencefile.SequenceFileIterable: java.util.Iterator iterator()>();

     label02:
        $z2 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label05;

        $r24 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.mahout.common.Pair) $r24;

        $r22 = virtualinvoke r5.<org.apache.mahout.common.Pair: java.lang.Object getFirst()>();

        $r23 = (org.apache.hadoop.io.IntWritable) $r22;

        $i1 = virtualinvoke $r23.<org.apache.hadoop.io.IntWritable: int get()>();

        $r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r25 = virtualinvoke r5.<org.apache.mahout.common.Pair: java.lang.Object getSecond()>();

        $r26 = (org.apache.mahout.math.VectorWritable) $r25;

        $r30 = virtualinvoke $r26.<org.apache.mahout.math.VectorWritable: org.apache.mahout.math.Vector get()>();

        $r29 = staticinvoke <org.apache.mahout.common.Pair: org.apache.mahout.common.Pair of(java.lang.Object,java.lang.Object)>($r27, $r30);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r29);

        $r28 = virtualinvoke r5.<org.apache.mahout.common.Pair: java.lang.Object getFirst()>();

        $r32 = (org.apache.hadoop.io.IntWritable) $r28;

        $i2 = virtualinvoke $r32.<org.apache.hadoop.io.IntWritable: int get()>();

        i3 = staticinvoke <java.lang.Math: int max(int,int)>(i3, $i2);

        $r31 = virtualinvoke r5.<org.apache.mahout.common.Pair: java.lang.Object getSecond()>();

        $r34 = (org.apache.mahout.math.VectorWritable) $r31;

        $r33 = virtualinvoke $r34.<org.apache.mahout.math.VectorWritable: org.apache.mahout.math.Vector get()>();

        $z4 = interfaceinvoke $r33.<org.apache.mahout.math.Vector: boolean isDense()>();

        if $z4 != 0 goto label03;

        $z6 = 1;

        goto label04;

     label03:
        $z6 = 0;

     label04:
        z5 = $z6;

        if i4 >= 0 goto label02;

        $r37 = virtualinvoke r5.<org.apache.mahout.common.Pair: java.lang.Object getSecond()>();

        $r36 = (org.apache.mahout.math.VectorWritable) $r37;

        $r35 = virtualinvoke $r36.<org.apache.mahout.math.VectorWritable: org.apache.mahout.math.Vector get()>();

        i4 = interfaceinvoke $r35.<org.apache.mahout.math.Vector: int size()>();

        goto label02;

     label05:
        i6 = i6 + 1;

        goto label01;

     label06:
        $z0 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label07;

        $r16 = new java.io.IOException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r19 = staticinvoke <org.apache.mahout.math.Arrays: java.lang.String toString(java.lang.Object[])>(r1);

        $r20 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r17 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" have no vectors in it");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.io.IOException: void <init>(java.lang.String)>($r18);

        throw $r16;

     label07:
        i7 = i3 + 1;

        r39 = newarray (org.apache.mahout.math.Vector)[i7];

        r40 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $z1 = interfaceinvoke r40.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label09;

        $r10 = interfaceinvoke r40.<java.util.Iterator: java.lang.Object next()>();

        r41 = (org.apache.mahout.common.Pair) $r10;

        $r12 = virtualinvoke r41.<org.apache.mahout.common.Pair: java.lang.Object getFirst()>();

        $r11 = (java.lang.Integer) $r12;

        $i0 = virtualinvoke $r11.<java.lang.Integer: int intValue()>();

        $r13 = virtualinvoke r41.<org.apache.mahout.common.Pair: java.lang.Object getSecond()>();

        $r14 = (org.apache.mahout.math.Vector) $r13;

        r39[$i0] = $r14;

        goto label08;

     label09:
        if z5 == 0 goto label10;

        $r9 = new org.apache.mahout.math.SparseRowMatrix;

        specialinvoke $r9.<org.apache.mahout.math.SparseRowMatrix: void <init>(int,int,org.apache.mahout.math.Vector[])>(i7, i4, r39);

        r42 = $r9;

        goto label12;

     label10:
        $r7 = new org.apache.mahout.math.DenseMatrix;

        specialinvoke $r7.<org.apache.mahout.math.DenseMatrix: void <init>(int,int)>(i7, i4);

        r42 = $r7;

        i8 = 0;

     label11:
        if i8 >= i7 goto label12;

        $r6 = r39[i8];

        interfaceinvoke $r7.<org.apache.mahout.math.Matrix: org.apache.mahout.math.Matrix assignRow(int,org.apache.mahout.math.Vector)>(i8, $r6);

        i8 = i8 + 1;

        goto label11;

     label12:
        return r42;
    }

    public static transient org.apache.mahout.math.map.OpenObjectIntHashMap readDictionary(org.apache.hadoop.conf.Configuration, org.apache.hadoop.fs.Path[])
    {
        org.apache.hadoop.conf.Configuration r0;
        org.apache.hadoop.fs.Path[] r1;
        int i0, $i1, i2;
        org.apache.hadoop.fs.Path r4;
        java.util.Iterator r5;
        org.apache.mahout.common.Pair r6;
        org.apache.mahout.math.map.OpenObjectIntHashMap $r7;
        org.apache.mahout.common.iterator.sequencefile.SequenceFileIterable $r8;
        boolean $z0;
        java.lang.Object $r9, $r11, $r12;
        org.apache.hadoop.io.Writable $r10;
        java.lang.String $r13;
        org.apache.hadoop.io.IntWritable $r14;

        r0 := @parameter0: org.apache.hadoop.conf.Configuration;

        r1 := @parameter1: org.apache.hadoop.fs.Path[];

        $r7 = new org.apache.mahout.math.map.OpenObjectIntHashMap;

        specialinvoke $r7.<org.apache.mahout.math.map.OpenObjectIntHashMap: void <init>()>();

        i0 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        r4 = r1[i2];

        $r8 = new org.apache.mahout.common.iterator.sequencefile.SequenceFileIterable;

        specialinvoke $r8.<org.apache.mahout.common.iterator.sequencefile.SequenceFileIterable: void <init>(org.apache.hadoop.fs.Path,boolean,org.apache.hadoop.conf.Configuration)>(r4, 1, r0);

        r5 = virtualinvoke $r8.<org.apache.mahout.common.iterator.sequencefile.SequenceFileIterable: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r9 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.mahout.common.Pair) $r9;

        $r11 = virtualinvoke r6.<org.apache.mahout.common.Pair: java.lang.Object getFirst()>();

        $r10 = (org.apache.hadoop.io.Writable) $r11;

        $r13 = virtualinvoke $r10.<java.lang.Object: java.lang.String toString()>();

        $r12 = virtualinvoke r6.<org.apache.mahout.common.Pair: java.lang.Object getSecond()>();

        $r14 = (org.apache.hadoop.io.IntWritable) $r12;

        $i1 = virtualinvoke $r14.<org.apache.hadoop.io.IntWritable: int get()>();

        virtualinvoke $r7.<org.apache.mahout.math.map.OpenObjectIntHashMap: boolean put(java.lang.Object,int)>($r13, $i1);

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return $r7;
    }

    public static java.lang.String[] invertDictionary(org.apache.mahout.math.map.OpenObjectIntHashMap)
    {
        org.apache.mahout.math.map.OpenObjectIntHashMap r0;
        java.lang.String r1, r7;
        java.util.List $r2, $r3;
        boolean $z0, $z1;
        java.lang.Object $r4, $r5;
        int $i0, $i1, i2, i3;
        java.util.Iterator r6, r9;
        java.lang.String[] r8;

        r0 := @parameter0: org.apache.mahout.math.map.OpenObjectIntHashMap;

        i2 = -1;

        $r2 = virtualinvoke r0.<org.apache.mahout.math.map.OpenObjectIntHashMap: java.util.List keys()>();

        r6 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.String) $r5;

        $i1 = virtualinvoke r0.<org.apache.mahout.math.map.OpenObjectIntHashMap: int get(java.lang.Object)>(r7);

        i2 = staticinvoke <java.lang.Math: int max(int,int)>(i2, $i1);

        goto label1;

     label2:
        i3 = i2 + 1;

        r8 = newarray (java.lang.String)[i3];

        $r3 = virtualinvoke r0.<org.apache.mahout.math.map.OpenObjectIntHashMap: java.util.List keys()>();

        r9 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r4 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        r1 = (java.lang.String) $r4;

        $i0 = virtualinvoke r0.<org.apache.mahout.math.map.OpenObjectIntHashMap: int get(java.lang.Object)>(r1);

        r8[$i0] = r1;

        goto label3;

     label4:
        return r8;
    }
}
