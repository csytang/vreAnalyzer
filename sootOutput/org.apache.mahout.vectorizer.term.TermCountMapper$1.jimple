class org.apache.mahout.vectorizer.term.TermCountMapper$1 extends java.lang.Object implements org.apache.mahout.math.function.ObjectLongProcedure
{
    final org.apache.hadoop.mapreduce.Mapper$Context val$context;
    final org.apache.mahout.vectorizer.term.TermCountMapper this$0;

    void <init>(org.apache.mahout.vectorizer.term.TermCountMapper, org.apache.hadoop.mapreduce.Mapper$Context)
    {
        org.apache.mahout.vectorizer.term.TermCountMapper$1 r0;
        org.apache.mahout.vectorizer.term.TermCountMapper r1;
        org.apache.hadoop.mapreduce.Mapper$Context r2;

        r0 := @this: org.apache.mahout.vectorizer.term.TermCountMapper$1;

        r1 := @parameter0: org.apache.mahout.vectorizer.term.TermCountMapper;

        r2 := @parameter1: org.apache.hadoop.mapreduce.Mapper$Context;

        r0.<org.apache.mahout.vectorizer.term.TermCountMapper$1: org.apache.mahout.vectorizer.term.TermCountMapper this$0> = r1;

        r0.<org.apache.mahout.vectorizer.term.TermCountMapper$1: org.apache.hadoop.mapreduce.Mapper$Context val$context> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean apply(java.lang.String, long)
    {
        org.apache.mahout.vectorizer.term.TermCountMapper$1 r0;
        java.lang.String r1;
        long l0;
        org.apache.hadoop.io.Text $r2;
        org.apache.hadoop.mapreduce.Mapper$Context $r3, $r6, $r9;
        org.apache.hadoop.io.LongWritable $r4;
        java.io.IOException $r5;
        org.apache.hadoop.mapreduce.Counter $r7, $r10;
        java.lang.InterruptedException $r8;

        r0 := @this: org.apache.mahout.vectorizer.term.TermCountMapper$1;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

     label1:
        $r3 = r0.<org.apache.mahout.vectorizer.term.TermCountMapper$1: org.apache.hadoop.mapreduce.Mapper$Context val$context>;

        $r2 = new org.apache.hadoop.io.Text;

        specialinvoke $r2.<org.apache.hadoop.io.Text: void <init>(java.lang.String)>(r1);

        $r4 = new org.apache.hadoop.io.LongWritable;

        specialinvoke $r4.<org.apache.hadoop.io.LongWritable: void <init>(long)>(l0);

        virtualinvoke $r3.<org.apache.hadoop.mapreduce.Mapper$Context: void write(java.lang.Object,java.lang.Object)>($r2, $r4);

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        $r6 = r0.<org.apache.mahout.vectorizer.term.TermCountMapper$1: org.apache.hadoop.mapreduce.Mapper$Context val$context>;

        $r7 = virtualinvoke $r6.<org.apache.hadoop.mapreduce.Mapper$Context: org.apache.hadoop.mapreduce.Counter getCounter(java.lang.String,java.lang.String)>("Exception", "Output IO Exception");

        interfaceinvoke $r7.<org.apache.hadoop.mapreduce.Counter: void increment(long)>(1L);

        goto label5;

     label4:
        $r8 := @caughtexception;

        $r9 = r0.<org.apache.mahout.vectorizer.term.TermCountMapper$1: org.apache.hadoop.mapreduce.Mapper$Context val$context>;

        $r10 = virtualinvoke $r9.<org.apache.hadoop.mapreduce.Mapper$Context: org.apache.hadoop.mapreduce.Counter getCounter(java.lang.String,java.lang.String)>("Exception", "Interrupted Exception");

        interfaceinvoke $r10.<org.apache.hadoop.mapreduce.Counter: void increment(long)>(1L);

     label5:
        return 1;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.lang.InterruptedException from label1 to label2 with label4;
    }

    public volatile boolean apply(java.lang.Object, long)
    {
        org.apache.mahout.vectorizer.term.TermCountMapper$1 r0;
        java.lang.Object r1;
        long l0;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: org.apache.mahout.vectorizer.term.TermCountMapper$1;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        $r2 = (java.lang.String) r1;

        $z0 = virtualinvoke r0.<org.apache.mahout.vectorizer.term.TermCountMapper$1: boolean apply(java.lang.String,long)>($r2, l0);

        return $z0;
    }
}
