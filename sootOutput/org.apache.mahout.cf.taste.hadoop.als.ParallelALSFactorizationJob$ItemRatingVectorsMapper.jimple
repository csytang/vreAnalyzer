class org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob$ItemRatingVectorsMapper extends org.apache.hadoop.mapreduce.Mapper
{
    private final org.apache.hadoop.io.IntWritable itemIDWritable;
    private final org.apache.mahout.math.VectorWritable ratingsWritable;
    private final org.apache.mahout.math.Vector ratings;
    private boolean usesLongIDs;

    void <init>()
    {
        org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob$ItemRatingVectorsMapper r0;
        org.apache.hadoop.io.IntWritable $r1;
        org.apache.mahout.math.VectorWritable $r2;
        org.apache.mahout.math.RandomAccessSparseVector $r3;

        r0 := @this: org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob$ItemRatingVectorsMapper;

        specialinvoke r0.<org.apache.hadoop.mapreduce.Mapper: void <init>()>();

        $r1 = new org.apache.hadoop.io.IntWritable;

        specialinvoke $r1.<org.apache.hadoop.io.IntWritable: void <init>()>();

        r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob$ItemRatingVectorsMapper: org.apache.hadoop.io.IntWritable itemIDWritable> = $r1;

        $r2 = new org.apache.mahout.math.VectorWritable;

        specialinvoke $r2.<org.apache.mahout.math.VectorWritable: void <init>(boolean)>(1);

        r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob$ItemRatingVectorsMapper: org.apache.mahout.math.VectorWritable ratingsWritable> = $r2;

        $r3 = new org.apache.mahout.math.RandomAccessSparseVector;

        specialinvoke $r3.<org.apache.mahout.math.RandomAccessSparseVector: void <init>(int,int)>(2147483647, 1);

        r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob$ItemRatingVectorsMapper: org.apache.mahout.math.Vector ratings> = $r3;

        return;
    }

    protected void setup(org.apache.hadoop.mapreduce.Mapper$Context) throws java.io.IOException, java.lang.InterruptedException
    {
        org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob$ItemRatingVectorsMapper r0;
        org.apache.hadoop.mapreduce.Mapper$Context r1;
        org.apache.hadoop.conf.Configuration $r2;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob$ItemRatingVectorsMapper;

        r1 := @parameter0: org.apache.hadoop.mapreduce.Mapper$Context;

        $r2 = virtualinvoke r1.<org.apache.hadoop.mapreduce.Mapper$Context: org.apache.hadoop.conf.Configuration getConfiguration()>();

        $r3 = <org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: java.lang.String USES_LONG_IDS>;

        $z0 = virtualinvoke $r2.<org.apache.hadoop.conf.Configuration: boolean getBoolean(java.lang.String,boolean)>($r3, 0);

        r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob$ItemRatingVectorsMapper: boolean usesLongIDs> = $z0;

        return;
    }

    protected void map(org.apache.hadoop.io.LongWritable, org.apache.hadoop.io.Text, org.apache.hadoop.mapreduce.Mapper$Context) throws java.io.IOException, java.lang.InterruptedException
    {
        org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob$ItemRatingVectorsMapper r0;
        org.apache.hadoop.io.LongWritable r1;
        org.apache.hadoop.io.Text r2;
        org.apache.hadoop.mapreduce.Mapper$Context r3;
        java.lang.String[] r4;
        int i0, i1;
        float f0;
        java.lang.String $r5, $r6, $r7, $r8;
        boolean $z0, $z1;
        org.apache.mahout.math.Vector $r9, $r10, $r14;
        double $d0;
        org.apache.hadoop.io.IntWritable $r11, $r15;
        org.apache.mahout.math.VectorWritable $r12, $r13;

        r0 := @this: org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob$ItemRatingVectorsMapper;

        r1 := @parameter0: org.apache.hadoop.io.LongWritable;

        r2 := @parameter1: org.apache.hadoop.io.Text;

        r3 := @parameter2: org.apache.hadoop.mapreduce.Mapper$Context;

        $r5 = virtualinvoke r2.<org.apache.hadoop.io.Text: java.lang.String toString()>();

        r4 = staticinvoke <org.apache.mahout.cf.taste.hadoop.TasteHadoopUtils: java.lang.String[] splitPrefTokens(java.lang.CharSequence)>($r5);

        $r6 = r4[0];

        $z0 = r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob$ItemRatingVectorsMapper: boolean usesLongIDs>;

        i0 = staticinvoke <org.apache.mahout.cf.taste.hadoop.TasteHadoopUtils: int readID(java.lang.String,boolean)>($r6, $z0);

        $r7 = r4[1];

        $z1 = r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob$ItemRatingVectorsMapper: boolean usesLongIDs>;

        i1 = staticinvoke <org.apache.mahout.cf.taste.hadoop.TasteHadoopUtils: int readID(java.lang.String,boolean)>($r7, $z1);

        $r8 = r4[2];

        f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r8);

        $r9 = r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob$ItemRatingVectorsMapper: org.apache.mahout.math.Vector ratings>;

        $d0 = (double) f0;

        interfaceinvoke $r9.<org.apache.mahout.math.Vector: void setQuick(int,double)>(i0, $d0);

        $r11 = r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob$ItemRatingVectorsMapper: org.apache.hadoop.io.IntWritable itemIDWritable>;

        virtualinvoke $r11.<org.apache.hadoop.io.IntWritable: void set(int)>(i1);

        $r13 = r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob$ItemRatingVectorsMapper: org.apache.mahout.math.VectorWritable ratingsWritable>;

        $r10 = r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob$ItemRatingVectorsMapper: org.apache.mahout.math.Vector ratings>;

        virtualinvoke $r13.<org.apache.mahout.math.VectorWritable: void set(org.apache.mahout.math.Vector)>($r10);

        $r15 = r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob$ItemRatingVectorsMapper: org.apache.hadoop.io.IntWritable itemIDWritable>;

        $r12 = r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob$ItemRatingVectorsMapper: org.apache.mahout.math.VectorWritable ratingsWritable>;

        virtualinvoke r3.<org.apache.hadoop.mapreduce.Mapper$Context: void write(java.lang.Object,java.lang.Object)>($r15, $r12);

        $r14 = r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob$ItemRatingVectorsMapper: org.apache.mahout.math.Vector ratings>;

        interfaceinvoke $r14.<org.apache.mahout.math.Vector: void setQuick(int,double)>(i0, 0.0);

        return;
    }

    protected volatile void map(java.lang.Object, java.lang.Object, org.apache.hadoop.mapreduce.Mapper$Context) throws java.io.IOException, java.lang.InterruptedException
    {
        org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob$ItemRatingVectorsMapper r0;
        java.lang.Object r1, r2;
        org.apache.hadoop.mapreduce.Mapper$Context r3;
        org.apache.hadoop.io.Text $r4;
        org.apache.hadoop.io.LongWritable $r5;

        r0 := @this: org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob$ItemRatingVectorsMapper;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: org.apache.hadoop.mapreduce.Mapper$Context;

        $r5 = (org.apache.hadoop.io.LongWritable) r1;

        $r4 = (org.apache.hadoop.io.Text) r2;

        virtualinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob$ItemRatingVectorsMapper: void map(org.apache.hadoop.io.LongWritable,org.apache.hadoop.io.Text,org.apache.hadoop.mapreduce.Mapper$Context)>($r5, $r4, r3);

        return;
    }
}
