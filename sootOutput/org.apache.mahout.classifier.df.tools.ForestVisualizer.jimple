public final class org.apache.mahout.classifier.df.tools.ForestVisualizer extends java.lang.Object
{
    private static final org.slf4j.Logger log;

    private void <init>()
    {
        org.apache.mahout.classifier.df.tools.ForestVisualizer r0;

        r0 := @this: org.apache.mahout.classifier.df.tools.ForestVisualizer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String toString(org.apache.mahout.classifier.df.DecisionForest, org.apache.mahout.classifier.df.data.Dataset, java.lang.String[])
    {
        org.apache.mahout.classifier.df.DecisionForest r0;
        org.apache.mahout.classifier.df.data.Dataset r1;
        java.lang.String[] r2;
        java.util.List r3;
        java.util.Iterator r5;
        org.apache.mahout.classifier.df.node.Node r6;
        java.lang.Class $r7;
        java.lang.Class[] $r8;
        java.lang.Object[] $r9;
        java.lang.Object $r10, $r12;
        java.lang.StringBuilder $r11, $r14, $r15;
        boolean $z0;
        java.lang.String $r13, $r16;
        java.lang.IllegalAccessException $r20;
        java.lang.reflect.InvocationTargetException $r21;
        java.lang.IllegalStateException $r22, $r24, $r25;
        java.lang.NoSuchMethodException $r23;
        java.lang.reflect.Method r26;
        int i0;

        r0 := @parameter0: org.apache.mahout.classifier.df.DecisionForest;

        r1 := @parameter1: org.apache.mahout.classifier.df.data.Dataset;

        r2 := @parameter2: java.lang.String[];

     label1:
        $r7 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = newarray (java.lang.Class)[0];

        r26 = virtualinvoke $r7.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("getTrees", $r8);

        virtualinvoke r26.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

        $r9 = newarray (java.lang.Object)[0];

        $r10 = virtualinvoke r26.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r9);

        r3 = (java.util.List) $r10;

     label2:
        goto label6;

     label3:
        $r20 := @caughtexception;

        $r22 = new java.lang.IllegalStateException;

        specialinvoke $r22.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r20);

        throw $r22;

     label4:
        $r21 := @caughtexception;

        $r24 = new java.lang.IllegalStateException;

        specialinvoke $r24.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r21);

        throw $r24;

     label5:
        $r23 := @caughtexception;

        $r25 = new java.lang.IllegalStateException;

        specialinvoke $r25.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r23);

        throw $r25;

     label6:
        i0 = 1;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        r5 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label7:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r12 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.mahout.classifier.df.node.Node) $r12;

        $r15 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tree[");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]:");

        $r16 = staticinvoke <org.apache.mahout.classifier.df.tools.TreeVisualizer: java.lang.String toString(org.apache.mahout.classifier.df.node.Node,org.apache.mahout.classifier.df.data.Dataset,java.lang.String[])>(r6, r1, r2);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        i0 = i0 + 1;

        goto label7;

     label8:
        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label4;
        catch java.lang.NoSuchMethodException from label1 to label2 with label5;
    }

    public static java.lang.String toString(java.lang.String, java.lang.String, java.lang.String[]) throws java.io.IOException
    {
        java.lang.String r0, r1, $r9;
        java.lang.String[] r2;
        org.apache.mahout.classifier.df.DecisionForest r4;
        org.apache.mahout.classifier.df.data.Dataset r5;
        org.apache.hadoop.conf.Configuration $r6;
        org.apache.hadoop.fs.Path $r7, $r8;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String[];

        $r6 = new org.apache.hadoop.conf.Configuration;

        specialinvoke $r6.<org.apache.hadoop.conf.Configuration: void <init>()>();

        $r7 = new org.apache.hadoop.fs.Path;

        specialinvoke $r7.<org.apache.hadoop.fs.Path: void <init>(java.lang.String)>(r0);

        r4 = staticinvoke <org.apache.mahout.classifier.df.DecisionForest: org.apache.mahout.classifier.df.DecisionForest load(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.Path)>($r6, $r7);

        $r8 = new org.apache.hadoop.fs.Path;

        specialinvoke $r8.<org.apache.hadoop.fs.Path: void <init>(java.lang.String)>(r1);

        r5 = staticinvoke <org.apache.mahout.classifier.df.data.Dataset: org.apache.mahout.classifier.df.data.Dataset load(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.Path)>($r6, $r8);

        $r9 = staticinvoke <org.apache.mahout.classifier.df.tools.ForestVisualizer: java.lang.String toString(org.apache.mahout.classifier.df.DecisionForest,org.apache.mahout.classifier.df.data.Dataset,java.lang.String[])>(r4, r5, r2);

        return $r9;
    }

    public static void print(java.lang.String, java.lang.String, java.lang.String[]) throws java.io.IOException
    {
        java.lang.String r0, r1, $r4;
        java.lang.String[] r2;
        java.io.PrintStream $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String[];

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r4 = staticinvoke <org.apache.mahout.classifier.df.tools.ForestVisualizer: java.lang.String toString(java.lang.String,java.lang.String,java.lang.String[])>(r0, r1, r2);

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r4);

        return;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] r0, r57;
        org.apache.commons.cli2.option.DefaultOption r4, r5, r6, r7;
        org.apache.commons.cli2.Group r8;
        org.apache.commons.cli2.CommandLine r9;
        java.lang.String r10, r11;
        java.util.List r12;
        org.apache.commons.cli2.builder.DefaultOptionBuilder $r13, $r16, $r17, $r19, $r22, $r24, $r25, $r26, $r28, $r30, $r33, $r34, $r35, $r38, $r40, $r41, $r42, $r44, $r45;
        org.apache.commons.cli2.builder.GroupBuilder $r14, $r43, $r46, $r47, $r48, $r49;
        org.apache.commons.cli2.builder.ArgumentBuilder $r15, $r18, $r20, $r21, $r27, $r31, $r32, $r36, $r39;
        org.apache.commons.cli2.Argument $r23, $r29, $r37;
        boolean $z0, $z1, $z2;
        org.apache.commons.cli2.commandline.Parser $r50;
        java.lang.Object $r51, $r52;
        int $i0;
        java.lang.Exception $r54;
        org.slf4j.Logger $r55;

        r0 := @parameter0: java.lang.String[];

        $r13 = new org.apache.commons.cli2.builder.DefaultOptionBuilder;

        specialinvoke $r13.<org.apache.commons.cli2.builder.DefaultOptionBuilder: void <init>()>();

        $r15 = new org.apache.commons.cli2.builder.ArgumentBuilder;

        specialinvoke $r15.<org.apache.commons.cli2.builder.ArgumentBuilder: void <init>()>();

        $r14 = new org.apache.commons.cli2.builder.GroupBuilder;

        specialinvoke $r14.<org.apache.commons.cli2.builder.GroupBuilder: void <init>()>();

        $r17 = virtualinvoke $r13.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.builder.DefaultOptionBuilder withLongName(java.lang.String)>("dataset");

        $r16 = virtualinvoke $r17.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.builder.DefaultOptionBuilder withShortName(java.lang.String)>("ds");

        $r19 = virtualinvoke $r16.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.builder.DefaultOptionBuilder withRequired(boolean)>(1);

        $r18 = virtualinvoke $r15.<org.apache.commons.cli2.builder.ArgumentBuilder: org.apache.commons.cli2.builder.ArgumentBuilder withName(java.lang.String)>("dataset");

        $r21 = virtualinvoke $r18.<org.apache.commons.cli2.builder.ArgumentBuilder: org.apache.commons.cli2.builder.ArgumentBuilder withMinimum(int)>(1);

        $r20 = virtualinvoke $r21.<org.apache.commons.cli2.builder.ArgumentBuilder: org.apache.commons.cli2.builder.ArgumentBuilder withMaximum(int)>(1);

        $r23 = virtualinvoke $r20.<org.apache.commons.cli2.builder.ArgumentBuilder: org.apache.commons.cli2.Argument create()>();

        $r22 = virtualinvoke $r19.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.builder.DefaultOptionBuilder withArgument(org.apache.commons.cli2.Argument)>($r23);

        $r24 = virtualinvoke $r22.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.builder.DefaultOptionBuilder withDescription(java.lang.String)>("Dataset path");

        r4 = virtualinvoke $r24.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.option.DefaultOption create()>();

        $r26 = virtualinvoke $r13.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.builder.DefaultOptionBuilder withLongName(java.lang.String)>("model");

        $r25 = virtualinvoke $r26.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.builder.DefaultOptionBuilder withShortName(java.lang.String)>("m");

        $r28 = virtualinvoke $r25.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.builder.DefaultOptionBuilder withRequired(boolean)>(1);

        $r27 = virtualinvoke $r15.<org.apache.commons.cli2.builder.ArgumentBuilder: org.apache.commons.cli2.builder.ArgumentBuilder withName(java.lang.String)>("path");

        $r31 = virtualinvoke $r27.<org.apache.commons.cli2.builder.ArgumentBuilder: org.apache.commons.cli2.builder.ArgumentBuilder withMinimum(int)>(1);

        $r32 = virtualinvoke $r31.<org.apache.commons.cli2.builder.ArgumentBuilder: org.apache.commons.cli2.builder.ArgumentBuilder withMaximum(int)>(1);

        $r29 = virtualinvoke $r32.<org.apache.commons.cli2.builder.ArgumentBuilder: org.apache.commons.cli2.Argument create()>();

        $r30 = virtualinvoke $r28.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.builder.DefaultOptionBuilder withArgument(org.apache.commons.cli2.Argument)>($r29);

        $r35 = virtualinvoke $r30.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.builder.DefaultOptionBuilder withDescription(java.lang.String)>("Path to the Decision Forest");

        r5 = virtualinvoke $r35.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.option.DefaultOption create()>();

        $r33 = virtualinvoke $r13.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.builder.DefaultOptionBuilder withLongName(java.lang.String)>("names");

        $r34 = virtualinvoke $r33.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.builder.DefaultOptionBuilder withShortName(java.lang.String)>("n");

        $r38 = virtualinvoke $r34.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.builder.DefaultOptionBuilder withRequired(boolean)>(0);

        $r39 = virtualinvoke $r15.<org.apache.commons.cli2.builder.ArgumentBuilder: org.apache.commons.cli2.builder.ArgumentBuilder withName(java.lang.String)>("names");

        $r36 = virtualinvoke $r39.<org.apache.commons.cli2.builder.ArgumentBuilder: org.apache.commons.cli2.builder.ArgumentBuilder withMinimum(int)>(1);

        $r37 = virtualinvoke $r36.<org.apache.commons.cli2.builder.ArgumentBuilder: org.apache.commons.cli2.Argument create()>();

        $r41 = virtualinvoke $r38.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.builder.DefaultOptionBuilder withArgument(org.apache.commons.cli2.Argument)>($r37);

        $r42 = virtualinvoke $r41.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.builder.DefaultOptionBuilder withDescription(java.lang.String)>("Optional, Attribute names");

        r6 = virtualinvoke $r42.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.option.DefaultOption create()>();

        $r40 = virtualinvoke $r13.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.builder.DefaultOptionBuilder withLongName(java.lang.String)>("help");

        $r45 = virtualinvoke $r40.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.builder.DefaultOptionBuilder withShortName(java.lang.String)>("h");

        $r44 = virtualinvoke $r45.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.builder.DefaultOptionBuilder withDescription(java.lang.String)>("Print out help");

        r7 = virtualinvoke $r44.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.option.DefaultOption create()>();

        $r43 = virtualinvoke $r14.<org.apache.commons.cli2.builder.GroupBuilder: org.apache.commons.cli2.builder.GroupBuilder withName(java.lang.String)>("Options");

        $r49 = virtualinvoke $r43.<org.apache.commons.cli2.builder.GroupBuilder: org.apache.commons.cli2.builder.GroupBuilder withOption(org.apache.commons.cli2.Option)>(r4);

        $r48 = virtualinvoke $r49.<org.apache.commons.cli2.builder.GroupBuilder: org.apache.commons.cli2.builder.GroupBuilder withOption(org.apache.commons.cli2.Option)>(r5);

        $r47 = virtualinvoke $r48.<org.apache.commons.cli2.builder.GroupBuilder: org.apache.commons.cli2.builder.GroupBuilder withOption(org.apache.commons.cli2.Option)>(r6);

        $r46 = virtualinvoke $r47.<org.apache.commons.cli2.builder.GroupBuilder: org.apache.commons.cli2.builder.GroupBuilder withOption(org.apache.commons.cli2.Option)>(r7);

        r8 = virtualinvoke $r46.<org.apache.commons.cli2.builder.GroupBuilder: org.apache.commons.cli2.Group create()>();

     label1:
        $r50 = new org.apache.commons.cli2.commandline.Parser;

        specialinvoke $r50.<org.apache.commons.cli2.commandline.Parser: void <init>()>();

        virtualinvoke $r50.<org.apache.commons.cli2.commandline.Parser: void setGroup(org.apache.commons.cli2.Group)>(r8);

        r9 = virtualinvoke $r50.<org.apache.commons.cli2.commandline.Parser: org.apache.commons.cli2.CommandLine parse(java.lang.String[])>(r0);

        $z0 = interfaceinvoke r9.<org.apache.commons.cli2.CommandLine: boolean hasOption(java.lang.String)>("help");

        if $z0 == 0 goto label3;

        staticinvoke <org.apache.mahout.common.CommandLineUtil: void printHelp(org.apache.commons.cli2.Group)>(r8);

     label2:
        return;

     label3:
        $r52 = interfaceinvoke r9.<org.apache.commons.cli2.CommandLine: java.lang.Object getValue(org.apache.commons.cli2.Option)>(r4);

        r10 = virtualinvoke $r52.<java.lang.Object: java.lang.String toString()>();

        $r51 = interfaceinvoke r9.<org.apache.commons.cli2.CommandLine: java.lang.Object getValue(org.apache.commons.cli2.Option)>(r5);

        r11 = virtualinvoke $r51.<java.lang.Object: java.lang.String toString()>();

        r57 = null;

        $z1 = interfaceinvoke r9.<org.apache.commons.cli2.CommandLine: boolean hasOption(org.apache.commons.cli2.Option)>(r6);

        if $z1 == 0 goto label4;

        r12 = interfaceinvoke r9.<org.apache.commons.cli2.CommandLine: java.util.List getValues(org.apache.commons.cli2.Option)>(r6);

        $z2 = interfaceinvoke r12.<java.util.Collection: boolean isEmpty()>();

        if $z2 != 0 goto label4;

        $i0 = interfaceinvoke r12.<java.util.Collection: int size()>();

        r57 = newarray (java.lang.String)[$i0];

        interfaceinvoke r12.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>(r57);

     label4:
        staticinvoke <org.apache.mahout.classifier.df.tools.ForestVisualizer: void print(java.lang.String,java.lang.String,java.lang.String[])>(r11, r10, r57);

     label5:
        goto label7;

     label6:
        $r54 := @caughtexception;

        $r55 = <org.apache.mahout.classifier.df.tools.ForestVisualizer: org.slf4j.Logger log>;

        interfaceinvoke $r55.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Exception", $r54);

        staticinvoke <org.apache.mahout.common.CommandLineUtil: void printHelp(org.apache.commons.cli2.Group)>(r8);

     label7:
        return;

        catch java.lang.Exception from label1 to label2 with label6;
        catch java.lang.Exception from label3 to label5 with label6;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "org/apache/mahout/classifier/df/tools/ForestVisualizer");

        <org.apache.mahout.classifier.df.tools.ForestVisualizer: org.slf4j.Logger log> = $r0;

        return;
    }
}
