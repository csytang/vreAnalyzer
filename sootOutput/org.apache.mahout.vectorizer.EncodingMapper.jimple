public class org.apache.mahout.vectorizer.EncodingMapper extends org.apache.hadoop.mapreduce.Mapper
{
    public static final java.lang.String USE_NAMED_VECTORS;
    public static final java.lang.String USE_SEQUENTIAL;
    public static final java.lang.String ANALYZER_NAME;
    public static final java.lang.String ENCODER_FIELD_NAME;
    public static final java.lang.String ENCODER_CLASS;
    public static final java.lang.String CARDINALITY;
    private boolean sequentialVectors;
    private boolean namedVectors;
    private org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder encoder;
    private int cardinality;

    public void <init>()
    {
        org.apache.mahout.vectorizer.EncodingMapper r0;

        r0 := @this: org.apache.mahout.vectorizer.EncodingMapper;

        specialinvoke r0.<org.apache.hadoop.mapreduce.Mapper: void <init>()>();

        return;
    }

    protected void setup(org.apache.hadoop.mapreduce.Mapper$Context) throws java.io.IOException, java.lang.InterruptedException
    {
        org.apache.mahout.vectorizer.EncodingMapper r0;
        org.apache.hadoop.mapreduce.Mapper$Context r1;
        org.apache.hadoop.conf.Configuration r2;
        java.lang.String r3, r5, $r7, $r19, r22;
        org.apache.lucene.analysis.Analyzer r4;
        boolean $z0, $z1, $z2;
        java.lang.Class $r6;
        int $i0;
        java.lang.Object[] $r8;
        java.lang.Class[] $r9;
        org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder $r10, $r12, $r14;
        java.lang.Object $r11;
        org.apache.mahout.vectorizer.encoders.LuceneTextValueEncoder $r13;
        java.io.IOException $r15;
        java.lang.ClassNotFoundException $r16;
        java.lang.StringBuilder $r17, $r18, $r20;

        r0 := @this: org.apache.mahout.vectorizer.EncodingMapper;

        r1 := @parameter0: org.apache.hadoop.mapreduce.Mapper$Context;

        r2 = virtualinvoke r1.<org.apache.hadoop.mapreduce.Mapper$Context: org.apache.hadoop.conf.Configuration getConfiguration()>();

        $z0 = virtualinvoke r2.<org.apache.hadoop.conf.Configuration: boolean getBoolean(java.lang.String,boolean)>("sequential", 0);

        r0.<org.apache.mahout.vectorizer.EncodingMapper: boolean sequentialVectors> = $z0;

        $z1 = virtualinvoke r2.<org.apache.hadoop.conf.Configuration: boolean getBoolean(java.lang.String,boolean)>("namedVectors", 0);

        r0.<org.apache.mahout.vectorizer.EncodingMapper: boolean namedVectors> = $z1;

        $r6 = class "org/apache/lucene/analysis/standard/StandardAnalyzer";

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        r3 = virtualinvoke r2.<org.apache.hadoop.conf.Configuration: java.lang.String get(java.lang.String,java.lang.String)>("analyzer", $r7);

     label1:
        r4 = staticinvoke <org.apache.mahout.common.lucene.AnalyzerUtils: org.apache.lucene.analysis.Analyzer createAnalyzer(java.lang.String)>(r3);

     label2:
        goto label4;

     label3:
        $r16 := @caughtexception;

        $r15 = new java.io.IOException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to create Analyzer for name: ");

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>($r19, $r16);

        throw $r15;

     label4:
        r22 = virtualinvoke r2.<org.apache.hadoop.conf.Configuration: java.lang.String get(java.lang.String,java.lang.String)>("encoderFieldName", "text");

        $i0 = virtualinvoke r2.<org.apache.hadoop.conf.Configuration: int getInt(java.lang.String,int)>("cardinality", 5000);

        r0.<org.apache.mahout.vectorizer.EncodingMapper: int cardinality> = $i0;

        r5 = virtualinvoke r2.<org.apache.hadoop.conf.Configuration: java.lang.String get(java.lang.String)>("encoderClass");

        $r9 = newarray (java.lang.Class)[1];

        $r9[0] = class "java/lang/String";

        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = r22;

        $r11 = staticinvoke <org.apache.mahout.common.ClassUtils: java.lang.Object instantiateAs(java.lang.String,java.lang.Class,java.lang.Class[],java.lang.Object[])>(r5, class "org/apache/mahout/vectorizer/encoders/FeatureVectorEncoder", $r9, $r8);

        $r10 = (org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder) $r11;

        r0.<org.apache.mahout.vectorizer.EncodingMapper: org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder encoder> = $r10;

        $r12 = r0.<org.apache.mahout.vectorizer.EncodingMapper: org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder encoder>;

        $z2 = $r12 instanceof org.apache.mahout.vectorizer.encoders.LuceneTextValueEncoder;

        if $z2 == 0 goto label5;

        $r14 = r0.<org.apache.mahout.vectorizer.EncodingMapper: org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder encoder>;

        $r13 = (org.apache.mahout.vectorizer.encoders.LuceneTextValueEncoder) $r14;

        virtualinvoke $r13.<org.apache.mahout.vectorizer.encoders.LuceneTextValueEncoder: void setAnalyzer(org.apache.lucene.analysis.Analyzer)>(r4);

     label5:
        return;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    protected void map(org.apache.hadoop.io.Text, org.apache.hadoop.io.Text, org.apache.hadoop.mapreduce.Mapper$Context) throws java.io.IOException, java.lang.InterruptedException
    {
        org.apache.mahout.vectorizer.EncodingMapper r0;
        org.apache.hadoop.io.Text r1, r2, $r7;
        org.apache.hadoop.mapreduce.Mapper$Context r3;
        boolean $z0, $z1;
        org.apache.mahout.math.RandomAccessSparseVector $r4;
        int $i0, $i1;
        org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder $r5;
        java.lang.String $r6, $r8, $r11;
        org.apache.mahout.math.VectorWritable $r9;
        org.apache.mahout.math.NamedVector $r10;
        org.apache.mahout.math.SequentialAccessSparseVector $r12;
        org.apache.mahout.math.Vector r13;

        r0 := @this: org.apache.mahout.vectorizer.EncodingMapper;

        r1 := @parameter0: org.apache.hadoop.io.Text;

        r2 := @parameter1: org.apache.hadoop.io.Text;

        r3 := @parameter2: org.apache.hadoop.mapreduce.Mapper$Context;

        $z0 = r0.<org.apache.mahout.vectorizer.EncodingMapper: boolean sequentialVectors>;

        if $z0 == 0 goto label1;

        $r12 = new org.apache.mahout.math.SequentialAccessSparseVector;

        $i1 = r0.<org.apache.mahout.vectorizer.EncodingMapper: int cardinality>;

        specialinvoke $r12.<org.apache.mahout.math.SequentialAccessSparseVector: void <init>(int)>($i1);

        r13 = $r12;

        goto label2;

     label1:
        $r4 = new org.apache.mahout.math.RandomAccessSparseVector;

        $i0 = r0.<org.apache.mahout.vectorizer.EncodingMapper: int cardinality>;

        specialinvoke $r4.<org.apache.mahout.math.RandomAccessSparseVector: void <init>(int)>($i0);

        r13 = $r4;

     label2:
        $z1 = r0.<org.apache.mahout.vectorizer.EncodingMapper: boolean namedVectors>;

        if $z1 == 0 goto label3;

        $r10 = new org.apache.mahout.math.NamedVector;

        $r11 = virtualinvoke r1.<org.apache.hadoop.io.Text: java.lang.String toString()>();

        specialinvoke $r10.<org.apache.mahout.math.NamedVector: void <init>(org.apache.mahout.math.Vector,java.lang.String)>(r13, $r11);

        r13 = $r10;

     label3:
        $r5 = r0.<org.apache.mahout.vectorizer.EncodingMapper: org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder encoder>;

        $r6 = virtualinvoke r2.<org.apache.hadoop.io.Text: java.lang.String toString()>();

        virtualinvoke $r5.<org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder: void addToVector(java.lang.String,org.apache.mahout.math.Vector)>($r6, r13);

        $r7 = new org.apache.hadoop.io.Text;

        $r8 = virtualinvoke r1.<org.apache.hadoop.io.Text: java.lang.String toString()>();

        specialinvoke $r7.<org.apache.hadoop.io.Text: void <init>(java.lang.String)>($r8);

        $r9 = new org.apache.mahout.math.VectorWritable;

        specialinvoke $r9.<org.apache.mahout.math.VectorWritable: void <init>(org.apache.mahout.math.Vector)>(r13);

        virtualinvoke r3.<org.apache.hadoop.mapreduce.Mapper$Context: void write(java.lang.Object,java.lang.Object)>($r7, $r9);

        return;
    }

    protected volatile void map(java.lang.Object, java.lang.Object, org.apache.hadoop.mapreduce.Mapper$Context) throws java.io.IOException, java.lang.InterruptedException
    {
        org.apache.mahout.vectorizer.EncodingMapper r0;
        java.lang.Object r1, r2;
        org.apache.hadoop.mapreduce.Mapper$Context r3;
        org.apache.hadoop.io.Text $r4, $r5;

        r0 := @this: org.apache.mahout.vectorizer.EncodingMapper;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: org.apache.hadoop.mapreduce.Mapper$Context;

        $r5 = (org.apache.hadoop.io.Text) r1;

        $r4 = (org.apache.hadoop.io.Text) r2;

        virtualinvoke r0.<org.apache.mahout.vectorizer.EncodingMapper: void map(org.apache.hadoop.io.Text,org.apache.hadoop.io.Text,org.apache.hadoop.mapreduce.Mapper$Context)>($r5, $r4, r3);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.mahout.vectorizer.EncodingMapper: java.lang.String CARDINALITY> = "cardinality";

        <org.apache.mahout.vectorizer.EncodingMapper: java.lang.String ENCODER_CLASS> = "encoderClass";

        <org.apache.mahout.vectorizer.EncodingMapper: java.lang.String ENCODER_FIELD_NAME> = "encoderFieldName";

        <org.apache.mahout.vectorizer.EncodingMapper: java.lang.String ANALYZER_NAME> = "analyzer";

        <org.apache.mahout.vectorizer.EncodingMapper: java.lang.String USE_SEQUENTIAL> = "sequential";

        <org.apache.mahout.vectorizer.EncodingMapper: java.lang.String USE_NAMED_VECTORS> = "namedVectors";

        return;
    }
}
