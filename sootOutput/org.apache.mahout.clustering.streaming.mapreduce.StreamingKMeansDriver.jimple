public final class org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver extends org.apache.mahout.common.AbstractJob
{
    public static final java.lang.String ESTIMATED_NUM_MAP_CLUSTERS;
    public static final java.lang.String ESTIMATED_DISTANCE_CUTOFF;
    public static final java.lang.String MAX_NUM_ITERATIONS;
    public static final java.lang.String TRIM_FRACTION;
    public static final java.lang.String RANDOM_INIT;
    public static final java.lang.String IGNORE_WEIGHTS;
    public static final java.lang.String TEST_PROBABILITY;
    public static final java.lang.String NUM_BALLKMEANS_RUNS;
    public static final java.lang.String SEARCHER_CLASS_OPTION;
    public static final java.lang.String NUM_PROJECTIONS_OPTION;
    public static final java.lang.String SEARCH_SIZE_OPTION;
    public static final java.lang.String REDUCE_STREAMING_KMEANS;
    private static final org.slf4j.Logger log;
    public static final float INVALID_DISTANCE_CUTOFF;

    public int run(java.lang.String[]) throws java.lang.Exception
    {
        org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver r0;
        java.lang.String[] r1;
        org.apache.hadoop.fs.Path r2, $r28;
        org.apache.commons.cli2.builder.DefaultOptionBuilder $r3, $r6, $r7, $r15, $r23;
        org.apache.commons.cli2.option.DefaultOption $r4, $r8, $r16, $r22;
        java.lang.String $r10, $r11, $r12, $r13, $r14, $r17, $r20, $r21, $r24;
        java.lang.Class $r19;
        boolean $z0;
        java.util.Map $r25;
        org.apache.hadoop.conf.Configuration $r27, $r29;
        org.apache.hadoop.fs.Path[] $r30;

        r0 := @this: org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver;

        r1 := @parameter0: java.lang.String[];

        virtualinvoke r0.<org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: void addInputOption()>();

        virtualinvoke r0.<org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: void addOutputOption()>();

        $r3 = staticinvoke <org.apache.mahout.common.commandline.DefaultOptionCreator: org.apache.commons.cli2.builder.DefaultOptionBuilder overwriteOption()>();

        $r4 = virtualinvoke $r3.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.option.DefaultOption create()>();

        virtualinvoke r0.<org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: org.apache.commons.cli2.Option addOption(org.apache.commons.cli2.Option)>($r4);

        $r6 = staticinvoke <org.apache.mahout.common.commandline.DefaultOptionCreator: org.apache.commons.cli2.builder.DefaultOptionBuilder numClustersOption()>();

        $r7 = virtualinvoke $r6.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.builder.DefaultOptionBuilder withDescription(java.lang.String)>("The k in k-Means. Approximately this many clusters will be generated.");

        $r8 = virtualinvoke $r7.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.option.DefaultOption create()>();

        virtualinvoke r0.<org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: org.apache.commons.cli2.Option addOption(org.apache.commons.cli2.Option)>($r8);

        $r10 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(1);

        virtualinvoke r0.<org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: void addOption(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("estimatedNumMapClusters", "km", "The estimated number of clusters to use for the Map phase of the job when running StreamingKMeans. This should be around k * log(n), where k is the final number of clusters and n is the total number of data points to cluster.", $r10);

        $r11 = staticinvoke <java.lang.String: java.lang.String valueOf(float)>(-1.0F);

        virtualinvoke r0.<org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: void addOption(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("estimatedDistanceCutoff", "e", "The initial estimated distance cutoff between two points for forming new clusters. If no value is given, it\'s estimated from the data set", $r11);

        $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(10);

        virtualinvoke r0.<org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: void addOption(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("maxNumIterations", "mi", "The maximum number of iterations to run for the BallKMeans algorithm used by the reducer. If no value is given, defaults to 10.", $r12);

        $r13 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>(0.9);

        virtualinvoke r0.<org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: void addOption(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("trimFraction", "tf", "The \'ball\' aspect of ball k-means means that only the closest points to the centroid will actually be used for updating. The fraction of the points to be used is those points whose distance to the center is within trimFraction * distance to the closest other center. If no value is given, defaults to 0.9.", $r13);

        virtualinvoke r0.<org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: void addFlag(java.lang.String,java.lang.String,java.lang.String)>("randomInit", "ri", "Whether to use k-means++ initialization or random initialization of the seed centroids. Essentially, k-means++ provides better clusters, but takes longer, whereas random initialization takes less time, but produces worse clusters, and tends to fail more often and needs multiple runs to compare to k-means++. If set, uses the random initialization.");

        virtualinvoke r0.<org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: void addFlag(java.lang.String,java.lang.String,java.lang.String)>("ignoreWeights", "iw", "Whether to correct the weights of the centroids after the clustering is done. The weights end up being wrong because of the trimFraction and possible train/test splits. In some cases, especially in a pipeline, having an accurate count of the weights is useful. If set, ignores the final weights");

        $r14 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>(0.1);

        virtualinvoke r0.<org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: void addOption(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("testProbability", "testp", "A double value between 0 and 1 that represents the percentage of points to be used for \'testing\' different clustering runs in the final BallKMeans step. If no value is given, defaults to 0.1", $r14);

        $r17 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(4);

        virtualinvoke r0.<org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: void addOption(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("numBallKMeansRuns", "nbkm", "Number of BallKMeans runs to use at the end to try to cluster the points. If no value is given, defaults to 4", $r17);

        $r15 = staticinvoke <org.apache.mahout.common.commandline.DefaultOptionCreator: org.apache.commons.cli2.builder.DefaultOptionBuilder distanceMeasureOption()>();

        $r16 = virtualinvoke $r15.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.option.DefaultOption create()>();

        virtualinvoke r0.<org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: org.apache.commons.cli2.Option addOption(org.apache.commons.cli2.Option)>($r16);

        $r19 = class "org/apache/mahout/math/neighborhood/ProjectionSearch";

        $r20 = virtualinvoke $r19.<java.lang.Class: java.lang.String getCanonicalName()>();

        virtualinvoke r0.<org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: void addOption(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("searcherClass", "sc", "The type of searcher to be used when performing nearest neighbor searches. Defaults to ProjectionSearch.", $r20);

        $r21 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(3);

        virtualinvoke r0.<org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: void addOption(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("numProjections", "np", "The number of projections considered in estimating the distances between vectors. Only used when the distance measure requested is either ProjectionSearch or FastProjectionSearch. If no value is given, defaults to 3.", $r21);

        $r24 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(2);

        virtualinvoke r0.<org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: void addOption(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("searchSize", "s", "In more efficient searches (non BruteSearch), not all distances are calculated for determining the nearest neighbors. The number of elements whose distances from the query vector is actually computer is proportional to searchSize. If no value is given, defaults to 1.", $r24);

        virtualinvoke r0.<org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: void addFlag(java.lang.String,java.lang.String,java.lang.String)>("reduceStreamingKMeans", "rskm", "There might be too many intermediate clusters from the mapper to fit into memory, so the reducer can run another pass of StreamingKMeans to collapse them down to a fewer clusters");

        $r23 = staticinvoke <org.apache.mahout.common.commandline.DefaultOptionCreator: org.apache.commons.cli2.builder.DefaultOptionBuilder methodOption()>();

        $r22 = virtualinvoke $r23.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.option.DefaultOption create()>();

        virtualinvoke r0.<org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: org.apache.commons.cli2.Option addOption(org.apache.commons.cli2.Option)>($r22);

        $r25 = virtualinvoke r0.<org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: java.util.Map parseArguments(java.lang.String[])>(r1);

        if $r25 != null goto label1;

        return -1;

     label1:
        r2 = virtualinvoke r0.<org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: org.apache.hadoop.fs.Path getOutputPath()>();

        $z0 = virtualinvoke r0.<org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: boolean hasOption(java.lang.String)>("overwrite");

        if $z0 == 0 goto label2;

        $r27 = virtualinvoke r0.<org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: org.apache.hadoop.conf.Configuration getConf()>();

        $r30 = newarray (org.apache.hadoop.fs.Path)[1];

        $r30[0] = r2;

        staticinvoke <org.apache.mahout.common.HadoopUtil: void delete(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.Path[])>($r27, $r30);

     label2:
        specialinvoke r0.<org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: void configureOptionsForWorkers()>();

        $r29 = virtualinvoke r0.<org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: org.apache.hadoop.conf.Configuration getConf()>();

        $r28 = virtualinvoke r0.<org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: org.apache.hadoop.fs.Path getInputPath()>();

        staticinvoke <org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: int run(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)>($r29, $r28, r2);

        return 0;
    }

    private void configureOptionsForWorkers() throws java.lang.ClassNotFoundException
    {
        org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver r0;
        java.lang.String r1, r2, r3, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r13, $r15, $r16;
        int i0, i1, i2, i3, i4, i5;
        float f0, f1, f2;
        boolean z0, z1, z2, $z3, z4, z5;
        org.slf4j.Logger $r4;
        java.lang.Class $r12;
        org.apache.hadoop.conf.Configuration $r14;

        r0 := @this: org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver;

        $r4 = <org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: org.slf4j.Logger log>;

        interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String)>("Starting to configure options for workers");

        r1 = virtualinvoke r0.<org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: java.lang.String getOption(java.lang.String)>("method");

        $r5 = virtualinvoke r0.<org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: java.lang.String getOption(java.lang.String)>("numClusters");

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r5);

        $r6 = virtualinvoke r0.<org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: java.lang.String getOption(java.lang.String)>("estimatedNumMapClusters");

        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r6);

        $r7 = virtualinvoke r0.<org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: java.lang.String getOption(java.lang.String)>("estimatedDistanceCutoff");

        f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r7);

        $r8 = virtualinvoke r0.<org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: java.lang.String getOption(java.lang.String)>("maxNumIterations");

        i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r8);

        $r9 = virtualinvoke r0.<org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: java.lang.String getOption(java.lang.String)>("trimFraction");

        f1 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r9);

        z0 = virtualinvoke r0.<org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: boolean hasOption(java.lang.String)>("randomInit");

        z1 = virtualinvoke r0.<org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: boolean hasOption(java.lang.String)>("ignoreWeights");

        $r11 = virtualinvoke r0.<org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: java.lang.String getOption(java.lang.String)>("testProbability");

        f2 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r11);

        $r10 = virtualinvoke r0.<org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: java.lang.String getOption(java.lang.String)>("numBallKMeansRuns");

        i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r10);

        r2 = virtualinvoke r0.<org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: java.lang.String getOption(java.lang.String)>("distanceMeasure");

        r3 = virtualinvoke r0.<org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: java.lang.String getOption(java.lang.String)>("searcherClass");

        z4 = 0;

        z5 = 0;

        $r12 = class "org/apache/mahout/math/neighborhood/BruteSearch";

        $r13 = virtualinvoke $r12.<java.lang.Class: java.lang.String getName()>();

        $z3 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        if $z3 != 0 goto label1;

        z4 = 1;

        z5 = 1;

     label1:
        i4 = 0;

        if z4 == 0 goto label2;

        $r16 = virtualinvoke r0.<org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: java.lang.String getOption(java.lang.String)>("searchSize");

        i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r16);

     label2:
        i5 = 0;

        if z5 == 0 goto label3;

        $r15 = virtualinvoke r0.<org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: java.lang.String getOption(java.lang.String)>("numProjections");

        i5 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r15);

     label3:
        z2 = virtualinvoke r0.<org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: boolean hasOption(java.lang.String)>("reduceStreamingKMeans");

        $r14 = virtualinvoke r0.<org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: org.apache.hadoop.conf.Configuration getConf()>();

        staticinvoke <org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: void configureOptionsForWorkers(org.apache.hadoop.conf.Configuration,int,int,float,int,float,boolean,boolean,float,int,java.lang.String,java.lang.String,int,int,java.lang.String,boolean)>($r14, i0, i1, f0, i2, f1, z0, z1, f2, i3, r2, r3, i4, i5, r1, z2);

        return;
    }

    public static void configureOptionsForWorkers(org.apache.hadoop.conf.Configuration, int, int, float, int, float, boolean, boolean, float, int, java.lang.String, java.lang.String, int, int, java.lang.String, boolean) throws java.lang.ClassNotFoundException
    {
        org.apache.hadoop.conf.Configuration r0;
        int i0, i1, i2, i3, i4, i5;
        float f0, f1, f2;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        java.lang.String r1, r2, r3, $r7;
        java.lang.StringBuilder $r4, $r5, $r6, $r8;
        byte $b6, $b7, $b8, $b9, $b10, $b11;
        java.lang.Object[] $r10;
        org.slf4j.Logger $r12;
        java.lang.Integer $r13, $r14, $r15, $r21, $r22, $r24;
        java.lang.Float $r16, $r18, $r19;
        java.lang.Boolean $r17, $r20, $r23;

        r0 := @parameter0: org.apache.hadoop.conf.Configuration;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        f0 := @parameter3: float;

        i2 := @parameter4: int;

        f1 := @parameter5: float;

        z0 := @parameter6: boolean;

        z1 := @parameter7: boolean;

        f2 := @parameter8: float;

        i3 := @parameter9: int;

        r1 := @parameter10: java.lang.String;

        r2 := @parameter11: java.lang.String;

        i4 := @parameter12: int;

        i5 := @parameter13: int;

        r3 := @parameter14: java.lang.String;

        z2 := @parameter15: boolean;

        if i0 <= 0 goto label01;

        $z5 = 1;

        goto label02;

     label01:
        $z5 = 0;

     label02:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid number of clusters requested: ");

        $r5 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Must be: numClusters > 0!");

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z5, $r7);

        if i1 <= i0 goto label03;

        $z6 = 1;

        goto label04;

     label03:
        $z6 = 0;

     label04:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z6, "Invalid number of estimated map clusters; There must be more than the final number of clusters (k log n vs k)");

        $b7 = f0 cmpl -1.0F;

        if $b7 == 0 goto label05;

        $b10 = f0 cmpl 0.0F;

        if $b10 <= 0 goto label06;

     label05:
        $z7 = 1;

        goto label07;

     label06:
        $z7 = 0;

     label07:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z7, "estimatedDistanceCutoff must be equal to -1 or must be greater then 0!");

        if i2 <= 0 goto label08;

        $z8 = 1;

        goto label09;

     label08:
        $z8 = 0;

     label09:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z8, "Must have at least one BallKMeans iteration");

        $b6 = f1 cmpl 0.0F;

        if $b6 <= 0 goto label10;

        $z9 = 1;

        goto label11;

     label10:
        $z9 = 0;

     label11:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z9, "trimFraction must be positive");

        $b8 = f2 cmpl 0.0F;

        if $b8 < 0 goto label12;

        $b9 = f2 cmpg 1.0F;

        if $b9 >= 0 goto label12;

        $z10 = 1;

        goto label13;

     label12:
        $z10 = 0;

     label13:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z10, "test probability is not in the interval [0, 1)");

        if i3 <= 0 goto label14;

        $z11 = 1;

        goto label15;

     label14:
        $z11 = 0;

     label15:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z11, "numBallKMeans cannot be negative");

        $z3 = virtualinvoke r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("Brute");

        if $z3 != 0 goto label20;

        if i4 <= 0 goto label16;

        $z12 = 1;

        goto label17;

     label16:
        $z12 = 0;

     label17:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z12, "Invalid searchSize. Must be positive.");

        $z4 = virtualinvoke r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("Projection");

        if $z4 == 0 goto label20;

        if i5 <= 0 goto label18;

        $z13 = 1;

        goto label19;

     label18:
        $z13 = 0;

     label19:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z13, "Invalid numProjections. Must be positive");

     label20:
        virtualinvoke r0.<org.apache.hadoop.conf.Configuration: void setInt(java.lang.String,int)>("numClusters", i0);

        virtualinvoke r0.<org.apache.hadoop.conf.Configuration: void setInt(java.lang.String,int)>("estimatedNumMapClusters", i1);

        $b11 = f0 cmpl -1.0F;

        if $b11 == 0 goto label21;

        virtualinvoke r0.<org.apache.hadoop.conf.Configuration: void setFloat(java.lang.String,float)>("estimatedDistanceCutoff", f0);

     label21:
        virtualinvoke r0.<org.apache.hadoop.conf.Configuration: void setInt(java.lang.String,int)>("maxNumIterations", i2);

        virtualinvoke r0.<org.apache.hadoop.conf.Configuration: void setFloat(java.lang.String,float)>("trimFraction", f1);

        virtualinvoke r0.<org.apache.hadoop.conf.Configuration: void setBoolean(java.lang.String,boolean)>("randomInit", z0);

        virtualinvoke r0.<org.apache.hadoop.conf.Configuration: void setBoolean(java.lang.String,boolean)>("ignoreWeights", z1);

        virtualinvoke r0.<org.apache.hadoop.conf.Configuration: void setFloat(java.lang.String,float)>("testProbability", f2);

        virtualinvoke r0.<org.apache.hadoop.conf.Configuration: void setInt(java.lang.String,int)>("numBallKMeansRuns", i3);

        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r1);

        virtualinvoke r0.<org.apache.hadoop.conf.Configuration: void set(java.lang.String,java.lang.String)>("distanceMeasure", r1);

        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r2);

        virtualinvoke r0.<org.apache.hadoop.conf.Configuration: void set(java.lang.String,java.lang.String)>("searcherClass", r2);

        virtualinvoke r0.<org.apache.hadoop.conf.Configuration: void setInt(java.lang.String,int)>("searchSize", i4);

        virtualinvoke r0.<org.apache.hadoop.conf.Configuration: void setInt(java.lang.String,int)>("numProjections", i5);

        virtualinvoke r0.<org.apache.hadoop.conf.Configuration: void set(java.lang.String,java.lang.String)>("method", r3);

        virtualinvoke r0.<org.apache.hadoop.conf.Configuration: void setBoolean(java.lang.String,boolean)>("reduceStreamingKMeans", z2);

        $r12 = <org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: org.slf4j.Logger log>;

        $r10 = newarray (java.lang.Object)[15];

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r10[0] = $r14;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r10[1] = $r13;

        $r16 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0);

        $r10[2] = $r16;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r10[3] = $r15;

        $r18 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f1);

        $r10[4] = $r18;

        $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r10[5] = $r17;

        $r20 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z1);

        $r10[6] = $r20;

        $r19 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f2);

        $r10[7] = $r19;

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        $r10[8] = $r22;

        $r10[9] = r1;

        $r10[10] = r2;

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i4);

        $r10[11] = $r21;

        $r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i5);

        $r10[12] = $r24;

        $r10[13] = r3;

        $r23 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z2);

        $r10[14] = $r23;

        interfaceinvoke $r12.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object[])>("Parameters are: [k] numClusters {}; [SKM] estimatedNumMapClusters {}; estimatedDistanceCutoff {} [BKM] maxNumIterations {}; trimFraction {}; randomInit {}; ignoreWeights {}; testProbability {}; numBallKMeansRuns {}; [S] measureClass {}; searcherClass {}; searcherSize {}; numProjections {}; method {}; reduceStreamingKMeans {}", $r10);

        return;
    }

    public static int run(org.apache.hadoop.conf.Configuration, org.apache.hadoop.fs.Path, org.apache.hadoop.fs.Path) throws java.io.IOException, java.lang.InterruptedException, java.lang.ClassNotFoundException, java.util.concurrent.ExecutionException
    {
        org.apache.hadoop.conf.Configuration r0;
        org.apache.hadoop.fs.Path r1, r2;
        org.slf4j.Logger $r3;
        java.lang.String $r4, $r5, $r6;
        boolean $z0;
        int $i0, $i1;

        r0 := @parameter0: org.apache.hadoop.conf.Configuration;

        r1 := @parameter1: org.apache.hadoop.fs.Path;

        r2 := @parameter2: org.apache.hadoop.fs.Path;

        $r3 = <org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: org.slf4j.Logger log>;

        $r4 = virtualinvoke r1.<org.apache.hadoop.fs.Path: java.lang.String toString()>();

        $r5 = virtualinvoke r2.<org.apache.hadoop.fs.Path: java.lang.String toString()>();

        interfaceinvoke $r3.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Starting StreamingKMeans clustering for vectors in {}; results are output to {}", $r4, $r5);

        $r6 = virtualinvoke r0.<org.apache.hadoop.conf.Configuration: java.lang.String get(java.lang.String,java.lang.String)>("method", "mapreduce");

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("sequential");

        if $z0 == 0 goto label1;

        $i1 = staticinvoke <org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: int runSequentially(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)>(r0, r1, r2);

        return $i1;

     label1:
        $i0 = staticinvoke <org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: int runMapReduce(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)>(r0, r1, r2);

        return $i0;
    }

    private static int runSequentially(org.apache.hadoop.conf.Configuration, org.apache.hadoop.fs.Path, org.apache.hadoop.fs.Path) throws java.io.IOException, java.util.concurrent.ExecutionException, java.lang.InterruptedException
    {
        org.apache.hadoop.conf.Configuration r0;
        org.apache.hadoop.fs.Path r1, r2, $r13, $r26;
        long l0, $l1, l6;
        java.util.concurrent.ExecutorService r3;
        org.apache.mahout.math.Centroid r5, r34;
        java.util.ArrayList $r6, $r10;
        org.apache.hadoop.fs.PathFilter $r7;
        org.apache.hadoop.fs.FileSystem $r8, $r14;
        org.slf4j.Logger $r9, $r12, $r18;
        java.util.concurrent.TimeUnit $r11;
        boolean $z0, $z2, $z4;
        java.lang.Iterable $r15, $r21;
        double $d0, $d1;
        java.lang.Double $r16;
        java.lang.Object $r17, $r22, $r23, $r24;
        org.apache.mahout.clustering.streaming.mapreduce.CentroidWritable $r19;
        org.apache.hadoop.io.IntWritable $r20;
        int $i2, i3, i4, i5;
        java.util.concurrent.Future $r25, r32;
        org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansThread $r27;
        org.apache.hadoop.fs.FileStatus[] r28;
        org.apache.hadoop.fs.FileStatus r29;
        java.util.Iterator r31, r33, r36;
        org.apache.hadoop.io.SequenceFile$Writer r35;
        org.apache.mahout.math.Vector r37;

        r0 := @parameter0: org.apache.hadoop.conf.Configuration;

        r1 := @parameter1: org.apache.hadoop.fs.Path;

        r2 := @parameter2: org.apache.hadoop.fs.Path;

        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r3 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newCachedThreadPool()>();

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        $r8 = staticinvoke <org.apache.hadoop.fs.FileSystem: org.apache.hadoop.fs.FileSystem get(org.apache.hadoop.conf.Configuration)>(r0);

        $r7 = staticinvoke <org.apache.mahout.common.iterator.sequencefile.PathFilters: org.apache.hadoop.fs.PathFilter logsCRCFilter()>();

        r28 = staticinvoke <org.apache.mahout.common.HadoopUtil: org.apache.hadoop.fs.FileStatus[] listStatus(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.PathFilter)>($r8, r1, $r7);

        i3 = lengthof r28;

        i4 = 0;

     label1:
        if i4 >= i3 goto label2;

        r29 = r28[i4];

        $r27 = new org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansThread;

        $r26 = virtualinvoke r29.<org.apache.hadoop.fs.FileStatus: org.apache.hadoop.fs.Path getPath()>();

        specialinvoke $r27.<org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansThread: void <init>(org.apache.hadoop.fs.Path,org.apache.hadoop.conf.Configuration)>($r26, r0);

        $r25 = interfaceinvoke r3.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>($r27);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r25);

        i4 = i4 + 1;

        goto label1;

     label2:
        $r9 = <org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: org.slf4j.Logger log>;

        interfaceinvoke $r9.<org.slf4j.Logger: void info(java.lang.String)>("Finished running Mappers");

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        r31 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r31.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r22 = interfaceinvoke r31.<java.util.Iterator: java.lang.Object next()>();

        r32 = (java.util.concurrent.Future) $r22;

        $r23 = interfaceinvoke r32.<java.util.concurrent.Future: java.lang.Object get()>();

        $r21 = (java.lang.Iterable) $r23;

        r33 = interfaceinvoke $r21.<java.lang.Iterable: java.util.Iterator iterator()>();

     label4:
        $z4 = interfaceinvoke r33.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label3;

        $r24 = interfaceinvoke r33.<java.util.Iterator: java.lang.Object next()>();

        r34 = (org.apache.mahout.math.Centroid) $r24;

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>(r34);

        goto label4;

     label5:
        interfaceinvoke r3.<java.util.concurrent.ExecutorService: void shutdown()>();

        $r11 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        interfaceinvoke r3.<java.util.concurrent.ExecutorService: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>(9223372036854775807L, $r11);

        $r12 = <org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: org.slf4j.Logger log>;

        interfaceinvoke $r12.<org.slf4j.Logger: void info(java.lang.String)>("Finished StreamingKMeans");

        $r14 = staticinvoke <org.apache.hadoop.fs.FileSystem: org.apache.hadoop.fs.FileSystem get(org.apache.hadoop.conf.Configuration)>(r0);

        $r13 = new org.apache.hadoop.fs.Path;

        specialinvoke $r13.<org.apache.hadoop.fs.Path: void <init>(org.apache.hadoop.fs.Path,java.lang.String)>(r2, "part-r-00000");

        r35 = staticinvoke <org.apache.hadoop.io.SequenceFile: org.apache.hadoop.io.SequenceFile$Writer createWriter(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.Path,java.lang.Class,java.lang.Class)>($r14, r0, $r13, class "org/apache/hadoop/io/IntWritable", class "org/apache/mahout/clustering/streaming/mapreduce/CentroidWritable");

        i5 = 0;

        $r15 = staticinvoke <org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansReducer: java.lang.Iterable getBestCentroids(java.util.List,org.apache.hadoop.conf.Configuration)>($r10, r0);

        r36 = interfaceinvoke $r15.<java.lang.Iterable: java.util.Iterator iterator()>();

     label6:
        $z2 = interfaceinvoke r36.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label7;

        $r17 = interfaceinvoke r36.<java.util.Iterator: java.lang.Object next()>();

        r37 = (org.apache.mahout.math.Vector) $r17;

        r5 = (org.apache.mahout.math.Centroid) r37;

        $r20 = new org.apache.hadoop.io.IntWritable;

        $i2 = i5;

        i5 = i5 + 1;

        specialinvoke $r20.<org.apache.hadoop.io.IntWritable: void <init>(int)>($i2);

        $r19 = new org.apache.mahout.clustering.streaming.mapreduce.CentroidWritable;

        specialinvoke $r19.<org.apache.mahout.clustering.streaming.mapreduce.CentroidWritable: void <init>(org.apache.mahout.math.Centroid)>(r5);

        virtualinvoke r35.<org.apache.hadoop.io.SequenceFile$Writer: void append(org.apache.hadoop.io.Writable,org.apache.hadoop.io.Writable)>($r20, $r19);

        goto label6;

     label7:
        virtualinvoke r35.<org.apache.hadoop.io.SequenceFile$Writer: void close()>();

        l6 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r18 = <org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: org.slf4j.Logger log>;

        $l1 = l6 - l0;

        $d0 = (double) $l1;

        $d1 = $d0 / 1000.0;

        $r16 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        interfaceinvoke $r18.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Finished BallKMeans. Took {}.", $r16);

        return 0;
    }

    public static int runMapReduce(org.apache.hadoop.conf.Configuration, org.apache.hadoop.fs.Path, org.apache.hadoop.fs.Path) throws java.io.IOException, java.lang.ClassNotFoundException, java.lang.InterruptedException
    {
        org.apache.hadoop.conf.Configuration r0;
        org.apache.hadoop.fs.Path r1, r2;
        org.apache.hadoop.mapreduce.Job r3;
        long l0, l1, $l2;
        java.lang.Class $r4;
        java.lang.String $r5, $r6, $r8;
        boolean $z0;
        org.slf4j.Logger $r7;
        java.lang.Long $r9;

        r0 := @parameter0: org.apache.hadoop.conf.Configuration;

        r1 := @parameter1: org.apache.hadoop.fs.Path;

        r2 := @parameter2: org.apache.hadoop.fs.Path;

        r3 = staticinvoke <org.apache.mahout.common.HadoopUtil: org.apache.hadoop.mapreduce.Job prepareJob(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,java.lang.Class,java.lang.Class,java.lang.Class,java.lang.Class,java.lang.Class,java.lang.Class,java.lang.Class,java.lang.Class,org.apache.hadoop.conf.Configuration)>(r1, r2, class "org/apache/hadoop/mapreduce/lib/input/SequenceFileInputFormat", class "org/apache/mahout/clustering/streaming/mapreduce/StreamingKMeansMapper", class "org/apache/hadoop/io/IntWritable", class "org/apache/mahout/clustering/streaming/mapreduce/CentroidWritable", class "org/apache/mahout/clustering/streaming/mapreduce/StreamingKMeansReducer", class "org/apache/hadoop/io/IntWritable", class "org/apache/mahout/clustering/streaming/mapreduce/CentroidWritable", class "org/apache/hadoop/mapreduce/lib/output/SequenceFileOutputFormat", r0);

        $r4 = class "org/apache/mahout/clustering/streaming/mapreduce/StreamingKMeansDriver";

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getSimpleName()>();

        $r6 = staticinvoke <org.apache.mahout.common.HadoopUtil: java.lang.String getCustomJobName(java.lang.String,org.apache.hadoop.mapreduce.JobContext,java.lang.Class,java.lang.Class)>($r5, r3, class "org/apache/mahout/clustering/streaming/mapreduce/StreamingKMeansMapper", class "org/apache/mahout/clustering/streaming/mapreduce/StreamingKMeansReducer");

        virtualinvoke r3.<org.apache.hadoop.mapreduce.Job: void setJobName(java.lang.String)>($r6);

        virtualinvoke r3.<org.apache.hadoop.mapreduce.Job: void setNumReduceTasks(int)>(1);

        virtualinvoke r3.<org.apache.hadoop.mapreduce.Job: void setJarByClass(java.lang.Class)>(class "org/apache/mahout/clustering/streaming/mapreduce/StreamingKMeansDriver");

        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $z0 = virtualinvoke r3.<org.apache.hadoop.mapreduce.Job: boolean waitForCompletion(boolean)>(1);

        if $z0 != 0 goto label1;

        return -1;

     label1:
        l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r7 = <org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: org.slf4j.Logger log>;

        $r8 = virtualinvoke r2.<org.apache.hadoop.fs.Path: java.lang.String toString()>();

        $l2 = l1 - l0;

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        interfaceinvoke $r7.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("StreamingKMeans clustering complete. Results are in {}. Took {} ms", $r8, $r9);

        return 0;
    }

    private void <init>()
    {
        org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver r0;

        r0 := @this: org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver;

        specialinvoke r0.<org.apache.mahout.common.AbstractJob: void <init>()>();

        return;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        java.lang.String[] r0;
        org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver $r1;

        r0 := @parameter0: java.lang.String[];

        $r1 = new org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver;

        specialinvoke $r1.<org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: void <init>()>();

        staticinvoke <org.apache.hadoop.util.ToolRunner: int run(org.apache.hadoop.util.Tool,java.lang.String[])>($r1, r0);

        return;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        <org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: float INVALID_DISTANCE_CUTOFF> = -1.0F;

        <org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: java.lang.String REDUCE_STREAMING_KMEANS> = "reduceStreamingKMeans";

        <org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: java.lang.String SEARCH_SIZE_OPTION> = "searchSize";

        <org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: java.lang.String NUM_PROJECTIONS_OPTION> = "numProjections";

        <org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: java.lang.String SEARCHER_CLASS_OPTION> = "searcherClass";

        <org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: java.lang.String NUM_BALLKMEANS_RUNS> = "numBallKMeansRuns";

        <org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: java.lang.String TEST_PROBABILITY> = "testProbability";

        <org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: java.lang.String IGNORE_WEIGHTS> = "ignoreWeights";

        <org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: java.lang.String RANDOM_INIT> = "randomInit";

        <org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: java.lang.String TRIM_FRACTION> = "trimFraction";

        <org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: java.lang.String MAX_NUM_ITERATIONS> = "maxNumIterations";

        <org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: java.lang.String ESTIMATED_DISTANCE_CUTOFF> = "estimatedDistanceCutoff";

        <org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: java.lang.String ESTIMATED_NUM_MAP_CLUSTERS> = "estimatedNumMapClusters";

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "org/apache/mahout/clustering/streaming/mapreduce/StreamingKMeansDriver");

        <org.apache.mahout.clustering.streaming.mapreduce.StreamingKMeansDriver: org.slf4j.Logger log> = $r0;

        return;
    }
}
