public class org.apache.mahout.clustering.lda.cvb.TopicModel extends java.lang.Object implements org.apache.hadoop.conf.Configurable, java.lang.Iterable
{
    private static final org.slf4j.Logger log;
    private final java.lang.String[] dictionary;
    private final org.apache.mahout.math.Matrix topicTermCounts;
    private final org.apache.mahout.math.Vector topicSums;
    private final int numTopics;
    private final int numTerms;
    private final double eta;
    private final double alpha;
    private org.apache.hadoop.conf.Configuration conf;
    private final org.apache.mahout.math.stats.Sampler sampler;
    private final int numThreads;
    private java.util.concurrent.ThreadPoolExecutor threadPool;
    private org.apache.mahout.clustering.lda.cvb.TopicModel$Updater[] updaters;

    public int getNumTerms()
    {
        org.apache.mahout.clustering.lda.cvb.TopicModel r0;
        int $i0;

        r0 := @this: org.apache.mahout.clustering.lda.cvb.TopicModel;

        $i0 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: int numTerms>;

        return $i0;
    }

    public int getNumTopics()
    {
        org.apache.mahout.clustering.lda.cvb.TopicModel r0;
        int $i0;

        r0 := @this: org.apache.mahout.clustering.lda.cvb.TopicModel;

        $i0 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: int numTopics>;

        return $i0;
    }

    public void <init>(int, int, double, double, java.lang.String[], double)
    {
        org.apache.mahout.clustering.lda.cvb.TopicModel r0;
        int i0, i1;
        double d0, d1, d2;
        java.lang.String[] r1;

        r0 := @this: org.apache.mahout.clustering.lda.cvb.TopicModel;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        r1 := @parameter4: java.lang.String[];

        d2 := @parameter5: double;

        specialinvoke r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: void <init>(int,int,double,double,java.util.Random,java.lang.String[],int,double)>(i0, i1, d0, d1, null, r1, 1, d2);

        return;
    }

    public transient void <init>(org.apache.hadoop.conf.Configuration, double, double, java.lang.String[], int, double, org.apache.hadoop.fs.Path[]) throws java.io.IOException
    {
        org.apache.mahout.clustering.lda.cvb.TopicModel r0;
        org.apache.hadoop.conf.Configuration r1;
        double d0, d1, d2;
        java.lang.String[] r2;
        int i0;
        org.apache.hadoop.fs.Path[] r3;
        org.apache.mahout.common.Pair $r4;

        r0 := @this: org.apache.mahout.clustering.lda.cvb.TopicModel;

        r1 := @parameter0: org.apache.hadoop.conf.Configuration;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        r2 := @parameter3: java.lang.String[];

        i0 := @parameter4: int;

        d2 := @parameter5: double;

        r3 := @parameter6: org.apache.hadoop.fs.Path[];

        $r4 = staticinvoke <org.apache.mahout.clustering.lda.cvb.TopicModel: org.apache.mahout.common.Pair loadModel(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.Path[])>(r1, r3);

        specialinvoke r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: void <init>(org.apache.mahout.common.Pair,double,double,java.lang.String[],int,double)>($r4, d0, d1, r2, i0, d2);

        return;
    }

    public void <init>(int, int, double, double, java.lang.String[], int, double)
    {
        org.apache.mahout.clustering.lda.cvb.TopicModel r0;
        int i0, i1, i2;
        double d0, d1, d2;
        java.lang.String[] r1;
        org.apache.mahout.math.DenseMatrix $r2;
        org.apache.mahout.math.DenseVector $r3;

        r0 := @this: org.apache.mahout.clustering.lda.cvb.TopicModel;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        r1 := @parameter4: java.lang.String[];

        i2 := @parameter5: int;

        d2 := @parameter6: double;

        $r2 = new org.apache.mahout.math.DenseMatrix;

        specialinvoke $r2.<org.apache.mahout.math.DenseMatrix: void <init>(int,int)>(i0, i1);

        $r3 = new org.apache.mahout.math.DenseVector;

        specialinvoke $r3.<org.apache.mahout.math.DenseVector: void <init>(int)>(i0);

        specialinvoke r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: void <init>(org.apache.mahout.math.Matrix,org.apache.mahout.math.Vector,double,double,java.lang.String[],int,double)>($r2, $r3, d0, d1, r1, i2, d2);

        return;
    }

    public void <init>(int, int, double, double, java.util.Random, java.lang.String[], int, double)
    {
        org.apache.mahout.clustering.lda.cvb.TopicModel r0;
        int i0, i1, i2;
        double d0, d1, d2;
        java.util.Random r1;
        java.lang.String[] r2;
        org.apache.mahout.common.Pair $r3;

        r0 := @this: org.apache.mahout.clustering.lda.cvb.TopicModel;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        r1 := @parameter4: java.util.Random;

        r2 := @parameter5: java.lang.String[];

        i2 := @parameter6: int;

        d2 := @parameter7: double;

        $r3 = staticinvoke <org.apache.mahout.clustering.lda.cvb.TopicModel: org.apache.mahout.common.Pair randomMatrix(int,int,java.util.Random)>(i0, i1, r1);

        specialinvoke r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: void <init>(org.apache.mahout.common.Pair,double,double,java.lang.String[],int,double)>($r3, d0, d1, r2, i2, d2);

        return;
    }

    private void <init>(org.apache.mahout.common.Pair, double, double, java.lang.String[], int, double)
    {
        org.apache.mahout.clustering.lda.cvb.TopicModel r0;
        org.apache.mahout.common.Pair r1;
        double d0, d1, d2;
        java.lang.String[] r2;
        int i0;
        java.lang.Object $r3, $r5;
        org.apache.mahout.math.Matrix $r4;
        org.apache.mahout.math.Vector $r6;

        r0 := @this: org.apache.mahout.clustering.lda.cvb.TopicModel;

        r1 := @parameter0: org.apache.mahout.common.Pair;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        r2 := @parameter3: java.lang.String[];

        i0 := @parameter4: int;

        d2 := @parameter5: double;

        $r3 = virtualinvoke r1.<org.apache.mahout.common.Pair: java.lang.Object getFirst()>();

        $r4 = (org.apache.mahout.math.Matrix) $r3;

        $r5 = virtualinvoke r1.<org.apache.mahout.common.Pair: java.lang.Object getSecond()>();

        $r6 = (org.apache.mahout.math.Vector) $r5;

        specialinvoke r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: void <init>(org.apache.mahout.math.Matrix,org.apache.mahout.math.Vector,double,double,java.lang.String[],int,double)>($r4, $r6, d0, d1, r2, i0, d2);

        return;
    }

    public void <init>(org.apache.mahout.math.Matrix, org.apache.mahout.math.Vector, double, double, java.lang.String[], double)
    {
        org.apache.mahout.clustering.lda.cvb.TopicModel r0;
        org.apache.mahout.math.Matrix r1;
        org.apache.mahout.math.Vector r2;
        double d0, d1, d2;
        java.lang.String[] r3;

        r0 := @this: org.apache.mahout.clustering.lda.cvb.TopicModel;

        r1 := @parameter0: org.apache.mahout.math.Matrix;

        r2 := @parameter1: org.apache.mahout.math.Vector;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        r3 := @parameter4: java.lang.String[];

        d2 := @parameter5: double;

        specialinvoke r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: void <init>(org.apache.mahout.math.Matrix,org.apache.mahout.math.Vector,double,double,java.lang.String[],int,double)>(r1, r2, d0, d1, r3, 1, d2);

        return;
    }

    public void <init>(org.apache.mahout.math.Matrix, double, double, java.lang.String[], int, double)
    {
        org.apache.mahout.clustering.lda.cvb.TopicModel r0;
        org.apache.mahout.math.Matrix r1;
        double d0, d1, d2;
        java.lang.String[] r2;
        int i0;
        org.apache.mahout.math.Vector $r3;

        r0 := @this: org.apache.mahout.clustering.lda.cvb.TopicModel;

        r1 := @parameter0: org.apache.mahout.math.Matrix;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        r2 := @parameter3: java.lang.String[];

        i0 := @parameter4: int;

        d2 := @parameter5: double;

        $r3 = staticinvoke <org.apache.mahout.clustering.lda.cvb.TopicModel: org.apache.mahout.math.Vector viewRowSums(org.apache.mahout.math.Matrix)>(r1);

        specialinvoke r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: void <init>(org.apache.mahout.math.Matrix,org.apache.mahout.math.Vector,double,double,java.lang.String[],int,double)>(r1, $r3, d0, d1, r2, i0, d2);

        return;
    }

    public void <init>(org.apache.mahout.math.Matrix, org.apache.mahout.math.Vector, double, double, java.lang.String[], int, double)
    {
        org.apache.mahout.clustering.lda.cvb.TopicModel r0;
        org.apache.mahout.math.Matrix r1;
        org.apache.mahout.math.Vector r2, $r8;
        double d0, d1, d2;
        java.lang.String[] r3;
        int i0, $i1, $i2, $i4, i5;
        org.apache.mahout.math.stats.Sampler $r4;
        org.apache.mahout.common.RandomWrapper $r5;
        org.apache.mahout.math.function.DoubleFunction $r6, $r10;
        byte $b3;

        r0 := @this: org.apache.mahout.clustering.lda.cvb.TopicModel;

        r1 := @parameter0: org.apache.mahout.math.Matrix;

        r2 := @parameter1: org.apache.mahout.math.Vector;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        r3 := @parameter4: java.lang.String[];

        i0 := @parameter5: int;

        d2 := @parameter6: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: java.lang.String[] dictionary> = r3;

        r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: org.apache.mahout.math.Matrix topicTermCounts> = r1;

        r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: org.apache.mahout.math.Vector topicSums> = r2;

        $i1 = interfaceinvoke r2.<org.apache.mahout.math.Vector: int size()>();

        r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: int numTopics> = $i1;

        $i2 = interfaceinvoke r1.<org.apache.mahout.math.Matrix: int numCols()>();

        r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: int numTerms> = $i2;

        r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: double eta> = d0;

        r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: double alpha> = d1;

        $r4 = new org.apache.mahout.math.stats.Sampler;

        $r5 = staticinvoke <org.apache.mahout.common.RandomUtils: org.apache.mahout.common.RandomWrapper getRandom()>();

        specialinvoke $r4.<org.apache.mahout.math.stats.Sampler: void <init>(java.util.Random)>($r5);

        r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: org.apache.mahout.math.stats.Sampler sampler> = $r4;

        r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: int numThreads> = i0;

        $b3 = d2 cmpl 1.0;

        if $b3 == 0 goto label2;

        $r6 = staticinvoke <org.apache.mahout.math.function.Functions: org.apache.mahout.math.function.DoubleFunction mult(double)>(d2);

        interfaceinvoke r2.<org.apache.mahout.math.Vector: org.apache.mahout.math.Vector assign(org.apache.mahout.math.function.DoubleFunction)>($r6);

        i5 = 0;

     label1:
        $i4 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: int numTopics>;

        if i5 >= $i4 goto label2;

        $r8 = interfaceinvoke r1.<org.apache.mahout.math.Matrix: org.apache.mahout.math.Vector viewRow(int)>(i5);

        $r10 = staticinvoke <org.apache.mahout.math.function.Functions: org.apache.mahout.math.function.DoubleFunction mult(double)>(d2);

        interfaceinvoke $r8.<org.apache.mahout.math.Vector: org.apache.mahout.math.Vector assign(org.apache.mahout.math.function.DoubleFunction)>($r10);

        i5 = i5 + 1;

        goto label1;

     label2:
        specialinvoke r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: void initializeThreadPool()>();

        return;
    }

    private static org.apache.mahout.math.Vector viewRowSums(org.apache.mahout.math.Matrix)
    {
        org.apache.mahout.math.Matrix r0;
        java.util.Iterator r2;
        org.apache.mahout.math.MatrixSlice r3;
        org.apache.mahout.math.DenseVector $r4;
        int $i0, $i1;
        boolean $z0;
        java.lang.Object $r5;
        org.apache.mahout.math.Vector $r6;
        double $d0;

        r0 := @parameter0: org.apache.mahout.math.Matrix;

        $r4 = new org.apache.mahout.math.DenseVector;

        $i0 = interfaceinvoke r0.<org.apache.mahout.math.Matrix: int numRows()>();

        specialinvoke $r4.<org.apache.mahout.math.DenseVector: void <init>(int)>($i0);

        r2 = interfaceinvoke r0.<org.apache.mahout.math.Matrix: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.mahout.math.MatrixSlice) $r5;

        $i1 = virtualinvoke r3.<org.apache.mahout.math.MatrixSlice: int index()>();

        $r6 = virtualinvoke r3.<org.apache.mahout.math.MatrixSlice: org.apache.mahout.math.Vector vector()>();

        $d0 = interfaceinvoke $r6.<org.apache.mahout.math.Vector: double norm(double)>(1.0);

        interfaceinvoke $r4.<org.apache.mahout.math.Vector: void set(int,double)>($i1, $d0);

        goto label1;

     label2:
        return $r4;
    }

    private synchronized void initializeThreadPool()
    {
        org.apache.mahout.clustering.lda.cvb.TopicModel r0;
        java.util.concurrent.ThreadPoolExecutor $r1, $r5, $r8, $r9, $r14, $r17;
        org.apache.mahout.clustering.lda.cvb.TopicModel$Updater $r2, $r6;
        org.apache.mahout.clustering.lda.cvb.TopicModel$Updater[] $r3, $r4, $r18;
        java.util.concurrent.TimeUnit $r10, $r15;
        org.slf4j.Logger $r11;
        java.lang.InterruptedException $r12;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6;
        java.util.concurrent.ArrayBlockingQueue $r16;

        r0 := @this: org.apache.mahout.clustering.lda.cvb.TopicModel;

        $r1 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: java.util.concurrent.ThreadPoolExecutor threadPool>;

        if $r1 == null goto label4;

        $r8 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: java.util.concurrent.ThreadPoolExecutor threadPool>;

        virtualinvoke $r8.<java.util.concurrent.ThreadPoolExecutor: void shutdown()>();

     label1:
        $r9 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: java.util.concurrent.ThreadPoolExecutor threadPool>;

        $r10 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        virtualinvoke $r9.<java.util.concurrent.ThreadPoolExecutor: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>(100L, $r10);

     label2:
        goto label4;

     label3:
        $r12 := @caughtexception;

        $r11 = <org.apache.mahout.clustering.lda.cvb.TopicModel: org.slf4j.Logger log>;

        interfaceinvoke $r11.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Could not terminate all threads for TopicModel in time.", $r12);

     label4:
        $r14 = new java.util.concurrent.ThreadPoolExecutor;

        $i0 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: int numThreads>;

        $i1 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: int numThreads>;

        $r15 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $r16 = new java.util.concurrent.ArrayBlockingQueue;

        $i2 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: int numThreads>;

        $i3 = $i2 * 10;

        specialinvoke $r16.<java.util.concurrent.ArrayBlockingQueue: void <init>(int)>($i3);

        specialinvoke $r14.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue)>($i0, $i1, 0L, $r15, $r16);

        r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: java.util.concurrent.ThreadPoolExecutor threadPool> = $r14;

        $r17 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: java.util.concurrent.ThreadPoolExecutor threadPool>;

        virtualinvoke $r17.<java.util.concurrent.ThreadPoolExecutor: void allowCoreThreadTimeOut(boolean)>(0);

        $i4 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: int numThreads>;

        $r18 = newarray (org.apache.mahout.clustering.lda.cvb.TopicModel$Updater)[$i4];

        r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: org.apache.mahout.clustering.lda.cvb.TopicModel$Updater[] updaters> = $r18;

        i5 = 0;

     label5:
        $i6 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: int numThreads>;

        if i5 >= $i6 goto label6;

        $r4 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: org.apache.mahout.clustering.lda.cvb.TopicModel$Updater[] updaters>;

        $r2 = new org.apache.mahout.clustering.lda.cvb.TopicModel$Updater;

        specialinvoke $r2.<org.apache.mahout.clustering.lda.cvb.TopicModel$Updater: void <init>(org.apache.mahout.clustering.lda.cvb.TopicModel,org.apache.mahout.clustering.lda.cvb.TopicModel$1)>(r0, null);

        $r4[i5] = $r2;

        $r5 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: java.util.concurrent.ThreadPoolExecutor threadPool>;

        $r3 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: org.apache.mahout.clustering.lda.cvb.TopicModel$Updater[] updaters>;

        $r6 = $r3[i5];

        virtualinvoke $r5.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.Future submit(java.lang.Runnable)>($r6);

        i5 = i5 + 1;

        goto label5;

     label6:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    org.apache.mahout.math.Matrix topicTermCounts()
    {
        org.apache.mahout.clustering.lda.cvb.TopicModel r0;
        org.apache.mahout.math.Matrix $r1;

        r0 := @this: org.apache.mahout.clustering.lda.cvb.TopicModel;

        $r1 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: org.apache.mahout.math.Matrix topicTermCounts>;

        return $r1;
    }

    public java.util.Iterator iterator()
    {
        org.apache.mahout.clustering.lda.cvb.TopicModel r0;
        org.apache.mahout.math.Matrix $r1;
        java.util.Iterator $r2;

        r0 := @this: org.apache.mahout.clustering.lda.cvb.TopicModel;

        $r1 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: org.apache.mahout.math.Matrix topicTermCounts>;

        $r2 = interfaceinvoke $r1.<org.apache.mahout.math.Matrix: java.util.Iterator iterateAll()>();

        return $r2;
    }

    public org.apache.mahout.math.Vector topicSums()
    {
        org.apache.mahout.clustering.lda.cvb.TopicModel r0;
        org.apache.mahout.math.Vector $r1;

        r0 := @this: org.apache.mahout.clustering.lda.cvb.TopicModel;

        $r1 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: org.apache.mahout.math.Vector topicSums>;

        return $r1;
    }

    private static org.apache.mahout.common.Pair randomMatrix(int, int, java.util.Random)
    {
        int i0, i1, $i2, i3, i4, i5;
        java.util.Random r0;
        org.apache.mahout.math.DenseMatrix $r3;
        org.apache.mahout.math.DenseVector $r4;
        org.apache.mahout.common.Pair $r5;
        org.apache.mahout.math.Vector $r6, $r8;
        double $d0, $d1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: java.util.Random;

        $r3 = new org.apache.mahout.math.DenseMatrix;

        specialinvoke $r3.<org.apache.mahout.math.DenseMatrix: void <init>(int,int)>(i0, i1);

        $r4 = new org.apache.mahout.math.DenseVector;

        specialinvoke $r4.<org.apache.mahout.math.DenseVector: void <init>(int)>(i0);

        if r0 == null goto label4;

        i3 = 0;

     label1:
        if i3 >= i0 goto label4;

        i4 = 0;

     label2:
        if i4 >= i1 goto label3;

        $r8 = interfaceinvoke $r3.<org.apache.mahout.math.Matrix: org.apache.mahout.math.Vector viewRow(int)>(i3);

        $d0 = virtualinvoke r0.<java.util.Random: double nextDouble()>();

        interfaceinvoke $r8.<org.apache.mahout.math.Vector: void set(int,double)>(i4, $d0);

        i4 = i4 + 1;

        goto label2;

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        i5 = 0;

     label5:
        if i5 >= i0 goto label8;

        $i2 = i5;

        if r0 != null goto label6;

        $d1 = 1.0;

        goto label7;

     label6:
        $r6 = interfaceinvoke $r3.<org.apache.mahout.math.Matrix: org.apache.mahout.math.Vector viewRow(int)>(i5);

        $d1 = interfaceinvoke $r6.<org.apache.mahout.math.Vector: double norm(double)>(1.0);

     label7:
        interfaceinvoke $r4.<org.apache.mahout.math.Vector: void set(int,double)>($i2, $d1);

        i5 = i5 + 1;

        goto label5;

     label8:
        $r5 = staticinvoke <org.apache.mahout.common.Pair: org.apache.mahout.common.Pair of(java.lang.Object,java.lang.Object)>($r3, $r4);

        return $r5;
    }

    public static transient org.apache.mahout.common.Pair loadModel(org.apache.hadoop.conf.Configuration, org.apache.hadoop.fs.Path[]) throws java.io.IOException
    {
        org.apache.hadoop.conf.Configuration r0;
        org.apache.hadoop.fs.Path[] r1;
        java.util.Iterator r3, r44;
        org.apache.mahout.common.Pair r4, $r8, $r36, r45;
        java.util.ArrayList $r5;
        boolean $z0, $z1, $z2;
        org.apache.mahout.math.DenseMatrix $r6;
        org.apache.mahout.math.DenseVector $r7;
        java.lang.Object $r9, $r10, $r12, $r17, $r18, $r28, $r29, $r32, $r35, $r37;
        int $i0, $i1, $i2, $i3, i4, i5, i6, i7, i8;
        java.lang.Integer $r11, $r16, $r33;
        org.apache.mahout.math.Vector $r13, $r15, $r19, $r30, $r38;
        double $d0;
        java.lang.StringBuilder $r20, $r25, $r26;
        java.lang.String $r21, $r23;
        java.io.IOException $r22;
        org.apache.mahout.common.iterator.sequencefile.SequenceFileIterable $r24;
        org.apache.hadoop.io.IntWritable $r27, $r34;
        org.apache.mahout.math.VectorWritable $r31, $r39;
        org.apache.hadoop.fs.Path r41;

        r0 := @parameter0: org.apache.hadoop.conf.Configuration;

        r1 := @parameter1: org.apache.hadoop.fs.Path[];

        i4 = -1;

        i5 = -1;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        i6 = lengthof r1;

        i7 = 0;

     label1:
        if i7 >= i6 goto label4;

        r41 = r1[i7];

        $r24 = new org.apache.mahout.common.iterator.sequencefile.SequenceFileIterable;

        specialinvoke $r24.<org.apache.mahout.common.iterator.sequencefile.SequenceFileIterable: void <init>(org.apache.hadoop.fs.Path,boolean,org.apache.hadoop.conf.Configuration)>(r41, 1, r0);

        r3 = virtualinvoke $r24.<org.apache.mahout.common.iterator.sequencefile.SequenceFileIterable: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r28 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.mahout.common.Pair) $r28;

        $r29 = virtualinvoke r4.<org.apache.mahout.common.Pair: java.lang.Object getFirst()>();

        $r27 = (org.apache.hadoop.io.IntWritable) $r29;

        $i2 = virtualinvoke $r27.<org.apache.hadoop.io.IntWritable: int get()>();

        $r33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r32 = virtualinvoke r4.<org.apache.mahout.common.Pair: java.lang.Object getSecond()>();

        $r31 = (org.apache.mahout.math.VectorWritable) $r32;

        $r30 = virtualinvoke $r31.<org.apache.mahout.math.VectorWritable: org.apache.mahout.math.Vector get()>();

        $r36 = staticinvoke <org.apache.mahout.common.Pair: org.apache.mahout.common.Pair of(java.lang.Object,java.lang.Object)>($r33, $r30);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r36);

        $r35 = virtualinvoke r4.<org.apache.mahout.common.Pair: java.lang.Object getFirst()>();

        $r34 = (org.apache.hadoop.io.IntWritable) $r35;

        $i3 = virtualinvoke $r34.<org.apache.hadoop.io.IntWritable: int get()>();

        i4 = staticinvoke <java.lang.Math: int max(int,int)>(i4, $i3);

        if i5 >= 0 goto label2;

        $r37 = virtualinvoke r4.<org.apache.mahout.common.Pair: java.lang.Object getSecond()>();

        $r39 = (org.apache.mahout.math.VectorWritable) $r37;

        $r38 = virtualinvoke $r39.<org.apache.mahout.math.VectorWritable: org.apache.mahout.math.Vector get()>();

        i5 = interfaceinvoke $r38.<org.apache.mahout.math.Vector: int size()>();

        goto label2;

     label3:
        i7 = i7 + 1;

        goto label1;

     label4:
        $z0 = interfaceinvoke $r5.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label5;

        $r22 = new java.io.IOException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(r1);

        $r25 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" have no vectors in it");

        $r23 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.io.IOException: void <init>(java.lang.String)>($r23);

        throw $r22;

     label5:
        i8 = i4 + 1;

        $r6 = new org.apache.mahout.math.DenseMatrix;

        specialinvoke $r6.<org.apache.mahout.math.DenseMatrix: void <init>(int,int)>(i8, i5);

        $r7 = new org.apache.mahout.math.DenseVector;

        specialinvoke $r7.<org.apache.mahout.math.DenseVector: void <init>(int)>(i8);

        r44 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label6:
        $z1 = interfaceinvoke r44.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r10 = interfaceinvoke r44.<java.util.Iterator: java.lang.Object next()>();

        r45 = (org.apache.mahout.common.Pair) $r10;

        $r9 = virtualinvoke r45.<org.apache.mahout.common.Pair: java.lang.Object getFirst()>();

        $r11 = (java.lang.Integer) $r9;

        $i0 = virtualinvoke $r11.<java.lang.Integer: int intValue()>();

        $r13 = interfaceinvoke $r6.<org.apache.mahout.math.Matrix: org.apache.mahout.math.Vector viewRow(int)>($i0);

        $r12 = virtualinvoke r45.<org.apache.mahout.common.Pair: java.lang.Object getSecond()>();

        $r15 = (org.apache.mahout.math.Vector) $r12;

        interfaceinvoke $r13.<org.apache.mahout.math.Vector: org.apache.mahout.math.Vector assign(org.apache.mahout.math.Vector)>($r15);

        $r17 = virtualinvoke r45.<org.apache.mahout.common.Pair: java.lang.Object getFirst()>();

        $r16 = (java.lang.Integer) $r17;

        $i1 = virtualinvoke $r16.<java.lang.Integer: int intValue()>();

        $r18 = virtualinvoke r45.<org.apache.mahout.common.Pair: java.lang.Object getSecond()>();

        $r19 = (org.apache.mahout.math.Vector) $r18;

        $d0 = interfaceinvoke $r19.<org.apache.mahout.math.Vector: double norm(double)>(1.0);

        interfaceinvoke $r7.<org.apache.mahout.math.Vector: void set(int,double)>($i1, $d0);

        goto label6;

     label7:
        $r8 = staticinvoke <org.apache.mahout.common.Pair: org.apache.mahout.common.Pair of(java.lang.Object,java.lang.Object)>($r6, $r7);

        return $r8;
    }

    public java.lang.String toString()
    {
        org.apache.mahout.clustering.lda.cvb.TopicModel r0;
        java.lang.StringBuilder $r3, $r8;
        int $i0, i1;
        java.lang.String $r4, $r14;
        java.lang.String[] $r5, $r13;
        org.apache.mahout.math.Matrix $r6, $r10;
        org.apache.mahout.math.Vector $r7, $r11, $r12;

        r0 := @this: org.apache.mahout.clustering.lda.cvb.TopicModel;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        i1 = 0;

     label1:
        $i0 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: int numTopics>;

        if i1 >= $i0 goto label4;

        $r5 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: java.lang.String[] dictionary>;

        if $r5 == null goto label2;

        $r10 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: org.apache.mahout.math.Matrix topicTermCounts>;

        $r12 = interfaceinvoke $r10.<org.apache.mahout.math.Matrix: org.apache.mahout.math.Vector viewRow(int)>(i1);

        $r11 = interfaceinvoke $r12.<org.apache.mahout.math.Vector: org.apache.mahout.math.Vector normalize(double)>(1.0);

        $r13 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: java.lang.String[] dictionary>;

        $r14 = staticinvoke <org.apache.mahout.clustering.lda.cvb.TopicModel: java.lang.String vectorToSortedString(org.apache.mahout.math.Vector,java.lang.String[])>($r11, $r13);

        goto label3;

     label2:
        $r6 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: org.apache.mahout.math.Matrix topicTermCounts>;

        $r7 = interfaceinvoke $r6.<org.apache.mahout.math.Matrix: org.apache.mahout.math.Vector viewRow(int)>(i1);

        $r14 = interfaceinvoke $r7.<org.apache.mahout.math.Vector: java.lang.String asFormatString()>();

     label3:
        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        i1 = i1 + 1;

        goto label1;

     label4:
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public int sampleTerm(org.apache.mahout.math.Vector)
    {
        org.apache.mahout.clustering.lda.cvb.TopicModel r0;
        org.apache.mahout.math.Vector r1, $r5;
        org.apache.mahout.math.stats.Sampler $r2, $r3;
        org.apache.mahout.math.Matrix $r4;
        int $i0, $i1;

        r0 := @this: org.apache.mahout.clustering.lda.cvb.TopicModel;

        r1 := @parameter0: org.apache.mahout.math.Vector;

        $r3 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: org.apache.mahout.math.stats.Sampler sampler>;

        $r4 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: org.apache.mahout.math.Matrix topicTermCounts>;

        $r2 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: org.apache.mahout.math.stats.Sampler sampler>;

        $i0 = virtualinvoke $r2.<org.apache.mahout.math.stats.Sampler: int sample(org.apache.mahout.math.Vector)>(r1);

        $r5 = interfaceinvoke $r4.<org.apache.mahout.math.Matrix: org.apache.mahout.math.Vector viewRow(int)>($i0);

        $i1 = virtualinvoke $r3.<org.apache.mahout.math.stats.Sampler: int sample(org.apache.mahout.math.Vector)>($r5);

        return $i1;
    }

    public int sampleTerm(int)
    {
        org.apache.mahout.clustering.lda.cvb.TopicModel r0;
        int i0, $i1;
        org.apache.mahout.math.Matrix $r1;
        org.apache.mahout.math.stats.Sampler $r2;
        org.apache.mahout.math.Vector $r3;

        r0 := @this: org.apache.mahout.clustering.lda.cvb.TopicModel;

        i0 := @parameter0: int;

        $r2 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: org.apache.mahout.math.stats.Sampler sampler>;

        $r1 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: org.apache.mahout.math.Matrix topicTermCounts>;

        $r3 = interfaceinvoke $r1.<org.apache.mahout.math.Matrix: org.apache.mahout.math.Vector viewRow(int)>(i0);

        $i1 = virtualinvoke $r2.<org.apache.mahout.math.stats.Sampler: int sample(org.apache.mahout.math.Vector)>($r3);

        return $i1;
    }

    public synchronized void reset()
    {
        org.apache.mahout.clustering.lda.cvb.TopicModel r0;
        int $i0, $i1, i2;
        org.apache.mahout.math.Vector $r1;
        java.util.concurrent.ThreadPoolExecutor $r3;
        boolean $z0;
        org.apache.mahout.math.SequentialAccessSparseVector $r4;
        org.apache.mahout.math.Matrix $r5;

        r0 := @this: org.apache.mahout.clustering.lda.cvb.TopicModel;

        i2 = 0;

     label1:
        $i0 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: int numTopics>;

        if i2 >= $i0 goto label2;

        $r5 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: org.apache.mahout.math.Matrix topicTermCounts>;

        $r4 = new org.apache.mahout.math.SequentialAccessSparseVector;

        $i1 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: int numTerms>;

        specialinvoke $r4.<org.apache.mahout.math.SequentialAccessSparseVector: void <init>(int)>($i1);

        interfaceinvoke $r5.<org.apache.mahout.math.Matrix: org.apache.mahout.math.Matrix assignRow(int,org.apache.mahout.math.Vector)>(i2, $r4);

        i2 = i2 + 1;

        goto label1;

     label2:
        $r1 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: org.apache.mahout.math.Vector topicSums>;

        interfaceinvoke $r1.<org.apache.mahout.math.Vector: org.apache.mahout.math.Vector assign(double)>(1.0);

        $r3 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: java.util.concurrent.ThreadPoolExecutor threadPool>;

        $z0 = virtualinvoke $r3.<java.util.concurrent.ThreadPoolExecutor: boolean isTerminated()>();

        if $z0 == 0 goto label3;

        specialinvoke r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: void initializeThreadPool()>();

     label3:
        return;
    }

    public synchronized void stop()
    {
        org.apache.mahout.clustering.lda.cvb.TopicModel r0;
        int i0, i1;
        org.apache.mahout.clustering.lda.cvb.TopicModel$Updater r1;
        java.util.concurrent.ThreadPoolExecutor $r2, $r4;
        java.util.concurrent.TimeUnit $r3;
        boolean $z0;
        org.slf4j.Logger $r5, $r7;
        java.lang.InterruptedException $r6;
        org.apache.mahout.clustering.lda.cvb.TopicModel$Updater[] r8;

        r0 := @this: org.apache.mahout.clustering.lda.cvb.TopicModel;

        r8 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: org.apache.mahout.clustering.lda.cvb.TopicModel$Updater[] updaters>;

        i0 = lengthof r8;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r1 = r8[i1];

        virtualinvoke r1.<org.apache.mahout.clustering.lda.cvb.TopicModel$Updater: void shutdown()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        $r2 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: java.util.concurrent.ThreadPoolExecutor threadPool>;

        virtualinvoke $r2.<java.util.concurrent.ThreadPoolExecutor: void shutdown()>();

     label3:
        $r4 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: java.util.concurrent.ThreadPoolExecutor threadPool>;

        $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $z0 = virtualinvoke $r4.<java.util.concurrent.ThreadPoolExecutor: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>(60L, $r3);

        if $z0 != 0 goto label6;

        $r5 = <org.apache.mahout.clustering.lda.cvb.TopicModel: org.slf4j.Logger log>;

        interfaceinvoke $r5.<org.slf4j.Logger: void warn(java.lang.String)>("Threadpool timed out on await termination - jobs still running!");

     label4:
        goto label6;

     label5:
        $r6 := @caughtexception;

        $r7 = <org.apache.mahout.clustering.lda.cvb.TopicModel: org.slf4j.Logger log>;

        interfaceinvoke $r7.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Interrupted shutting down!", $r6);

     label6:
        return;

        catch java.lang.InterruptedException from label3 to label4 with label5;
    }

    public void renormalize()
    {
        org.apache.mahout.clustering.lda.cvb.TopicModel r0;
        int $i0, i1;
        org.apache.mahout.math.Matrix $r1, $r2;
        org.apache.mahout.math.Vector $r3, $r4, $r6;

        r0 := @this: org.apache.mahout.clustering.lda.cvb.TopicModel;

        i1 = 0;

     label1:
        $i0 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: int numTopics>;

        if i1 >= $i0 goto label2;

        $r2 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: org.apache.mahout.math.Matrix topicTermCounts>;

        $r1 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: org.apache.mahout.math.Matrix topicTermCounts>;

        $r3 = interfaceinvoke $r1.<org.apache.mahout.math.Matrix: org.apache.mahout.math.Vector viewRow(int)>(i1);

        $r4 = interfaceinvoke $r3.<org.apache.mahout.math.Vector: org.apache.mahout.math.Vector normalize(double)>(1.0);

        interfaceinvoke $r2.<org.apache.mahout.math.Matrix: org.apache.mahout.math.Matrix assignRow(int,org.apache.mahout.math.Vector)>(i1, $r4);

        $r6 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: org.apache.mahout.math.Vector topicSums>;

        interfaceinvoke $r6.<org.apache.mahout.math.Vector: org.apache.mahout.math.Vector assign(double)>(1.0);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void trainDocTopicModel(org.apache.mahout.math.Vector, org.apache.mahout.math.Vector, org.apache.mahout.math.Matrix)
    {
        org.apache.mahout.clustering.lda.cvb.TopicModel r0;
        org.apache.mahout.math.Vector r1, r2, r5, $r10;
        org.apache.mahout.math.Matrix r3;
        org.apache.mahout.math.Vector$Element r4;
        java.lang.Iterable $r6;
        boolean $z0;
        int $i0, $i1, $i2, $i3, i4, i5;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        org.apache.mahout.math.function.DoubleFunction $r9;
        java.lang.Object $r11;
        java.util.Iterator r12;

        r0 := @this: org.apache.mahout.clustering.lda.cvb.TopicModel;

        r1 := @parameter0: org.apache.mahout.math.Vector;

        r2 := @parameter1: org.apache.mahout.math.Vector;

        r3 := @parameter2: org.apache.mahout.math.Matrix;

        specialinvoke r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: void pTopicGivenTerm(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector,org.apache.mahout.math.Matrix)>(r1, r2, r3);

        specialinvoke r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: void normalizeByTopic(org.apache.mahout.math.Matrix)>(r3);

        $r6 = interfaceinvoke r1.<org.apache.mahout.math.Vector: java.lang.Iterable nonZeroes()>();

        r12 = interfaceinvoke $r6.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r11 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.mahout.math.Vector$Element) $r11;

        i4 = 0;

     label2:
        $i1 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: int numTopics>;

        if i4 >= $i1 goto label1;

        r5 = interfaceinvoke r3.<org.apache.mahout.math.Matrix: org.apache.mahout.math.Vector viewRow(int)>(i4);

        $i3 = interfaceinvoke r4.<org.apache.mahout.math.Vector$Element: int index()>();

        $i2 = interfaceinvoke r4.<org.apache.mahout.math.Vector$Element: int index()>();

        $d4 = interfaceinvoke r5.<org.apache.mahout.math.Vector: double getQuick(int)>($i2);

        $d3 = interfaceinvoke r4.<org.apache.mahout.math.Vector$Element: double get()>();

        $d5 = $d4 * $d3;

        interfaceinvoke r5.<org.apache.mahout.math.Vector: void setQuick(int,double)>($i3, $d5);

        i4 = i4 + 1;

        goto label2;

     label3:
        interfaceinvoke r2.<org.apache.mahout.math.Vector: org.apache.mahout.math.Vector assign(double)>(0.0);

        i5 = 0;

     label4:
        $i0 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: int numTopics>;

        if i5 >= $i0 goto label5;

        $r10 = interfaceinvoke r3.<org.apache.mahout.math.Matrix: org.apache.mahout.math.Vector viewRow(int)>(i5);

        $d2 = interfaceinvoke $r10.<org.apache.mahout.math.Vector: double norm(double)>(1.0);

        interfaceinvoke r2.<org.apache.mahout.math.Vector: void set(int,double)>(i5, $d2);

        i5 = i5 + 1;

        goto label4;

     label5:
        $d0 = interfaceinvoke r2.<org.apache.mahout.math.Vector: double norm(double)>(1.0);

        $d1 = 1.0 / $d0;

        $r9 = staticinvoke <org.apache.mahout.math.function.Functions: org.apache.mahout.math.function.DoubleFunction mult(double)>($d1);

        interfaceinvoke r2.<org.apache.mahout.math.Vector: org.apache.mahout.math.Vector assign(org.apache.mahout.math.function.DoubleFunction)>($r9);

        return;
    }

    public org.apache.mahout.math.Vector infer(org.apache.mahout.math.Vector, org.apache.mahout.math.Vector)
    {
        org.apache.mahout.clustering.lda.cvb.TopicModel r0;
        org.apache.mahout.math.Vector r1, r2, r3, $r8, $r10;
        java.util.Iterator r4;
        org.apache.mahout.math.Vector$Element r5;
        int i0, $i1, i2;
        java.lang.Iterable $r6;
        boolean $z0;
        java.lang.Object $r7;
        org.apache.mahout.math.Matrix $r9;
        double $d0, $d1, $d2, $d3, $d4, d5;

        r0 := @this: org.apache.mahout.clustering.lda.cvb.TopicModel;

        r1 := @parameter0: org.apache.mahout.math.Vector;

        r2 := @parameter1: org.apache.mahout.math.Vector;

        r3 = interfaceinvoke r1.<org.apache.mahout.math.Vector: org.apache.mahout.math.Vector like()>();

        $r6 = interfaceinvoke r1.<org.apache.mahout.math.Vector: java.lang.Iterable nonZeroes()>();

        r4 = interfaceinvoke $r6.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.mahout.math.Vector$Element) $r7;

        i0 = interfaceinvoke r5.<org.apache.mahout.math.Vector$Element: int index()>();

        d5 = 0.0;

        i2 = 0;

     label2:
        $i1 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: int numTopics>;

        if i2 >= $i1 goto label3;

        $r9 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: org.apache.mahout.math.Matrix topicTermCounts>;

        $r8 = interfaceinvoke $r9.<org.apache.mahout.math.Matrix: org.apache.mahout.math.Vector viewRow(int)>(i2);

        $d0 = interfaceinvoke $r8.<org.apache.mahout.math.Vector: double get(int)>(i0);

        $r10 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: org.apache.mahout.math.Vector topicSums>;

        $d2 = interfaceinvoke $r10.<org.apache.mahout.math.Vector: double get(int)>(i2);

        $d1 = $d0 / $d2;

        $d4 = interfaceinvoke r2.<org.apache.mahout.math.Vector: double get(int)>(i2);

        $d3 = $d1 * $d4;

        d5 = d5 + $d3;

        i2 = i2 + 1;

        goto label2;

     label3:
        interfaceinvoke r3.<org.apache.mahout.math.Vector: void set(int,double)>(i0, d5);

        goto label1;

     label4:
        return r3;
    }

    public void update(org.apache.mahout.math.Matrix)
    {
        org.apache.mahout.clustering.lda.cvb.TopicModel r0;
        org.apache.mahout.math.Matrix r1;
        int $i0, $i1, $i2, i3;
        org.apache.mahout.clustering.lda.cvb.TopicModel$Updater[] $r2, $r3;
        org.apache.mahout.clustering.lda.cvb.TopicModel$Updater $r4;
        org.apache.mahout.math.Vector $r5;

        r0 := @this: org.apache.mahout.clustering.lda.cvb.TopicModel;

        r1 := @parameter0: org.apache.mahout.math.Matrix;

        i3 = 0;

     label1:
        $i0 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: int numTopics>;

        if i3 >= $i0 goto label2;

        $r3 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: org.apache.mahout.clustering.lda.cvb.TopicModel$Updater[] updaters>;

        $r2 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: org.apache.mahout.clustering.lda.cvb.TopicModel$Updater[] updaters>;

        $i1 = lengthof $r2;

        $i2 = i3 % $i1;

        $r4 = $r3[$i2];

        $r5 = interfaceinvoke r1.<org.apache.mahout.math.Matrix: org.apache.mahout.math.Vector viewRow(int)>(i3);

        virtualinvoke $r4.<org.apache.mahout.clustering.lda.cvb.TopicModel$Updater: boolean update(int,org.apache.mahout.math.Vector)>(i3, $r5);

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    public void updateTopic(int, org.apache.mahout.math.Vector)
    {
        org.apache.mahout.clustering.lda.cvb.TopicModel r0;
        int i0;
        org.apache.mahout.math.Vector r1, $r3, $r6, $r7;
        org.apache.mahout.math.Matrix $r2;
        org.apache.mahout.math.function.DoubleDoubleFunction $r4;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.mahout.clustering.lda.cvb.TopicModel;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.mahout.math.Vector;

        $r2 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: org.apache.mahout.math.Matrix topicTermCounts>;

        $r3 = interfaceinvoke $r2.<org.apache.mahout.math.Matrix: org.apache.mahout.math.Vector viewRow(int)>(i0);

        $r4 = <org.apache.mahout.math.function.Functions: org.apache.mahout.math.function.DoubleDoubleFunction PLUS>;

        interfaceinvoke $r3.<org.apache.mahout.math.Vector: org.apache.mahout.math.Vector assign(org.apache.mahout.math.Vector,org.apache.mahout.math.function.DoubleDoubleFunction)>(r1, $r4);

        $r7 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: org.apache.mahout.math.Vector topicSums>;

        $r6 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: org.apache.mahout.math.Vector topicSums>;

        $d0 = interfaceinvoke $r6.<org.apache.mahout.math.Vector: double get(int)>(i0);

        $d1 = interfaceinvoke r1.<org.apache.mahout.math.Vector: double norm(double)>(1.0);

        $d2 = $d0 + $d1;

        interfaceinvoke $r7.<org.apache.mahout.math.Vector: void set(int,double)>(i0, $d2);

        return;
    }

    public void update(int, org.apache.mahout.math.Vector)
    {
        org.apache.mahout.clustering.lda.cvb.TopicModel r0;
        int i0, $i1, i2;
        org.apache.mahout.math.Vector r1, r2, $r4;
        org.apache.mahout.math.function.DoubleDoubleFunction $r3;
        org.apache.mahout.math.Matrix $r6;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.mahout.clustering.lda.cvb.TopicModel;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.mahout.math.Vector;

        i2 = 0;

     label1:
        $i1 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: int numTopics>;

        if i2 >= $i1 goto label2;

        $r6 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: org.apache.mahout.math.Matrix topicTermCounts>;

        r2 = interfaceinvoke $r6.<org.apache.mahout.math.Matrix: org.apache.mahout.math.Vector viewRow(int)>(i2);

        $d0 = interfaceinvoke r2.<org.apache.mahout.math.Vector: double get(int)>(i0);

        $d1 = interfaceinvoke r1.<org.apache.mahout.math.Vector: double get(int)>(i2);

        $d2 = $d0 + $d1;

        interfaceinvoke r2.<org.apache.mahout.math.Vector: void set(int,double)>(i0, $d2);

        i2 = i2 + 1;

        goto label1;

     label2:
        $r4 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: org.apache.mahout.math.Vector topicSums>;

        $r3 = <org.apache.mahout.math.function.Functions: org.apache.mahout.math.function.DoubleDoubleFunction PLUS>;

        interfaceinvoke $r4.<org.apache.mahout.math.Vector: org.apache.mahout.math.Vector assign(org.apache.mahout.math.Vector,org.apache.mahout.math.function.DoubleDoubleFunction)>(r1, $r3);

        return;
    }

    public void persist(org.apache.hadoop.fs.Path, boolean) throws java.io.IOException
    {
        org.apache.mahout.clustering.lda.cvb.TopicModel r0;
        org.apache.hadoop.fs.Path r1;
        boolean z0;
        org.apache.hadoop.fs.FileSystem r2;
        org.apache.hadoop.conf.Configuration $r3, $r5;
        org.apache.mahout.math.Matrix $r4;

        r0 := @this: org.apache.mahout.clustering.lda.cvb.TopicModel;

        r1 := @parameter0: org.apache.hadoop.fs.Path;

        z0 := @parameter1: boolean;

        $r3 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: org.apache.hadoop.conf.Configuration conf>;

        r2 = virtualinvoke r1.<org.apache.hadoop.fs.Path: org.apache.hadoop.fs.FileSystem getFileSystem(org.apache.hadoop.conf.Configuration)>($r3);

        if z0 == 0 goto label1;

        virtualinvoke r2.<org.apache.hadoop.fs.FileSystem: boolean delete(org.apache.hadoop.fs.Path,boolean)>(r1, 1);

     label1:
        $r5 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: org.apache.hadoop.conf.Configuration conf>;

        $r4 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: org.apache.mahout.math.Matrix topicTermCounts>;

        staticinvoke <org.apache.mahout.math.DistributedRowMatrixWriter: void write(org.apache.hadoop.fs.Path,org.apache.hadoop.conf.Configuration,java.lang.Iterable)>(r1, $r5, $r4);

        return;
    }

    private void pTopicGivenTerm(org.apache.mahout.math.Vector, org.apache.mahout.math.Vector, org.apache.mahout.math.Matrix)
    {
        org.apache.mahout.clustering.lda.cvb.TopicModel r0;
        org.apache.mahout.math.Vector r1, r2, r4, r5, $r9;
        org.apache.mahout.math.Matrix r3, $r8;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13;
        java.util.Iterator r6;
        org.apache.mahout.math.Vector$Element r7;
        int i0, $i1, $i2, i3;
        java.lang.Iterable $r10;
        java.lang.Object $r11;
        boolean $z0;

        r0 := @this: org.apache.mahout.clustering.lda.cvb.TopicModel;

        r1 := @parameter0: org.apache.mahout.math.Vector;

        r2 := @parameter1: org.apache.mahout.math.Vector;

        r3 := @parameter2: org.apache.mahout.math.Matrix;

        i3 = 0;

     label1:
        $i1 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: int numTopics>;

        if i3 >= $i1 goto label6;

        if r2 != null goto label2;

        $d13 = 1.0;

        goto label3;

     label2:
        $d13 = interfaceinvoke r2.<org.apache.mahout.math.Vector: double get(int)>(i3);

     label3:
        d0 = $d13;

        $r8 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: org.apache.mahout.math.Matrix topicTermCounts>;

        r4 = interfaceinvoke $r8.<org.apache.mahout.math.Matrix: org.apache.mahout.math.Vector viewRow(int)>(i3);

        $r9 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: org.apache.mahout.math.Vector topicSums>;

        d1 = interfaceinvoke $r9.<org.apache.mahout.math.Vector: double get(int)>(i3);

        r5 = interfaceinvoke r3.<org.apache.mahout.math.Matrix: org.apache.mahout.math.Vector viewRow(int)>(i3);

        $r10 = interfaceinvoke r1.<org.apache.mahout.math.Vector: java.lang.Iterable nonZeroes()>();

        r6 = interfaceinvoke $r10.<java.lang.Iterable: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r11 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.mahout.math.Vector$Element) $r11;

        i0 = interfaceinvoke r7.<org.apache.mahout.math.Vector$Element: int index()>();

        $d4 = interfaceinvoke r4.<org.apache.mahout.math.Vector: double get(int)>(i0);

        $d3 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: double eta>;

        $d5 = $d4 + $d3;

        $d6 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: double alpha>;

        $d7 = d0 + $d6;

        $d12 = $d5 * $d7;

        $d11 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: double eta>;

        $i2 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: int numTerms>;

        $d10 = (double) $i2;

        $d8 = $d11 * $d10;

        $d9 = d1 + $d8;

        d2 = $d12 / $d9;

        interfaceinvoke r5.<org.apache.mahout.math.Vector: void set(int,double)>(i0, d2);

        goto label4;

     label5:
        i3 = i3 + 1;

        goto label1;

     label6:
        return;
    }

    public double perplexity(org.apache.mahout.math.Vector, org.apache.mahout.math.Vector)
    {
        org.apache.mahout.clustering.lda.cvb.TopicModel r0;
        org.apache.mahout.math.Vector r1, r2, $r8, $r9;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, d23, d24;
        java.util.Iterator r3;
        org.apache.mahout.math.Vector$Element r4;
        int i0, $i1, $i2, $i3, i4;
        java.lang.Iterable $r5;
        boolean $z0;
        java.lang.Object $r6;
        org.apache.mahout.math.Matrix $r7;

        r0 := @this: org.apache.mahout.clustering.lda.cvb.TopicModel;

        r1 := @parameter0: org.apache.mahout.math.Vector;

        r2 := @parameter1: org.apache.mahout.math.Vector;

        d23 = 0.0;

        $d3 = interfaceinvoke r2.<org.apache.mahout.math.Vector: double norm(double)>(1.0);

        $i1 = interfaceinvoke r2.<org.apache.mahout.math.Vector: int size()>();

        $d6 = (double) $i1;

        $d4 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: double alpha>;

        $d5 = $d6 * $d4;

        d0 = $d3 + $d5;

        $r5 = interfaceinvoke r1.<org.apache.mahout.math.Vector: java.lang.Iterable nonZeroes()>();

        r3 = interfaceinvoke $r5.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.mahout.math.Vector$Element) $r6;

        i0 = interfaceinvoke r4.<org.apache.mahout.math.Vector$Element: int index()>();

        d24 = 0.0;

        i4 = 0;

     label2:
        $i2 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: int numTopics>;

        if i4 >= $i2 goto label3;

        $d13 = interfaceinvoke r2.<org.apache.mahout.math.Vector: double get(int)>(i4);

        $d11 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: double alpha>;

        $d12 = $d13 + $d11;

        d1 = $d12 / d0;

        $r7 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: org.apache.mahout.math.Matrix topicTermCounts>;

        $r8 = interfaceinvoke $r7.<org.apache.mahout.math.Matrix: org.apache.mahout.math.Vector viewRow(int)>(i4);

        $d14 = interfaceinvoke $r8.<org.apache.mahout.math.Vector: double get(int)>(i0);

        $d15 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: double eta>;

        $d18 = $d14 + $d15;

        $d16 = d1 * $d18;

        $r9 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: org.apache.mahout.math.Vector topicSums>;

        $d17 = interfaceinvoke $r9.<org.apache.mahout.math.Vector: double get(int)>(i4);

        $d19 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: double eta>;

        $i3 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: int numTerms>;

        $d21 = (double) $i3;

        $d20 = $d19 * $d21;

        $d22 = $d17 + $d20;

        d2 = $d16 / $d22;

        d24 = d24 + d2;

        i4 = i4 + 1;

        goto label2;

     label3:
        $d8 = interfaceinvoke r4.<org.apache.mahout.math.Vector$Element: double get()>();

        $d10 = staticinvoke <java.lang.Math: double log(double)>(d24);

        $d9 = $d8 * $d10;

        d23 = d23 + $d9;

        goto label1;

     label4:
        $d7 = neg d23;

        return $d7;
    }

    private void normalizeByTopic(org.apache.mahout.math.Matrix)
    {
        org.apache.mahout.clustering.lda.cvb.TopicModel r0;
        org.apache.mahout.math.Matrix r1;
        java.util.Iterator r2;
        org.apache.mahout.math.Vector$Element r3;
        int i0, $i1, $i2, i3, i4;
        org.apache.mahout.math.Vector $r4, $r7, $r8, $r9;
        java.lang.Iterable $r5;
        boolean $z0;
        java.lang.Object $r6;
        double $d0, $d1, $d2, d3;

        r0 := @this: org.apache.mahout.clustering.lda.cvb.TopicModel;

        r1 := @parameter0: org.apache.mahout.math.Matrix;

        $r4 = interfaceinvoke r1.<org.apache.mahout.math.Matrix: org.apache.mahout.math.Vector viewRow(int)>(0);

        $r5 = interfaceinvoke $r4.<org.apache.mahout.math.Vector: java.lang.Iterable nonZeroes()>();

        r2 = interfaceinvoke $r5.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.mahout.math.Vector$Element) $r6;

        i0 = interfaceinvoke r3.<org.apache.mahout.math.Vector$Element: int index()>();

        d3 = 0.0;

        i3 = 0;

     label2:
        $i1 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: int numTopics>;

        if i3 >= $i1 goto label3;

        $r9 = interfaceinvoke r1.<org.apache.mahout.math.Matrix: org.apache.mahout.math.Vector viewRow(int)>(i3);

        $d2 = interfaceinvoke $r9.<org.apache.mahout.math.Vector: double get(int)>(i0);

        d3 = d3 + $d2;

        i3 = i3 + 1;

        goto label2;

     label3:
        i4 = 0;

     label4:
        $i2 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: int numTopics>;

        if i4 >= $i2 goto label1;

        $r7 = interfaceinvoke r1.<org.apache.mahout.math.Matrix: org.apache.mahout.math.Vector viewRow(int)>(i4);

        $r8 = interfaceinvoke r1.<org.apache.mahout.math.Matrix: org.apache.mahout.math.Vector viewRow(int)>(i4);

        $d0 = interfaceinvoke $r8.<org.apache.mahout.math.Vector: double get(int)>(i0);

        $d1 = $d0 / d3;

        interfaceinvoke $r7.<org.apache.mahout.math.Vector: void set(int,double)>(i0, $d1);

        i4 = i4 + 1;

        goto label4;

     label5:
        return;
    }

    public static java.lang.String vectorToSortedString(org.apache.mahout.math.Vector, java.lang.String[])
    {
        org.apache.mahout.math.Vector r0;
        java.lang.String[] r1;
        org.apache.mahout.common.Pair r3, $r19;
        java.util.ArrayList $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;
        java.lang.Iterable $r5;
        boolean $z0, $z1;
        org.apache.mahout.clustering.lda.cvb.TopicModel$1 $r6;
        java.lang.StringBuilder $r7;
        java.lang.String $r9, $r13, $r24;
        java.lang.Object $r10, $r11, $r14, $r18;
        double $d0;
        java.lang.Double $r20;
        java.util.Iterator r22, r25;
        org.apache.mahout.math.Vector$Element r23;

        r0 := @parameter0: org.apache.mahout.math.Vector;

        r1 := @parameter1: java.lang.String[];

        $r4 = new java.util.ArrayList;

        $i0 = interfaceinvoke r0.<org.apache.mahout.math.Vector: int getNumNondefaultElements()>();

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>($i0);

        $r5 = interfaceinvoke r0.<org.apache.mahout.math.Vector: java.lang.Iterable nonZeroes()>();

        r22 = interfaceinvoke $r5.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r18 = interfaceinvoke r22.<java.util.Iterator: java.lang.Object next()>();

        r23 = (org.apache.mahout.math.Vector$Element) $r18;

        if r1 == null goto label2;

        $i5 = interfaceinvoke r23.<org.apache.mahout.math.Vector$Element: int index()>();

        $r24 = r1[$i5];

        goto label3;

     label2:
        $i4 = interfaceinvoke r23.<org.apache.mahout.math.Vector$Element: int index()>();

        $r24 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i4);

     label3:
        $d0 = interfaceinvoke r23.<org.apache.mahout.math.Vector$Element: double get()>();

        $r20 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r19 = staticinvoke <org.apache.mahout.common.Pair: org.apache.mahout.common.Pair of(java.lang.Object,java.lang.Object)>($r24, $r20);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r19);

        goto label1;

     label4:
        $r6 = new org.apache.mahout.clustering.lda.cvb.TopicModel$1;

        specialinvoke $r6.<org.apache.mahout.clustering.lda.cvb.TopicModel$1: void <init>()>();

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r4, $r6);

        r25 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(int)>(2048);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(123);

        i6 = 0;

     label5:
        $z1 = interfaceinvoke r25.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        if i6 >= 25 goto label6;

        i6 = i6 + 1;

        $r11 = interfaceinvoke r25.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.mahout.common.Pair) $r11;

        $r10 = virtualinvoke r3.<org.apache.mahout.common.Pair: java.lang.Object getFirst()>();

        $r13 = (java.lang.String) $r10;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        $r14 = virtualinvoke r3.<org.apache.mahout.common.Pair: java.lang.Object getSecond()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        goto label5;

     label6:
        $i1 = virtualinvoke $r7.<java.lang.StringBuilder: int length()>();

        if $i1 <= 1 goto label7;

        $i2 = virtualinvoke $r7.<java.lang.StringBuilder: int length()>();

        $i3 = $i2 - 1;

        virtualinvoke $r7.<java.lang.StringBuilder: void setCharAt(int,char)>($i3, 125);

     label7:
        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public void setConf(org.apache.hadoop.conf.Configuration)
    {
        org.apache.mahout.clustering.lda.cvb.TopicModel r0;
        org.apache.hadoop.conf.Configuration r1;

        r0 := @this: org.apache.mahout.clustering.lda.cvb.TopicModel;

        r1 := @parameter0: org.apache.hadoop.conf.Configuration;

        r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: org.apache.hadoop.conf.Configuration conf> = r1;

        return;
    }

    public org.apache.hadoop.conf.Configuration getConf()
    {
        org.apache.mahout.clustering.lda.cvb.TopicModel r0;
        org.apache.hadoop.conf.Configuration $r1;

        r0 := @this: org.apache.mahout.clustering.lda.cvb.TopicModel;

        $r1 = r0.<org.apache.mahout.clustering.lda.cvb.TopicModel: org.apache.hadoop.conf.Configuration conf>;

        return $r1;
    }

    static org.slf4j.Logger access$100()
    {
        org.slf4j.Logger $r0;

        $r0 = <org.apache.mahout.clustering.lda.cvb.TopicModel: org.slf4j.Logger log>;

        return $r0;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "org/apache/mahout/clustering/lda/cvb/TopicModel");

        <org.apache.mahout.clustering.lda.cvb.TopicModel: org.slf4j.Logger log> = $r0;

        return;
    }
}
