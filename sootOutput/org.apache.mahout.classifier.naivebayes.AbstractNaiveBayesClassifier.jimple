public abstract class org.apache.mahout.classifier.naivebayes.AbstractNaiveBayesClassifier extends org.apache.mahout.classifier.AbstractVectorClassifier
{
    private final org.apache.mahout.classifier.naivebayes.NaiveBayesModel model;

    protected void <init>(org.apache.mahout.classifier.naivebayes.NaiveBayesModel)
    {
        org.apache.mahout.classifier.naivebayes.AbstractNaiveBayesClassifier r0;
        org.apache.mahout.classifier.naivebayes.NaiveBayesModel r1;

        r0 := @this: org.apache.mahout.classifier.naivebayes.AbstractNaiveBayesClassifier;

        r1 := @parameter0: org.apache.mahout.classifier.naivebayes.NaiveBayesModel;

        specialinvoke r0.<org.apache.mahout.classifier.AbstractVectorClassifier: void <init>()>();

        r0.<org.apache.mahout.classifier.naivebayes.AbstractNaiveBayesClassifier: org.apache.mahout.classifier.naivebayes.NaiveBayesModel model> = r1;

        return;
    }

    protected org.apache.mahout.classifier.naivebayes.NaiveBayesModel getModel()
    {
        org.apache.mahout.classifier.naivebayes.AbstractNaiveBayesClassifier r0;
        org.apache.mahout.classifier.naivebayes.NaiveBayesModel $r1;

        r0 := @this: org.apache.mahout.classifier.naivebayes.AbstractNaiveBayesClassifier;

        $r1 = r0.<org.apache.mahout.classifier.naivebayes.AbstractNaiveBayesClassifier: org.apache.mahout.classifier.naivebayes.NaiveBayesModel model>;

        return $r1;
    }

    protected abstract double getScoreForLabelFeature(int, int);

    protected double getScoreForLabelInstance(int, org.apache.mahout.math.Vector)
    {
        org.apache.mahout.classifier.naivebayes.AbstractNaiveBayesClassifier r0;
        int i0, $i1;
        org.apache.mahout.math.Vector r1;
        java.util.Iterator r2;
        org.apache.mahout.math.Vector$Element r3;
        java.lang.Iterable $r4;
        boolean $z0;
        java.lang.Object $r5;
        double $d0, $d1, $d2, d3;

        r0 := @this: org.apache.mahout.classifier.naivebayes.AbstractNaiveBayesClassifier;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.mahout.math.Vector;

        d3 = 0.0;

        $r4 = interfaceinvoke r1.<org.apache.mahout.math.Vector: java.lang.Iterable nonZeroes()>();

        r2 = interfaceinvoke $r4.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.mahout.math.Vector$Element) $r5;

        $d0 = interfaceinvoke r3.<org.apache.mahout.math.Vector$Element: double get()>();

        $i1 = interfaceinvoke r3.<org.apache.mahout.math.Vector$Element: int index()>();

        $d1 = virtualinvoke r0.<org.apache.mahout.classifier.naivebayes.AbstractNaiveBayesClassifier: double getScoreForLabelFeature(int,int)>(i0, $i1);

        $d2 = $d0 * $d1;

        d3 = d3 + $d2;

        goto label1;

     label2:
        return d3;
    }

    public int numCategories()
    {
        org.apache.mahout.classifier.naivebayes.AbstractNaiveBayesClassifier r0;
        org.apache.mahout.classifier.naivebayes.NaiveBayesModel $r1;
        int $i0;

        r0 := @this: org.apache.mahout.classifier.naivebayes.AbstractNaiveBayesClassifier;

        $r1 = r0.<org.apache.mahout.classifier.naivebayes.AbstractNaiveBayesClassifier: org.apache.mahout.classifier.naivebayes.NaiveBayesModel model>;

        $i0 = virtualinvoke $r1.<org.apache.mahout.classifier.naivebayes.NaiveBayesModel: int numLabels()>();

        return $i0;
    }

    public org.apache.mahout.math.Vector classifyFull(org.apache.mahout.math.Vector)
    {
        org.apache.mahout.classifier.naivebayes.AbstractNaiveBayesClassifier r0;
        org.apache.mahout.math.Vector r1, $r3, $r4;
        org.apache.mahout.classifier.naivebayes.NaiveBayesModel $r2;

        r0 := @this: org.apache.mahout.classifier.naivebayes.AbstractNaiveBayesClassifier;

        r1 := @parameter0: org.apache.mahout.math.Vector;

        $r2 = r0.<org.apache.mahout.classifier.naivebayes.AbstractNaiveBayesClassifier: org.apache.mahout.classifier.naivebayes.NaiveBayesModel model>;

        $r3 = virtualinvoke $r2.<org.apache.mahout.classifier.naivebayes.NaiveBayesModel: org.apache.mahout.math.Vector createScoringVector()>();

        $r4 = virtualinvoke r0.<org.apache.mahout.classifier.naivebayes.AbstractNaiveBayesClassifier: org.apache.mahout.math.Vector classifyFull(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector)>($r3, r1);

        return $r4;
    }

    public org.apache.mahout.math.Vector classifyFull(org.apache.mahout.math.Vector, org.apache.mahout.math.Vector)
    {
        org.apache.mahout.classifier.naivebayes.AbstractNaiveBayesClassifier r0;
        org.apache.mahout.math.Vector r1, r2;
        org.apache.mahout.classifier.naivebayes.NaiveBayesModel $r3;
        int $i0, i1;
        double $d0;

        r0 := @this: org.apache.mahout.classifier.naivebayes.AbstractNaiveBayesClassifier;

        r1 := @parameter0: org.apache.mahout.math.Vector;

        r2 := @parameter1: org.apache.mahout.math.Vector;

        i1 = 0;

     label1:
        $r3 = r0.<org.apache.mahout.classifier.naivebayes.AbstractNaiveBayesClassifier: org.apache.mahout.classifier.naivebayes.NaiveBayesModel model>;

        $i0 = virtualinvoke $r3.<org.apache.mahout.classifier.naivebayes.NaiveBayesModel: int numLabels()>();

        if i1 >= $i0 goto label2;

        $d0 = virtualinvoke r0.<org.apache.mahout.classifier.naivebayes.AbstractNaiveBayesClassifier: double getScoreForLabelInstance(int,org.apache.mahout.math.Vector)>(i1, r2);

        interfaceinvoke r1.<org.apache.mahout.math.Vector: void setQuick(int,double)>(i1, $d0);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r1;
    }

    public double classifyScalar(org.apache.mahout.math.Vector)
    {
        org.apache.mahout.classifier.naivebayes.AbstractNaiveBayesClassifier r0;
        org.apache.mahout.math.Vector r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: org.apache.mahout.classifier.naivebayes.AbstractNaiveBayesClassifier;

        r1 := @parameter0: org.apache.mahout.math.Vector;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Not supported in Naive Bayes");

        throw $r2;
    }

    public org.apache.mahout.math.Vector classify(org.apache.mahout.math.Vector)
    {
        org.apache.mahout.classifier.naivebayes.AbstractNaiveBayesClassifier r0;
        org.apache.mahout.math.Vector r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: org.apache.mahout.classifier.naivebayes.AbstractNaiveBayesClassifier;

        r1 := @parameter0: org.apache.mahout.math.Vector;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("probabilites not supported in Naive Bayes");

        throw $r2;
    }
}
