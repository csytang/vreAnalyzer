public final class org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev extends org.apache.mahout.cf.taste.impl.common.FullRunningAverage implements org.apache.mahout.cf.taste.impl.common.RunningAverageAndStdDev
{
    private double stdDev;
    private double mk;
    private double sk;

    public void <init>()
    {
        org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev r0;

        r0 := @this: org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev;

        specialinvoke r0.<org.apache.mahout.cf.taste.impl.common.FullRunningAverage: void <init>()>();

        r0.<org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev: double mk> = 0.0;

        r0.<org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev: double sk> = 0.0;

        specialinvoke r0.<org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev: void recomputeStdDev()>();

        return;
    }

    public void <init>(int, double, double, double)
    {
        org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev r0;
        int i0;
        double d0, d1, d2;

        r0 := @this: org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        specialinvoke r0.<org.apache.mahout.cf.taste.impl.common.FullRunningAverage: void <init>(int,double)>(i0, d0);

        r0.<org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev: double mk> = d1;

        r0.<org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev: double sk> = d2;

        specialinvoke r0.<org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev: void recomputeStdDev()>();

        return;
    }

    public double getMk()
    {
        org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev r0;
        double $d0;

        r0 := @this: org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev;

        $d0 = r0.<org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev: double mk>;

        return $d0;
    }

    public double getSk()
    {
        org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev r0;
        double $d0;

        r0 := @this: org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev;

        $d0 = r0.<org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev: double sk>;

        return $d0;
    }

    public synchronized double getStandardDeviation()
    {
        org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev r0;
        double $d0;

        r0 := @this: org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev;

        $d0 = r0.<org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev: double stdDev>;

        return $d0;
    }

    public synchronized void addDatum(double)
    {
        org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev r0;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11;
        int i0;

        r0 := @this: org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev;

        d0 := @parameter0: double;

        specialinvoke r0.<org.apache.mahout.cf.taste.impl.common.FullRunningAverage: void addDatum(double)>(d0);

        i0 = virtualinvoke r0.<org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev: int getCount()>();

        if i0 != 1 goto label1;

        r0.<org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev: double mk> = d0;

        r0.<org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev: double sk> = 0.0;

        goto label2;

     label1:
        d1 = r0.<org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev: double mk>;

        d2 = d0 - d1;

        $d5 = r0.<org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev: double mk>;

        $d3 = (double) i0;

        $d4 = d2 / $d3;

        $d6 = $d5 + $d4;

        r0.<org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev: double mk> = $d6;

        $d11 = r0.<org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev: double sk>;

        $d7 = r0.<org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev: double mk>;

        $d8 = d0 - $d7;

        $d9 = d2 * $d8;

        $d10 = $d11 + $d9;

        r0.<org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev: double sk> = $d10;

     label2:
        specialinvoke r0.<org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev: void recomputeStdDev()>();

        return;
    }

    public synchronized void removeDatum(double)
    {
        org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev r0;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12;
        int i0, $i1;

        r0 := @this: org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev;

        d0 := @parameter0: double;

        i0 = virtualinvoke r0.<org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev: int getCount()>();

        specialinvoke r0.<org.apache.mahout.cf.taste.impl.common.FullRunningAverage: void removeDatum(double)>(d0);

        d1 = r0.<org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev: double mk>;

        $d2 = (double) i0;

        $d3 = $d2 * d1;

        $d5 = $d3 - d0;

        $i1 = i0 - 1;

        $d4 = (double) $i1;

        $d6 = $d5 / $d4;

        r0.<org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev: double mk> = $d6;

        $d10 = r0.<org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev: double sk>;

        $d7 = r0.<org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev: double mk>;

        $d9 = d0 - $d7;

        $d8 = d0 - d1;

        $d11 = $d9 * $d8;

        $d12 = $d10 - $d11;

        r0.<org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev: double sk> = $d12;

        specialinvoke r0.<org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev: void recomputeStdDev()>();

        return;
    }

    public void changeDatum(double)
    {
        org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev r0;
        double d0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev;

        d0 := @parameter0: double;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    private synchronized void recomputeStdDev()
    {
        org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev r0;
        int i0, $i1;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev;

        i0 = virtualinvoke r0.<org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev: int getCount()>();

        if i0 <= 1 goto label1;

        $d1 = r0.<org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev: double sk>;

        $i1 = i0 - 1;

        $d0 = (double) $i1;

        $d2 = $d1 / $d0;

        $d3 = staticinvoke <java.lang.Math: double sqrt(double)>($d2);

        goto label2;

     label1:
        $d3 = #NaN;

     label2:
        r0.<org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev: double stdDev> = $d3;

        return;
    }

    public org.apache.mahout.cf.taste.impl.common.RunningAverageAndStdDev inverse()
    {
        org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev r0;
        org.apache.mahout.cf.taste.impl.common.InvertedRunningAverageAndStdDev $r1;

        r0 := @this: org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev;

        $r1 = new org.apache.mahout.cf.taste.impl.common.InvertedRunningAverageAndStdDev;

        specialinvoke $r1.<org.apache.mahout.cf.taste.impl.common.InvertedRunningAverageAndStdDev: void <init>(org.apache.mahout.cf.taste.impl.common.RunningAverageAndStdDev)>(r0);

        return $r1;
    }

    public synchronized java.lang.String toString()
    {
        org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev r0;
        java.lang.StringBuilder $r1, $r3, $r4, $r5;
        double $d0, $d1;
        java.lang.String $r2, $r6, $r7;

        r0 := @this: org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $d0 = virtualinvoke r0.<org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev: double getAverage()>();

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>($d0);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        $d1 = r0.<org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev: double stdDev>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r6);

        return $r7;
    }

    public volatile org.apache.mahout.cf.taste.impl.common.RunningAverage inverse()
    {
        org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev r0;
        org.apache.mahout.cf.taste.impl.common.RunningAverageAndStdDev $r1;

        r0 := @this: org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev;

        $r1 = virtualinvoke r0.<org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev: org.apache.mahout.cf.taste.impl.common.RunningAverageAndStdDev inverse()>();

        return $r1;
    }
}
