public final class org.apache.mahout.classifier.sequencelearning.hmm.HmmEvaluator extends java.lang.Object
{

    private void <init>()
    {
        org.apache.mahout.classifier.sequencelearning.hmm.HmmEvaluator r0;

        r0 := @this: org.apache.mahout.classifier.sequencelearning.hmm.HmmEvaluator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int[] predict(org.apache.mahout.classifier.sequencelearning.hmm.HmmModel, int)
    {
        org.apache.mahout.classifier.sequencelearning.hmm.HmmModel r0;
        int i0;
        org.apache.mahout.common.RandomWrapper $r1;
        int[] $r2;

        r0 := @parameter0: org.apache.mahout.classifier.sequencelearning.hmm.HmmModel;

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.apache.mahout.common.RandomUtils: org.apache.mahout.common.RandomWrapper getRandom()>();

        $r2 = staticinvoke <org.apache.mahout.classifier.sequencelearning.hmm.HmmEvaluator: int[] predict(org.apache.mahout.classifier.sequencelearning.hmm.HmmModel,int,java.util.Random)>(r0, i0, $r1);

        return $r2;
    }

    public static int[] predict(org.apache.mahout.classifier.sequencelearning.hmm.HmmModel, int, long)
    {
        org.apache.mahout.classifier.sequencelearning.hmm.HmmModel r0;
        int i0;
        long l1;
        java.util.Random $r1;
        int[] $r2;

        r0 := @parameter0: org.apache.mahout.classifier.sequencelearning.hmm.HmmModel;

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        $r1 = staticinvoke <org.apache.mahout.common.RandomUtils: java.util.Random getRandom(long)>(l1);

        $r2 = staticinvoke <org.apache.mahout.classifier.sequencelearning.hmm.HmmEvaluator: int[] predict(org.apache.mahout.classifier.sequencelearning.hmm.HmmModel,int,java.util.Random)>(r0, i0, $r1);

        return $r2;
    }

    private static int[] predict(org.apache.mahout.classifier.sequencelearning.hmm.HmmModel, int, java.util.Random)
    {
        org.apache.mahout.classifier.sequencelearning.hmm.HmmModel r0;
        int i0, i4, i5, i6, i7;
        java.util.Random r1;
        org.apache.mahout.math.Vector r2;
        org.apache.mahout.math.Matrix r3, r4;
        int[] r5;
        double $d0, $d1, $d2, d3, d4, d5;
        byte $b1, $b2, $b3;

        r0 := @parameter0: org.apache.mahout.classifier.sequencelearning.hmm.HmmModel;

        i0 := @parameter1: int;

        r1 := @parameter2: java.util.Random;

        r2 = staticinvoke <org.apache.mahout.classifier.sequencelearning.hmm.HmmUtils: org.apache.mahout.math.Vector getCumulativeInitialProbabilities(org.apache.mahout.classifier.sequencelearning.hmm.HmmModel)>(r0);

        r3 = staticinvoke <org.apache.mahout.classifier.sequencelearning.hmm.HmmUtils: org.apache.mahout.math.Matrix getCumulativeTransitionMatrix(org.apache.mahout.classifier.sequencelearning.hmm.HmmModel)>(r0);

        r4 = staticinvoke <org.apache.mahout.classifier.sequencelearning.hmm.HmmUtils: org.apache.mahout.math.Matrix getCumulativeOutputMatrix(org.apache.mahout.classifier.sequencelearning.hmm.HmmModel)>(r0);

        r5 = newarray (int)[i0];

        i4 = 0;

        d3 = virtualinvoke r1.<java.util.Random: double nextDouble()>();

     label1:
        $d0 = interfaceinvoke r2.<org.apache.mahout.math.Vector: double get(int)>(i4);

        $b1 = $d0 cmpg d3;

        if $b1 >= 0 goto label2;

        i4 = i4 + 1;

        goto label1;

     label2:
        i5 = 0;

     label3:
        if i5 >= i0 goto label8;

        d4 = virtualinvoke r1.<java.util.Random: double nextDouble()>();

        i6 = 0;

     label4:
        $d1 = interfaceinvoke r4.<org.apache.mahout.math.Matrix: double get(int,int)>(i4, i6);

        $b2 = $d1 cmpg d4;

        if $b2 >= 0 goto label5;

        i6 = i6 + 1;

        goto label4;

     label5:
        r5[i5] = i6;

        d5 = virtualinvoke r1.<java.util.Random: double nextDouble()>();

        i7 = 0;

     label6:
        $d2 = interfaceinvoke r3.<org.apache.mahout.math.Matrix: double get(int,int)>(i4, i7);

        $b3 = $d2 cmpg d5;

        if $b3 >= 0 goto label7;

        i7 = i7 + 1;

        goto label6;

     label7:
        i4 = i7;

        i5 = i5 + 1;

        goto label3;

     label8:
        return r5;
    }

    public static double modelLikelihood(org.apache.mahout.classifier.sequencelearning.hmm.HmmModel, int[], boolean)
    {
        org.apache.mahout.classifier.sequencelearning.hmm.HmmModel r0;
        int[] r1;
        boolean z0;
        org.apache.mahout.math.Matrix $r2;
        double $d0;

        r0 := @parameter0: org.apache.mahout.classifier.sequencelearning.hmm.HmmModel;

        r1 := @parameter1: int[];

        z0 := @parameter2: boolean;

        $r2 = staticinvoke <org.apache.mahout.classifier.sequencelearning.hmm.HmmAlgorithms: org.apache.mahout.math.Matrix forwardAlgorithm(org.apache.mahout.classifier.sequencelearning.hmm.HmmModel,int[],boolean)>(r0, r1, z0);

        $d0 = staticinvoke <org.apache.mahout.classifier.sequencelearning.hmm.HmmEvaluator: double modelLikelihood(org.apache.mahout.math.Matrix,boolean)>($r2, z0);

        return $d0;
    }

    public static double modelLikelihood(org.apache.mahout.math.Matrix, boolean)
    {
        org.apache.mahout.math.Matrix r0;
        boolean z0;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7;
        double $d0, $d1, $d2, d3;

        r0 := @parameter0: org.apache.mahout.math.Matrix;

        z0 := @parameter1: boolean;

        d3 = 0.0;

        if z0 == 0 goto label2;

        i6 = 0;

     label1:
        $i3 = interfaceinvoke r0.<org.apache.mahout.math.Matrix: int numCols()>();

        if i6 >= $i3 goto label4;

        $i4 = interfaceinvoke r0.<org.apache.mahout.math.Matrix: int numRows()>();

        $i5 = $i4 - 1;

        $d1 = interfaceinvoke r0.<org.apache.mahout.math.Matrix: double getQuick(int,int)>($i5, i6);

        $d2 = staticinvoke <java.lang.Math: double exp(double)>($d1);

        d3 = d3 + $d2;

        i6 = i6 + 1;

        goto label1;

     label2:
        i7 = 0;

     label3:
        $i0 = interfaceinvoke r0.<org.apache.mahout.math.Matrix: int numCols()>();

        if i7 >= $i0 goto label4;

        $i1 = interfaceinvoke r0.<org.apache.mahout.math.Matrix: int numRows()>();

        $i2 = $i1 - 1;

        $d0 = interfaceinvoke r0.<org.apache.mahout.math.Matrix: double getQuick(int,int)>($i2, i7);

        d3 = d3 + $d0;

        i7 = i7 + 1;

        goto label3;

     label4:
        return d3;
    }

    public static double modelLikelihood(org.apache.mahout.classifier.sequencelearning.hmm.HmmModel, int[], org.apache.mahout.math.Matrix, boolean)
    {
        org.apache.mahout.classifier.sequencelearning.hmm.HmmModel r0;
        int[] r1;
        org.apache.mahout.math.Matrix r2, r3;
        boolean z0;
        org.apache.mahout.math.Vector r4;
        int i0, $i1, $i2, i3, i4;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, d11;

        r0 := @parameter0: org.apache.mahout.classifier.sequencelearning.hmm.HmmModel;

        r1 := @parameter1: int[];

        r2 := @parameter2: org.apache.mahout.math.Matrix;

        z0 := @parameter3: boolean;

        d11 = 0.0;

        r3 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: org.apache.mahout.math.Matrix getEmissionMatrix()>();

        r4 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: org.apache.mahout.math.Vector getInitialProbabilities()>();

        i0 = r1[0];

        if z0 == 0 goto label2;

        i3 = 0;

     label1:
        $i2 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        if i3 >= $i2 goto label4;

        $d6 = interfaceinvoke r4.<org.apache.mahout.math.Vector: double getQuick(int)>(i3);

        $d5 = interfaceinvoke r2.<org.apache.mahout.math.Matrix: double getQuick(int,int)>(0, i3);

        $d8 = staticinvoke <java.lang.Math: double exp(double)>($d5);

        $d7 = $d6 * $d8;

        $d10 = interfaceinvoke r3.<org.apache.mahout.math.Matrix: double getQuick(int,int)>(i3, i0);

        $d9 = $d7 * $d10;

        d11 = d11 + $d9;

        i3 = i3 + 1;

        goto label1;

     label2:
        i4 = 0;

     label3:
        $i1 = virtualinvoke r0.<org.apache.mahout.classifier.sequencelearning.hmm.HmmModel: int getNrOfHiddenStates()>();

        if i4 >= $i1 goto label4;

        $d0 = interfaceinvoke r4.<org.apache.mahout.math.Vector: double getQuick(int)>(i4);

        $d1 = interfaceinvoke r2.<org.apache.mahout.math.Matrix: double getQuick(int,int)>(0, i4);

        $d2 = $d0 * $d1;

        $d4 = interfaceinvoke r3.<org.apache.mahout.math.Matrix: double getQuick(int,int)>(i4, i0);

        $d3 = $d2 * $d4;

        d11 = d11 + $d3;

        i4 = i4 + 1;

        goto label3;

     label4:
        return d11;
    }

    public static int[] decode(org.apache.mahout.classifier.sequencelearning.hmm.HmmModel, int[], boolean)
    {
        org.apache.mahout.classifier.sequencelearning.hmm.HmmModel r0;
        int[] r1, $r2;
        boolean z0;

        r0 := @parameter0: org.apache.mahout.classifier.sequencelearning.hmm.HmmModel;

        r1 := @parameter1: int[];

        z0 := @parameter2: boolean;

        $r2 = staticinvoke <org.apache.mahout.classifier.sequencelearning.hmm.HmmAlgorithms: int[] viterbiAlgorithm(org.apache.mahout.classifier.sequencelearning.hmm.HmmModel,int[],boolean)>(r0, r1, z0);

        return $r2;
    }
}
