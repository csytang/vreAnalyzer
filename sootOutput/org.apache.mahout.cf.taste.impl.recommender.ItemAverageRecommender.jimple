public final class org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender extends org.apache.mahout.cf.taste.impl.recommender.AbstractRecommender
{
    private static final org.slf4j.Logger log;
    private final org.apache.mahout.cf.taste.impl.common.FastByIDMap itemAverages;
    private final java.util.concurrent.locks.ReadWriteLock buildAveragesLock;
    private final org.apache.mahout.cf.taste.impl.common.RefreshHelper refreshHelper;

    public void <init>(org.apache.mahout.cf.taste.model.DataModel) throws org.apache.mahout.cf.taste.common.TasteException
    {
        org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender r0;
        org.apache.mahout.cf.taste.model.DataModel r1;
        org.apache.mahout.cf.taste.impl.common.FastByIDMap $r2;
        java.util.concurrent.locks.ReentrantReadWriteLock $r3;
        org.apache.mahout.cf.taste.impl.common.RefreshHelper $r4, $r6;
        org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender$1 $r5;

        r0 := @this: org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender;

        r1 := @parameter0: org.apache.mahout.cf.taste.model.DataModel;

        specialinvoke r0.<org.apache.mahout.cf.taste.impl.recommender.AbstractRecommender: void <init>(org.apache.mahout.cf.taste.model.DataModel)>(r1);

        $r2 = new org.apache.mahout.cf.taste.impl.common.FastByIDMap;

        specialinvoke $r2.<org.apache.mahout.cf.taste.impl.common.FastByIDMap: void <init>()>();

        r0.<org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender: org.apache.mahout.cf.taste.impl.common.FastByIDMap itemAverages> = $r2;

        $r3 = new java.util.concurrent.locks.ReentrantReadWriteLock;

        specialinvoke $r3.<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>()>();

        r0.<org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender: java.util.concurrent.locks.ReadWriteLock buildAveragesLock> = $r3;

        $r4 = new org.apache.mahout.cf.taste.impl.common.RefreshHelper;

        $r5 = new org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender$1;

        specialinvoke $r5.<org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender$1: void <init>(org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender)>(r0);

        specialinvoke $r4.<org.apache.mahout.cf.taste.impl.common.RefreshHelper: void <init>(java.util.concurrent.Callable)>($r5);

        r0.<org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender: org.apache.mahout.cf.taste.impl.common.RefreshHelper refreshHelper> = $r4;

        $r6 = r0.<org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender: org.apache.mahout.cf.taste.impl.common.RefreshHelper refreshHelper>;

        virtualinvoke $r6.<org.apache.mahout.cf.taste.impl.common.RefreshHelper: void addDependency(org.apache.mahout.cf.taste.common.Refreshable)>(r1);

        specialinvoke r0.<org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender: void buildAverageDiffs()>();

        return;
    }

    public java.util.List recommend(long, int, org.apache.mahout.cf.taste.recommender.IDRescorer, boolean) throws org.apache.mahout.cf.taste.common.TasteException
    {
        org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender r0;
        long l0;
        int i1;
        org.apache.mahout.cf.taste.recommender.IDRescorer r1;
        boolean z0, $z1;
        org.apache.mahout.cf.taste.model.PreferenceArray r2;
        org.apache.mahout.cf.taste.impl.common.FastIDSet r3;
        java.util.List r5;
        org.slf4j.Logger $r6, $r11;
        java.lang.Long $r7;
        org.apache.mahout.cf.taste.model.DataModel $r8;
        org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator $r9;
        org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender$Estimator $r10;

        r0 := @this: org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        r1 := @parameter2: org.apache.mahout.cf.taste.recommender.IDRescorer;

        z0 := @parameter3: boolean;

        if i1 < 1 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "howMany must be at least 1");

        $r6 = <org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender: org.slf4j.Logger log>;

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        interfaceinvoke $r6.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Recommending items for user ID \'{}\'", $r7);

        $r8 = virtualinvoke r0.<org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender: org.apache.mahout.cf.taste.model.DataModel getDataModel()>();

        r2 = interfaceinvoke $r8.<org.apache.mahout.cf.taste.model.DataModel: org.apache.mahout.cf.taste.model.PreferenceArray getPreferencesFromUser(long)>(l0);

        r3 = virtualinvoke r0.<org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender: org.apache.mahout.cf.taste.impl.common.FastIDSet getAllOtherItems(long,org.apache.mahout.cf.taste.model.PreferenceArray,boolean)>(l0, r2, z0);

        $r10 = new org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender$Estimator;

        specialinvoke $r10.<org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender$Estimator: void <init>(org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender,org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender$1)>(r0, null);

        $r9 = virtualinvoke r3.<org.apache.mahout.cf.taste.impl.common.FastIDSet: org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator iterator()>();

        r5 = staticinvoke <org.apache.mahout.cf.taste.impl.recommender.TopItems: java.util.List getTopItems(int,org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator,org.apache.mahout.cf.taste.recommender.IDRescorer,org.apache.mahout.cf.taste.impl.recommender.TopItems$Estimator)>(i1, $r9, r1, $r10);

        $r11 = <org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender: org.slf4j.Logger log>;

        interfaceinvoke $r11.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Recommendations are: {}", r5);

        return r5;
    }

    public float estimatePreference(long, long) throws org.apache.mahout.cf.taste.common.TasteException
    {
        org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender r0;
        long l0, l1;
        org.apache.mahout.cf.taste.model.DataModel r1;
        java.lang.Float r2;
        float $f0, $f1;

        r0 := @this: org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        r1 = virtualinvoke r0.<org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender: org.apache.mahout.cf.taste.model.DataModel getDataModel()>();

        r2 = interfaceinvoke r1.<org.apache.mahout.cf.taste.model.DataModel: java.lang.Float getPreferenceValue(long,long)>(l0, l1);

        if r2 == null goto label1;

        $f1 = virtualinvoke r2.<java.lang.Float: float floatValue()>();

        return $f1;

     label1:
        $f0 = specialinvoke r0.<org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender: float doEstimatePreference(long)>(l1);

        return $f0;
    }

    private float doEstimatePreference(long)
    {
        org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender r0;
        long l0;
        org.apache.mahout.cf.taste.impl.common.RunningAverage r1;
        java.util.concurrent.locks.ReadWriteLock $r3, $r7, $r9;
        java.util.concurrent.locks.Lock $r4, $r8, $r11;
        org.apache.mahout.cf.taste.impl.common.FastByIDMap $r5;
        java.lang.Object $r6;
        double $d0;
        java.lang.Throwable $r10;
        float $f1;

        r0 := @this: org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender;

        l0 := @parameter0: long;

        $r3 = r0.<org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender: java.util.concurrent.locks.ReadWriteLock buildAveragesLock>;

        $r4 = interfaceinvoke $r3.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock readLock()>();

        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $r5 = r0.<org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender: org.apache.mahout.cf.taste.impl.common.FastByIDMap itemAverages>;

        $r6 = virtualinvoke $r5.<org.apache.mahout.cf.taste.impl.common.FastByIDMap: java.lang.Object get(long)>(l0);

        r1 = (org.apache.mahout.cf.taste.impl.common.RunningAverage) $r6;

        if r1 != null goto label2;

        $f1 = #NaNF;

        goto label3;

     label2:
        $d0 = interfaceinvoke r1.<org.apache.mahout.cf.taste.impl.common.RunningAverage: double getAverage()>();

        $f1 = (float) $d0;

     label3:
        $r7 = r0.<org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender: java.util.concurrent.locks.ReadWriteLock buildAveragesLock>;

        $r8 = interfaceinvoke $r7.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock readLock()>();

        interfaceinvoke $r8.<java.util.concurrent.locks.Lock: void unlock()>();

        return $f1;

     label4:
        $r10 := @caughtexception;

     label5:
        $r9 = r0.<org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender: java.util.concurrent.locks.ReadWriteLock buildAveragesLock>;

        $r11 = interfaceinvoke $r9.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock readLock()>();

        interfaceinvoke $r11.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r10;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private void buildAverageDiffs() throws org.apache.mahout.cf.taste.common.TasteException
    {
        org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender r0;
        org.apache.mahout.cf.taste.model.DataModel r1;
        org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator r2;
        org.apache.mahout.cf.taste.model.PreferenceArray r3;
        int i0, i3;
        long l1, $l2;
        java.util.concurrent.locks.ReadWriteLock $r5, $r7, $r15;
        java.util.concurrent.locks.Lock $r6, $r8, $r16;
        boolean $z0;
        java.lang.Object $r9;
        org.apache.mahout.cf.taste.impl.common.FastByIDMap $r10, $r11;
        double $d0;
        float $f0;
        org.apache.mahout.cf.taste.impl.common.FullRunningAverage $r12;
        java.lang.Throwable $r14;
        org.apache.mahout.cf.taste.impl.common.RunningAverage r17;

        r0 := @this: org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender;

     label1:
        $r5 = r0.<org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender: java.util.concurrent.locks.ReadWriteLock buildAveragesLock>;

        $r6 = interfaceinvoke $r5.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        interfaceinvoke $r6.<java.util.concurrent.locks.Lock: void lock()>();

        r1 = virtualinvoke r0.<org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender: org.apache.mahout.cf.taste.model.DataModel getDataModel()>();

        r2 = interfaceinvoke r1.<org.apache.mahout.cf.taste.model.DataModel: org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator getUserIDs()>();

     label2:
        $z0 = interfaceinvoke r2.<org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $l2 = interfaceinvoke r2.<org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator: long nextLong()>();

        r3 = interfaceinvoke r1.<org.apache.mahout.cf.taste.model.DataModel: org.apache.mahout.cf.taste.model.PreferenceArray getPreferencesFromUser(long)>($l2);

        i0 = interfaceinvoke r3.<org.apache.mahout.cf.taste.model.PreferenceArray: int length()>();

        i3 = 0;

     label3:
        if i3 >= i0 goto label2;

        l1 = interfaceinvoke r3.<org.apache.mahout.cf.taste.model.PreferenceArray: long getItemID(int)>(i3);

        $r10 = r0.<org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender: org.apache.mahout.cf.taste.impl.common.FastByIDMap itemAverages>;

        $r9 = virtualinvoke $r10.<org.apache.mahout.cf.taste.impl.common.FastByIDMap: java.lang.Object get(long)>(l1);

        r17 = (org.apache.mahout.cf.taste.impl.common.RunningAverage) $r9;

        if r17 != null goto label4;

        $r12 = new org.apache.mahout.cf.taste.impl.common.FullRunningAverage;

        specialinvoke $r12.<org.apache.mahout.cf.taste.impl.common.FullRunningAverage: void <init>()>();

        r17 = $r12;

        $r11 = r0.<org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender: org.apache.mahout.cf.taste.impl.common.FastByIDMap itemAverages>;

        virtualinvoke $r11.<org.apache.mahout.cf.taste.impl.common.FastByIDMap: java.lang.Object put(long,java.lang.Object)>(l1, $r12);

     label4:
        $f0 = interfaceinvoke r3.<org.apache.mahout.cf.taste.model.PreferenceArray: float getValue(int)>(i3);

        $d0 = (double) $f0;

        interfaceinvoke r17.<org.apache.mahout.cf.taste.impl.common.RunningAverage: void addDatum(double)>($d0);

        i3 = i3 + 1;

        goto label3;

     label5:
        $r7 = r0.<org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender: java.util.concurrent.locks.ReadWriteLock buildAveragesLock>;

        $r8 = interfaceinvoke $r7.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        interfaceinvoke $r8.<java.util.concurrent.locks.Lock: void unlock()>();

        goto label8;

     label6:
        $r14 := @caughtexception;

     label7:
        $r15 = r0.<org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender: java.util.concurrent.locks.ReadWriteLock buildAveragesLock>;

        $r16 = interfaceinvoke $r15.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        interfaceinvoke $r16.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r14;

     label8:
        return;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void setPreference(long, long, float) throws org.apache.mahout.cf.taste.common.TasteException
    {
        org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender r0;
        long l0, l1;
        float f0, $f1, $f2;
        org.apache.mahout.cf.taste.model.DataModel r1;
        java.util.concurrent.locks.Lock $r4, $r8, $r15;
        java.util.concurrent.locks.ReadWriteLock $r5, $r9, $r14;
        java.lang.Object $r6;
        org.apache.mahout.cf.taste.impl.common.FastByIDMap $r7, $r10;
        org.apache.mahout.cf.taste.impl.common.FullRunningAverage $r11;
        org.apache.mahout.cf.taste.common.NoSuchUserException $r13;
        java.lang.Throwable $r16;
        java.lang.Float r17;
        double $d0, d1;
        org.apache.mahout.cf.taste.impl.common.RunningAverage r19;

        r0 := @this: org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        f0 := @parameter2: float;

        r1 = virtualinvoke r0.<org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender: org.apache.mahout.cf.taste.model.DataModel getDataModel()>();

     label01:
        r17 = interfaceinvoke r1.<org.apache.mahout.cf.taste.model.DataModel: java.lang.Float getPreferenceValue(long,long)>(l0, l1);

        if r17 != null goto label02;

        $d0 = (double) f0;

        goto label03;

     label02:
        $f1 = virtualinvoke r17.<java.lang.Float: float floatValue()>();

        $f2 = f0 - $f1;

        $d0 = (double) $f2;

     label03:
        d1 = $d0;

     label04:
        goto label06;

     label05:
        $r13 := @caughtexception;

        d1 = (double) f0;

     label06:
        specialinvoke r0.<org.apache.mahout.cf.taste.impl.recommender.AbstractRecommender: void setPreference(long,long,float)>(l0, l1, f0);

     label07:
        $r5 = r0.<org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender: java.util.concurrent.locks.ReadWriteLock buildAveragesLock>;

        $r4 = interfaceinvoke $r5.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void lock()>();

        $r7 = r0.<org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender: org.apache.mahout.cf.taste.impl.common.FastByIDMap itemAverages>;

        $r6 = virtualinvoke $r7.<org.apache.mahout.cf.taste.impl.common.FastByIDMap: java.lang.Object get(long)>(l1);

        r19 = (org.apache.mahout.cf.taste.impl.common.RunningAverage) $r6;

        if r19 != null goto label08;

        $r11 = new org.apache.mahout.cf.taste.impl.common.FullRunningAverage;

        specialinvoke $r11.<org.apache.mahout.cf.taste.impl.common.FullRunningAverage: void <init>()>();

        interfaceinvoke $r11.<org.apache.mahout.cf.taste.impl.common.RunningAverage: void addDatum(double)>(d1);

        $r10 = r0.<org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender: org.apache.mahout.cf.taste.impl.common.FastByIDMap itemAverages>;

        virtualinvoke $r10.<org.apache.mahout.cf.taste.impl.common.FastByIDMap: java.lang.Object put(long,java.lang.Object)>(l1, $r11);

        goto label09;

     label08:
        interfaceinvoke r19.<org.apache.mahout.cf.taste.impl.common.RunningAverage: void changeDatum(double)>(d1);

     label09:
        $r9 = r0.<org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender: java.util.concurrent.locks.ReadWriteLock buildAveragesLock>;

        $r8 = interfaceinvoke $r9.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        interfaceinvoke $r8.<java.util.concurrent.locks.Lock: void unlock()>();

        goto label12;

     label10:
        $r16 := @caughtexception;

     label11:
        $r14 = r0.<org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender: java.util.concurrent.locks.ReadWriteLock buildAveragesLock>;

        $r15 = interfaceinvoke $r14.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        interfaceinvoke $r15.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r16;

     label12:
        return;

        catch org.apache.mahout.cf.taste.common.NoSuchUserException from label01 to label04 with label05;
        catch java.lang.Throwable from label07 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public void removePreference(long, long) throws org.apache.mahout.cf.taste.common.TasteException
    {
        org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender r0;
        long l0, l1;
        org.apache.mahout.cf.taste.model.DataModel r1;
        java.lang.Float r2;
        org.apache.mahout.cf.taste.impl.common.RunningAverage r3;
        java.util.concurrent.locks.ReadWriteLock $r5, $r9, $r16;
        java.util.concurrent.locks.Lock $r6, $r11, $r18;
        org.apache.mahout.cf.taste.impl.common.FastByIDMap $r7;
        java.lang.Object $r8;
        float $f0;
        double $d0;
        java.lang.IllegalStateException $r10;
        java.lang.StringBuilder $r12, $r13, $r15;
        java.lang.String $r14;
        java.lang.Throwable $r17;

        r0 := @this: org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        r1 = virtualinvoke r0.<org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender: org.apache.mahout.cf.taste.model.DataModel getDataModel()>();

        r2 = interfaceinvoke r1.<org.apache.mahout.cf.taste.model.DataModel: java.lang.Float getPreferenceValue(long,long)>(l0, l1);

        specialinvoke r0.<org.apache.mahout.cf.taste.impl.recommender.AbstractRecommender: void removePreference(long,long)>(l0, l1);

        if r2 == null goto label6;

     label1:
        $r5 = r0.<org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender: java.util.concurrent.locks.ReadWriteLock buildAveragesLock>;

        $r6 = interfaceinvoke $r5.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        interfaceinvoke $r6.<java.util.concurrent.locks.Lock: void lock()>();

        $r7 = r0.<org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender: org.apache.mahout.cf.taste.impl.common.FastByIDMap itemAverages>;

        $r8 = virtualinvoke $r7.<org.apache.mahout.cf.taste.impl.common.FastByIDMap: java.lang.Object get(long)>(l1);

        r3 = (org.apache.mahout.cf.taste.impl.common.RunningAverage) $r8;

        if r3 != null goto label2;

        $r10 = new java.lang.IllegalStateException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No preferences exist for item ID: ");

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r14);

        throw $r10;

     label2:
        $f0 = virtualinvoke r2.<java.lang.Float: float floatValue()>();

        $d0 = (double) $f0;

        interfaceinvoke r3.<org.apache.mahout.cf.taste.impl.common.RunningAverage: void removeDatum(double)>($d0);

     label3:
        $r9 = r0.<org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender: java.util.concurrent.locks.ReadWriteLock buildAveragesLock>;

        $r11 = interfaceinvoke $r9.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        interfaceinvoke $r11.<java.util.concurrent.locks.Lock: void unlock()>();

        goto label6;

     label4:
        $r17 := @caughtexception;

     label5:
        $r16 = r0.<org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender: java.util.concurrent.locks.ReadWriteLock buildAveragesLock>;

        $r18 = interfaceinvoke $r16.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        interfaceinvoke $r18.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r17;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void refresh(java.util.Collection)
    {
        org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender r0;
        java.util.Collection r1;
        org.apache.mahout.cf.taste.impl.common.RefreshHelper $r2;

        r0 := @this: org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender;

        r1 := @parameter0: java.util.Collection;

        $r2 = r0.<org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender: org.apache.mahout.cf.taste.impl.common.RefreshHelper refreshHelper>;

        virtualinvoke $r2.<org.apache.mahout.cf.taste.impl.common.RefreshHelper: void refresh(java.util.Collection)>(r1);

        return;
    }

    public java.lang.String toString()
    {
        org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender r0;

        r0 := @this: org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender;

        return "ItemAverageRecommender";
    }

    static void access$000(org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender) throws org.apache.mahout.cf.taste.common.TasteException
    {
        org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender r0;

        r0 := @parameter0: org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender;

        specialinvoke r0.<org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender: void buildAverageDiffs()>();

        return;
    }

    static float access$200(org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender, long)
    {
        org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender r0;
        long l0;
        float $f0;

        r0 := @parameter0: org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender;

        l0 := @parameter1: long;

        $f0 = specialinvoke r0.<org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender: float doEstimatePreference(long)>(l0);

        return $f0;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "org/apache/mahout/cf/taste/impl/recommender/ItemAverageRecommender");

        <org.apache.mahout.cf.taste.impl.recommender.ItemAverageRecommender: org.slf4j.Logger log> = $r0;

        return;
    }
}
