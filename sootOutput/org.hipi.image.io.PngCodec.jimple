public class org.hipi.image.io.PngCodec extends org.hipi.image.io.ImageCodec
{
    private static final org.hipi.image.io.PngCodec staticObject;
    private static final byte BW_MODE;
    private static final byte GREYSCALE_MODE;
    private static final byte COLOR_MODE;
    private java.util.zip.CRC32 crc;

    public void <init>()
    {
        org.hipi.image.io.PngCodec r0;

        r0 := @this: org.hipi.image.io.PngCodec;

        specialinvoke r0.<org.hipi.image.io.ImageCodec: void <init>()>();

        return;
    }

    public static org.hipi.image.io.PngCodec getInstance()
    {
        org.hipi.image.io.PngCodec $r0;

        $r0 = <org.hipi.image.io.PngCodec: org.hipi.image.io.PngCodec staticObject>;

        return $r0;
    }

    public org.hipi.image.HipiImageHeader decodeHeader(java.io.InputStream, boolean) throws java.io.IOException
    {
        org.hipi.image.io.PngCodec r0, $r16;
        java.io.InputStream r1;
        boolean z0, $z1, $z2, z3;
        byte[] r3, r5;
        long l0, $l3, $l5, $l6;
        java.io.DataInputStream $r7;
        java.io.BufferedInputStream $r8;
        org.hipi.image.HipiImageHeader $r9;
        java.io.IOException $r10, $r17, $r18;
        org.hipi.image.HipiImageHeader$HipiImageFormat $r11;
        org.hipi.image.HipiImageHeader$HipiColorSpace $r12;
        java.lang.String $r13;
        int $i2, $i4, i7, i8, i9;
        org.hipi.image.io.PngCodec$PNGChunk $r15;
        java.io.EOFException $r19;
        java.util.HashMap r21;

        r0 := @this: org.hipi.image.io.PngCodec;

        r1 := @parameter0: java.io.InputStream;

        z0 := @parameter1: boolean;

        $r7 = new java.io.DataInputStream;

        $r8 = new java.io.BufferedInputStream;

        specialinvoke $r8.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>(r1);

        specialinvoke $r7.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r8);

        virtualinvoke $r7.<java.io.DataInputStream: void mark(int)>(2147483647);

        staticinvoke <org.hipi.image.io.PngCodec: void readSignature(java.io.DataInputStream)>($r7);

        i7 = -1;

        i8 = -1;

        z3 = 1;

     label01:
        if z3 == 0 goto label09;

     label02:
        i9 = virtualinvoke $r7.<java.io.DataInputStream: int readInt()>();

        if i9 > 0 goto label03;

        $r18 = new java.io.IOException;

        specialinvoke $r18.<java.io.IOException: void <init>(java.lang.String)>("PNG file is too long to proceed. (Found length <= 0).");

        throw $r18;

     label03:
        r3 = newarray (byte)[4];

        virtualinvoke $r7.<java.io.DataInputStream: void readFully(byte[])>(r3);

        $r13 = new java.lang.String;

        specialinvoke $r13.<java.lang.String: void <init>(byte[],java.lang.String)>(r3, "UTF8");

        $z1 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>("IHDR");

        if $z1 == 0 goto label06;

        r5 = newarray (byte)[i9];

        virtualinvoke $r7.<java.io.DataInputStream: void readFully(byte[])>(r5);

        $i4 = virtualinvoke $r7.<java.io.DataInputStream: int readInt()>();

        $l3 = (long) $i4;

        l0 = $l3 & 4294967295L;

        $z2 = staticinvoke <org.hipi.image.io.PngCodec: boolean verifyCRC(byte[],byte[],long)>(r3, r5, l0);

        if $z2 != 0 goto label04;

        $r17 = new java.io.IOException;

        specialinvoke $r17.<java.io.IOException: void <init>(java.lang.String)>("PNG file appears to be corrupted (unverifiable CRC).");

        throw $r17;

     label04:
        $r15 = new org.hipi.image.io.PngCodec$PNGChunk;

        $r16 = <org.hipi.image.io.PngCodec: org.hipi.image.io.PngCodec staticObject>;

        virtualinvoke $r16.<java.lang.Object: java.lang.Class getClass()>();

        specialinvoke $r15.<org.hipi.image.io.PngCodec$PNGChunk: void <init>(org.hipi.image.io.PngCodec,byte[],byte[])>($r16, r3, r5);

        $l5 = virtualinvoke $r15.<org.hipi.image.io.PngCodec$PNGChunk: long getUnsignedInt(int)>(0);

        i7 = (int) $l5;

        $l6 = virtualinvoke $r15.<org.hipi.image.io.PngCodec$PNGChunk: long getUnsignedInt(int)>(4);

        i8 = (int) $l6;

     label05:
        goto label09;

     label06:
        $i2 = i9 + 4;

        virtualinvoke $r7.<java.io.DataInputStream: int skipBytes(int)>($i2);

     label07:
        goto label01;

     label08:
        $r19 := @caughtexception;

        z3 = 0;

        goto label01;

     label09:
        if i7 <= 0 goto label10;

        if i8 > 0 goto label11;

     label10:
        $r10 = new java.io.IOException;

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>("Failed to decode PNG image header. (Found invalid dimensions width <= 0 or height <= 0.)");

        throw $r10;

     label11:
        r21 = null;

        if z0 == 0 goto label12;

        virtualinvoke $r7.<java.io.DataInputStream: void reset()>();

        r21 = staticinvoke <org.hipi.image.io.ExifDataReader: java.util.HashMap extractAndFlatten(java.io.InputStream)>($r7);

     label12:
        $r9 = new org.hipi.image.HipiImageHeader;

        $r11 = <org.hipi.image.HipiImageHeader$HipiImageFormat: org.hipi.image.HipiImageHeader$HipiImageFormat PNG>;

        $r12 = <org.hipi.image.HipiImageHeader$HipiColorSpace: org.hipi.image.HipiImageHeader$HipiColorSpace RGB>;

        specialinvoke $r9.<org.hipi.image.HipiImageHeader: void <init>(org.hipi.image.HipiImageHeader$HipiImageFormat,org.hipi.image.HipiImageHeader$HipiColorSpace,int,int,int,byte[],java.util.Map)>($r11, $r12, i7, i8, 3, null, r21);

        return $r9;

        catch java.io.EOFException from label02 to label05 with label08;
        catch java.io.EOFException from label06 to label07 with label08;
    }

    protected static void readSignature(java.io.DataInputStream) throws java.io.IOException
    {
        java.io.DataInputStream r0;
        long l0;
        byte $b1;
        java.io.IOException $r1;

        r0 := @parameter0: java.io.DataInputStream;

        l0 = virtualinvoke r0.<java.io.DataInputStream: long readLong()>();

        $b1 = l0 cmp -8552249625308161526L;

        if $b1 == 0 goto label1;

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("PNG signature not found!");

        throw $r1;

     label1:
        return;
    }

    protected static org.hipi.image.io.PngCodec$PNGData readChunks(java.io.DataInputStream) throws java.io.IOException
    {
        java.io.DataInputStream r0;
        byte[] r2, r3;
        long l0, $l2;
        org.hipi.image.io.PngCodec$PNGData $r5;
        org.hipi.image.io.PngCodec $r6, $r8;
        int $i1, i3;
        boolean $z0, z1;
        org.hipi.image.io.PngCodec$PNGChunk $r9;
        java.io.IOException $r11, $r12;
        java.io.EOFException $r13;

        r0 := @parameter0: java.io.DataInputStream;

        $r5 = new org.hipi.image.io.PngCodec$PNGData;

        $r6 = <org.hipi.image.io.PngCodec: org.hipi.image.io.PngCodec staticObject>;

        virtualinvoke $r6.<java.lang.Object: java.lang.Class getClass()>();

        specialinvoke $r5.<org.hipi.image.io.PngCodec$PNGData: void <init>(org.hipi.image.io.PngCodec)>($r6);

        z1 = 1;

     label1:
        if z1 == 0 goto label7;

     label2:
        i3 = virtualinvoke r0.<java.io.DataInputStream: int readInt()>();

        if i3 > 0 goto label3;

        $r11 = new java.io.IOException;

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>("Found invalid length in PNG segment (length <= 0).");

        throw $r11;

     label3:
        r2 = newarray (byte)[4];

        virtualinvoke r0.<java.io.DataInputStream: void readFully(byte[])>(r2);

        r3 = newarray (byte)[i3];

        virtualinvoke r0.<java.io.DataInputStream: void readFully(byte[])>(r3);

        $i1 = virtualinvoke r0.<java.io.DataInputStream: int readInt()>();

        $l2 = (long) $i1;

        l0 = $l2 & 4294967295L;

        $z0 = staticinvoke <org.hipi.image.io.PngCodec: boolean verifyCRC(byte[],byte[],long)>(r2, r3, l0);

        if $z0 != 0 goto label4;

        $r12 = new java.io.IOException;

        specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>("That file appears to be corrupted.");

        throw $r12;

     label4:
        $r9 = new org.hipi.image.io.PngCodec$PNGChunk;

        $r8 = <org.hipi.image.io.PngCodec: org.hipi.image.io.PngCodec staticObject>;

        virtualinvoke $r8.<java.lang.Object: java.lang.Class getClass()>();

        specialinvoke $r9.<org.hipi.image.io.PngCodec$PNGChunk: void <init>(org.hipi.image.io.PngCodec,byte[],byte[])>($r8, r2, r3);

        virtualinvoke $r5.<org.hipi.image.io.PngCodec$PNGData: void add(org.hipi.image.io.PngCodec$PNGChunk)>($r9);

     label5:
        goto label1;

     label6:
        $r13 := @caughtexception;

        z1 = 0;

        goto label1;

     label7:
        return $r5;

        catch java.io.EOFException from label2 to label5 with label6;
    }

    protected static boolean verifyCRC(byte[], byte[], long)
    {
        byte[] r0, r1;
        long l0, l1;
        java.util.zip.CRC32 $r3;
        byte $b2;
        boolean $z0;

        r0 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        l0 := @parameter2: long;

        $r3 = new java.util.zip.CRC32;

        specialinvoke $r3.<java.util.zip.CRC32: void <init>()>();

        virtualinvoke $r3.<java.util.zip.CRC32: void update(byte[])>(r0);

        virtualinvoke $r3.<java.util.zip.CRC32: void update(byte[])>(r1);

        l1 = virtualinvoke $r3.<java.util.zip.CRC32: long getValue()>();

        $b2 = l1 cmp l0;

        if $b2 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void encodeImage(org.hipi.image.HipiImage, java.io.OutputStream) throws java.lang.IllegalArgumentException, java.io.IOException
    {
        org.hipi.image.io.PngCodec r0;
        org.hipi.image.HipiImage r1;
        java.io.OutputStream r2;
        int i0, i1, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i12, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i30, i31, i32;
        org.hipi.image.PixelArray r6;
        java.lang.Class $r7, $r8;
        boolean $z0;
        java.lang.IllegalArgumentException $r9, $r29, $r30, $r31;
        org.hipi.image.HipiImageHeader$HipiColorSpace $r10, $r11;
        java.util.zip.CRC32 $r12, $r13, $r18, $r20, $r24, $r25, $r33;
        byte[] $r14, $r15, $r17, $r19, $r22, $r26, $r27, $r28, r32;
        java.lang.String $r16, $r21, $r23;
        long $l11, $l13, $l29;
        byte $b26, $b27, $b28;
        java.io.ByteArrayOutputStream $r34;
        java.io.BufferedOutputStream $r35;
        java.util.zip.DeflaterOutputStream $r36;
        java.util.zip.Deflater $r37;
        org.hipi.image.RasterImage $r38;

        r0 := @this: org.hipi.image.io.PngCodec;

        r1 := @parameter0: org.hipi.image.HipiImage;

        r2 := @parameter1: java.io.OutputStream;

        $r8 = class "org/hipi/image/RasterImage";

        $r7 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r8.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r7);

        if $z0 != 0 goto label01;

        $r31 = new java.lang.IllegalArgumentException;

        specialinvoke $r31.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("PNG encoder supports only RasterImage input types.");

        throw $r31;

     label01:
        $i6 = virtualinvoke r1.<org.hipi.image.HipiImage: int getWidth()>();

        if $i6 <= 0 goto label02;

        $i7 = virtualinvoke r1.<org.hipi.image.HipiImage: int getHeight()>();

        if $i7 > 0 goto label03;

     label02:
        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid image dimensions.");

        throw $r9;

     label03:
        $r11 = virtualinvoke r1.<org.hipi.image.HipiImage: org.hipi.image.HipiImageHeader$HipiColorSpace getColorSpace()>();

        $r10 = <org.hipi.image.HipiImageHeader$HipiColorSpace: org.hipi.image.HipiImageHeader$HipiColorSpace RGB>;

        if $r11 == $r10 goto label04;

        $r29 = new java.lang.IllegalArgumentException;

        specialinvoke $r29.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("PNG encoder supports only linear RGB color space.");

        throw $r29;

     label04:
        $i8 = virtualinvoke r1.<org.hipi.image.HipiImage: int getNumBands()>();

        if $i8 == 3 goto label05;

        $r30 = new java.lang.IllegalArgumentException;

        specialinvoke $r30.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("PNG encoder supports only three band images.");

        throw $r30;

     label05:
        $r12 = new java.util.zip.CRC32;

        specialinvoke $r12.<java.util.zip.CRC32: void <init>()>();

        r0.<org.hipi.image.io.PngCodec: java.util.zip.CRC32 crc> = $r12;

        i0 = virtualinvoke r1.<org.hipi.image.HipiImage: int getWidth()>();

        i1 = virtualinvoke r1.<org.hipi.image.HipiImage: int getHeight()>();

        $r14 = newarray (byte)[12];

        $r14[0] = -119;

        $r14[1] = 80;

        $r14[2] = 78;

        $r14[3] = 71;

        $r14[4] = 13;

        $r14[5] = 10;

        $r14[6] = 26;

        $r14[7] = 10;

        $r14[8] = 0;

        $r14[9] = 0;

        $r14[10] = 0;

        $r14[11] = 13;

        specialinvoke r0.<org.hipi.image.io.PngCodec: void write(java.io.OutputStream,byte[])>(r2, $r14);

        $r13 = r0.<org.hipi.image.io.PngCodec: java.util.zip.CRC32 crc>;

        virtualinvoke $r13.<java.util.zip.CRC32: void reset()>();

        $r16 = "IHDR";

        $r15 = virtualinvoke $r16.<java.lang.String: byte[] getBytes()>();

        specialinvoke r0.<org.hipi.image.io.PngCodec: void write(java.io.OutputStream,byte[])>(r2, $r15);

        specialinvoke r0.<org.hipi.image.io.PngCodec: void write(java.io.OutputStream,int)>(r2, i0);

        specialinvoke r0.<org.hipi.image.io.PngCodec: void write(java.io.OutputStream,int)>(r2, i1);

        r32 = null;

        tableswitch(2)
        {
            case 0: goto label06;
            case 1: goto label07;
            case 2: goto label08;
            default: goto label09;
        };

     label06:
        $r17 = newarray (byte)[5];

        $r17[0] = 1;

        $r17[1] = 0;

        $r17[2] = 0;

        $r17[3] = 0;

        $r17[4] = 0;

        r32 = $r17;

        goto label09;

     label07:
        $r28 = newarray (byte)[5];

        $r28[0] = 8;

        $r28[1] = 0;

        $r28[2] = 0;

        $r28[3] = 0;

        $r28[4] = 0;

        r32 = $r28;

        goto label09;

     label08:
        $r27 = newarray (byte)[5];

        $r27[0] = 8;

        $r27[1] = 2;

        $r27[2] = 0;

        $r27[3] = 0;

        $r27[4] = 0;

        r32 = $r27;

     label09:
        specialinvoke r0.<org.hipi.image.io.PngCodec: void write(java.io.OutputStream,byte[])>(r2, r32);

        $r33 = r0.<org.hipi.image.io.PngCodec: java.util.zip.CRC32 crc>;

        $l29 = virtualinvoke $r33.<java.util.zip.CRC32: long getValue()>();

        $i30 = (int) $l29;

        specialinvoke r0.<org.hipi.image.io.PngCodec: void write(java.io.OutputStream,int)>(r2, $i30);

        $r34 = new java.io.ByteArrayOutputStream;

        specialinvoke $r34.<java.io.ByteArrayOutputStream: void <init>(int)>(65536);

        $r35 = new java.io.BufferedOutputStream;

        $r36 = new java.util.zip.DeflaterOutputStream;

        $r37 = new java.util.zip.Deflater;

        specialinvoke $r37.<java.util.zip.Deflater: void <init>(int)>(9);

        specialinvoke $r36.<java.util.zip.DeflaterOutputStream: void <init>(java.io.OutputStream,java.util.zip.Deflater)>($r34, $r37);

        specialinvoke $r35.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r36);

        $r38 = (org.hipi.image.RasterImage) r1;

        r6 = virtualinvoke $r38.<org.hipi.image.RasterImage: org.hipi.image.PixelArray getPixelArray()>();

        lookupswitch(2)
        {
            case 2: goto label10;
            default: goto label14;
        };

     label10:
        i31 = 0;

     label11:
        if i31 >= i1 goto label14;

        virtualinvoke $r35.<java.io.BufferedOutputStream: void write(int)>(0);

        i32 = 0;

     label12:
        if i32 >= i0 goto label13;

        $i15 = i31 * i0;

        $i14 = $i15 + i32;

        $i18 = $i14 * 3;

        $i17 = $i18 + 0;

        i3 = virtualinvoke r6.<org.hipi.image.PixelArray: int getElem(int)>($i17);

        $i16 = i31 * i0;

        $i23 = $i16 + i32;

        $i24 = $i23 * 3;

        $i25 = $i24 + 1;

        i4 = virtualinvoke r6.<org.hipi.image.PixelArray: int getElem(int)>($i25);

        $i19 = i31 * i0;

        $i20 = $i19 + i32;

        $i21 = $i20 * 3;

        $i22 = $i21 + 2;

        i5 = virtualinvoke r6.<org.hipi.image.PixelArray: int getElem(int)>($i22);

        $b26 = (byte) i3;

        virtualinvoke $r35.<java.io.BufferedOutputStream: void write(int)>($b26);

        $b27 = (byte) i4;

        virtualinvoke $r35.<java.io.BufferedOutputStream: void write(int)>($b27);

        $b28 = (byte) i5;

        virtualinvoke $r35.<java.io.BufferedOutputStream: void write(int)>($b28);

        i32 = i32 + 1;

        goto label12;

     label13:
        i31 = i31 + 1;

        goto label11;

     label14:
        virtualinvoke $r35.<java.io.BufferedOutputStream: void close()>();

        $i9 = virtualinvoke $r34.<java.io.ByteArrayOutputStream: int size()>();

        specialinvoke r0.<org.hipi.image.io.PngCodec: void write(java.io.OutputStream,int)>(r2, $i9);

        $r18 = r0.<org.hipi.image.io.PngCodec: java.util.zip.CRC32 crc>;

        virtualinvoke $r18.<java.util.zip.CRC32: void reset()>();

        $r21 = "IDAT";

        $r22 = virtualinvoke $r21.<java.lang.String: byte[] getBytes()>();

        specialinvoke r0.<org.hipi.image.io.PngCodec: void write(java.io.OutputStream,byte[])>(r2, $r22);

        $r19 = virtualinvoke $r34.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke r0.<org.hipi.image.io.PngCodec: void write(java.io.OutputStream,byte[])>(r2, $r19);

        $r20 = r0.<org.hipi.image.io.PngCodec: java.util.zip.CRC32 crc>;

        $l11 = virtualinvoke $r20.<java.util.zip.CRC32: long getValue()>();

        $i10 = (int) $l11;

        specialinvoke r0.<org.hipi.image.io.PngCodec: void write(java.io.OutputStream,int)>(r2, $i10);

        specialinvoke r0.<org.hipi.image.io.PngCodec: void write(java.io.OutputStream,int)>(r2, 0);

        $r24 = r0.<org.hipi.image.io.PngCodec: java.util.zip.CRC32 crc>;

        virtualinvoke $r24.<java.util.zip.CRC32: void reset()>();

        $r23 = "IEND";

        $r26 = virtualinvoke $r23.<java.lang.String: byte[] getBytes()>();

        specialinvoke r0.<org.hipi.image.io.PngCodec: void write(java.io.OutputStream,byte[])>(r2, $r26);

        $r25 = r0.<org.hipi.image.io.PngCodec: java.util.zip.CRC32 crc>;

        $l13 = virtualinvoke $r25.<java.util.zip.CRC32: long getValue()>();

        $i12 = (int) $l13;

        specialinvoke r0.<org.hipi.image.io.PngCodec: void write(java.io.OutputStream,int)>(r2, $i12);

        virtualinvoke r2.<java.io.OutputStream: void close()>();

        return;
    }

    private void write(java.io.OutputStream, int) throws java.io.IOException
    {
        org.hipi.image.io.PngCodec r0;
        java.io.OutputStream r1;
        int i0, $i1, $i2, $i4, $i5, $i7, $i8, $i10;
        byte[] $r3;
        byte $b3, $b6, $b9, $b11;

        r0 := @this: org.hipi.image.io.PngCodec;

        r1 := @parameter0: java.io.OutputStream;

        i0 := @parameter1: int;

        $r3 = newarray (byte)[4];

        $i1 = i0 >> 24;

        $i2 = $i1 & 255;

        $b3 = (byte) $i2;

        $r3[0] = $b3;

        $i4 = i0 >> 16;

        $i5 = $i4 & 255;

        $b6 = (byte) $i5;

        $r3[1] = $b6;

        $i7 = i0 >> 8;

        $i8 = $i7 & 255;

        $b9 = (byte) $i8;

        $r3[2] = $b9;

        $i10 = i0 & 255;

        $b11 = (byte) $i10;

        $r3[3] = $b11;

        specialinvoke r0.<org.hipi.image.io.PngCodec: void write(java.io.OutputStream,byte[])>(r1, $r3);

        return;
    }

    private void write(java.io.OutputStream, byte[]) throws java.io.IOException
    {
        org.hipi.image.io.PngCodec r0;
        java.io.OutputStream r1;
        byte[] r2;
        java.util.zip.CRC32 $r3;

        r0 := @this: org.hipi.image.io.PngCodec;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: byte[];

        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>(r2);

        $r3 = r0.<org.hipi.image.io.PngCodec: java.util.zip.CRC32 crc>;

        virtualinvoke $r3.<java.util.zip.CRC32: void update(byte[])>(r2);

        return;
    }

    static void <clinit>()
    {
        org.hipi.image.io.PngCodec $r0;

        <org.hipi.image.io.PngCodec: byte COLOR_MODE> = 2;

        <org.hipi.image.io.PngCodec: byte GREYSCALE_MODE> = 1;

        <org.hipi.image.io.PngCodec: byte BW_MODE> = 0;

        $r0 = new org.hipi.image.io.PngCodec;

        specialinvoke $r0.<org.hipi.image.io.PngCodec: void <init>()>();

        <org.hipi.image.io.PngCodec: org.hipi.image.io.PngCodec staticObject> = $r0;

        return;
    }
}
