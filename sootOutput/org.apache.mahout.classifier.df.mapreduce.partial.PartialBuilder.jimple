public class org.apache.mahout.classifier.df.mapreduce.partial.PartialBuilder extends org.apache.mahout.classifier.df.mapreduce.Builder
{
    private static final org.slf4j.Logger log;

    public void <init>(org.apache.mahout.classifier.df.builder.TreeBuilder, org.apache.hadoop.fs.Path, org.apache.hadoop.fs.Path, java.lang.Long)
    {
        org.apache.mahout.classifier.df.mapreduce.partial.PartialBuilder r0;
        org.apache.mahout.classifier.df.builder.TreeBuilder r1;
        org.apache.hadoop.fs.Path r2, r3;
        java.lang.Long r4;
        org.apache.hadoop.conf.Configuration $r5;

        r0 := @this: org.apache.mahout.classifier.df.mapreduce.partial.PartialBuilder;

        r1 := @parameter0: org.apache.mahout.classifier.df.builder.TreeBuilder;

        r2 := @parameter1: org.apache.hadoop.fs.Path;

        r3 := @parameter2: org.apache.hadoop.fs.Path;

        r4 := @parameter3: java.lang.Long;

        $r5 = new org.apache.hadoop.conf.Configuration;

        specialinvoke $r5.<org.apache.hadoop.conf.Configuration: void <init>()>();

        specialinvoke r0.<org.apache.mahout.classifier.df.mapreduce.partial.PartialBuilder: void <init>(org.apache.mahout.classifier.df.builder.TreeBuilder,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,java.lang.Long,org.apache.hadoop.conf.Configuration)>(r1, r2, r3, r4, $r5);

        return;
    }

    public void <init>(org.apache.mahout.classifier.df.builder.TreeBuilder, org.apache.hadoop.fs.Path, org.apache.hadoop.fs.Path, java.lang.Long, org.apache.hadoop.conf.Configuration)
    {
        org.apache.mahout.classifier.df.mapreduce.partial.PartialBuilder r0;
        org.apache.mahout.classifier.df.builder.TreeBuilder r1;
        org.apache.hadoop.fs.Path r2, r3;
        java.lang.Long r4;
        org.apache.hadoop.conf.Configuration r5;

        r0 := @this: org.apache.mahout.classifier.df.mapreduce.partial.PartialBuilder;

        r1 := @parameter0: org.apache.mahout.classifier.df.builder.TreeBuilder;

        r2 := @parameter1: org.apache.hadoop.fs.Path;

        r3 := @parameter2: org.apache.hadoop.fs.Path;

        r4 := @parameter3: java.lang.Long;

        r5 := @parameter4: org.apache.hadoop.conf.Configuration;

        specialinvoke r0.<org.apache.mahout.classifier.df.mapreduce.Builder: void <init>(org.apache.mahout.classifier.df.builder.TreeBuilder,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,java.lang.Long,org.apache.hadoop.conf.Configuration)>(r1, r2, r3, r4, r5);

        return;
    }

    protected void configureJob(org.apache.hadoop.mapreduce.Job) throws java.io.IOException
    {
        org.apache.mahout.classifier.df.mapreduce.partial.PartialBuilder r0;
        org.apache.hadoop.mapreduce.Job r1;
        org.apache.hadoop.conf.Configuration r2;
        java.util.List r4;
        int i0;
        org.apache.hadoop.fs.Path[] $r5;
        org.apache.hadoop.fs.Path $r6, $r7;
        org.apache.hadoop.mapreduce.lib.input.TextInputFormat $r8;
        org.slf4j.Logger $r9, $r10;
        boolean $z0;
        java.lang.Integer $r11;

        r0 := @this: org.apache.mahout.classifier.df.mapreduce.partial.PartialBuilder;

        r1 := @parameter0: org.apache.hadoop.mapreduce.Job;

        r2 = virtualinvoke r1.<org.apache.hadoop.mapreduce.Job: org.apache.hadoop.conf.Configuration getConfiguration()>();

        virtualinvoke r1.<org.apache.hadoop.mapreduce.Job: void setJarByClass(java.lang.Class)>(class "org/apache/mahout/classifier/df/mapreduce/partial/PartialBuilder");

        $r5 = newarray (org.apache.hadoop.fs.Path)[1];

        $r6 = virtualinvoke r0.<org.apache.mahout.classifier.df.mapreduce.partial.PartialBuilder: org.apache.hadoop.fs.Path getDataPath()>();

        $r5[0] = $r6;

        staticinvoke <org.apache.hadoop.mapreduce.lib.input.FileInputFormat: void setInputPaths(org.apache.hadoop.mapreduce.Job,org.apache.hadoop.fs.Path[])>(r1, $r5);

        $r7 = virtualinvoke r0.<org.apache.mahout.classifier.df.mapreduce.partial.PartialBuilder: org.apache.hadoop.fs.Path getOutputPath(org.apache.hadoop.conf.Configuration)>(r2);

        staticinvoke <org.apache.hadoop.mapreduce.lib.output.FileOutputFormat: void setOutputPath(org.apache.hadoop.mapreduce.Job,org.apache.hadoop.fs.Path)>(r1, $r7);

        virtualinvoke r1.<org.apache.hadoop.mapreduce.Job: void setOutputKeyClass(java.lang.Class)>(class "org/apache/mahout/classifier/df/mapreduce/partial/TreeID");

        virtualinvoke r1.<org.apache.hadoop.mapreduce.Job: void setOutputValueClass(java.lang.Class)>(class "org/apache/mahout/classifier/df/mapreduce/MapredOutput");

        virtualinvoke r1.<org.apache.hadoop.mapreduce.Job: void setMapperClass(java.lang.Class)>(class "org/apache/mahout/classifier/df/mapreduce/partial/Step1Mapper");

        virtualinvoke r1.<org.apache.hadoop.mapreduce.Job: void setNumReduceTasks(int)>(0);

        virtualinvoke r1.<org.apache.hadoop.mapreduce.Job: void setInputFormatClass(java.lang.Class)>(class "org/apache/hadoop/mapreduce/lib/input/TextInputFormat");

        virtualinvoke r1.<org.apache.hadoop.mapreduce.Job: void setOutputFormatClass(java.lang.Class)>(class "org/apache/hadoop/mapreduce/lib/output/SequenceFileOutputFormat");

        $r8 = new org.apache.hadoop.mapreduce.lib.input.TextInputFormat;

        specialinvoke $r8.<org.apache.hadoop.mapreduce.lib.input.TextInputFormat: void <init>()>();

        r4 = virtualinvoke $r8.<org.apache.hadoop.mapreduce.lib.input.TextInputFormat: java.util.List getSplits(org.apache.hadoop.mapreduce.JobContext)>(r1);

        if r4 == null goto label1;

        $z0 = interfaceinvoke r4.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $r9 = <org.apache.mahout.classifier.df.mapreduce.partial.PartialBuilder: org.slf4j.Logger log>;

        interfaceinvoke $r9.<org.slf4j.Logger: void warn(java.lang.String)>("Unable to compute number of splits?");

        goto label3;

     label2:
        i0 = interfaceinvoke r4.<java.util.List: int size()>();

        $r10 = <org.apache.mahout.classifier.df.mapreduce.partial.PartialBuilder: org.slf4j.Logger log>;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r10.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Setting mapred.map.tasks = {}", $r11);

        virtualinvoke r2.<org.apache.hadoop.conf.Configuration: void setInt(java.lang.String,int)>("mapred.map.tasks", i0);

     label3:
        return;
    }

    protected org.apache.mahout.classifier.df.DecisionForest parseOutput(org.apache.hadoop.mapreduce.Job) throws java.io.IOException
    {
        org.apache.mahout.classifier.df.mapreduce.partial.PartialBuilder r0;
        org.apache.hadoop.mapreduce.Job r1;
        org.apache.hadoop.conf.Configuration r2;
        int i0;
        org.apache.hadoop.fs.Path r3;
        org.apache.mahout.classifier.df.mapreduce.partial.TreeID[] r4;
        org.apache.mahout.classifier.df.node.Node[] r5;
        org.apache.mahout.classifier.df.DecisionForest $r6;
        java.util.List $r7;

        r0 := @this: org.apache.mahout.classifier.df.mapreduce.partial.PartialBuilder;

        r1 := @parameter0: org.apache.hadoop.mapreduce.Job;

        r2 = virtualinvoke r1.<org.apache.hadoop.mapreduce.Job: org.apache.hadoop.conf.Configuration getConfiguration()>();

        i0 = staticinvoke <org.apache.mahout.classifier.df.mapreduce.Builder: int getNbTrees(org.apache.hadoop.conf.Configuration)>(r2);

        r3 = virtualinvoke r0.<org.apache.mahout.classifier.df.mapreduce.partial.PartialBuilder: org.apache.hadoop.fs.Path getOutputPath(org.apache.hadoop.conf.Configuration)>(r2);

        r4 = newarray (org.apache.mahout.classifier.df.mapreduce.partial.TreeID)[i0];

        r5 = newarray (org.apache.mahout.classifier.df.node.Node)[i0];

        staticinvoke <org.apache.mahout.classifier.df.mapreduce.partial.PartialBuilder: void processOutput(org.apache.hadoop.mapreduce.JobContext,org.apache.hadoop.fs.Path,org.apache.mahout.classifier.df.mapreduce.partial.TreeID[],org.apache.mahout.classifier.df.node.Node[])>(r1, r3, r4, r5);

        $r6 = new org.apache.mahout.classifier.df.DecisionForest;

        $r7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r5);

        specialinvoke $r6.<org.apache.mahout.classifier.df.DecisionForest: void <init>(java.util.List)>($r7);

        return $r6;
    }

    protected static void processOutput(org.apache.hadoop.mapreduce.JobContext, org.apache.hadoop.fs.Path, org.apache.mahout.classifier.df.mapreduce.partial.TreeID[], org.apache.mahout.classifier.df.node.Node[]) throws java.io.IOException
    {
        org.apache.hadoop.mapreduce.JobContext r0;
        org.apache.hadoop.fs.Path r1, r8;
        org.apache.mahout.classifier.df.mapreduce.partial.TreeID[] r2;
        org.apache.mahout.classifier.df.node.Node[] r3;
        org.apache.hadoop.conf.Configuration r4;
        org.apache.hadoop.fs.FileSystem r5;
        org.apache.hadoop.fs.Path[] r6;
        int i0, $i1, $i2, $i3, i4, i5;
        java.util.Iterator r9;
        org.apache.mahout.common.Pair r10;
        org.apache.mahout.classifier.df.mapreduce.partial.TreeID r11;
        org.apache.mahout.classifier.df.mapreduce.MapredOutput r12;
        org.apache.mahout.common.iterator.sequencefile.SequenceFileIterable $r13;
        java.lang.IllegalStateException $r14;
        boolean $z0, $z1, $z2;
        java.lang.Object $r15, $r16, $r17;
        org.apache.mahout.classifier.df.node.Node $r18;

        r0 := @parameter0: org.apache.hadoop.mapreduce.JobContext;

        r1 := @parameter1: org.apache.hadoop.fs.Path;

        r2 := @parameter2: org.apache.mahout.classifier.df.mapreduce.partial.TreeID[];

        r3 := @parameter3: org.apache.mahout.classifier.df.node.Node[];

        if r2 != null goto label01;

        if r3 == null goto label02;

     label01:
        if r2 == null goto label03;

        if r3 == null goto label03;

     label02:
        $z1 = 1;

        goto label04;

     label03:
        $z1 = 0;

     label04:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "if keys is null, trees should also be null");

        if r2 == null goto label05;

        $i3 = lengthof r2;

        $i2 = lengthof r3;

        if $i3 != $i2 goto label06;

     label05:
        $z2 = 1;

        goto label07;

     label06:
        $z2 = 0;

     label07:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z2, "keys.length != trees.length");

        r4 = interfaceinvoke r0.<org.apache.hadoop.mapreduce.JobContext: org.apache.hadoop.conf.Configuration getConfiguration()>();

        r5 = virtualinvoke r1.<org.apache.hadoop.fs.Path: org.apache.hadoop.fs.FileSystem getFileSystem(org.apache.hadoop.conf.Configuration)>(r4);

        r6 = staticinvoke <org.apache.mahout.classifier.df.DFUtils: org.apache.hadoop.fs.Path[] listOutputFiles(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path)>(r5, r1);

        i4 = 0;

        i0 = lengthof r6;

        i5 = 0;

     label08:
        if i5 >= i0 goto label13;

        r8 = r6[i5];

        $r13 = new org.apache.mahout.common.iterator.sequencefile.SequenceFileIterable;

        specialinvoke $r13.<org.apache.mahout.common.iterator.sequencefile.SequenceFileIterable: void <init>(org.apache.hadoop.fs.Path,org.apache.hadoop.conf.Configuration)>(r8, r4);

        r9 = virtualinvoke $r13.<org.apache.mahout.common.iterator.sequencefile.SequenceFileIterable: java.util.Iterator iterator()>();

     label09:
        $z0 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label12;

        $r16 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.apache.mahout.common.Pair) $r16;

        $r15 = virtualinvoke r10.<org.apache.mahout.common.Pair: java.lang.Object getFirst()>();

        r11 = (org.apache.mahout.classifier.df.mapreduce.partial.TreeID) $r15;

        $r17 = virtualinvoke r10.<org.apache.mahout.common.Pair: java.lang.Object getSecond()>();

        r12 = (org.apache.mahout.classifier.df.mapreduce.MapredOutput) $r17;

        if r2 == null goto label10;

        r2[i4] = r11;

     label10:
        if r3 == null goto label11;

        $r18 = virtualinvoke r12.<org.apache.mahout.classifier.df.mapreduce.MapredOutput: org.apache.mahout.classifier.df.node.Node getTree()>();

        r3[i4] = $r18;

     label11:
        i4 = i4 + 1;

        goto label09;

     label12:
        i5 = i5 + 1;

        goto label08;

     label13:
        if r2 == null goto label14;

        $i1 = lengthof r2;

        if i4 == $i1 goto label14;

        $r14 = new java.lang.IllegalStateException;

        specialinvoke $r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Some key/values are missing from the output");

        throw $r14;

     label14:
        return;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "org/apache/mahout/classifier/df/mapreduce/partial/PartialBuilder");

        <org.apache.mahout.classifier.df.mapreduce.partial.PartialBuilder: org.slf4j.Logger log> = $r0;

        return;
    }
}
