public final class org.apache.mahout.classifier.df.data.DescriptorUtils extends java.lang.Object
{
    private static final com.google.common.base.Splitter SPACE;

    private void <init>()
    {
        org.apache.mahout.classifier.df.data.DescriptorUtils r0;

        r0 := @this: org.apache.mahout.classifier.df.data.DescriptorUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.apache.mahout.classifier.df.data.Dataset$Attribute[] parseDescriptor(java.lang.CharSequence) throws org.apache.mahout.classifier.df.data.DescriptorException
    {
        java.lang.CharSequence r0;
        java.util.Iterator r2;
        java.util.ArrayList $r3;
        com.google.common.base.Splitter $r4;
        java.lang.Iterable $r5;
        boolean $z0, $z1, $z2, $z3, $z4;
        int $i0;
        org.apache.mahout.classifier.df.data.Dataset$Attribute[] $r6, $r8;
        java.lang.Object[] $r7;
        java.lang.Object $r9;
        java.util.Locale $r10;
        java.lang.String $r11, $r12, $r13, $r14, $r20, r24, r25;
        java.lang.StringBuilder $r15, $r17, $r18;
        org.apache.mahout.classifier.df.data.DescriptorException $r16;
        org.apache.mahout.classifier.df.data.Dataset$Attribute $r19, $r21, $r22, $r23;

        r0 := @parameter0: java.lang.CharSequence;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = <org.apache.mahout.classifier.df.data.DescriptorUtils: com.google.common.base.Splitter SPACE>;

        $r5 = virtualinvoke $r4.<com.google.common.base.Splitter: java.lang.Iterable split(java.lang.CharSequence)>(r0);

        r2 = interfaceinvoke $r5.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r9 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r24 = (java.lang.String) $r9;

        $r10 = <java.util.Locale: java.util.Locale ENGLISH>;

        r25 = virtualinvoke r24.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r10);

        $r11 = "I";

        $z1 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r25);

        if $z1 == 0 goto label2;

        $r23 = <org.apache.mahout.classifier.df.data.Dataset$Attribute: org.apache.mahout.classifier.df.data.Dataset$Attribute IGNORED>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r23);

        goto label1;

     label2:
        $r12 = "N";

        $z2 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>(r25);

        if $z2 == 0 goto label3;

        $r21 = <org.apache.mahout.classifier.df.data.Dataset$Attribute: org.apache.mahout.classifier.df.data.Dataset$Attribute NUMERICAL>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r21);

        goto label1;

     label3:
        $r13 = "C";

        $z3 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>(r25);

        if $z3 == 0 goto label4;

        $r22 = <org.apache.mahout.classifier.df.data.Dataset$Attribute: org.apache.mahout.classifier.df.data.Dataset$Attribute CATEGORICAL>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r22);

        goto label1;

     label4:
        $r14 = "L";

        $z4 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>(r25);

        if $z4 == 0 goto label5;

        $r19 = <org.apache.mahout.classifier.df.data.Dataset$Attribute: org.apache.mahout.classifier.df.data.Dataset$Attribute LABEL>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r19);

        goto label1;

     label5:
        $r16 = new org.apache.mahout.classifier.df.data.DescriptorException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad Token : ");

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r25);

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<org.apache.mahout.classifier.df.data.DescriptorException: void <init>(java.lang.String)>($r20);

        throw $r16;

     label6:
        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        $r6 = newarray (org.apache.mahout.classifier.df.data.Dataset$Attribute)[$i0];

        $r7 = interfaceinvoke $r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        $r8 = (org.apache.mahout.classifier.df.data.Dataset$Attribute[]) $r7;

        return $r8;
    }

    public static java.lang.String generateDescriptor(java.lang.CharSequence) throws org.apache.mahout.classifier.df.data.DescriptorException
    {
        java.lang.CharSequence r0;
        com.google.common.base.Splitter $r1;
        java.lang.Iterable $r2;
        java.lang.String $r3;

        r0 := @parameter0: java.lang.CharSequence;

        $r1 = <org.apache.mahout.classifier.df.data.DescriptorUtils: com.google.common.base.Splitter SPACE>;

        $r2 = virtualinvoke $r1.<com.google.common.base.Splitter: java.lang.Iterable split(java.lang.CharSequence)>(r0);

        $r3 = staticinvoke <org.apache.mahout.classifier.df.data.DescriptorUtils: java.lang.String generateDescriptor(java.lang.Iterable)>($r2);

        return $r3;
    }

    public static java.lang.String generateDescriptor(java.lang.Iterable) throws org.apache.mahout.classifier.df.data.DescriptorException
    {
        java.lang.Iterable r0;
        java.util.Iterator r2;
        java.lang.String r3, $r5, $r6, $r13;
        java.lang.StringBuilder $r4, $r9, $r11, $r12, $r14, $r15;
        boolean $z0;
        java.lang.Object $r7;
        org.apache.mahout.classifier.df.data.DescriptorException $r8, $r10;
        java.lang.NumberFormatException $r16;
        int i0, i1, i2;

        r0 := @parameter0: java.lang.Iterable;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        i0 = 0;

        r2 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r7;

     label02:
        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r3);

        if i1 > 0 goto label03;

        $r10 = new org.apache.mahout.classifier.df.data.DescriptorException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Multiplicator (");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") must be > 0");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<org.apache.mahout.classifier.df.data.DescriptorException: void <init>(java.lang.String)>($r13);

        throw $r10;

     label03:
        if i0 <= 0 goto label04;

        $r8 = new org.apache.mahout.classifier.df.data.DescriptorException;

        specialinvoke $r8.<org.apache.mahout.classifier.df.data.DescriptorException: void <init>(java.lang.String)>("A multiplicator cannot be followed by another multiplicator");

        throw $r8;

     label04:
        i0 = i1;

     label05:
        goto label01;

     label06:
        $r16 := @caughtexception;

        if i0 != 0 goto label07;

        i0 = 1;

     label07:
        i2 = 0;

     label08:
        if i2 >= i0 goto label09;

        $r15 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        i2 = i2 + 1;

        goto label08;

     label09:
        i0 = 0;

        goto label01;

     label10:
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String trim()>();

        return $r6;

        catch java.lang.NumberFormatException from label02 to label05 with label06;
    }

    static void <clinit>()
    {
        com.google.common.base.Splitter $r0, $r1;

        $r0 = staticinvoke <com.google.common.base.Splitter: com.google.common.base.Splitter on(char)>(32);

        $r1 = virtualinvoke $r0.<com.google.common.base.Splitter: com.google.common.base.Splitter omitEmptyStrings()>();

        <org.apache.mahout.classifier.df.data.DescriptorUtils: com.google.common.base.Splitter SPACE> = $r1;

        return;
    }
}
