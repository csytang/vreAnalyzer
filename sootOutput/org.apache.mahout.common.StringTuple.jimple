public final class org.apache.mahout.common.StringTuple extends java.lang.Object implements org.apache.hadoop.io.WritableComparable
{
    private java.util.List tuple;

    public void <init>()
    {
        org.apache.mahout.common.StringTuple r0;
        java.util.ArrayList $r1;

        r0 := @this: org.apache.mahout.common.StringTuple;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

        r0.<org.apache.mahout.common.StringTuple: java.util.List tuple> = $r1;

        return;
    }

    public void <init>(java.lang.String)
    {
        org.apache.mahout.common.StringTuple r0;
        java.lang.String r1;
        java.util.ArrayList $r2;

        r0 := @this: org.apache.mahout.common.StringTuple;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

        r0.<org.apache.mahout.common.StringTuple: java.util.List tuple> = $r2;

        virtualinvoke r0.<org.apache.mahout.common.StringTuple: boolean add(java.lang.String)>(r1);

        return;
    }

    public void <init>(java.lang.Iterable)
    {
        org.apache.mahout.common.StringTuple r0;
        java.lang.Iterable r1;
        java.util.Iterator r2;
        java.lang.String r3;
        java.util.ArrayList $r4;
        boolean $z0;
        java.lang.Object $r5;

        r0 := @this: org.apache.mahout.common.StringTuple;

        r1 := @parameter0: java.lang.Iterable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

        r0.<org.apache.mahout.common.StringTuple: java.util.List tuple> = $r4;

        r2 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r5;

        virtualinvoke r0.<org.apache.mahout.common.StringTuple: boolean add(java.lang.String)>(r3);

        goto label1;

     label2:
        return;
    }

    public void <init>(java.lang.String[])
    {
        org.apache.mahout.common.StringTuple r0;
        java.lang.String[] r1;
        int i0, i1;
        java.lang.String r3;
        java.util.ArrayList $r4;

        r0 := @this: org.apache.mahout.common.StringTuple;

        r1 := @parameter0: java.lang.String[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

        r0.<org.apache.mahout.common.StringTuple: java.util.List tuple> = $r4;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r3 = r1[i1];

        virtualinvoke r0.<org.apache.mahout.common.StringTuple: boolean add(java.lang.String)>(r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public boolean add(java.lang.String)
    {
        org.apache.mahout.common.StringTuple r0;
        java.lang.String r1;
        java.util.List $r2;
        boolean $z0;

        r0 := @this: org.apache.mahout.common.StringTuple;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.mahout.common.StringTuple: java.util.List tuple>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return $z0;
    }

    public java.lang.String stringAt(int)
    {
        org.apache.mahout.common.StringTuple r0;
        int i0;
        java.util.List $r1;
        java.lang.Object $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.mahout.common.StringTuple;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.mahout.common.StringTuple: java.util.List tuple>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (java.lang.String) $r2;

        return $r3;
    }

    public java.lang.String replaceAt(int, java.lang.String)
    {
        org.apache.mahout.common.StringTuple r0;
        int i0;
        java.lang.String r1, $r4;
        java.util.List $r2;
        java.lang.Object $r3;

        r0 := @this: org.apache.mahout.common.StringTuple;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r2 = r0.<org.apache.mahout.common.StringTuple: java.util.List tuple>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i0, r1);

        $r4 = (java.lang.String) $r3;

        return $r4;
    }

    public java.util.List getEntries()
    {
        org.apache.mahout.common.StringTuple r0;
        java.util.List $r1, $r2;

        r0 := @this: org.apache.mahout.common.StringTuple;

        $r1 = r0.<org.apache.mahout.common.StringTuple: java.util.List tuple>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    public int length()
    {
        org.apache.mahout.common.StringTuple r0;
        java.util.List $r1;
        int $i0;

        r0 := @this: org.apache.mahout.common.StringTuple;

        $r1 = r0.<org.apache.mahout.common.StringTuple: java.util.List tuple>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public java.lang.String toString()
    {
        org.apache.mahout.common.StringTuple r0;
        java.util.List $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.mahout.common.StringTuple;

        $r1 = r0.<org.apache.mahout.common.StringTuple: java.util.List tuple>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    public int hashCode()
    {
        org.apache.mahout.common.StringTuple r0;
        java.util.List $r1;
        int $i0;

        r0 := @this: org.apache.mahout.common.StringTuple;

        $r1 = r0.<org.apache.mahout.common.StringTuple: java.util.List tuple>;

        $i0 = interfaceinvoke $r1.<java.util.List: int hashCode()>();

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.mahout.common.StringTuple r0, r2;
        java.lang.Object r1;
        java.lang.Class $r3, $r4;
        java.util.List $r5, $r6, $r7, $r8;
        boolean $z0;

        r0 := @this: org.apache.mahout.common.StringTuple;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r1 != null goto label2;

        return 0;

     label2:
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 == $r4 goto label3;

        return 0;

     label3:
        r2 = (org.apache.mahout.common.StringTuple) r1;

        $r5 = r0.<org.apache.mahout.common.StringTuple: java.util.List tuple>;

        if $r5 != null goto label4;

        $r8 = r2.<org.apache.mahout.common.StringTuple: java.util.List tuple>;

        if $r8 == null goto label5;

        return 0;

     label4:
        $r7 = r0.<org.apache.mahout.common.StringTuple: java.util.List tuple>;

        $r6 = r2.<org.apache.mahout.common.StringTuple: java.util.List tuple>;

        $z0 = interfaceinvoke $r7.<java.util.List: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label5;

        return 0;

     label5:
        return 1;
    }

    public void readFields(java.io.DataInput) throws java.io.IOException
    {
        org.apache.mahout.common.StringTuple r0;
        java.io.DataInput r1;
        int i0, i1;
        java.util.ArrayList $r3;
        org.apache.hadoop.io.Text $r4;
        java.util.List $r5;
        java.lang.String $r6;

        r0 := @this: org.apache.mahout.common.StringTuple;

        r1 := @parameter0: java.io.DataInput;

        i0 = interfaceinvoke r1.<java.io.DataInput: int readInt()>();

        $r3 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayListWithCapacity(int)>(i0);

        r0.<org.apache.mahout.common.StringTuple: java.util.List tuple> = $r3;

        $r4 = new org.apache.hadoop.io.Text;

        specialinvoke $r4.<org.apache.hadoop.io.Text: void <init>()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        virtualinvoke $r4.<org.apache.hadoop.io.Text: void readFields(java.io.DataInput)>(r1);

        $r5 = r0.<org.apache.mahout.common.StringTuple: java.util.List tuple>;

        $r6 = virtualinvoke $r4.<org.apache.hadoop.io.Text: java.lang.String toString()>();

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r6);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void write(java.io.DataOutput) throws java.io.IOException
    {
        org.apache.mahout.common.StringTuple r0;
        java.io.DataOutput r1;
        java.util.Iterator r3;
        java.lang.String r4;
        java.util.List $r5, $r7;
        int $i0;
        org.apache.hadoop.io.Text $r6;
        boolean $z0;
        java.lang.Object $r8;

        r0 := @this: org.apache.mahout.common.StringTuple;

        r1 := @parameter0: java.io.DataOutput;

        $r5 = r0.<org.apache.mahout.common.StringTuple: java.util.List tuple>;

        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        interfaceinvoke r1.<java.io.DataOutput: void writeInt(int)>($i0);

        $r6 = new org.apache.hadoop.io.Text;

        specialinvoke $r6.<org.apache.hadoop.io.Text: void <init>()>();

        $r7 = r0.<org.apache.mahout.common.StringTuple: java.util.List tuple>;

        r3 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r8;

        virtualinvoke $r6.<org.apache.hadoop.io.Text: void set(java.lang.String)>(r4);

        virtualinvoke $r6.<org.apache.hadoop.io.Text: void write(java.io.DataOutput)>(r1);

        goto label1;

     label2:
        return;
    }

    public int compareTo(org.apache.mahout.common.StringTuple)
    {
        org.apache.mahout.common.StringTuple r0, r1;
        int i0, i1, i2, i3, i4;
        java.util.List $r2;
        java.lang.Object $r3;
        java.lang.String $r4, $r5;

        r0 := @this: org.apache.mahout.common.StringTuple;

        r1 := @parameter0: org.apache.mahout.common.StringTuple;

        i0 = virtualinvoke r0.<org.apache.mahout.common.StringTuple: int length()>();

        i1 = virtualinvoke r1.<org.apache.mahout.common.StringTuple: int length()>();

        i2 = staticinvoke <java.lang.Math: int min(int,int)>(i0, i1);

        i4 = 0;

     label1:
        if i4 >= i2 goto label3;

        $r2 = r0.<org.apache.mahout.common.StringTuple: java.util.List tuple>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i4);

        $r4 = (java.lang.String) $r3;

        $r5 = virtualinvoke r1.<org.apache.mahout.common.StringTuple: java.lang.String stringAt(int)>(i4);

        i3 = virtualinvoke $r4.<java.lang.String: int compareTo(java.lang.String)>($r5);

        if i3 == 0 goto label2;

        return i3;

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        if i0 >= i1 goto label4;

        return -1;

     label4:
        if i0 <= i1 goto label5;

        return 1;

     label5:
        return 0;
    }

    public volatile int compareTo(java.lang.Object)
    {
        org.apache.mahout.common.StringTuple r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: org.apache.mahout.common.StringTuple;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.mahout.common.StringTuple) r1;

        $i0 = virtualinvoke r0.<org.apache.mahout.common.StringTuple: int compareTo(org.apache.mahout.common.StringTuple)>($r2);

        return $i0;
    }
}
