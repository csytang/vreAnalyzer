public final class org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer extends org.apache.mahout.cf.taste.impl.recommender.svd.RatingSGDFactorizer
{
    private double[][] p;
    private double[][] y;
    private java.util.Map itemsByUser;

    public void <init>(org.apache.mahout.cf.taste.model.DataModel, int, int) throws org.apache.mahout.cf.taste.common.TasteException
    {
        org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer r0;
        org.apache.mahout.cf.taste.model.DataModel r1;
        int i0, i1;

        r0 := @this: org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer;

        r1 := @parameter0: org.apache.mahout.cf.taste.model.DataModel;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: void <init>(org.apache.mahout.cf.taste.model.DataModel,int,double,double,double,int,double)>(r1, i0, 0.01, 0.1, 0.01, i1, 1.0);

        r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: double biasLearningRate> = 0.7;

        r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: double biasReg> = 0.33;

        return;
    }

    public void <init>(org.apache.mahout.cf.taste.model.DataModel, int, double, double, double, int, double) throws org.apache.mahout.cf.taste.common.TasteException
    {
        org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer r0;
        org.apache.mahout.cf.taste.model.DataModel r1;
        int i0, i1;
        double d0, d1, d2, d3;

        r0 := @this: org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer;

        r1 := @parameter0: org.apache.mahout.cf.taste.model.DataModel;

        i0 := @parameter1: int;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        d2 := @parameter4: double;

        i1 := @parameter5: int;

        d3 := @parameter6: double;

        specialinvoke r0.<org.apache.mahout.cf.taste.impl.recommender.svd.RatingSGDFactorizer: void <init>(org.apache.mahout.cf.taste.model.DataModel,int,double,double,double,int,double)>(r1, i0, d0, d1, d2, i1, d3);

        return;
    }

    protected void prepareTraining() throws org.apache.mahout.cf.taste.common.TasteException
    {
        org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer r0;
        org.apache.mahout.common.RandomWrapper r1;
        int i0, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14, i15, i16, i17;
        org.apache.mahout.cf.taste.impl.common.FastIDSet r2;
        java.util.Iterator r4;
        long l1, l18;
        org.apache.mahout.cf.taste.model.DataModel $r5, $r8, $r12, $r15;
        double[][] $r6, $r7, $r9, $r10, $r24, $r26, $r28, $r29;
        java.util.HashMap $r11;
        boolean $z0, $z1;
        java.lang.Integer $r13, $r18, $r21, $r22;
        java.util.ArrayList $r14;
        java.util.Map $r17;
        java.lang.Object $r19;
        java.lang.Long $r20;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        double[] $r23, $r25, $r27, $r30;
        org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator r31;

        r0 := @this: org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer;

        specialinvoke r0.<org.apache.mahout.cf.taste.impl.recommender.svd.RatingSGDFactorizer: void prepareTraining()>();

        r1 = staticinvoke <org.apache.mahout.common.RandomUtils: org.apache.mahout.common.RandomWrapper getRandom()>();

        $r5 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: org.apache.mahout.cf.taste.model.DataModel dataModel>;

        $i3 = interfaceinvoke $r5.<org.apache.mahout.cf.taste.model.DataModel: int getNumUsers()>();

        $i4 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: int numFeatures>;

        $r7 = newmultiarray (double)[$i3][$i4];

        r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: double[][] p> = $r7;

        i12 = 0;

     label01:
        $r6 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: double[][] p>;

        $i5 = lengthof $r6;

        if i12 >= $i5 goto label06;

        i13 = 0;

     label02:
        if i13 >= 3 goto label03;

        $r29 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: double[][] p>;

        $r30 = $r29[i12];

        $r30[i13] = 0.0;

        i13 = i13 + 1;

        goto label02;

     label03:
        i14 = 3;

     label04:
        $i11 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: int numFeatures>;

        if i14 >= $i11 goto label05;

        $r28 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: double[][] p>;

        $r27 = $r28[i12];

        $d3 = virtualinvoke r1.<java.util.Random: double nextGaussian()>();

        $d4 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: double randomNoise>;

        $d5 = $d3 * $d4;

        $r27[i14] = $d5;

        i14 = i14 + 1;

        goto label04;

     label05:
        i12 = i12 + 1;

        goto label01;

     label06:
        $r8 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: org.apache.mahout.cf.taste.model.DataModel dataModel>;

        $i7 = interfaceinvoke $r8.<org.apache.mahout.cf.taste.model.DataModel: int getNumItems()>();

        $i6 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: int numFeatures>;

        $r10 = newmultiarray (double)[$i7][$i6];

        r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: double[][] y> = $r10;

        i15 = 0;

     label07:
        $r9 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: double[][] y>;

        $i8 = lengthof $r9;

        if i15 >= $i8 goto label12;

        i16 = 0;

     label08:
        if i16 >= 3 goto label09;

        $r26 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: double[][] y>;

        $r25 = $r26[i15];

        $r25[i16] = 0.0;

        i16 = i16 + 1;

        goto label08;

     label09:
        i17 = 3;

     label10:
        $i10 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: int numFeatures>;

        if i17 >= $i10 goto label11;

        $r24 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: double[][] y>;

        $r23 = $r24[i15];

        $d0 = virtualinvoke r1.<java.util.Random: double nextGaussian()>();

        $d2 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: double randomNoise>;

        $d1 = $d0 * $d2;

        $r23[i17] = $d1;

        i17 = i17 + 1;

        goto label10;

     label11:
        i15 = i15 + 1;

        goto label07;

     label12:
        $r11 = new java.util.HashMap;

        specialinvoke $r11.<java.util.HashMap: void <init>()>();

        r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: java.util.Map itemsByUser> = $r11;

        $r12 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: org.apache.mahout.cf.taste.model.DataModel dataModel>;

        r31 = interfaceinvoke $r12.<org.apache.mahout.cf.taste.model.DataModel: org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator getUserIDs()>();

     label13:
        $z0 = interfaceinvoke r31.<org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator: boolean hasNext()>();

        if $z0 == 0 goto label15;

        l18 = interfaceinvoke r31.<org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator: long nextLong()>();

        $r13 = virtualinvoke r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: java.lang.Integer userIndex(long)>(l18);

        i0 = virtualinvoke $r13.<java.lang.Integer: int intValue()>();

        $r15 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: org.apache.mahout.cf.taste.model.DataModel dataModel>;

        r2 = interfaceinvoke $r15.<org.apache.mahout.cf.taste.model.DataModel: org.apache.mahout.cf.taste.impl.common.FastIDSet getItemIDsFromUser(long)>(l18);

        $r14 = new java.util.ArrayList;

        $i9 = virtualinvoke r2.<org.apache.mahout.cf.taste.impl.common.FastIDSet: int size()>();

        specialinvoke $r14.<java.util.ArrayList: void <init>(int)>($i9);

        $r17 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: java.util.Map itemsByUser>;

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, $r14);

        r4 = virtualinvoke r2.<org.apache.mahout.cf.taste.impl.common.FastIDSet: java.util.Iterator iterator()>();

     label14:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label13;

        $r19 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $r20 = (java.lang.Long) $r19;

        l1 = virtualinvoke $r20.<java.lang.Long: long longValue()>();

        $r22 = virtualinvoke r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: java.lang.Integer itemIndex(long)>(l1);

        i2 = virtualinvoke $r22.<java.lang.Integer: int intValue()>();

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>($r21);

        goto label14;

     label15:
        return;
    }

    public org.apache.mahout.cf.taste.impl.recommender.svd.Factorization factorize() throws org.apache.mahout.cf.taste.common.TasteException
    {
        org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer r0;
        int i0, $i1, $i2, $i3, $i4, i5, i6, i7;
        double[][] $r2, $r3, $r4, $r15, $r16, $r18, $r20, $r24, $r26;
        org.apache.mahout.cf.taste.impl.recommender.svd.Factorization $r5;
        java.util.Map $r6, $r10;
        java.lang.Integer $r7, $r12, $r23;
        java.lang.Object $r8, $r11, $r22;
        java.util.List $r9, $r13;
        boolean $z0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, d9;
        double[] $r14, $r17, $r19, $r21, $r25, $r27;
        float $f0;
        java.util.Iterator r28;

        r0 := @this: org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer;

        virtualinvoke r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: void prepareTraining()>();

        specialinvoke r0.<org.apache.mahout.cf.taste.impl.recommender.svd.RatingSGDFactorizer: org.apache.mahout.cf.taste.impl.recommender.svd.Factorization factorize()>();

        i5 = 0;

     label1:
        $r2 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: double[][] userVectors>;

        $i1 = lengthof $r2;

        if i5 >= $i1 goto label7;

        $r6 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: java.util.Map itemsByUser>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i5);

        $r8 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

        $r9 = (java.util.List) $r8;

        r28 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r28.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r22 = interfaceinvoke r28.<java.util.Iterator: java.lang.Object next()>();

        $r23 = (java.lang.Integer) $r22;

        i0 = virtualinvoke $r23.<java.lang.Integer: int intValue()>();

        i6 = 3;

     label3:
        $i4 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: int numFeatures>;

        if i6 >= $i4 goto label2;

        $r26 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: double[][] userVectors>;

        $r25 = $r26[i5];

        $d7 = $r25[i6];

        $r24 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: double[][] y>;

        $r27 = $r24[i0];

        $d8 = $r27[i6];

        $d6 = $d7 + $d8;

        $r25[i6] = $d6;

        i6 = i6 + 1;

        goto label3;

     label4:
        $r10 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: java.util.Map itemsByUser>;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i5);

        $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>($r12);

        $r13 = (java.util.List) $r11;

        $i2 = interfaceinvoke $r13.<java.util.List: int size()>();

        $d0 = (double) $i2;

        d9 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        i7 = 0;

     label5:
        $r15 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: double[][] userVectors>;

        $r14 = $r15[i5];

        $i3 = lengthof $r14;

        if i7 >= $i3 goto label6;

        $r16 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: double[][] userVectors>;

        $r21 = $r16[i5];

        $r18 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: double[][] userVectors>;

        $r17 = $r18[i5];

        $d2 = $r17[i7];

        $d4 = $d2 / d9;

        $r20 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: double[][] p>;

        $r19 = $r20[i5];

        $d1 = $r19[i7];

        $d5 = $d4 + $d1;

        $f0 = (float) $d5;

        $d3 = (double) $f0;

        $r21[i7] = $d3;

        i7 = i7 + 1;

        goto label5;

     label6:
        i5 = i5 + 1;

        goto label1;

     label7:
        $r4 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: double[][] userVectors>;

        $r3 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: double[][] itemVectors>;

        $r5 = virtualinvoke r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: org.apache.mahout.cf.taste.impl.recommender.svd.Factorization createFactorization(double[][],double[][])>($r4, $r3);

        return $r5;
    }

    protected void updateParameters(long, long, float, double)
    {
        org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer r0;
        long l0, l1;
        float f0, $f1;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, d61, d62;
        int i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, i11, i12, i13;
        double[] r1, r2, r3, $r24, $r27, $r28, $r32;
        java.util.Iterator r4, r33;
        java.lang.Integer $r5, $r6, $r11, $r14, $r20, $r25, $r29;
        java.util.Map $r7, $r15, $r17;
        double[][] $r8, $r9, $r22, $r23, $r26, $r31;
        java.util.List $r10, $r16, $r19;
        java.lang.Object $r12, $r13, $r18, $r21, $r30;
        boolean $z0, $z1;

        r0 := @this: org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        f0 := @parameter2: float;

        d0 := @parameter3: double;

        $r6 = virtualinvoke r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: java.lang.Integer userIndex(long)>(l0);

        i2 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        $r5 = virtualinvoke r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: java.lang.Integer itemIndex(long)>(l1);

        i3 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        $r8 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: double[][] p>;

        r1 = $r8[i2];

        $r9 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: double[][] itemVectors>;

        r2 = $r9[i3];

        $i6 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: int numFeatures>;

        r3 = newarray (double)[$i6];

        $r7 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: java.util.Map itemsByUser>;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r12 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r11);

        $r10 = (java.util.List) $r12;

        r33 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r33.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r30 = interfaceinvoke r33.<java.util.Iterator: java.lang.Object next()>();

        $r29 = (java.lang.Integer) $r30;

        i4 = virtualinvoke $r29.<java.lang.Integer: int intValue()>();

        i11 = 3;

     label2:
        $i10 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: int numFeatures>;

        if i11 >= $i10 goto label1;

        $d59 = r3[i11];

        $r31 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: double[][] y>;

        $r32 = $r31[i4];

        $d60 = $r32[i11];

        $d58 = $d59 + $d60;

        r3[i11] = $d58;

        i11 = i11 + 1;

        goto label2;

     label3:
        $r15 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: java.util.Map itemsByUser>;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r13 = interfaceinvoke $r15.<java.util.Map: java.lang.Object get(java.lang.Object)>($r14);

        $r16 = (java.util.List) $r13;

        $i7 = interfaceinvoke $r16.<java.util.List: int size()>();

        $d9 = (double) $i7;

        d61 = staticinvoke <java.lang.Math: double sqrt(double)>($d9);

        i12 = 0;

     label4:
        $i8 = lengthof r3;

        if i12 >= $i8 goto label5;

        $d49 = r3[i12];

        $d56 = $d49 / d61;

        $r26 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: double[][] p>;

        $r28 = $r26[i2];

        $d57 = $r28[i12];

        $d55 = $d56 + $d57;

        $f1 = (float) $d55;

        $d54 = (double) $f1;

        r3[i12] = $d54;

        i12 = i12 + 1;

        goto label4;

     label5:
        d62 = specialinvoke r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: double predictRating(double[],int)>(r3, i3);

        $d11 = (double) f0;

        d1 = $d11 - d62;

        d2 = d1 / d61;

        $d16 = r1[1];

        $d10 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: double biasLearningRate>;

        $d22 = $d10 * d0;

        $d14 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: double biasReg>;

        $d15 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: double preventOverfitting>;

        $d12 = $d14 * $d15;

        $d13 = r1[1];

        $d20 = $d12 * $d13;

        $d21 = d1 - $d20;

        $d23 = $d22 * $d21;

        $d17 = $d16 + $d23;

        r1[1] = $d17;

        $d27 = r2[2];

        $d18 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: double biasLearningRate>;

        $d25 = $d18 * d0;

        $d28 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: double biasReg>;

        $d19 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: double preventOverfitting>;

        $d30 = $d28 * $d19;

        $d29 = r2[2];

        $d31 = $d30 * $d29;

        $d24 = d1 - $d31;

        $d26 = $d25 * $d24;

        $d36 = $d27 + $d26;

        r2[2] = $d36;

        i13 = 3;

     label6:
        $i9 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: int numFeatures>;

        if i13 >= $i9 goto label9;

        d3 = r1[i13];

        d4 = r2[i13];

        $d33 = d1 * d4;

        $d38 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: double preventOverfitting>;

        $d37 = $d38 * d3;

        d5 = $d33 - $d37;

        $d35 = r1[i13];

        $d32 = d0 * d5;

        $d34 = $d35 + $d32;

        r1[i13] = $d34;

        $d43 = r3[i13];

        $d44 = d1 * $d43;

        $d42 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: double preventOverfitting>;

        $d45 = $d42 * d4;

        d6 = $d44 - $d45;

        $d39 = r2[i13];

        $d40 = d0 * d6;

        $d41 = $d39 + $d40;

        r2[i13] = $d41;

        d7 = d2 * d4;

        $r17 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: java.util.Map itemsByUser>;

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r21 = interfaceinvoke $r17.<java.util.Map: java.lang.Object get(java.lang.Object)>($r20);

        $r19 = (java.util.List) $r21;

        r4 = interfaceinvoke $r19.<java.util.List: java.util.Iterator iterator()>();

     label7:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label8;

        $r18 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $r25 = (java.lang.Integer) $r18;

        i5 = virtualinvoke $r25.<java.lang.Integer: int intValue()>();

        $d48 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: double preventOverfitting>;

        $r23 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: double[][] y>;

        $r24 = $r23[i5];

        $d47 = $r24[i13];

        $d46 = $d48 * $d47;

        d8 = d7 - $d46;

        $r22 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: double[][] y>;

        $r27 = $r22[i5];

        $d51 = $r27[i13];

        $d53 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: double learningRate>;

        $d52 = $d53 * d8;

        $d50 = $d51 + $d52;

        $r27[i13] = $d50;

        goto label7;

     label8:
        i13 = i13 + 1;

        goto label6;

     label9:
        return;
    }

    private double predictRating(double[], int)
    {
        org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer r0;
        double[] r1, $r3;
        int i0, $i1, i2;
        double[][] $r2;
        double $d0, $d1, $d2, d3;

        r0 := @this: org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        d3 = 0.0;

        i2 = 0;

     label1:
        $i1 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: int numFeatures>;

        if i2 >= $i1 goto label2;

        $d1 = r1[i2];

        $r2 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.SVDPlusPlusFactorizer: double[][] itemVectors>;

        $r3 = $r2[i0];

        $d0 = $r3[i2];

        $d2 = $d1 * $d0;

        d3 = d3 + $d2;

        i2 = i2 + 1;

        goto label1;

     label2:
        return d3;
    }
}
