public final class org.apache.mahout.clustering.iterator.ClusterIterator extends java.lang.Object
{
    public static final java.lang.String PRIOR_PATH_KEY;

    private void <init>()
    {
        org.apache.mahout.clustering.iterator.ClusterIterator r0;

        r0 := @this: org.apache.mahout.clustering.iterator.ClusterIterator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.apache.mahout.clustering.classify.ClusterClassifier iterate(java.lang.Iterable, org.apache.mahout.clustering.classify.ClusterClassifier, int)
    {
        java.lang.Iterable r0, $r10;
        org.apache.mahout.clustering.classify.ClusterClassifier r1;
        int i0, i1, i2;
        org.apache.mahout.clustering.iterator.ClusteringPolicy r2;
        java.util.Iterator r3, r7;
        org.apache.mahout.math.Vector r4, r5, r6;
        org.apache.mahout.math.Vector$Element r8;
        boolean $z0, $z1;
        java.lang.Object $r9, $r11;
        double $d0;

        r0 := @parameter0: java.lang.Iterable;

        r1 := @parameter1: org.apache.mahout.clustering.classify.ClusterClassifier;

        i0 := @parameter2: int;

        r2 = virtualinvoke r1.<org.apache.mahout.clustering.classify.ClusterClassifier: org.apache.mahout.clustering.iterator.ClusteringPolicy getPolicy()>();

        i2 = 1;

     label1:
        if i2 > i0 goto label5;

        r3 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.mahout.math.Vector) $r9;

        interfaceinvoke r2.<org.apache.mahout.clustering.iterator.ClusteringPolicy: void update(org.apache.mahout.clustering.classify.ClusterClassifier)>(r1);

        r5 = virtualinvoke r1.<org.apache.mahout.clustering.classify.ClusterClassifier: org.apache.mahout.math.Vector classify(org.apache.mahout.math.Vector)>(r4);

        r6 = interfaceinvoke r2.<org.apache.mahout.clustering.iterator.ClusteringPolicy: org.apache.mahout.math.Vector select(org.apache.mahout.math.Vector)>(r5);

        $r10 = interfaceinvoke r6.<org.apache.mahout.math.Vector: java.lang.Iterable nonZeroes()>();

        r7 = interfaceinvoke $r10.<java.lang.Iterable: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r11 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.apache.mahout.math.Vector$Element) $r11;

        i1 = interfaceinvoke r8.<org.apache.mahout.math.Vector$Element: int index()>();

        $d0 = interfaceinvoke r6.<org.apache.mahout.math.Vector: double get(int)>(i1);

        virtualinvoke r1.<org.apache.mahout.clustering.classify.ClusterClassifier: void train(int,org.apache.mahout.math.Vector,double)>(i1, r4, $d0);

        goto label3;

     label4:
        virtualinvoke r1.<org.apache.mahout.clustering.classify.ClusterClassifier: void close()>();

        i2 = i2 + 1;

        goto label1;

     label5:
        return r1;
    }

    public static void iterateSeq(org.apache.hadoop.conf.Configuration, org.apache.hadoop.fs.Path, org.apache.hadoop.fs.Path, org.apache.hadoop.fs.Path, int) throws java.io.IOException
    {
        org.apache.hadoop.conf.Configuration r0;
        org.apache.hadoop.fs.Path r1, r2, r3, $r11, $r26, r34;
        int i0, i1, $i2, i3;
        org.apache.mahout.math.VectorWritable r5;
        org.apache.mahout.math.Vector r6, r7, r8;
        java.util.Iterator r9, r35;
        org.apache.mahout.math.Vector$Element r10;
        org.apache.mahout.clustering.classify.ClusterClassifier $r12;
        java.lang.StringBuilder $r13, $r14, $r15, $r17, $r23, $r24, $r28;
        java.lang.String $r16, $r29;
        org.apache.hadoop.fs.FileSystem $r18, r36;
        java.net.URI $r19, $r27;
        org.apache.mahout.common.iterator.sequencefile.SequenceFileDirValueIterable $r20;
        org.apache.hadoop.fs.PathFilter $r21;
        org.apache.mahout.common.iterator.sequencefile.PathType $r22;
        boolean $z1, $z2, $z3;
        org.apache.mahout.clustering.iterator.ClusteringPolicy $r25, $r30;
        java.lang.Object $r31, $r33;
        java.lang.Iterable $r32;
        double $d0;

        r0 := @parameter0: org.apache.hadoop.conf.Configuration;

        r1 := @parameter1: org.apache.hadoop.fs.Path;

        r2 := @parameter2: org.apache.hadoop.fs.Path;

        r3 := @parameter3: org.apache.hadoop.fs.Path;

        i0 := @parameter4: int;

        $r12 = new org.apache.mahout.clustering.classify.ClusterClassifier;

        specialinvoke $r12.<org.apache.mahout.clustering.classify.ClusterClassifier: void <init>()>();

        virtualinvoke $r12.<org.apache.mahout.clustering.classify.ClusterClassifier: void readFromSeqFiles(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.Path)>(r0, r2);

        r34 = null;

        i3 = 1;

     label1:
        if i3 > i0 goto label5;

        $r20 = new org.apache.mahout.common.iterator.sequencefile.SequenceFileDirValueIterable;

        $r22 = <org.apache.mahout.common.iterator.sequencefile.PathType: org.apache.mahout.common.iterator.sequencefile.PathType LIST>;

        $r21 = staticinvoke <org.apache.mahout.common.iterator.sequencefile.PathFilters: org.apache.hadoop.fs.PathFilter logsCRCFilter()>();

        specialinvoke $r20.<org.apache.mahout.common.iterator.sequencefile.SequenceFileDirValueIterable: void <init>(org.apache.hadoop.fs.Path,org.apache.mahout.common.iterator.sequencefile.PathType,org.apache.hadoop.fs.PathFilter,org.apache.hadoop.conf.Configuration)>(r1, $r22, $r21, r0);

        r35 = virtualinvoke $r20.<org.apache.mahout.common.iterator.sequencefile.SequenceFileDirValueIterable: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r35.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r31 = interfaceinvoke r35.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.mahout.math.VectorWritable) $r31;

        r6 = virtualinvoke r5.<org.apache.mahout.math.VectorWritable: org.apache.mahout.math.Vector get()>();

        r7 = virtualinvoke $r12.<org.apache.mahout.clustering.classify.ClusterClassifier: org.apache.mahout.math.Vector classify(org.apache.mahout.math.Vector)>(r6);

        $r30 = virtualinvoke $r12.<org.apache.mahout.clustering.classify.ClusterClassifier: org.apache.mahout.clustering.iterator.ClusteringPolicy getPolicy()>();

        r8 = interfaceinvoke $r30.<org.apache.mahout.clustering.iterator.ClusteringPolicy: org.apache.mahout.math.Vector select(org.apache.mahout.math.Vector)>(r7);

        $r32 = interfaceinvoke r8.<org.apache.mahout.math.Vector: java.lang.Iterable nonZeroes()>();

        r9 = interfaceinvoke $r32.<java.lang.Iterable: java.util.Iterator iterator()>();

     label3:
        $z3 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label2;

        $r33 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.apache.mahout.math.Vector$Element) $r33;

        i1 = interfaceinvoke r10.<org.apache.mahout.math.Vector$Element: int index()>();

        $d0 = interfaceinvoke r8.<org.apache.mahout.math.Vector: double get(int)>(i1);

        virtualinvoke $r12.<org.apache.mahout.clustering.classify.ClusterClassifier: void train(int,org.apache.mahout.math.Vector,double)>(i1, r6, $d0);

        goto label3;

     label4:
        virtualinvoke $r12.<org.apache.mahout.clustering.classify.ClusterClassifier: void close()>();

        $r25 = virtualinvoke $r12.<org.apache.mahout.clustering.classify.ClusterClassifier: org.apache.mahout.clustering.iterator.ClusteringPolicy getPolicy()>();

        interfaceinvoke $r25.<org.apache.mahout.clustering.iterator.ClusteringPolicy: void update(org.apache.mahout.clustering.classify.ClusterClassifier)>($r12);

        $r26 = new org.apache.hadoop.fs.Path;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("clusters-");

        $r28 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<org.apache.hadoop.fs.Path: void <init>(org.apache.hadoop.fs.Path,java.lang.String)>(r3, $r29);

        r34 = $r26;

        virtualinvoke $r12.<org.apache.mahout.clustering.classify.ClusterClassifier: void writeToSeqFiles(org.apache.hadoop.fs.Path)>($r26);

        $r27 = virtualinvoke r3.<org.apache.hadoop.fs.Path: java.net.URI toUri()>();

        r36 = staticinvoke <org.apache.hadoop.fs.FileSystem: org.apache.hadoop.fs.FileSystem get(java.net.URI,org.apache.hadoop.conf.Configuration)>($r27, r0);

        i3 = i3 + 1;

        $z2 = staticinvoke <org.apache.mahout.clustering.iterator.ClusterIterator: boolean isConverged(org.apache.hadoop.fs.Path,org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FileSystem)>($r26, r0, r36);

        if $z2 == 0 goto label1;

     label5:
        $r11 = new org.apache.hadoop.fs.Path;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("clusters-");

        $i2 = i3 - 1;

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-final");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<org.apache.hadoop.fs.Path: void <init>(org.apache.hadoop.fs.Path,java.lang.String)>(r3, $r16);

        $r19 = virtualinvoke r34.<org.apache.hadoop.fs.Path: java.net.URI toUri()>();

        $r18 = staticinvoke <org.apache.hadoop.fs.FileSystem: org.apache.hadoop.fs.FileSystem get(java.net.URI,org.apache.hadoop.conf.Configuration)>($r19, r0);

        virtualinvoke $r18.<org.apache.hadoop.fs.FileSystem: boolean rename(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)>(r34, $r11);

        return;
    }

    public static void iterateMR(org.apache.hadoop.conf.Configuration, org.apache.hadoop.fs.Path, org.apache.hadoop.fs.Path, org.apache.hadoop.fs.Path, int) throws java.io.IOException, java.lang.InterruptedException, java.lang.ClassNotFoundException
    {
        org.apache.hadoop.conf.Configuration r0;
        org.apache.hadoop.fs.Path r1, r2, $r6, $r20, r34, r35;
        int i0, $i1, i2;
        org.apache.mahout.clustering.iterator.ClusteringPolicy r3;
        org.apache.hadoop.fs.FileSystem r5, $r13;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r15, $r16, $r17, $r18, $r19, $r22, $r24, $r25, $r28, $r29, $r30, $r31, $r33;
        java.net.URI $r11, $r26;
        java.lang.String $r12, $r14, $r23, $r32, r36;
        org.apache.hadoop.mapreduce.Job $r21;
        boolean $z1, $z2;
        java.lang.InterruptedException $r27;

        r0 := @parameter0: org.apache.hadoop.conf.Configuration;

        r1 := @parameter1: org.apache.hadoop.fs.Path;

        r34 := @parameter2: org.apache.hadoop.fs.Path;

        r2 := @parameter3: org.apache.hadoop.fs.Path;

        i0 := @parameter4: int;

        r3 = staticinvoke <org.apache.mahout.clustering.classify.ClusterClassifier: org.apache.mahout.clustering.iterator.ClusteringPolicy readPolicy(org.apache.hadoop.fs.Path)>(r34);

        r35 = null;

        i2 = 1;

     label1:
        if i2 > i0 goto label3;

        $r14 = virtualinvoke r34.<org.apache.hadoop.fs.Path: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.hadoop.conf.Configuration: void set(java.lang.String,java.lang.String)>("org.apache.mahout.clustering.prior.path", $r14);

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cluster Iterator running iteration ");

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" over priorPath: ");

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r34);

        r36 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        $r21 = new org.apache.hadoop.mapreduce.Job;

        specialinvoke $r21.<org.apache.hadoop.mapreduce.Job: void <init>(org.apache.hadoop.conf.Configuration,java.lang.String)>(r0, r36);

        virtualinvoke $r21.<org.apache.hadoop.mapreduce.Job: void setMapOutputKeyClass(java.lang.Class)>(class "org/apache/hadoop/io/IntWritable");

        virtualinvoke $r21.<org.apache.hadoop.mapreduce.Job: void setMapOutputValueClass(java.lang.Class)>(class "org/apache/mahout/clustering/iterator/ClusterWritable");

        virtualinvoke $r21.<org.apache.hadoop.mapreduce.Job: void setOutputKeyClass(java.lang.Class)>(class "org/apache/hadoop/io/IntWritable");

        virtualinvoke $r21.<org.apache.hadoop.mapreduce.Job: void setOutputValueClass(java.lang.Class)>(class "org/apache/mahout/clustering/iterator/ClusterWritable");

        virtualinvoke $r21.<org.apache.hadoop.mapreduce.Job: void setInputFormatClass(java.lang.Class)>(class "org/apache/hadoop/mapreduce/lib/input/SequenceFileInputFormat");

        virtualinvoke $r21.<org.apache.hadoop.mapreduce.Job: void setOutputFormatClass(java.lang.Class)>(class "org/apache/hadoop/mapreduce/lib/output/SequenceFileOutputFormat");

        virtualinvoke $r21.<org.apache.hadoop.mapreduce.Job: void setMapperClass(java.lang.Class)>(class "org/apache/mahout/clustering/iterator/CIMapper");

        virtualinvoke $r21.<org.apache.hadoop.mapreduce.Job: void setReducerClass(java.lang.Class)>(class "org/apache/mahout/clustering/iterator/CIReducer");

        staticinvoke <org.apache.hadoop.mapreduce.lib.input.FileInputFormat: void addInputPath(org.apache.hadoop.mapreduce.Job,org.apache.hadoop.fs.Path)>($r21, r1);

        $r20 = new org.apache.hadoop.fs.Path;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("clusters-");

        $r22 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<org.apache.hadoop.fs.Path: void <init>(org.apache.hadoop.fs.Path,java.lang.String)>(r2, $r23);

        r35 = $r20;

        r34 = $r20;

        staticinvoke <org.apache.hadoop.mapreduce.lib.output.FileOutputFormat: void setOutputPath(org.apache.hadoop.mapreduce.Job,org.apache.hadoop.fs.Path)>($r21, $r20);

        virtualinvoke $r21.<org.apache.hadoop.mapreduce.Job: void setJarByClass(java.lang.Class)>(class "org/apache/mahout/clustering/iterator/ClusterIterator");

        $z2 = virtualinvoke $r21.<org.apache.hadoop.mapreduce.Job: boolean waitForCompletion(boolean)>(1);

        if $z2 != 0 goto label2;

        $r27 = new java.lang.InterruptedException;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cluster Iteration ");

        $r29 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r28 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" failed processing ");

        $r33 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r20);

        $r32 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<java.lang.InterruptedException: void <init>(java.lang.String)>($r32);

        throw $r27;

     label2:
        staticinvoke <org.apache.mahout.clustering.classify.ClusterClassifier: void writePolicy(org.apache.mahout.clustering.iterator.ClusteringPolicy,org.apache.hadoop.fs.Path)>(r3, $r20);

        $r26 = virtualinvoke r2.<org.apache.hadoop.fs.Path: java.net.URI toUri()>();

        r5 = staticinvoke <org.apache.hadoop.fs.FileSystem: org.apache.hadoop.fs.FileSystem get(java.net.URI,org.apache.hadoop.conf.Configuration)>($r26, r0);

        i2 = i2 + 1;

        $z1 = staticinvoke <org.apache.mahout.clustering.iterator.ClusterIterator: boolean isConverged(org.apache.hadoop.fs.Path,org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.FileSystem)>($r20, r0, r5);

        if $z1 == 0 goto label1;

     label3:
        $r6 = new org.apache.hadoop.fs.Path;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("clusters-");

        $i1 = i2 - 1;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-final");

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.apache.hadoop.fs.Path: void <init>(org.apache.hadoop.fs.Path,java.lang.String)>(r2, $r12);

        $r11 = virtualinvoke r35.<org.apache.hadoop.fs.Path: java.net.URI toUri()>();

        $r13 = staticinvoke <org.apache.hadoop.fs.FileSystem: org.apache.hadoop.fs.FileSystem get(java.net.URI,org.apache.hadoop.conf.Configuration)>($r11, r0);

        virtualinvoke $r13.<org.apache.hadoop.fs.FileSystem: boolean rename(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)>(r35, $r6);

        return;
    }

    private static boolean isConverged(org.apache.hadoop.fs.Path, org.apache.hadoop.conf.Configuration, org.apache.hadoop.fs.FileSystem) throws java.io.IOException
    {
        org.apache.hadoop.fs.Path r0, $r9;
        org.apache.hadoop.conf.Configuration r1;
        org.apache.hadoop.fs.FileSystem r2;
        org.apache.hadoop.fs.FileStatus[] r3;
        int i0, i1;
        org.apache.hadoop.fs.FileStatus r4;
        org.apache.mahout.clustering.iterator.ClusterWritable r6;
        org.apache.hadoop.fs.PathFilter $r7;
        org.apache.mahout.common.iterator.sequencefile.SequenceFileValueIterator $r8;
        boolean $z0, $z1;
        org.apache.mahout.clustering.Cluster $r10;
        java.lang.Object $r11;

        r0 := @parameter0: org.apache.hadoop.fs.Path;

        r1 := @parameter1: org.apache.hadoop.conf.Configuration;

        r2 := @parameter2: org.apache.hadoop.fs.FileSystem;

        $r7 = staticinvoke <org.apache.mahout.common.iterator.sequencefile.PathFilters: org.apache.hadoop.fs.PathFilter partFilter()>();

        r3 = virtualinvoke r2.<org.apache.hadoop.fs.FileSystem: org.apache.hadoop.fs.FileStatus[] listStatus(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.PathFilter)>(r0, $r7);

        i0 = lengthof r3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r4 = r3[i1];

        $r8 = new org.apache.mahout.common.iterator.sequencefile.SequenceFileValueIterator;

        $r9 = virtualinvoke r4.<org.apache.hadoop.fs.FileStatus: org.apache.hadoop.fs.Path getPath()>();

        specialinvoke $r8.<org.apache.mahout.common.iterator.sequencefile.SequenceFileValueIterator: void <init>(org.apache.hadoop.fs.Path,boolean,org.apache.hadoop.conf.Configuration)>($r9, 1, r1);

     label2:
        $z0 = virtualinvoke $r8.<org.apache.mahout.common.iterator.sequencefile.SequenceFileValueIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r11 = virtualinvoke $r8.<org.apache.mahout.common.iterator.sequencefile.SequenceFileValueIterator: java.lang.Object next()>();

        r6 = (org.apache.mahout.clustering.iterator.ClusterWritable) $r11;

        $r10 = virtualinvoke r6.<org.apache.mahout.clustering.iterator.ClusterWritable: org.apache.mahout.clustering.Cluster getValue()>();

        $z1 = interfaceinvoke $r10.<org.apache.mahout.clustering.Cluster: boolean isConverged()>();

        if $z1 != 0 goto label2;

        staticinvoke <com.google.common.io.Closeables: void close(java.io.Closeable,boolean)>($r8, 1);

        return 0;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return 1;
    }

    public static void <clinit>()
    {
        <org.apache.mahout.clustering.iterator.ClusterIterator: java.lang.String PRIOR_PATH_KEY> = "org.apache.mahout.clustering.prior.path";

        return;
    }
}
