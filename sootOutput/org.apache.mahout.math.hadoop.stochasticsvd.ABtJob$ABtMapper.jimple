public class org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper extends org.apache.hadoop.mapreduce.Mapper
{
    private org.apache.mahout.math.hadoop.stochasticsvd.SplitPartitionedWritable outKey;
    private final java.util.Deque closeables;
    private org.apache.mahout.common.iterator.sequencefile.SequenceFileDirIterator btInput;
    private org.apache.mahout.math.Vector[] aCols;
    private int aRowCount;
    private int kp;
    private int blockHeight;
    private org.apache.mahout.math.hadoop.stochasticsvd.SparseRowBlockAccumulator yiCollector;

    public void <init>()
    {
        org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper r0;
        java.util.ArrayDeque $r1;

        r0 := @this: org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper;

        specialinvoke r0.<org.apache.hadoop.mapreduce.Mapper: void <init>()>();

        $r1 = new java.util.ArrayDeque;

        specialinvoke $r1.<java.util.ArrayDeque: void <init>()>();

        r0.<org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper: java.util.Deque closeables> = $r1;

        return;
    }

    protected void map(org.apache.hadoop.io.Writable, org.apache.mahout.math.VectorWritable, org.apache.hadoop.mapreduce.Mapper$Context) throws java.io.IOException, java.lang.InterruptedException
    {
        org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper r0;
        org.apache.hadoop.io.Writable r1;
        org.apache.mahout.math.VectorWritable r2;
        org.apache.hadoop.mapreduce.Mapper$Context r3;
        org.apache.mahout.math.Vector r4, $r10, $r13;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11;
        org.apache.mahout.math.Vector$Element r5;
        org.apache.mahout.math.Vector[] $r6, $r7, $r11, $r14, $r15, $r16, $r18;
        java.lang.Iterable $r8;
        boolean $z0, $z1;
        java.lang.Object $r9;
        double $d0, $d1;
        java.lang.Object[] $r17;
        java.util.Iterator r19;

        r0 := @this: org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper;

        r1 := @parameter0: org.apache.hadoop.io.Writable;

        r2 := @parameter1: org.apache.mahout.math.VectorWritable;

        r3 := @parameter2: org.apache.hadoop.mapreduce.Mapper$Context;

        r4 = virtualinvoke r2.<org.apache.mahout.math.VectorWritable: org.apache.mahout.math.Vector get()>();

        i0 = interfaceinvoke r4.<org.apache.mahout.math.Vector: int size()>();

        $r6 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper: org.apache.mahout.math.Vector[] aCols>;

        if $r6 != null goto label1;

        $r16 = newarray (org.apache.mahout.math.Vector)[i0];

        r0.<org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper: org.apache.mahout.math.Vector[] aCols> = $r16;

        goto label2;

     label1:
        $r7 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper: org.apache.mahout.math.Vector[] aCols>;

        $i2 = lengthof $r7;

        if $i2 >= i0 goto label2;

        $r15 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper: org.apache.mahout.math.Vector[] aCols>;

        $r17 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r15, i0);

        $r18 = (org.apache.mahout.math.Vector[]) $r17;

        r0.<org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper: org.apache.mahout.math.Vector[] aCols> = $r18;

     label2:
        $z1 = interfaceinvoke r4.<org.apache.mahout.math.Vector: boolean isDense()>();

        if $z1 == 0 goto label4;

        i11 = 0;

     label3:
        if i11 >= i0 goto label6;

        $i8 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper: int aRowCount>;

        $i10 = $i8 + 1;

        specialinvoke r0.<org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper: void extendAColIfNeeded(int,int)>(i11, $i10);

        $r14 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper: org.apache.mahout.math.Vector[] aCols>;

        $r13 = $r14[i11];

        $i9 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper: int aRowCount>;

        $d1 = interfaceinvoke r4.<org.apache.mahout.math.Vector: double getQuick(int)>(i11);

        interfaceinvoke $r13.<org.apache.mahout.math.Vector: void setQuick(int,double)>($i9, $d1);

        i11 = i11 + 1;

        goto label3;

     label4:
        $r8 = interfaceinvoke r4.<org.apache.mahout.math.Vector: java.lang.Iterable nonZeroes()>();

        r19 = interfaceinvoke $r8.<java.lang.Iterable: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke r19.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r9 = interfaceinvoke r19.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.mahout.math.Vector$Element) $r9;

        i1 = interfaceinvoke r5.<org.apache.mahout.math.Vector$Element: int index()>();

        $i6 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper: int aRowCount>;

        $i5 = $i6 + 1;

        specialinvoke r0.<org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper: void extendAColIfNeeded(int,int)>(i1, $i5);

        $r11 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper: org.apache.mahout.math.Vector[] aCols>;

        $r10 = $r11[i1];

        $i7 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper: int aRowCount>;

        $d0 = interfaceinvoke r5.<org.apache.mahout.math.Vector$Element: double get()>();

        interfaceinvoke $r10.<org.apache.mahout.math.Vector: void setQuick(int,double)>($i7, $d0);

        goto label5;

     label6:
        $i4 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper: int aRowCount>;

        $i3 = $i4 + 1;

        r0.<org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper: int aRowCount> = $i3;

        return;
    }

    private void extendAColIfNeeded(int, int)
    {
        org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i8;
        org.apache.mahout.math.Vector[] $r2, $r4, $r7, $r9, $r13, $r14, $r16;
        org.apache.mahout.math.Vector $r3, $r5, $r8, $r10, $r11, $r12;
        org.apache.mahout.math.SequentialAccessSparseVector $r6, $r17;

        r0 := @this: org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper: org.apache.mahout.math.Vector[] aCols>;

        $r3 = $r2[i0];

        if $r3 != null goto label3;

        $r16 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper: org.apache.mahout.math.Vector[] aCols>;

        $r17 = new org.apache.mahout.math.SequentialAccessSparseVector;

        if i1 >= 10000 goto label1;

        $i8 = 10000;

        goto label2;

     label1:
        $i8 = i1;

     label2:
        specialinvoke $r17.<org.apache.mahout.math.SequentialAccessSparseVector: void <init>(int,int)>($i8, 1);

        $r16[i0] = $r17;

        goto label4;

     label3:
        $r4 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper: org.apache.mahout.math.Vector[] aCols>;

        $r5 = $r4[i0];

        $i2 = interfaceinvoke $r5.<org.apache.mahout.math.Vector: int size()>();

        if $i2 >= i1 goto label4;

        $r6 = new org.apache.mahout.math.SequentialAccessSparseVector;

        $i3 = i1 << 1;

        $r7 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper: org.apache.mahout.math.Vector[] aCols>;

        $r8 = $r7[i0];

        $i4 = interfaceinvoke $r8.<org.apache.mahout.math.Vector: int getNumNondefaultElements()>();

        $i5 = $i4 << 1;

        specialinvoke $r6.<org.apache.mahout.math.SequentialAccessSparseVector: void <init>(int,int)>($i3, $i5);

        $r9 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper: org.apache.mahout.math.Vector[] aCols>;

        $r10 = $r9[i0];

        $i6 = interfaceinvoke $r10.<org.apache.mahout.math.Vector: int size()>();

        $r11 = interfaceinvoke $r6.<org.apache.mahout.math.Vector: org.apache.mahout.math.Vector viewPart(int,int)>(0, $i6);

        $r13 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper: org.apache.mahout.math.Vector[] aCols>;

        $r12 = $r13[i0];

        interfaceinvoke $r11.<org.apache.mahout.math.Vector: org.apache.mahout.math.Vector assign(org.apache.mahout.math.Vector)>($r12);

        $r14 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper: org.apache.mahout.math.Vector[] aCols>;

        $r14[i0] = $r6;

     label4:
        return;
    }

    protected void cleanup(org.apache.hadoop.mapreduce.Mapper$Context) throws java.io.IOException, java.lang.InterruptedException
    {
        org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper r0;
        org.apache.hadoop.mapreduce.Mapper$Context r1;
        int i0, $i1, $i2, $i4, i6, i7, i8;
        org.apache.mahout.math.Vector r2, $r18, $r26;
        java.util.Iterator r4;
        org.apache.mahout.math.Vector$Element r5;
        org.apache.mahout.math.SequentialAccessSparseVector $r7;
        long $l3, $l5;
        java.util.Deque $r8, $r25;
        java.lang.Long $r9, $r22;
        org.apache.mahout.math.hadoop.stochasticsvd.SparseRowBlockAccumulator $r10, $r23;
        java.lang.Object $r11, $r14, $r15, $r21;
        org.apache.mahout.common.iterator.sequencefile.SequenceFileDirIterator $r12, $r27;
        org.apache.hadoop.io.IntWritable $r13;
        org.apache.mahout.math.VectorWritable $r16;
        org.apache.mahout.math.Vector[] $r17, $r20;
        java.lang.Iterable $r19;
        boolean $z0, $z1;
        double $d0;
        java.lang.Throwable $r24;
        org.apache.mahout.common.Pair r28;

        r0 := @this: org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper;

        r1 := @parameter0: org.apache.hadoop.mapreduce.Mapper$Context;

     label01:
        i6 = -1;

     label02:
        $r27 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper: org.apache.mahout.common.iterator.sequencefile.SequenceFileDirIterator btInput>;

        $z1 = virtualinvoke $r27.<org.apache.mahout.common.iterator.sequencefile.SequenceFileDirIterator: boolean hasNext()>();

        if $z1 == 0 goto label06;

        $r12 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper: org.apache.mahout.common.iterator.sequencefile.SequenceFileDirIterator btInput>;

        $r11 = virtualinvoke $r12.<org.apache.mahout.common.iterator.sequencefile.SequenceFileDirIterator: java.lang.Object next()>();

        r28 = (org.apache.mahout.common.Pair) $r11;

        $r14 = virtualinvoke r28.<org.apache.mahout.common.Pair: java.lang.Object getFirst()>();

        $r13 = (org.apache.hadoop.io.IntWritable) $r14;

        i0 = virtualinvoke $r13.<org.apache.hadoop.io.IntWritable: int get()>();

        $r15 = virtualinvoke r28.<org.apache.mahout.common.Pair: java.lang.Object getSecond()>();

        $r16 = (org.apache.mahout.math.VectorWritable) $r15;

        r2 = virtualinvoke $r16.<org.apache.mahout.math.VectorWritable: org.apache.mahout.math.Vector get()>();

        $r17 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper: org.apache.mahout.math.Vector[] aCols>;

        $i4 = lengthof $r17;

        if i0 > $i4 goto label02;

        $r20 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper: org.apache.mahout.math.Vector[] aCols>;

        $r18 = $r20[i0];

        if $r18 != null goto label03;

        goto label02;

     label03:
        i7 = -1;

        $r19 = interfaceinvoke $r18.<org.apache.mahout.math.Vector: java.lang.Iterable nonZeroes()>();

        r4 = interfaceinvoke $r19.<java.lang.Iterable: java.util.Iterator iterator()>();

     label04:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label05;

        $r21 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.mahout.math.Vector$Element) $r21;

        i7 = interfaceinvoke r5.<org.apache.mahout.math.Vector$Element: int index()>();

        $r23 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper: org.apache.mahout.math.hadoop.stochasticsvd.SparseRowBlockAccumulator yiCollector>;

        $l5 = (long) i7;

        $r22 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l5);

        $d0 = interfaceinvoke r5.<org.apache.mahout.math.Vector$Element: double get()>();

        $r26 = interfaceinvoke r2.<org.apache.mahout.math.Vector: org.apache.mahout.math.Vector times(double)>($d0);

        virtualinvoke $r23.<org.apache.mahout.math.hadoop.stochasticsvd.SparseRowBlockAccumulator: void collect(java.lang.Long,org.apache.mahout.math.Vector)>($r22, $r26);

        goto label04;

     label05:
        if i6 >= i7 goto label02;

        i6 = i7;

        goto label02;

     label06:
        r0.<org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper: org.apache.mahout.math.Vector[] aCols> = null;

        $r7 = new org.apache.mahout.math.SequentialAccessSparseVector;

        $i1 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper: int kp>;

        specialinvoke $r7.<org.apache.mahout.math.SequentialAccessSparseVector: void <init>(int)>($i1);

        i8 = i6 + 1;

     label07:
        $i2 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper: int aRowCount>;

        if i8 >= $i2 goto label08;

        $r10 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper: org.apache.mahout.math.hadoop.stochasticsvd.SparseRowBlockAccumulator yiCollector>;

        $l3 = (long) i8;

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        virtualinvoke $r10.<org.apache.mahout.math.hadoop.stochasticsvd.SparseRowBlockAccumulator: void collect(java.lang.Long,org.apache.mahout.math.Vector)>($r9, $r7);

        i8 = i8 + 1;

        goto label07;

     label08:
        $r8 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper: java.util.Deque closeables>;

        staticinvoke <org.apache.mahout.common.IOUtils: void close(java.util.Collection)>($r8);

        goto label11;

     label09:
        $r24 := @caughtexception;

     label10:
        $r25 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper: java.util.Deque closeables>;

        staticinvoke <org.apache.mahout.common.IOUtils: void close(java.util.Collection)>($r25);

        throw $r24;

     label11:
        return;

        catch java.lang.Throwable from label01 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    protected void setup(org.apache.hadoop.mapreduce.Mapper$Context) throws java.io.IOException, java.lang.InterruptedException
    {
        org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper r0;
        org.apache.hadoop.mapreduce.Mapper$Context r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, i7;
        java.lang.String r2, $r8, $r9, $r16, $r33;
        org.apache.hadoop.fs.Path r6, $r14, $r30;
        org.apache.hadoop.conf.Configuration $r7, $r10, $r11, $r17, $r22, $r25, $r27, $r34;
        org.apache.mahout.math.hadoop.stochasticsvd.SplitPartitionedWritable $r12;
        java.lang.Object[] $r13;
        org.apache.mahout.common.iterator.sequencefile.PathType $r18, $r32;
        org.apache.mahout.common.iterator.sequencefile.SequenceFileDirIterator $r19, $r20, $r29;
        java.util.Deque $r21, $r26;
        org.apache.mahout.math.hadoop.stochasticsvd.SparseRowBlockAccumulator $r23, $r28;
        org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper$1 $r24;
        java.lang.StringBuilder $r31;
        boolean $z1;
        org.apache.hadoop.fs.Path[] r37;

        r0 := @this: org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper;

        r1 := @parameter0: org.apache.hadoop.mapreduce.Mapper$Context;

        $r7 = virtualinvoke r1.<org.apache.hadoop.mapreduce.Mapper$Context: org.apache.hadoop.conf.Configuration getConfiguration()>();

        $r8 = virtualinvoke $r7.<org.apache.hadoop.conf.Configuration: java.lang.String get(java.lang.String)>("ssvd.k");

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r8);

        $r10 = virtualinvoke r1.<org.apache.hadoop.mapreduce.Mapper$Context: org.apache.hadoop.conf.Configuration getConfiguration()>();

        $r9 = virtualinvoke $r10.<org.apache.hadoop.conf.Configuration: java.lang.String get(java.lang.String)>("ssvd.p");

        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r9);

        $i3 = i0 + i1;

        r0.<org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper: int kp> = $i3;

        $r12 = new org.apache.mahout.math.hadoop.stochasticsvd.SplitPartitionedWritable;

        specialinvoke $r12.<org.apache.mahout.math.hadoop.stochasticsvd.SplitPartitionedWritable: void <init>(org.apache.hadoop.mapreduce.Mapper$Context)>(r1);

        r0.<org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper: org.apache.mahout.math.hadoop.stochasticsvd.SplitPartitionedWritable outKey> = $r12;

        $r11 = virtualinvoke r1.<org.apache.hadoop.mapreduce.Mapper$Context: org.apache.hadoop.conf.Configuration getConfiguration()>();

        r2 = virtualinvoke $r11.<org.apache.hadoop.conf.Configuration: java.lang.String get(java.lang.String)>("ssvd.Bt.path");

        $r13 = newarray (java.lang.Object)[0];

        staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(r2, "Bt input is not set", $r13);

        $r14 = new org.apache.hadoop.fs.Path;

        specialinvoke $r14.<org.apache.hadoop.fs.Path: void <init>(java.lang.String)>(r2);

        $r17 = virtualinvoke r1.<org.apache.hadoop.mapreduce.Mapper$Context: org.apache.hadoop.conf.Configuration getConfiguration()>();

        $r16 = virtualinvoke $r17.<org.apache.hadoop.conf.Configuration: java.lang.String get(java.lang.String)>("ssvd.Bt.broadcast");

        if $r16 == null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        if $z1 == 0 goto label6;

        $r27 = virtualinvoke r1.<org.apache.hadoop.mapreduce.Mapper$Context: org.apache.hadoop.conf.Configuration getConfiguration()>();

        r37 = staticinvoke <org.apache.mahout.common.HadoopUtil: org.apache.hadoop.fs.Path[] getCachedFiles(org.apache.hadoop.conf.Configuration)>($r27);

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        i2 = lengthof r37;

        i7 = 0;

     label3:
        if i7 >= i2 goto label5;

        r6 = r37[i7];

        $i6 = virtualinvoke $r31.<java.lang.StringBuilder: int length()>();

        if $i6 <= 0 goto label4;

        virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

     label4:
        virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        i7 = i7 + 1;

        goto label3;

     label5:
        $r29 = new org.apache.mahout.common.iterator.sequencefile.SequenceFileDirIterator;

        $r30 = new org.apache.hadoop.fs.Path;

        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<org.apache.hadoop.fs.Path: void <init>(java.lang.String)>($r33);

        $r32 = <org.apache.mahout.common.iterator.sequencefile.PathType: org.apache.mahout.common.iterator.sequencefile.PathType LIST>;

        $r34 = virtualinvoke r1.<org.apache.hadoop.mapreduce.Mapper$Context: org.apache.hadoop.conf.Configuration getConfiguration()>();

        specialinvoke $r29.<org.apache.mahout.common.iterator.sequencefile.SequenceFileDirIterator: void <init>(org.apache.hadoop.fs.Path,org.apache.mahout.common.iterator.sequencefile.PathType,org.apache.hadoop.fs.PathFilter,java.util.Comparator,boolean,org.apache.hadoop.conf.Configuration)>($r30, $r32, null, null, 1, $r34);

        r0.<org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper: org.apache.mahout.common.iterator.sequencefile.SequenceFileDirIterator btInput> = $r29;

        goto label7;

     label6:
        $r19 = new org.apache.mahout.common.iterator.sequencefile.SequenceFileDirIterator;

        $r18 = <org.apache.mahout.common.iterator.sequencefile.PathType: org.apache.mahout.common.iterator.sequencefile.PathType GLOB>;

        $r22 = virtualinvoke r1.<org.apache.hadoop.mapreduce.Mapper$Context: org.apache.hadoop.conf.Configuration getConfiguration()>();

        specialinvoke $r19.<org.apache.mahout.common.iterator.sequencefile.SequenceFileDirIterator: void <init>(org.apache.hadoop.fs.Path,org.apache.mahout.common.iterator.sequencefile.PathType,org.apache.hadoop.fs.PathFilter,java.util.Comparator,boolean,org.apache.hadoop.conf.Configuration)>($r14, $r18, null, null, 1, $r22);

        r0.<org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper: org.apache.mahout.common.iterator.sequencefile.SequenceFileDirIterator btInput> = $r19;

     label7:
        $r21 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper: java.util.Deque closeables>;

        $r20 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper: org.apache.mahout.common.iterator.sequencefile.SequenceFileDirIterator btInput>;

        interfaceinvoke $r21.<java.util.Deque: void addFirst(java.lang.Object)>($r20);

        $r24 = new org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper$1;

        specialinvoke $r24.<org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper$1: void <init>(org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper,org.apache.hadoop.mapreduce.Mapper$Context)>(r0, r1);

        $r25 = virtualinvoke r1.<org.apache.hadoop.mapreduce.Mapper$Context: org.apache.hadoop.conf.Configuration getConfiguration()>();

        $i4 = virtualinvoke $r25.<org.apache.hadoop.conf.Configuration: int getInt(java.lang.String,int)>("ssvd.outerProdBlockHeight", -1);

        r0.<org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper: int blockHeight> = $i4;

        $r23 = new org.apache.mahout.math.hadoop.stochasticsvd.SparseRowBlockAccumulator;

        $i5 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper: int blockHeight>;

        specialinvoke $r23.<org.apache.mahout.math.hadoop.stochasticsvd.SparseRowBlockAccumulator: void <init>(int,org.apache.hadoop.mapred.OutputCollector)>($i5, $r24);

        r0.<org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper: org.apache.mahout.math.hadoop.stochasticsvd.SparseRowBlockAccumulator yiCollector> = $r23;

        $r26 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper: java.util.Deque closeables>;

        $r28 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper: org.apache.mahout.math.hadoop.stochasticsvd.SparseRowBlockAccumulator yiCollector>;

        interfaceinvoke $r26.<java.util.Deque: void addFirst(java.lang.Object)>($r28);

        return;
    }

    protected volatile void map(java.lang.Object, java.lang.Object, org.apache.hadoop.mapreduce.Mapper$Context) throws java.io.IOException, java.lang.InterruptedException
    {
        org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper r0;
        java.lang.Object r1, r2;
        org.apache.hadoop.mapreduce.Mapper$Context r3;
        org.apache.mahout.math.VectorWritable $r4;
        org.apache.hadoop.io.Writable $r5;

        r0 := @this: org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: org.apache.hadoop.mapreduce.Mapper$Context;

        $r5 = (org.apache.hadoop.io.Writable) r1;

        $r4 = (org.apache.mahout.math.VectorWritable) r2;

        virtualinvoke r0.<org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper: void map(org.apache.hadoop.io.Writable,org.apache.mahout.math.VectorWritable,org.apache.hadoop.mapreduce.Mapper$Context)>($r5, $r4, r3);

        return;
    }

    static org.apache.mahout.math.hadoop.stochasticsvd.SplitPartitionedWritable access$000(org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper)
    {
        org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper r0;
        org.apache.mahout.math.hadoop.stochasticsvd.SplitPartitionedWritable $r1;

        r0 := @parameter0: org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper;

        $r1 = r0.<org.apache.mahout.math.hadoop.stochasticsvd.ABtJob$ABtMapper: org.apache.mahout.math.hadoop.stochasticsvd.SplitPartitionedWritable outKey>;

        return $r1;
    }
}
