public class org.apache.mahout.classifier.naivebayes.training.ComplementaryThetaTrainer extends java.lang.Object
{
    private final org.apache.mahout.math.Vector weightsPerFeature;
    private final org.apache.mahout.math.Vector weightsPerLabel;
    private final org.apache.mahout.math.Vector perLabelThetaNormalizer;
    private final double alphaI;
    private final double totalWeightSum;
    private final double numFeatures;

    public void <init>(org.apache.mahout.math.Vector, org.apache.mahout.math.Vector, double)
    {
        org.apache.mahout.classifier.naivebayes.training.ComplementaryThetaTrainer r0;
        org.apache.mahout.math.Vector r1, r2, $r5;
        double d0, $d1, $d2;
        int $i0;

        r0 := @this: org.apache.mahout.classifier.naivebayes.training.ComplementaryThetaTrainer;

        r1 := @parameter0: org.apache.mahout.math.Vector;

        r2 := @parameter1: org.apache.mahout.math.Vector;

        d0 := @parameter2: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        r0.<org.apache.mahout.classifier.naivebayes.training.ComplementaryThetaTrainer: org.apache.mahout.math.Vector weightsPerFeature> = r1;

        r0.<org.apache.mahout.classifier.naivebayes.training.ComplementaryThetaTrainer: org.apache.mahout.math.Vector weightsPerLabel> = r2;

        r0.<org.apache.mahout.classifier.naivebayes.training.ComplementaryThetaTrainer: double alphaI> = d0;

        $r5 = interfaceinvoke r2.<org.apache.mahout.math.Vector: org.apache.mahout.math.Vector like()>();

        r0.<org.apache.mahout.classifier.naivebayes.training.ComplementaryThetaTrainer: org.apache.mahout.math.Vector perLabelThetaNormalizer> = $r5;

        $d1 = interfaceinvoke r2.<org.apache.mahout.math.Vector: double zSum()>();

        r0.<org.apache.mahout.classifier.naivebayes.training.ComplementaryThetaTrainer: double totalWeightSum> = $d1;

        $i0 = interfaceinvoke r1.<org.apache.mahout.math.Vector: int getNumNondefaultElements()>();

        $d2 = (double) $i0;

        r0.<org.apache.mahout.classifier.naivebayes.training.ComplementaryThetaTrainer: double numFeatures> = $d2;

        return;
    }

    public void train(int, org.apache.mahout.math.Vector)
    {
        org.apache.mahout.classifier.naivebayes.training.ComplementaryThetaTrainer r0;
        int i0, $i1, $i2, i3;
        org.apache.mahout.math.Vector r1;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6;
        org.apache.mahout.math.Vector$Element r2;

        r0 := @this: org.apache.mahout.classifier.naivebayes.training.ComplementaryThetaTrainer;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.mahout.math.Vector;

        d0 = virtualinvoke r0.<org.apache.mahout.classifier.naivebayes.training.ComplementaryThetaTrainer: double labelWeight(int)>(i0);

        i3 = 0;

     label1:
        $i1 = interfaceinvoke r1.<org.apache.mahout.math.Vector: int size()>();

        if i3 >= $i1 goto label2;

        r2 = interfaceinvoke r1.<org.apache.mahout.math.Vector: org.apache.mahout.math.Vector$Element getElement(int)>(i3);

        $i2 = interfaceinvoke r2.<org.apache.mahout.math.Vector$Element: int index()>();

        $d1 = virtualinvoke r0.<org.apache.mahout.classifier.naivebayes.training.ComplementaryThetaTrainer: double featureWeight(int)>($i2);

        $d2 = interfaceinvoke r2.<org.apache.mahout.math.Vector$Element: double get()>();

        $d3 = virtualinvoke r0.<org.apache.mahout.classifier.naivebayes.training.ComplementaryThetaTrainer: double totalWeightSum()>();

        $d4 = virtualinvoke r0.<org.apache.mahout.classifier.naivebayes.training.ComplementaryThetaTrainer: double alphaI()>();

        $d5 = virtualinvoke r0.<org.apache.mahout.classifier.naivebayes.training.ComplementaryThetaTrainer: double numFeatures()>();

        $d6 = staticinvoke <org.apache.mahout.classifier.naivebayes.ComplementaryNaiveBayesClassifier: double computeWeight(double,double,double,double,double,double)>($d1, $d2, $d3, d0, $d4, $d5);

        virtualinvoke r0.<org.apache.mahout.classifier.naivebayes.training.ComplementaryThetaTrainer: void updatePerLabelThetaNormalizer(int,double)>(i0, $d6);

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    protected double alphaI()
    {
        org.apache.mahout.classifier.naivebayes.training.ComplementaryThetaTrainer r0;
        double $d0;

        r0 := @this: org.apache.mahout.classifier.naivebayes.training.ComplementaryThetaTrainer;

        $d0 = r0.<org.apache.mahout.classifier.naivebayes.training.ComplementaryThetaTrainer: double alphaI>;

        return $d0;
    }

    protected double numFeatures()
    {
        org.apache.mahout.classifier.naivebayes.training.ComplementaryThetaTrainer r0;
        double $d0;

        r0 := @this: org.apache.mahout.classifier.naivebayes.training.ComplementaryThetaTrainer;

        $d0 = r0.<org.apache.mahout.classifier.naivebayes.training.ComplementaryThetaTrainer: double numFeatures>;

        return $d0;
    }

    protected double labelWeight(int)
    {
        org.apache.mahout.classifier.naivebayes.training.ComplementaryThetaTrainer r0;
        int i0;
        org.apache.mahout.math.Vector $r1;
        double $d0;

        r0 := @this: org.apache.mahout.classifier.naivebayes.training.ComplementaryThetaTrainer;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.mahout.classifier.naivebayes.training.ComplementaryThetaTrainer: org.apache.mahout.math.Vector weightsPerLabel>;

        $d0 = interfaceinvoke $r1.<org.apache.mahout.math.Vector: double get(int)>(i0);

        return $d0;
    }

    protected double totalWeightSum()
    {
        org.apache.mahout.classifier.naivebayes.training.ComplementaryThetaTrainer r0;
        double $d0;

        r0 := @this: org.apache.mahout.classifier.naivebayes.training.ComplementaryThetaTrainer;

        $d0 = r0.<org.apache.mahout.classifier.naivebayes.training.ComplementaryThetaTrainer: double totalWeightSum>;

        return $d0;
    }

    protected double featureWeight(int)
    {
        org.apache.mahout.classifier.naivebayes.training.ComplementaryThetaTrainer r0;
        int i0;
        org.apache.mahout.math.Vector $r1;
        double $d0;

        r0 := @this: org.apache.mahout.classifier.naivebayes.training.ComplementaryThetaTrainer;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.mahout.classifier.naivebayes.training.ComplementaryThetaTrainer: org.apache.mahout.math.Vector weightsPerFeature>;

        $d0 = interfaceinvoke $r1.<org.apache.mahout.math.Vector: double get(int)>(i0);

        return $d0;
    }

    protected void updatePerLabelThetaNormalizer(int, double)
    {
        org.apache.mahout.classifier.naivebayes.training.ComplementaryThetaTrainer r0;
        int i0;
        double d0, $d1, $d2, $d3;
        org.apache.mahout.math.Vector $r1, $r2;

        r0 := @this: org.apache.mahout.classifier.naivebayes.training.ComplementaryThetaTrainer;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        $r2 = r0.<org.apache.mahout.classifier.naivebayes.training.ComplementaryThetaTrainer: org.apache.mahout.math.Vector perLabelThetaNormalizer>;

        $r1 = r0.<org.apache.mahout.classifier.naivebayes.training.ComplementaryThetaTrainer: org.apache.mahout.math.Vector perLabelThetaNormalizer>;

        $d1 = interfaceinvoke $r1.<org.apache.mahout.math.Vector: double get(int)>(i0);

        $d2 = staticinvoke <java.lang.Math: double abs(double)>(d0);

        $d3 = $d1 + $d2;

        interfaceinvoke $r2.<org.apache.mahout.math.Vector: void set(int,double)>(i0, $d3);

        return;
    }

    public org.apache.mahout.math.Vector retrievePerLabelThetaNormalizer()
    {
        org.apache.mahout.classifier.naivebayes.training.ComplementaryThetaTrainer r0;
        org.apache.mahout.math.Vector $r1, $r2;

        r0 := @this: org.apache.mahout.classifier.naivebayes.training.ComplementaryThetaTrainer;

        $r1 = r0.<org.apache.mahout.classifier.naivebayes.training.ComplementaryThetaTrainer: org.apache.mahout.math.Vector perLabelThetaNormalizer>;

        $r2 = interfaceinvoke $r1.<org.apache.mahout.math.Vector: org.apache.mahout.math.Vector clone()>();

        return $r2;
    }
}
