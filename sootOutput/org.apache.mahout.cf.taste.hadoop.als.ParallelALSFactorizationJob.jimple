public class org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob extends org.apache.mahout.common.AbstractJob
{
    private static final org.slf4j.Logger log;
    static final java.lang.String NUM_FEATURES;
    static final java.lang.String LAMBDA;
    static final java.lang.String ALPHA;
    static final java.lang.String NUM_ENTITIES;
    static final java.lang.String USES_LONG_IDS;
    static final java.lang.String TOKEN_POS;
    private boolean implicitFeedback;
    private int numIterations;
    private int numFeatures;
    private double lambda;
    private double alpha;
    private int numThreadsPerSolver;

    public void <init>()
    {
        org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob r0;

        r0 := @this: org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob;

        specialinvoke r0.<org.apache.mahout.common.AbstractJob: void <init>()>();

        return;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        java.lang.String[] r0;
        org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob $r1;

        r0 := @parameter0: java.lang.String[];

        $r1 = new org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob;

        specialinvoke $r1.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: void <init>()>();

        staticinvoke <org.apache.hadoop.util.ToolRunner: int run(org.apache.hadoop.util.Tool,java.lang.String[])>($r1, r0);

        return;
    }

    public int run(java.lang.String[]) throws java.lang.Exception
    {
        org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob r0;
        java.lang.String[] r1;
        java.util.Map r2;
        boolean z0, $z1, z4, z5, z6;
        org.apache.hadoop.mapreduce.Job r3, r4, r56, r57, r58;
        org.apache.mahout.math.Vector r5;
        int i0, i1, $i2, $i3, $i4, $i6, $i7, $i8, $i9, i10;
        java.lang.String $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r19, $r21, $r46, $r47, $r52, $r54;
        double $d0, $d1;
        org.apache.hadoop.fs.Path $r17, $r18, $r22, $r23, $r24, $r25, $r27, $r36, $r39, $r40, $r41, $r42, $r44, $r48, $r49, $r50, $r55;
        org.apache.hadoop.conf.Configuration $r20, $r26, $r51, $r53;
        long $l5;
        org.apache.hadoop.mapreduce.Counter $r28;
        org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob$Stats $r29;
        org.apache.hadoop.mapreduce.Counters $r30;
        org.slf4j.Logger $r31, $r33, $r37;
        java.lang.Integer $r32, $r34, $r35, $r38, $r43, $r45;

        r0 := @this: org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob;

        r1 := @parameter0: java.lang.String[];

        virtualinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: void addInputOption()>();

        virtualinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: void addOutputOption()>();

        virtualinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: void addOption(java.lang.String,java.lang.String,java.lang.String,boolean)>("lambda", null, "regularization parameter", 1);

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>(0);

        virtualinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: void addOption(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("implicitFeedback", null, "data consists of implicit feedback?", $r6);

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(40);

        virtualinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: void addOption(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("alpha", null, "confidence parameter (only used on implicit feedback)", $r7);

        virtualinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: void addOption(java.lang.String,java.lang.String,java.lang.String,boolean)>("numFeatures", null, "dimension of the feature space", 1);

        virtualinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: void addOption(java.lang.String,java.lang.String,java.lang.String,boolean)>("numIterations", null, "number of iterations", 1);

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(1);

        virtualinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: void addOption(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("numThreadsPerSolver", null, "threads per solver mapper", $r8);

        virtualinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: void addOption(java.lang.String,java.lang.String,java.lang.String)>("usesLongIDs", null, "input contains long IDs that need to be translated");

        r2 = virtualinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: java.util.Map parseArguments(java.lang.String[])>(r1);

        if r2 != null goto label1;

        return -1;

     label1:
        $r9 = virtualinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: java.lang.String getOption(java.lang.String)>("numFeatures");

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r9);

        r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: int numFeatures> = $i2;

        $r10 = virtualinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: java.lang.String getOption(java.lang.String)>("numIterations");

        $i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r10);

        r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: int numIterations> = $i3;

        $r11 = virtualinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: java.lang.String getOption(java.lang.String)>("lambda");

        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r11);

        r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: double lambda> = $d0;

        $r12 = virtualinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: java.lang.String getOption(java.lang.String)>("alpha");

        $d1 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r12);

        r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: double alpha> = $d1;

        $r14 = virtualinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: java.lang.String getOption(java.lang.String)>("implicitFeedback");

        $z1 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r14);

        r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: boolean implicitFeedback> = $z1;

        $r13 = virtualinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: java.lang.String getOption(java.lang.String)>("numThreadsPerSolver");

        $i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r13);

        r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: int numThreadsPerSolver> = $i4;

        $r15 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>(0);

        $r16 = virtualinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: java.lang.String getOption(java.lang.String,java.lang.String)>("usesLongIDs", $r15);

        z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r16);

        if z0 == 0 goto label2;

        $r50 = virtualinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: org.apache.hadoop.fs.Path getInputPath()>();

        $r49 = virtualinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: org.apache.hadoop.fs.Path getOutputPath(java.lang.String)>("userIDIndex");

        r56 = virtualinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: org.apache.hadoop.mapreduce.Job prepareJob(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,java.lang.Class,java.lang.Class,java.lang.Class,java.lang.Class,java.lang.Class,java.lang.Class,java.lang.Class,java.lang.Class)>($r50, $r49, class "org/apache/hadoop/mapreduce/lib/input/TextInputFormat", class "org/apache/mahout/cf/taste/hadoop/als/ParallelALSFactorizationJob$MapLongIDsMapper", class "org/apache/mahout/math/VarIntWritable", class "org/apache/mahout/math/VarLongWritable", class "org/apache/mahout/cf/taste/hadoop/als/ParallelALSFactorizationJob$IDMapReducer", class "org/apache/mahout/math/VarIntWritable", class "org/apache/mahout/math/VarLongWritable", class "org/apache/hadoop/mapreduce/lib/output/SequenceFileOutputFormat");

        $r51 = virtualinvoke r56.<org.apache.hadoop.mapreduce.Job: org.apache.hadoop.conf.Configuration getConfiguration()>();

        $r47 = <org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: java.lang.String TOKEN_POS>;

        $r46 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(0);

        virtualinvoke $r51.<org.apache.hadoop.conf.Configuration: void set(java.lang.String,java.lang.String)>($r47, $r46);

        virtualinvoke r56.<org.apache.hadoop.mapreduce.Job: boolean waitForCompletion(boolean)>(1);

        $r48 = virtualinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: org.apache.hadoop.fs.Path getInputPath()>();

        $r55 = virtualinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: org.apache.hadoop.fs.Path getOutputPath(java.lang.String)>("itemIDIndex");

        r57 = virtualinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: org.apache.hadoop.mapreduce.Job prepareJob(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,java.lang.Class,java.lang.Class,java.lang.Class,java.lang.Class,java.lang.Class,java.lang.Class,java.lang.Class,java.lang.Class)>($r48, $r55, class "org/apache/hadoop/mapreduce/lib/input/TextInputFormat", class "org/apache/mahout/cf/taste/hadoop/als/ParallelALSFactorizationJob$MapLongIDsMapper", class "org/apache/mahout/math/VarIntWritable", class "org/apache/mahout/math/VarLongWritable", class "org/apache/mahout/cf/taste/hadoop/als/ParallelALSFactorizationJob$IDMapReducer", class "org/apache/mahout/math/VarIntWritable", class "org/apache/mahout/math/VarLongWritable", class "org/apache/hadoop/mapreduce/lib/output/SequenceFileOutputFormat");

        $r53 = virtualinvoke r57.<org.apache.hadoop.mapreduce.Job: org.apache.hadoop.conf.Configuration getConfiguration()>();

        $r54 = <org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: java.lang.String TOKEN_POS>;

        $r52 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(1);

        virtualinvoke $r53.<org.apache.hadoop.conf.Configuration: void set(java.lang.String,java.lang.String)>($r54, $r52);

        virtualinvoke r57.<org.apache.hadoop.mapreduce.Job: boolean waitForCompletion(boolean)>(1);

     label2:
        $r18 = virtualinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: org.apache.hadoop.fs.Path getInputPath()>();

        $r17 = specialinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: org.apache.hadoop.fs.Path pathToItemRatings()>();

        r58 = virtualinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: org.apache.hadoop.mapreduce.Job prepareJob(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,java.lang.Class,java.lang.Class,java.lang.Class,java.lang.Class,java.lang.Class,java.lang.Class,java.lang.Class,java.lang.Class)>($r18, $r17, class "org/apache/hadoop/mapreduce/lib/input/TextInputFormat", class "org/apache/mahout/cf/taste/hadoop/als/ParallelALSFactorizationJob$ItemRatingVectorsMapper", class "org/apache/hadoop/io/IntWritable", class "org/apache/mahout/math/VectorWritable", class "org/apache/mahout/cf/taste/hadoop/als/ParallelALSFactorizationJob$VectorSumReducer", class "org/apache/hadoop/io/IntWritable", class "org/apache/mahout/math/VectorWritable", class "org/apache/hadoop/mapreduce/lib/output/SequenceFileOutputFormat");

        virtualinvoke r58.<org.apache.hadoop.mapreduce.Job: void setCombinerClass(java.lang.Class)>(class "org/apache/mahout/common/mapreduce/VectorSumCombiner");

        $r20 = virtualinvoke r58.<org.apache.hadoop.mapreduce.Job: org.apache.hadoop.conf.Configuration getConfiguration()>();

        $r21 = <org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: java.lang.String USES_LONG_IDS>;

        $r19 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>(z0);

        virtualinvoke $r20.<org.apache.hadoop.conf.Configuration: void set(java.lang.String,java.lang.String)>($r21, $r19);

        z4 = virtualinvoke r58.<org.apache.hadoop.mapreduce.Job: boolean waitForCompletion(boolean)>(1);

        if z4 != 0 goto label3;

        return -1;

     label3:
        $r23 = specialinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: org.apache.hadoop.fs.Path pathToItemRatings()>();

        $r22 = specialinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: org.apache.hadoop.fs.Path pathToUserRatings()>();

        r3 = virtualinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: org.apache.hadoop.mapreduce.Job prepareJob(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,java.lang.Class,java.lang.Class,java.lang.Class,java.lang.Class,java.lang.Class,java.lang.Class)>($r23, $r22, class "org/apache/mahout/common/mapreduce/TransposeMapper", class "org/apache/hadoop/io/IntWritable", class "org/apache/mahout/math/VectorWritable", class "org/apache/mahout/cf/taste/hadoop/als/ParallelALSFactorizationJob$MergeUserVectorsReducer", class "org/apache/hadoop/io/IntWritable", class "org/apache/mahout/math/VectorWritable");

        virtualinvoke r3.<org.apache.hadoop.mapreduce.Job: void setCombinerClass(java.lang.Class)>(class "org/apache/mahout/common/mapreduce/MergeVectorsCombiner");

        z5 = virtualinvoke r3.<org.apache.hadoop.mapreduce.Job: boolean waitForCompletion(boolean)>(1);

        if z5 != 0 goto label4;

        return -1;

     label4:
        $r25 = specialinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: org.apache.hadoop.fs.Path pathToItemRatings()>();

        $r24 = virtualinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: org.apache.hadoop.fs.Path getTempPath(java.lang.String)>("averageRatings");

        r4 = virtualinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: org.apache.hadoop.mapreduce.Job prepareJob(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,java.lang.Class,java.lang.Class,java.lang.Class,java.lang.Class,java.lang.Class,java.lang.Class)>($r25, $r24, class "org/apache/mahout/cf/taste/hadoop/als/ParallelALSFactorizationJob$AverageRatingMapper", class "org/apache/hadoop/io/IntWritable", class "org/apache/mahout/math/VectorWritable", class "org/apache/mahout/common/mapreduce/MergeVectorsReducer", class "org/apache/hadoop/io/IntWritable", class "org/apache/mahout/math/VectorWritable");

        virtualinvoke r4.<org.apache.hadoop.mapreduce.Job: void setCombinerClass(java.lang.Class)>(class "org/apache/mahout/common/mapreduce/MergeVectorsCombiner");

        z6 = virtualinvoke r4.<org.apache.hadoop.mapreduce.Job: boolean waitForCompletion(boolean)>(1);

        if z6 != 0 goto label5;

        return -1;

     label5:
        $r27 = virtualinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: org.apache.hadoop.fs.Path getTempPath(java.lang.String)>("averageRatings");

        $r26 = virtualinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: org.apache.hadoop.conf.Configuration getConf()>();

        r5 = staticinvoke <org.apache.mahout.cf.taste.hadoop.als.ALS: org.apache.mahout.math.Vector readFirstRow(org.apache.hadoop.fs.Path,org.apache.hadoop.conf.Configuration)>($r27, $r26);

        i0 = interfaceinvoke r5.<org.apache.mahout.math.Vector: int getNumNondefaultElements()>();

        $r30 = virtualinvoke r3.<org.apache.hadoop.mapreduce.Job: org.apache.hadoop.mapreduce.Counters getCounters()>();

        $r29 = <org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob$Stats: org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob$Stats NUM_USERS>;

        $r28 = virtualinvoke $r30.<org.apache.hadoop.mapreduce.Counters: org.apache.hadoop.mapreduce.Counter findCounter(java.lang.Enum)>($r29);

        $l5 = interfaceinvoke $r28.<org.apache.hadoop.mapreduce.Counter: long getValue()>();

        i1 = (int) $l5;

        $r33 = <org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: org.slf4j.Logger log>;

        $r34 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r35 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r33.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Found {} users and {} items", $r34, $r35);

        specialinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: void initializeM(org.apache.mahout.math.Vector)>(r5);

        i10 = 0;

     label6:
        $i6 = r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: int numIterations>;

        if i10 >= $i6 goto label7;

        $r31 = <org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: org.slf4j.Logger log>;

        $r32 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i10);

        $i8 = r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: int numIterations>;

        $r38 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);

        interfaceinvoke $r31.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Recomputing U (iteration {}/{})", $r32, $r38);

        $r39 = specialinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: org.apache.hadoop.fs.Path pathToUserRatings()>();

        $r40 = specialinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: org.apache.hadoop.fs.Path pathToU(int)>(i10);

        $i7 = i10 - 1;

        $r36 = specialinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: org.apache.hadoop.fs.Path pathToM(int)>($i7);

        specialinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: void runSolver(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,int,java.lang.String,int)>($r39, $r40, $r36, i10, "U", i0);

        $r37 = <org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: org.slf4j.Logger log>;

        $r43 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i10);

        $i9 = r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: int numIterations>;

        $r45 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9);

        interfaceinvoke $r37.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Recomputing M (iteration {}/{})", $r43, $r45);

        $r44 = specialinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: org.apache.hadoop.fs.Path pathToItemRatings()>();

        $r42 = specialinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: org.apache.hadoop.fs.Path pathToM(int)>(i10);

        $r41 = specialinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: org.apache.hadoop.fs.Path pathToU(int)>(i10);

        specialinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: void runSolver(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,int,java.lang.String,int)>($r44, $r42, $r41, i10, "M", i1);

        i10 = i10 + 1;

        goto label6;

     label7:
        return 0;
    }

    private void initializeM(org.apache.mahout.math.Vector) throws java.io.IOException
    {
        org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob r0;
        org.apache.mahout.math.Vector r1;
        org.apache.mahout.common.RandomWrapper r2;
        org.apache.hadoop.fs.FileSystem r3;
        java.util.Iterator r6;
        org.apache.mahout.math.Vector$Element r7;
        org.apache.hadoop.fs.Path $r11, $r15, $r18;
        org.apache.hadoop.conf.Configuration $r12, $r16;
        java.net.URI $r13;
        org.apache.hadoop.io.SequenceFile$Writer $r14;
        org.apache.hadoop.io.IntWritable $r17;
        java.lang.Iterable $r19;
        org.apache.mahout.math.VectorWritable $r20;
        boolean $z0;
        org.apache.mahout.math.DenseVector $r21;
        java.lang.Object $r22;
        int $i0, $i1, $i2, i3;
        double $d0, $d1;
        java.lang.Throwable $r24, $r25, $r26, r27;

        r0 := @this: org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob;

        r1 := @parameter0: org.apache.mahout.math.Vector;

        r2 = staticinvoke <org.apache.mahout.common.RandomUtils: org.apache.mahout.common.RandomWrapper getRandom()>();

        $r11 = specialinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: org.apache.hadoop.fs.Path pathToM(int)>(-1);

        $r13 = virtualinvoke $r11.<org.apache.hadoop.fs.Path: java.net.URI toUri()>();

        $r12 = virtualinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: org.apache.hadoop.conf.Configuration getConf()>();

        r3 = staticinvoke <org.apache.hadoop.fs.FileSystem: org.apache.hadoop.fs.FileSystem get(java.net.URI,org.apache.hadoop.conf.Configuration)>($r13, $r12);

        $r14 = new org.apache.hadoop.io.SequenceFile$Writer;

        $r16 = virtualinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: org.apache.hadoop.conf.Configuration getConf()>();

        $r15 = new org.apache.hadoop.fs.Path;

        $r18 = specialinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: org.apache.hadoop.fs.Path pathToM(int)>(-1);

        specialinvoke $r15.<org.apache.hadoop.fs.Path: void <init>(org.apache.hadoop.fs.Path,java.lang.String)>($r18, "part-m-00000");

        specialinvoke $r14.<org.apache.hadoop.io.SequenceFile$Writer: void <init>(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.Path,java.lang.Class,java.lang.Class)>(r3, $r16, $r15, class "org/apache/hadoop/io/IntWritable", class "org/apache/mahout/math/VectorWritable");

        r27 = null;

     label01:
        $r17 = new org.apache.hadoop.io.IntWritable;

        specialinvoke $r17.<org.apache.hadoop.io.IntWritable: void <init>()>();

        $r20 = new org.apache.mahout.math.VectorWritable;

        specialinvoke $r20.<org.apache.mahout.math.VectorWritable: void <init>()>();

        $r19 = interfaceinvoke r1.<org.apache.mahout.math.Vector: java.lang.Iterable nonZeroes()>();

        r6 = interfaceinvoke $r19.<java.lang.Iterable: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label05;

        $r22 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.mahout.math.Vector$Element) $r22;

        $r21 = new org.apache.mahout.math.DenseVector;

        $i0 = r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: int numFeatures>;

        specialinvoke $r21.<org.apache.mahout.math.DenseVector: void <init>(int)>($i0);

        $d0 = interfaceinvoke r7.<org.apache.mahout.math.Vector$Element: double get()>();

        interfaceinvoke $r21.<org.apache.mahout.math.Vector: void setQuick(int,double)>(0, $d0);

        i3 = 1;

     label03:
        $i2 = r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: int numFeatures>;

        if i3 >= $i2 goto label04;

        $d1 = virtualinvoke r2.<java.util.Random: double nextDouble()>();

        interfaceinvoke $r21.<org.apache.mahout.math.Vector: void setQuick(int,double)>(i3, $d1);

        i3 = i3 + 1;

        goto label03;

     label04:
        $i1 = interfaceinvoke r7.<org.apache.mahout.math.Vector$Element: int index()>();

        virtualinvoke $r17.<org.apache.hadoop.io.IntWritable: void set(int)>($i1);

        virtualinvoke $r20.<org.apache.mahout.math.VectorWritable: void set(org.apache.mahout.math.Vector)>($r21);

        virtualinvoke $r14.<org.apache.hadoop.io.SequenceFile$Writer: void append(org.apache.hadoop.io.Writable,org.apache.hadoop.io.Writable)>($r17, $r20);

        goto label02;

     label05:
        if $r14 == null goto label14;

        virtualinvoke $r14.<org.apache.hadoop.io.SequenceFile$Writer: void close()>();

        goto label14;

     label06:
        $r24 := @caughtexception;

        r27 = $r24;

        throw $r24;

     label07:
        $r26 := @caughtexception;

     label08:
        if $r14 == null goto label13;

        if r27 == null goto label12;

     label09:
        virtualinvoke $r14.<org.apache.hadoop.io.SequenceFile$Writer: void close()>();

     label10:
        goto label13;

     label11:
        $r25 := @caughtexception;

        virtualinvoke r27.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r25);

        goto label13;

     label12:
        virtualinvoke $r14.<org.apache.hadoop.io.SequenceFile$Writer: void close()>();

     label13:
        throw $r26;

     label14:
        return;

        catch java.lang.Throwable from label01 to label05 with label06;
        catch java.lang.Throwable from label01 to label05 with label07;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label06 to label08 with label07;
    }

    private void runSolver(org.apache.hadoop.fs.Path, org.apache.hadoop.fs.Path, org.apache.hadoop.fs.Path, int, java.lang.String, int) throws java.lang.ClassNotFoundException, java.io.IOException, java.lang.InterruptedException
    {
        org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob r0;
        org.apache.hadoop.fs.Path r1, r2, r3, $r35, $r37;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11;
        java.lang.String r4, $r23, $r24, $r25, $r26, $r27, $r29, $r30, $r36, r53;
        org.apache.hadoop.mapreduce.Job r5;
        org.apache.hadoop.conf.Configuration r6;
        org.apache.hadoop.fs.FileSystem r7;
        org.apache.hadoop.fs.FileStatus[] r8;
        boolean $z0, $z1, z2;
        org.apache.hadoop.fs.FileStatus r9;
        java.lang.StringBuilder $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r51;
        double $d0, $d1;
        java.net.URI $r28, $r34;
        org.apache.hadoop.fs.PathFilter $r31;
        org.slf4j.Logger $r32, $r38;
        java.lang.IllegalStateException $r33;
        java.lang.Class r52;

        r0 := @this: org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob;

        r1 := @parameter0: org.apache.hadoop.fs.Path;

        r2 := @parameter1: org.apache.hadoop.fs.Path;

        r3 := @parameter2: org.apache.hadoop.fs.Path;

        i0 := @parameter3: int;

        r4 := @parameter4: java.lang.String;

        i1 := @parameter5: int;

        staticinvoke <org.apache.mahout.cf.taste.hadoop.als.SharingMapper: void reset()>();

        $z0 = r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: boolean implicitFeedback>;

        if $z0 == 0 goto label1;

        r52 = class "org/apache/mahout/cf/taste/hadoop/als/SolveImplicitFeedbackMapper";

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Recompute ");

        $r39 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", iteration (");

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        $i10 = r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: int numIterations>;

        $r47 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("), ");

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);

        $i8 = r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: int numThreadsPerSolver>;

        $r45 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" threads, ");

        $i9 = r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: int numFeatures>;

        $r51 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r50 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" features, implicit feedback)");

        r53 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label1:
        r52 = class "org/apache/mahout/cf/taste/hadoop/als/SolveExplicitFeedbackMapper";

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Recompute ");

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", iteration (");

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        $i3 = r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: int numIterations>;

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("), ");

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);

        $i4 = r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: int numThreadsPerSolver>;

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" threads, ");

        $i5 = r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: int numFeatures>;

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" features, explicit feedback)");

        r53 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        r5 = virtualinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: org.apache.hadoop.mapreduce.Job prepareJob(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,java.lang.Class,java.lang.Class,java.lang.Class,java.lang.Class,java.lang.Class,java.lang.String)>(r1, r2, class "org/apache/hadoop/mapreduce/lib/input/SequenceFileInputFormat", class "org/apache/mahout/cf/taste/hadoop/als/MultithreadedSharingMapper", class "org/apache/hadoop/io/IntWritable", class "org/apache/mahout/math/VectorWritable", class "org/apache/hadoop/mapreduce/lib/output/SequenceFileOutputFormat", r53);

        r6 = virtualinvoke r5.<org.apache.hadoop.mapreduce.Job: org.apache.hadoop.conf.Configuration getConfiguration()>();

        $r23 = <org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: java.lang.String LAMBDA>;

        $d0 = r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: double lambda>;

        $r24 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>($d0);

        virtualinvoke r6.<org.apache.hadoop.conf.Configuration: void set(java.lang.String,java.lang.String)>($r23, $r24);

        $r26 = <org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: java.lang.String ALPHA>;

        $d1 = r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: double alpha>;

        $r25 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>($d1);

        virtualinvoke r6.<org.apache.hadoop.conf.Configuration: void set(java.lang.String,java.lang.String)>($r26, $r25);

        $r29 = <org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: java.lang.String NUM_FEATURES>;

        $i6 = r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: int numFeatures>;

        virtualinvoke r6.<org.apache.hadoop.conf.Configuration: void setInt(java.lang.String,int)>($r29, $i6);

        $r30 = <org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: java.lang.String NUM_ENTITIES>;

        $r27 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i1);

        virtualinvoke r6.<org.apache.hadoop.conf.Configuration: void set(java.lang.String,java.lang.String)>($r30, $r27);

        $r28 = virtualinvoke r3.<org.apache.hadoop.fs.Path: java.net.URI toUri()>();

        r7 = staticinvoke <org.apache.hadoop.fs.FileSystem: org.apache.hadoop.fs.FileSystem get(java.net.URI,org.apache.hadoop.conf.Configuration)>($r28, r6);

        $r31 = staticinvoke <org.apache.mahout.common.iterator.sequencefile.PathFilters: org.apache.hadoop.fs.PathFilter partFilter()>();

        r8 = virtualinvoke r7.<org.apache.hadoop.fs.FileSystem: org.apache.hadoop.fs.FileStatus[] listStatus(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.PathFilter)>(r3, $r31);

        i2 = lengthof r8;

        i11 = 0;

     label3:
        if i11 >= i2 goto label5;

        r9 = r8[i11];

        $r32 = <org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: org.slf4j.Logger log>;

        $z1 = interfaceinvoke $r32.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z1 == 0 goto label4;

        $r38 = <org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: org.slf4j.Logger log>;

        $r37 = virtualinvoke r9.<org.apache.hadoop.fs.FileStatus: org.apache.hadoop.fs.Path getPath()>();

        $r36 = virtualinvoke $r37.<org.apache.hadoop.fs.Path: java.lang.String toString()>();

        interfaceinvoke $r38.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Adding {} to distributed cache", $r36);

     label4:
        $r35 = virtualinvoke r9.<org.apache.hadoop.fs.FileStatus: org.apache.hadoop.fs.Path getPath()>();

        $r34 = virtualinvoke $r35.<org.apache.hadoop.fs.Path: java.net.URI toUri()>();

        staticinvoke <org.apache.hadoop.filecache.DistributedCache: void addCacheFile(java.net.URI,org.apache.hadoop.conf.Configuration)>($r34, r6);

        i11 = i11 + 1;

        goto label3;

     label5:
        staticinvoke <org.apache.hadoop.mapreduce.lib.map.MultithreadedMapper: void setMapperClass(org.apache.hadoop.mapreduce.Job,java.lang.Class)>(r5, r52);

        $i7 = r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: int numThreadsPerSolver>;

        staticinvoke <org.apache.hadoop.mapreduce.lib.map.MultithreadedMapper: void setNumberOfThreads(org.apache.hadoop.mapreduce.Job,int)>(r5, $i7);

        z2 = virtualinvoke r5.<org.apache.hadoop.mapreduce.Job: boolean waitForCompletion(boolean)>(1);

        if z2 != 0 goto label6;

        $r33 = new java.lang.IllegalStateException;

        specialinvoke $r33.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Job failed!");

        throw $r33;

     label6:
        return;
    }

    private org.apache.hadoop.fs.Path pathToM(int)
    {
        org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob r0;
        int i0, $i1, $i2;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;
        org.apache.hadoop.fs.Path $r5;

        r0 := @this: org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: int numIterations>;

        $i2 = $i1 - 1;

        if i0 != $i2 goto label1;

        $r5 = virtualinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: org.apache.hadoop.fs.Path getOutputPath(java.lang.String)>("M");

        goto label2;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("M-");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = virtualinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: org.apache.hadoop.fs.Path getTempPath(java.lang.String)>($r4);

     label2:
        return $r5;
    }

    private org.apache.hadoop.fs.Path pathToU(int)
    {
        org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob r0;
        int i0, $i1, $i2;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;
        org.apache.hadoop.fs.Path $r5;

        r0 := @this: org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: int numIterations>;

        $i2 = $i1 - 1;

        if i0 != $i2 goto label1;

        $r5 = virtualinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: org.apache.hadoop.fs.Path getOutputPath(java.lang.String)>("U");

        goto label2;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("U-");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = virtualinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: org.apache.hadoop.fs.Path getTempPath(java.lang.String)>($r4);

     label2:
        return $r5;
    }

    private org.apache.hadoop.fs.Path pathToItemRatings()
    {
        org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob r0;
        org.apache.hadoop.fs.Path $r1;

        r0 := @this: org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob;

        $r1 = virtualinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: org.apache.hadoop.fs.Path getTempPath(java.lang.String)>("itemRatings");

        return $r1;
    }

    private org.apache.hadoop.fs.Path pathToUserRatings()
    {
        org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob r0;
        org.apache.hadoop.fs.Path $r1;

        r0 := @this: org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob;

        $r1 = virtualinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: org.apache.hadoop.fs.Path getOutputPath(java.lang.String)>("userRatings");

        return $r1;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;
        java.lang.StringBuilder $r1, $r4, $r5, $r7, $r10, $r11, $r13, $r16, $r17, $r18, $r22, $r23, $r24, $r28, $r29, $r30, $r32, $r33;
        java.lang.Class $r2, $r8, $r14, $r21, $r27, $r34;
        java.lang.String $r3, $r6, $r9, $r12, $r15, $r19, $r20, $r25, $r26, $r31, $r35, $r36;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "org/apache/mahout/cf/taste/hadoop/als/ParallelALSFactorizationJob");

        <org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: org.slf4j.Logger log> = $r0;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = class "org/apache/mahout/cf/taste/hadoop/als/ParallelALSFactorizationJob";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".numFeatures");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        <org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: java.lang.String NUM_FEATURES> = $r6;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = class "org/apache/mahout/cf/taste/hadoop/als/ParallelALSFactorizationJob";

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".lambda");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        <org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: java.lang.String LAMBDA> = $r12;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = class "org/apache/mahout/cf/taste/hadoop/als/ParallelALSFactorizationJob";

        $r15 = virtualinvoke $r14.<java.lang.Class: java.lang.String getName()>();

        $r17 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".alpha");

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        <org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: java.lang.String ALPHA> = $r19;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r21 = class "org/apache/mahout/cf/taste/hadoop/als/ParallelALSFactorizationJob";

        $r20 = virtualinvoke $r21.<java.lang.Class: java.lang.String getName()>();

        $r23 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".numEntities");

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        <org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: java.lang.String NUM_ENTITIES> = $r25;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r27 = class "org/apache/mahout/cf/taste/hadoop/als/ParallelALSFactorizationJob";

        $r26 = virtualinvoke $r27.<java.lang.Class: java.lang.String getName()>();

        $r29 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".usesLongIDs");

        $r31 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        <org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: java.lang.String USES_LONG_IDS> = $r31;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r34 = class "org/apache/mahout/cf/taste/hadoop/als/ParallelALSFactorizationJob";

        $r35 = virtualinvoke $r34.<java.lang.Class: java.lang.String getName()>();

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".tokenPos");

        $r36 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        <org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: java.lang.String TOKEN_POS> = $r36;

        return;
    }
}
