public final class org.apache.mahout.classifier.df.data.DataLoader extends java.lang.Object
{
    private static final org.slf4j.Logger log;
    private static final java.util.regex.Pattern SEPARATORS;

    private void <init>()
    {
        org.apache.mahout.classifier.df.data.DataLoader r0;

        r0 := @this: org.apache.mahout.classifier.df.data.DataLoader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static boolean parseString(org.apache.mahout.classifier.df.data.Dataset$Attribute[], java.util.Set[], java.lang.CharSequence, boolean)
    {
        org.apache.mahout.classifier.df.data.Dataset$Attribute[] r0;
        java.lang.Object[] r1;
        java.lang.CharSequence r2;
        boolean z0, $z1, $z2, $z4, $z5, $z6, $z7;
        java.lang.String[] r3;
        java.lang.String r4, $r12, $r20, $r21;
        java.util.regex.Pattern $r6;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6, i7;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, r23;
        org.apache.mahout.classifier.df.data.Dataset$Attribute $r13, $r14, $r18, $r19;
        java.lang.Object $r15, $r16;
        java.lang.NumberFormatException $r22;
        java.util.HashSet r24;
        java.util.Set r25;

        r0 := @parameter0: org.apache.mahout.classifier.df.data.Dataset$Attribute[];

        r1 := @parameter1: java.util.Set[];

        r2 := @parameter2: java.lang.CharSequence;

        z0 := @parameter3: boolean;

        $r6 = <org.apache.mahout.classifier.df.data.DataLoader: java.util.regex.Pattern SEPARATORS>;

        r3 = virtualinvoke $r6.<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence)>(r2);

        $i1 = lengthof r3;

        $i0 = lengthof r0;

        if $i1 != $i0 goto label01;

        $z7 = 1;

        goto label02;

     label01:
        $z7 = 0;

     label02:
        r23 = new java.lang.StringBuilder;

        specialinvoke r23.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wrong number of attributes in the string: ");

        $i2 = lengthof r3;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Must be: ");

        $i3 = lengthof r0;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z7, $r12);

        i5 = 0;

     label03:
        $i6 = lengthof r0;

        if i5 >= $i6 goto label05;

        $r19 = r0[i5];

        $z5 = virtualinvoke $r19.<org.apache.mahout.classifier.df.data.Dataset$Attribute: boolean isIgnored()>();

        if $z5 != 0 goto label04;

        $r21 = "?";

        $r20 = r3[i5];

        $z6 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>($r20);

        if $z6 == 0 goto label04;

        return 0;

     label04:
        i5 = i5 + 1;

        goto label03;

     label05:
        i7 = 0;

     label06:
        $i4 = lengthof r0;

        if i7 >= $i4 goto label13;

        $r13 = r0[i7];

        $z1 = virtualinvoke $r13.<org.apache.mahout.classifier.df.data.Dataset$Attribute: boolean isIgnored()>();

        if $z1 != 0 goto label12;

        r4 = r3[i7];

        $r14 = r0[i7];

        $z2 = virtualinvoke $r14.<org.apache.mahout.classifier.df.data.Dataset$Attribute: boolean isCategorical()>();

        if $z2 != 0 goto label07;

        if z0 != 0 goto label09;

        $r18 = r0[i7];

        $z4 = virtualinvoke $r18.<org.apache.mahout.classifier.df.data.Dataset$Attribute: boolean isLabel()>();

        if $z4 == 0 goto label09;

     label07:
        $r15 = r1[i7];

        if $r15 != null goto label08;

        r24 = new java.util.HashSet;

        specialinvoke r24.<java.util.HashSet: void <init>()>();

        r1[i7] = r24;

     label08:
        $r16 = r1[i7];

        r25 = (java.util.Set) $r16;

        interfaceinvoke r25.<java.util.Set: boolean add(java.lang.Object)>(r4);

        goto label12;

     label09:
        staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r4);

     label10:
        goto label12;

     label11:
        $r22 := @caughtexception;

        return 0;

     label12:
        i7 = i7 + 1;

        goto label06;

     label13:
        return 1;

        catch java.lang.NumberFormatException from label09 to label10 with label11;
    }

    public static org.apache.mahout.classifier.df.data.Data loadData(org.apache.mahout.classifier.df.data.Dataset, org.apache.hadoop.fs.FileSystem, org.apache.hadoop.fs.Path) throws java.io.IOException
    {
        org.apache.mahout.classifier.df.data.Dataset r0;
        org.apache.hadoop.fs.FileSystem r1;
        org.apache.hadoop.fs.Path r2;
        org.apache.hadoop.fs.FSDataInputStream r3;
        java.lang.String r7;
        org.apache.mahout.classifier.df.data.Instance r8;
        java.util.Scanner $r9;
        java.util.ArrayList $r10;
        org.apache.mahout.classifier.df.data.DataConverter $r11;
        boolean $z0, $z1;
        org.apache.mahout.classifier.df.data.Data $r12;
        org.slf4j.Logger $r13, $r15;
        int $i0, $i1;
        java.lang.Integer $r14, $r16;

        r0 := @parameter0: org.apache.mahout.classifier.df.data.Dataset;

        r1 := @parameter1: org.apache.hadoop.fs.FileSystem;

        r2 := @parameter2: org.apache.hadoop.fs.Path;

        r3 = virtualinvoke r1.<org.apache.hadoop.fs.FileSystem: org.apache.hadoop.fs.FSDataInputStream open(org.apache.hadoop.fs.Path)>(r2);

        $r9 = new java.util.Scanner;

        specialinvoke $r9.<java.util.Scanner: void <init>(java.io.InputStream,java.lang.String)>(r3, "UTF-8");

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        $r11 = new org.apache.mahout.classifier.df.data.DataConverter;

        specialinvoke $r11.<org.apache.mahout.classifier.df.data.DataConverter: void <init>(org.apache.mahout.classifier.df.data.Dataset)>(r0);

     label1:
        $z0 = virtualinvoke $r9.<java.util.Scanner: boolean hasNextLine()>();

        if $z0 == 0 goto label4;

        r7 = virtualinvoke $r9.<java.util.Scanner: java.lang.String nextLine()>();

        $z1 = virtualinvoke r7.<java.lang.String: boolean isEmpty()>();

        if $z1 != 0 goto label3;

        r8 = virtualinvoke $r11.<org.apache.mahout.classifier.df.data.DataConverter: org.apache.mahout.classifier.df.data.Instance convert(java.lang.CharSequence)>(r7);

        if r8 == null goto label2;

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>(r8);

        goto label1;

     label2:
        $r15 = <org.apache.mahout.classifier.df.data.DataLoader: org.slf4j.Logger log>;

        $i1 = interfaceinvoke $r10.<java.util.List: int size()>();

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        interfaceinvoke $r15.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object)>("{}: missing values", $r16);

        goto label1;

     label3:
        $r13 = <org.apache.mahout.classifier.df.data.DataLoader: org.slf4j.Logger log>;

        $i0 = interfaceinvoke $r10.<java.util.List: int size()>();

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r13.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object)>("{}: empty string", $r14);

        goto label1;

     label4:
        virtualinvoke $r9.<java.util.Scanner: void close()>();

        $r12 = new org.apache.mahout.classifier.df.data.Data;

        specialinvoke $r12.<org.apache.mahout.classifier.df.data.Data: void <init>(org.apache.mahout.classifier.df.data.Dataset,java.util.List)>(r0, $r10);

        return $r12;
    }

    public static org.apache.mahout.classifier.df.data.Data loadData(org.apache.mahout.classifier.df.data.Dataset, org.apache.hadoop.fs.FileSystem, org.apache.hadoop.fs.Path[]) throws java.io.IOException
    {
        org.apache.mahout.classifier.df.data.Dataset r0;
        org.apache.hadoop.fs.FileSystem r1;
        org.apache.hadoop.fs.Path[] r2;
        int i0, $i1, i2, i3;
        org.apache.hadoop.fs.Path r5;
        org.apache.mahout.classifier.df.data.Data r6, $r8;
        java.util.ArrayList $r7;
        org.apache.mahout.classifier.df.data.Instance $r9;

        r0 := @parameter0: org.apache.mahout.classifier.df.data.Dataset;

        r1 := @parameter1: org.apache.hadoop.fs.FileSystem;

        r2 := @parameter2: org.apache.hadoop.fs.Path[];

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        i0 = lengthof r2;

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        r5 = r2[i2];

        r6 = staticinvoke <org.apache.mahout.classifier.df.data.DataLoader: org.apache.mahout.classifier.df.data.Data loadData(org.apache.mahout.classifier.df.data.Dataset,org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path)>(r0, r1, r5);

        i3 = 0;

     label2:
        $i1 = virtualinvoke r6.<org.apache.mahout.classifier.df.data.Data: int size()>();

        if i3 > $i1 goto label3;

        $r9 = virtualinvoke r6.<org.apache.mahout.classifier.df.data.Data: org.apache.mahout.classifier.df.data.Instance get(int)>(i3);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r9);

        i3 = i3 + 1;

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        $r8 = new org.apache.mahout.classifier.df.data.Data;

        specialinvoke $r8.<org.apache.mahout.classifier.df.data.Data: void <init>(org.apache.mahout.classifier.df.data.Dataset,java.util.List)>(r0, $r7);

        return $r8;
    }

    public static org.apache.mahout.classifier.df.data.Data loadData(org.apache.mahout.classifier.df.data.Dataset, java.lang.String[])
    {
        org.apache.mahout.classifier.df.data.Dataset r0;
        java.lang.String[] r1;
        int i0, $i1, $i2, i3;
        java.lang.String r5;
        org.apache.mahout.classifier.df.data.Instance r6;
        java.util.ArrayList $r7;
        org.apache.mahout.classifier.df.data.DataConverter $r8;
        org.apache.mahout.classifier.df.data.Data $r9;
        boolean $z0;
        org.slf4j.Logger $r10, $r12;
        java.lang.Integer $r11, $r13;

        r0 := @parameter0: org.apache.mahout.classifier.df.data.Dataset;

        r1 := @parameter1: java.lang.String[];

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        $r8 = new org.apache.mahout.classifier.df.data.DataConverter;

        specialinvoke $r8.<org.apache.mahout.classifier.df.data.DataConverter: void <init>(org.apache.mahout.classifier.df.data.Dataset)>(r0);

        i0 = lengthof r1;

        i3 = 0;

     label1:
        if i3 >= i0 goto label5;

        r5 = r1[i3];

        $z0 = virtualinvoke r5.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        r6 = virtualinvoke $r8.<org.apache.mahout.classifier.df.data.DataConverter: org.apache.mahout.classifier.df.data.Instance convert(java.lang.CharSequence)>(r5);

        if r6 == null goto label2;

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>(r6);

        goto label4;

     label2:
        $r12 = <org.apache.mahout.classifier.df.data.DataLoader: org.slf4j.Logger log>;

        $i2 = interfaceinvoke $r7.<java.util.List: int size()>();

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        interfaceinvoke $r12.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object)>("{}: missing values", $r13);

        goto label4;

     label3:
        $r10 = <org.apache.mahout.classifier.df.data.DataLoader: org.slf4j.Logger log>;

        $i1 = interfaceinvoke $r7.<java.util.List: int size()>();

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        interfaceinvoke $r10.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object)>("{}: empty string", $r11);

     label4:
        i3 = i3 + 1;

        goto label1;

     label5:
        $r9 = new org.apache.mahout.classifier.df.data.Data;

        specialinvoke $r9.<org.apache.mahout.classifier.df.data.Data: void <init>(org.apache.mahout.classifier.df.data.Dataset,java.util.List)>(r0, $r7);

        return $r9;
    }

    public static org.apache.mahout.classifier.df.data.Dataset generateDataset(java.lang.CharSequence, boolean, org.apache.hadoop.fs.FileSystem, org.apache.hadoop.fs.Path) throws org.apache.mahout.classifier.df.data.DescriptorException, java.io.IOException
    {
        java.lang.CharSequence r0;
        boolean z0, $z1, $z2, $z3;
        org.apache.hadoop.fs.FileSystem r1;
        org.apache.hadoop.fs.Path r2;
        org.apache.mahout.classifier.df.data.Dataset$Attribute[] r3;
        org.apache.hadoop.fs.FSDataInputStream r4;
        java.util.Set[] r6;
        int $i0, $i1, $i2, i3, i4;
        java.util.Set $r8, $r11;
        java.util.ArrayList $r10;
        java.lang.String r12;
        java.lang.Object[] r13;
        java.util.Scanner r14;
        org.apache.mahout.classifier.df.data.Dataset r15;
        java.util.List[] r16;

        r0 := @parameter0: java.lang.CharSequence;

        z0 := @parameter1: boolean;

        r1 := @parameter2: org.apache.hadoop.fs.FileSystem;

        r2 := @parameter3: org.apache.hadoop.fs.Path;

        r3 = staticinvoke <org.apache.mahout.classifier.df.data.DescriptorUtils: org.apache.mahout.classifier.df.data.Dataset$Attribute[] parseDescriptor(java.lang.CharSequence)>(r0);

        r4 = virtualinvoke r1.<org.apache.hadoop.fs.FileSystem: org.apache.hadoop.fs.FSDataInputStream open(org.apache.hadoop.fs.Path)>(r2);

        r14 = new java.util.Scanner;

        specialinvoke r14.<java.util.Scanner: void <init>(java.io.InputStream,java.lang.String)>(r4, "UTF-8");

        $i0 = lengthof r3;

        r6 = newarray (java.util.Set)[$i0];

        i3 = 0;

     label1:
        $z1 = virtualinvoke r14.<java.util.Scanner: boolean hasNextLine()>();

        if $z1 == 0 goto label2;

        r12 = virtualinvoke r14.<java.util.Scanner: java.lang.String nextLine()>();

        $z2 = virtualinvoke r12.<java.lang.String: boolean isEmpty()>();

        if $z2 != 0 goto label1;

        $z3 = staticinvoke <org.apache.mahout.classifier.df.data.DataLoader: boolean parseString(org.apache.mahout.classifier.df.data.Dataset$Attribute[],java.util.Set[],java.lang.CharSequence,boolean)>(r3, r6, r12, z0);

        if $z3 == 0 goto label1;

        i3 = i3 + 1;

        goto label1;

     label2:
        virtualinvoke r14.<java.util.Scanner: void close()>();

        $i2 = lengthof r3;

        r13 = newarray (java.util.List)[$i2];

        i4 = 0;

     label3:
        $i1 = lengthof r6;

        if i4 >= $i1 goto label5;

        $r8 = r6[i4];

        if $r8 == null goto label4;

        $r11 = r6[i4];

        $r10 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.lang.Iterable)>($r11);

        r13[i4] = $r10;

     label4:
        i4 = i4 + 1;

        goto label3;

     label5:
        r15 = new org.apache.mahout.classifier.df.data.Dataset;

        r16 = (java.util.List[]) r13;

        specialinvoke r15.<org.apache.mahout.classifier.df.data.Dataset: void <init>(org.apache.mahout.classifier.df.data.Dataset$Attribute[],java.util.List[],int,boolean)>(r3, r16, i3, z0);

        return r15;
    }

    public static org.apache.mahout.classifier.df.data.Dataset generateDataset(java.lang.CharSequence, boolean, java.lang.String[]) throws org.apache.mahout.classifier.df.data.DescriptorException
    {
        java.lang.CharSequence r0;
        boolean z0, $z1, $z2;
        java.lang.String[] r1;
        org.apache.mahout.classifier.df.data.Dataset$Attribute[] r2;
        java.util.Set[] r3;
        java.lang.String r4;
        int $i0, $i1, $i2, i3, i4, i5, i6;
        java.util.Set $r6, $r8;
        java.util.ArrayList $r7;
        java.lang.Object[] r10;
        org.apache.mahout.classifier.df.data.Dataset r11;
        java.util.List[] r12;

        r0 := @parameter0: java.lang.CharSequence;

        z0 := @parameter1: boolean;

        r1 := @parameter2: java.lang.String[];

        r2 = staticinvoke <org.apache.mahout.classifier.df.data.DescriptorUtils: org.apache.mahout.classifier.df.data.Dataset$Attribute[] parseDescriptor(java.lang.CharSequence)>(r0);

        $i0 = lengthof r2;

        r3 = newarray (java.util.Set)[$i0];

        i3 = 0;

        i4 = lengthof r1;

        i5 = 0;

     label1:
        if i5 >= i4 goto label3;

        r4 = r1[i5];

        $z1 = virtualinvoke r4.<java.lang.String: boolean isEmpty()>();

        if $z1 != 0 goto label2;

        $z2 = staticinvoke <org.apache.mahout.classifier.df.data.DataLoader: boolean parseString(org.apache.mahout.classifier.df.data.Dataset$Attribute[],java.util.Set[],java.lang.CharSequence,boolean)>(r2, r3, r4, z0);

        if $z2 == 0 goto label2;

        i3 = i3 + 1;

     label2:
        i5 = i5 + 1;

        goto label1;

     label3:
        $i1 = lengthof r2;

        r10 = newarray (java.util.List)[$i1];

        i6 = 0;

     label4:
        $i2 = lengthof r3;

        if i6 >= $i2 goto label6;

        $r6 = r3[i6];

        if $r6 == null goto label5;

        $r8 = r3[i6];

        $r7 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.lang.Iterable)>($r8);

        r10[i6] = $r7;

     label5:
        i6 = i6 + 1;

        goto label4;

     label6:
        r11 = new org.apache.mahout.classifier.df.data.Dataset;

        r12 = (java.util.List[]) r10;

        specialinvoke r11.<org.apache.mahout.classifier.df.data.Dataset: void <init>(org.apache.mahout.classifier.df.data.Dataset$Attribute[],java.util.List[],int,boolean)>(r2, r12, i3, z0);

        return r11;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;
        java.util.regex.Pattern $r1;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "org/apache/mahout/classifier/df/data/DataLoader");

        <org.apache.mahout.classifier.df.data.DataLoader: org.slf4j.Logger log> = $r0;

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[, ]");

        <org.apache.mahout.classifier.df.data.DataLoader: java.util.regex.Pattern SEPARATORS> = $r1;

        return;
    }
}
