public class org.hipi.tools.covar.MeanMapper extends org.apache.hadoop.mapreduce.Mapper
{

    public void <init>()
    {
        org.hipi.tools.covar.MeanMapper r0;

        r0 := @this: org.hipi.tools.covar.MeanMapper;

        specialinvoke r0.<org.apache.hadoop.mapreduce.Mapper: void <init>()>();

        return;
    }

    public void map(org.hipi.image.HipiImageHeader, org.hipi.image.FloatImage, org.apache.hadoop.mapreduce.Mapper$Context) throws java.io.IOException, java.lang.InterruptedException
    {
        org.hipi.tools.covar.MeanMapper r0;
        org.hipi.image.HipiImageHeader r1;
        org.hipi.image.FloatImage r2;
        org.apache.hadoop.mapreduce.Mapper$Context r3;
        int i3, i4, $i5, $i6, $i7, $i8, $i10, $i11, $i12, $i13, $i14, $i15, i16, i17;
        org.bytedeco.javacpp.opencv_core$Mat r5, $r6, $r7, r15;
        boolean $z0;
        org.bytedeco.javacpp.opencv_core$Scalar $r8;
        double $d0;
        org.bytedeco.javacpp.opencv_core$MatExpr $r9;
        org.hipi.opencv.OpenCVMatWritable $r10;
        org.apache.hadoop.io.IntWritable $r11;
        org.bytedeco.javacpp.opencv_core$Rect $r12;
        java.io.PrintStream $r13;

        r0 := @this: org.hipi.tools.covar.MeanMapper;

        r1 := @parameter0: org.hipi.image.HipiImageHeader;

        r2 := @parameter1: org.hipi.image.FloatImage;

        r3 := @parameter2: org.apache.hadoop.mapreduce.Mapper$Context;

        $r6 = new org.bytedeco.javacpp.opencv_core$Mat;

        $i5 = virtualinvoke r2.<org.hipi.image.FloatImage: int getHeight()>();

        $i7 = virtualinvoke r2.<org.hipi.image.FloatImage: int getWidth()>();

        $i6 = <org.bytedeco.javacpp.opencv_core: int CV_32FC1>;

        specialinvoke $r6.<org.bytedeco.javacpp.opencv_core$Mat: void <init>(int,int,int)>($i5, $i7, $i6);

        $z0 = staticinvoke <org.hipi.tools.covar.Covariance: boolean convertFloatImageToGrayscaleMat(org.hipi.image.FloatImage,org.bytedeco.javacpp.opencv_core$Mat)>(r2, $r6);

        if $z0 != 0 goto label1;

        $r13 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>("MeanMapper is skipping image with invalid color space.");

        return;

     label1:
        $r7 = new org.bytedeco.javacpp.opencv_core$Mat;

        $i8 = <org.bytedeco.javacpp.opencv_core: int CV_32FC1>;

        $r8 = new org.bytedeco.javacpp.opencv_core$Scalar;

        specialinvoke $r8.<org.bytedeco.javacpp.opencv_core$Scalar: void <init>(double)>(0.0);

        specialinvoke $r7.<org.bytedeco.javacpp.opencv_core$Mat: void <init>(int,int,int,org.bytedeco.javacpp.opencv_core$Scalar)>(64, 64, $i8, $r8);

        i16 = 0;

     label2:
        if i16 >= 10 goto label5;

        $i11 = virtualinvoke $r6.<org.bytedeco.javacpp.opencv_core$Mat: int cols()>();

        $i10 = $i11 - 64;

        $i12 = $i10 * i16;

        i3 = $i12 / 10;

        i17 = 0;

     label3:
        if i17 >= 10 goto label4;

        $i15 = virtualinvoke $r6.<org.bytedeco.javacpp.opencv_core$Mat: int rows()>();

        $i13 = $i15 - 64;

        $i14 = $i13 * i17;

        i4 = $i14 / 10;

        $r12 = new org.bytedeco.javacpp.opencv_core$Rect;

        specialinvoke $r12.<org.bytedeco.javacpp.opencv_core$Rect: void <init>(int,int,int,int)>(i3, i4, 64, 64);

        r5 = virtualinvoke $r6.<org.bytedeco.javacpp.opencv_core$Mat: org.bytedeco.javacpp.opencv_core$Mat apply(org.bytedeco.javacpp.opencv_core$Rect)>($r12);

        staticinvoke <org.bytedeco.javacpp.opencv_core: void add(org.bytedeco.javacpp.opencv_core$Mat,org.bytedeco.javacpp.opencv_core$Mat,org.bytedeco.javacpp.opencv_core$Mat)>(r5, $r7, $r7);

        i17 = i17 + 1;

        goto label3;

     label4:
        i16 = i16 + 1;

        goto label2;

     label5:
        $d0 = (double) 100;

        $r9 = staticinvoke <org.bytedeco.javacpp.opencv_core: org.bytedeco.javacpp.opencv_core$MatExpr divide(org.bytedeco.javacpp.opencv_core$Mat,double)>($r7, $d0);

        r15 = virtualinvoke $r9.<org.bytedeco.javacpp.opencv_core$MatExpr: org.bytedeco.javacpp.opencv_core$Mat asMat()>();

        $r11 = new org.apache.hadoop.io.IntWritable;

        specialinvoke $r11.<org.apache.hadoop.io.IntWritable: void <init>(int)>(0);

        $r10 = new org.hipi.opencv.OpenCVMatWritable;

        specialinvoke $r10.<org.hipi.opencv.OpenCVMatWritable: void <init>(org.bytedeco.javacpp.opencv_core$Mat)>(r15);

        virtualinvoke r3.<org.apache.hadoop.mapreduce.Mapper$Context: void write(java.lang.Object,java.lang.Object)>($r11, $r10);

        return;
    }

    public volatile void map(java.lang.Object, java.lang.Object, org.apache.hadoop.mapreduce.Mapper$Context) throws java.io.IOException, java.lang.InterruptedException
    {
        org.hipi.tools.covar.MeanMapper r0;
        java.lang.Object r1, r2;
        org.apache.hadoop.mapreduce.Mapper$Context r3;
        org.hipi.image.FloatImage $r4;
        org.hipi.image.HipiImageHeader $r5;

        r0 := @this: org.hipi.tools.covar.MeanMapper;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: org.apache.hadoop.mapreduce.Mapper$Context;

        $r5 = (org.hipi.image.HipiImageHeader) r1;

        $r4 = (org.hipi.image.FloatImage) r2;

        virtualinvoke r0.<org.hipi.tools.covar.MeanMapper: void map(org.hipi.image.HipiImageHeader,org.hipi.image.FloatImage,org.apache.hadoop.mapreduce.Mapper$Context)>($r5, $r4, r3);

        return;
    }
}
