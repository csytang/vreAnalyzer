public class org.hipi.opencv.OpenCVMatWritable extends java.lang.Object implements org.apache.hadoop.io.Writable
{
    private org.bytedeco.javacpp.opencv_core$Mat mat;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        org.hipi.opencv.OpenCVMatWritable r0;
        org.bytedeco.javacpp.opencv_core$Mat $r1, $r2, $r4, $r6;
        boolean $z0, $z1;
        int $i0;
        java.lang.AssertionError $r5, $r7;

        r0 := @this: org.hipi.opencv.OpenCVMatWritable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.hipi.opencv.OpenCVMatWritable: org.bytedeco.javacpp.opencv_core$Mat mat> = null;

        $r1 = new org.bytedeco.javacpp.opencv_core$Mat;

        specialinvoke $r1.<org.bytedeco.javacpp.opencv_core$Mat: void <init>()>();

        r0.<org.hipi.opencv.OpenCVMatWritable: org.bytedeco.javacpp.opencv_core$Mat mat> = $r1;

        $z0 = <org.hipi.opencv.OpenCVMatWritable: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r6 = r0.<org.hipi.opencv.OpenCVMatWritable: org.bytedeco.javacpp.opencv_core$Mat mat>;

        if $r6 != null goto label1;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label1:
        $r2 = r0.<org.hipi.opencv.OpenCVMatWritable: org.bytedeco.javacpp.opencv_core$Mat mat>;

        virtualinvoke $r2.<org.bytedeco.javacpp.opencv_core$Mat: org.bytedeco.javacpp.opencv_core$Mat dims(int)>(2);

        $z1 = <org.hipi.opencv.OpenCVMatWritable: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $r4 = r0.<org.hipi.opencv.OpenCVMatWritable: org.bytedeco.javacpp.opencv_core$Mat mat>;

        $i0 = virtualinvoke $r4.<org.bytedeco.javacpp.opencv_core$Mat: int dims()>();

        if $i0 == 2 goto label2;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label2:
        return;
    }

    public void <init>(org.bytedeco.javacpp.opencv_core$Mat)
    {
        org.hipi.opencv.OpenCVMatWritable r0;
        org.bytedeco.javacpp.opencv_core$Mat r1;

        r0 := @this: org.hipi.opencv.OpenCVMatWritable;

        r1 := @parameter0: org.bytedeco.javacpp.opencv_core$Mat;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.hipi.opencv.OpenCVMatWritable: org.bytedeco.javacpp.opencv_core$Mat mat> = null;

        virtualinvoke r0.<org.hipi.opencv.OpenCVMatWritable: void setMat(org.bytedeco.javacpp.opencv_core$Mat)>(r1);

        return;
    }

    public void setMat(org.bytedeco.javacpp.opencv_core$Mat) throws java.lang.IllegalArgumentException
    {
        org.hipi.opencv.OpenCVMatWritable r0;
        org.bytedeco.javacpp.opencv_core$Mat r1, $r3;
        int i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r4, $r6, $r7;
        java.lang.IllegalArgumentException $r5, $r8;
        java.lang.String $r9;

        r0 := @this: org.hipi.opencv.OpenCVMatWritable;

        r1 := @parameter0: org.bytedeco.javacpp.opencv_core$Mat;

        if r1 != null goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Must provide valid non-null Mat object.");

        throw $r8;

     label1:
        i0 = virtualinvoke r1.<org.bytedeco.javacpp.opencv_core$Mat: int dims()>();

        if i0 == 1 goto label2;

        if i0 == 2 goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Currently supports only 1D or 2D arrays. Input mat dims: ");

        $r6 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label2:
        $r3 = new org.bytedeco.javacpp.opencv_core$Mat;

        $i1 = virtualinvoke r1.<org.bytedeco.javacpp.opencv_core$Mat: int rows()>();

        $i2 = virtualinvoke r1.<org.bytedeco.javacpp.opencv_core$Mat: int cols()>();

        $i3 = virtualinvoke r1.<org.bytedeco.javacpp.opencv_core$Mat: int type()>();

        specialinvoke $r3.<org.bytedeco.javacpp.opencv_core$Mat: void <init>(int,int,int)>($i1, $i2, $i3);

        virtualinvoke r1.<org.bytedeco.javacpp.opencv_core$Mat: void copyTo(org.bytedeco.javacpp.opencv_core$Mat)>($r3);

        r0.<org.hipi.opencv.OpenCVMatWritable: org.bytedeco.javacpp.opencv_core$Mat mat> = $r3;

        return;
    }

    public org.bytedeco.javacpp.opencv_core$Mat getMat()
    {
        org.hipi.opencv.OpenCVMatWritable r0;
        org.bytedeco.javacpp.opencv_core$Mat $r2, $r3, $r4, $r5, $r6;
        int $i0, $i1, $i2;

        r0 := @this: org.hipi.opencv.OpenCVMatWritable;

        $r2 = new org.bytedeco.javacpp.opencv_core$Mat;

        $r3 = r0.<org.hipi.opencv.OpenCVMatWritable: org.bytedeco.javacpp.opencv_core$Mat mat>;

        $i0 = virtualinvoke $r3.<org.bytedeco.javacpp.opencv_core$Mat: int rows()>();

        $r4 = r0.<org.hipi.opencv.OpenCVMatWritable: org.bytedeco.javacpp.opencv_core$Mat mat>;

        $i1 = virtualinvoke $r4.<org.bytedeco.javacpp.opencv_core$Mat: int cols()>();

        $r5 = r0.<org.hipi.opencv.OpenCVMatWritable: org.bytedeco.javacpp.opencv_core$Mat mat>;

        $i2 = virtualinvoke $r5.<org.bytedeco.javacpp.opencv_core$Mat: int type()>();

        specialinvoke $r2.<org.bytedeco.javacpp.opencv_core$Mat: void <init>(int,int,int)>($i0, $i1, $i2);

        $r6 = r0.<org.hipi.opencv.OpenCVMatWritable: org.bytedeco.javacpp.opencv_core$Mat mat>;

        virtualinvoke $r6.<org.bytedeco.javacpp.opencv_core$Mat: void copyTo(org.bytedeco.javacpp.opencv_core$Mat)>($r2);

        return $r2;
    }

    public void write(java.io.DataOutput) throws java.io.IOException
    {
        org.hipi.opencv.OpenCVMatWritable r0;
        java.io.DataOutput r1;
        int i0, i1, i2, i3, $i4, $i5, $i7;
        byte[] r2, $r18, $r23, $r24, $r28;
        short[] r3;
        int[] r4;
        float[] r5;
        double[] r6;
        boolean $z0, $z1;
        org.bytedeco.javacpp.opencv_core$Mat $r7, $r9, $r14, $r19, $r20, $r25, $r38, $r41, $r42, $r43, $r44, $r45;
        java.nio.Buffer $r8, $r15, $r16, $r21, $r31;
        java.nio.ByteBuffer $r11;
        java.nio.DoubleBuffer $r12;
        java.nio.FloatBuffer $r17;
        java.nio.IntBuffer $r26;
        java.nio.ShortBuffer $r30;
        java.lang.StringBuilder $r32, $r35, $r36, $r37;
        java.io.IOException $r33;
        java.lang.String $r34;
        java.lang.AssertionError $r39, $r40;
        long $l6, $l8, $l9;

        r0 := @this: org.hipi.opencv.OpenCVMatWritable;

        r1 := @parameter0: java.io.DataOutput;

        $z0 = <org.hipi.opencv.OpenCVMatWritable: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r38 = r0.<org.hipi.opencv.OpenCVMatWritable: org.bytedeco.javacpp.opencv_core$Mat mat>;

        if $r38 != null goto label1;

        $r39 = new java.lang.AssertionError;

        specialinvoke $r39.<java.lang.AssertionError: void <init>()>();

        throw $r39;

     label1:
        $r7 = r0.<org.hipi.opencv.OpenCVMatWritable: org.bytedeco.javacpp.opencv_core$Mat mat>;

        i0 = virtualinvoke $r7.<org.bytedeco.javacpp.opencv_core$Mat: int dims()>();

        $z1 = <org.hipi.opencv.OpenCVMatWritable: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        if i0 == 1 goto label2;

        if i0 == 2 goto label2;

        $r40 = new java.lang.AssertionError;

        specialinvoke $r40.<java.lang.AssertionError: void <init>()>();

        throw $r40;

     label2:
        $r41 = r0.<org.hipi.opencv.OpenCVMatWritable: org.bytedeco.javacpp.opencv_core$Mat mat>;

        i1 = virtualinvoke $r41.<org.bytedeco.javacpp.opencv_core$Mat: int type()>();

        interfaceinvoke r1.<java.io.DataOutput: void writeInt(int)>(i1);

        $r42 = r0.<org.hipi.opencv.OpenCVMatWritable: org.bytedeco.javacpp.opencv_core$Mat mat>;

        $i4 = virtualinvoke $r42.<org.bytedeco.javacpp.opencv_core$Mat: int rows()>();

        interfaceinvoke r1.<java.io.DataOutput: void writeInt(int)>($i4);

        $r43 = r0.<org.hipi.opencv.OpenCVMatWritable: org.bytedeco.javacpp.opencv_core$Mat mat>;

        $i5 = virtualinvoke $r43.<org.bytedeco.javacpp.opencv_core$Mat: int cols()>();

        interfaceinvoke r1.<java.io.DataOutput: void writeInt(int)>($i5);

        $r44 = r0.<org.hipi.opencv.OpenCVMatWritable: org.bytedeco.javacpp.opencv_core$Mat mat>;

        $l6 = virtualinvoke $r44.<org.bytedeco.javacpp.opencv_core$Mat: long total()>();

        $r45 = r0.<org.hipi.opencv.OpenCVMatWritable: org.bytedeco.javacpp.opencv_core$Mat mat>;

        $i7 = virtualinvoke $r45.<org.bytedeco.javacpp.opencv_core$Mat: int channels()>();

        $l8 = (long) $i7;

        $l9 = $l6 * $l8;

        i2 = (int) $l9;

        if i2 <= 0 goto label9;

        i3 = staticinvoke <org.bytedeco.javacpp.opencv_core: int CV_MAT_DEPTH(int)>(i1);

        tableswitch(i3)
        {
            case 0: goto label3;
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label4;
            case 4: goto label5;
            case 5: goto label6;
            case 6: goto label7;
            default: goto label8;
        };

     label3:
        r2 = newarray (byte)[i2];

        $r9 = r0.<org.hipi.opencv.OpenCVMatWritable: org.bytedeco.javacpp.opencv_core$Mat mat>;

        $r8 = virtualinvoke $r9.<org.bytedeco.javacpp.opencv_core$Mat: java.nio.Buffer createBuffer()>();

        $r11 = (java.nio.ByteBuffer) $r8;

        virtualinvoke $r11.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r2);

        interfaceinvoke r1.<java.io.DataOutput: void write(byte[])>(r2);

        goto label9;

     label4:
        r3 = newarray (short)[i2];

        $r25 = r0.<org.hipi.opencv.OpenCVMatWritable: org.bytedeco.javacpp.opencv_core$Mat mat>;

        $r31 = virtualinvoke $r25.<org.bytedeco.javacpp.opencv_core$Mat: java.nio.Buffer createBuffer()>();

        $r30 = (java.nio.ShortBuffer) $r31;

        virtualinvoke $r30.<java.nio.ShortBuffer: java.nio.ShortBuffer get(short[])>(r3);

        $r28 = staticinvoke <org.hipi.util.ByteUtils: byte[] shortArrayToByteArray(short[])>(r3);

        interfaceinvoke r1.<java.io.DataOutput: void write(byte[])>($r28);

        goto label9;

     label5:
        r4 = newarray (int)[i2];

        $r20 = r0.<org.hipi.opencv.OpenCVMatWritable: org.bytedeco.javacpp.opencv_core$Mat mat>;

        $r21 = virtualinvoke $r20.<org.bytedeco.javacpp.opencv_core$Mat: java.nio.Buffer createBuffer()>();

        $r26 = (java.nio.IntBuffer) $r21;

        virtualinvoke $r26.<java.nio.IntBuffer: java.nio.IntBuffer get(int[])>(r4);

        $r24 = staticinvoke <org.hipi.util.ByteUtils: byte[] intArrayToByteArray(int[])>(r4);

        interfaceinvoke r1.<java.io.DataOutput: void write(byte[])>($r24);

        goto label9;

     label6:
        r5 = newarray (float)[i2];

        $r19 = r0.<org.hipi.opencv.OpenCVMatWritable: org.bytedeco.javacpp.opencv_core$Mat mat>;

        $r16 = virtualinvoke $r19.<org.bytedeco.javacpp.opencv_core$Mat: java.nio.Buffer createBuffer()>();

        $r17 = (java.nio.FloatBuffer) $r16;

        virtualinvoke $r17.<java.nio.FloatBuffer: java.nio.FloatBuffer get(float[])>(r5);

        $r23 = staticinvoke <org.hipi.util.ByteUtils: byte[] floatArrayToByteArray(float[])>(r5);

        interfaceinvoke r1.<java.io.DataOutput: void write(byte[])>($r23);

        goto label9;

     label7:
        r6 = newarray (double)[i2];

        $r14 = r0.<org.hipi.opencv.OpenCVMatWritable: org.bytedeco.javacpp.opencv_core$Mat mat>;

        $r15 = virtualinvoke $r14.<org.bytedeco.javacpp.opencv_core$Mat: java.nio.Buffer createBuffer()>();

        $r12 = (java.nio.DoubleBuffer) $r15;

        virtualinvoke $r12.<java.nio.DoubleBuffer: java.nio.DoubleBuffer get(double[])>(r6);

        $r18 = staticinvoke <org.hipi.util.ByteUtils: byte[] doubleArrayToByteArray(double[])>(r6);

        interfaceinvoke r1.<java.io.DataOutput: void write(byte[])>($r18);

        goto label9;

     label8:
        $r33 = new java.io.IOException;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported matrix depth [");

        $r36 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r35 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("].");

        $r34 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r33.<java.io.IOException: void <init>(java.lang.String)>($r34);

        throw $r33;

     label9:
        return;
    }

    public void readFields(java.io.DataInput) throws java.io.IOException
    {
        org.hipi.opencv.OpenCVMatWritable r0;
        java.io.DataInput r1;
        int i0, i1, i2, i3, i4, $i7, $i9, $i10, $i11, $i12;
        byte[] r2, r3, r4, r5, r6;
        org.bytedeco.javacpp.opencv_core$Mat $r7, $r8, $r9, $r10, $r15, $r18, $r26, $r28;
        long $l5, $l6, $l8;
        java.nio.ByteBuffer $r11;
        java.nio.Buffer $r12, $r14, $r19, $r27, $r29;
        double[] $r16;
        java.nio.DoubleBuffer $r17;
        java.nio.FloatBuffer $r22;
        float[] $r23;
        java.nio.IntBuffer $r24;
        int[] $r25;
        short[] $r32;
        java.nio.ShortBuffer $r33;
        java.lang.StringBuilder $r34, $r35, $r38, $r39;
        java.io.IOException $r36;
        java.lang.String $r37;

        r0 := @this: org.hipi.opencv.OpenCVMatWritable;

        r1 := @parameter0: java.io.DataInput;

        i0 = interfaceinvoke r1.<java.io.DataInput: int readInt()>();

        i1 = staticinvoke <org.bytedeco.javacpp.opencv_core: int CV_MAT_DEPTH(int)>(i0);

        i2 = interfaceinvoke r1.<java.io.DataInput: int readInt()>();

        i3 = interfaceinvoke r1.<java.io.DataInput: int readInt()>();

        $r8 = new org.bytedeco.javacpp.opencv_core$Mat;

        specialinvoke $r8.<org.bytedeco.javacpp.opencv_core$Mat: void <init>(int,int,int)>(i2, i3, i0);

        r0.<org.hipi.opencv.OpenCVMatWritable: org.bytedeco.javacpp.opencv_core$Mat mat> = $r8;

        $r7 = r0.<org.hipi.opencv.OpenCVMatWritable: org.bytedeco.javacpp.opencv_core$Mat mat>;

        $l5 = virtualinvoke $r7.<org.bytedeco.javacpp.opencv_core$Mat: long total()>();

        $r9 = r0.<org.hipi.opencv.OpenCVMatWritable: org.bytedeco.javacpp.opencv_core$Mat mat>;

        $i7 = virtualinvoke $r9.<org.bytedeco.javacpp.opencv_core$Mat: int channels()>();

        $l6 = (long) $i7;

        $l8 = $l5 * $l6;

        i4 = (int) $l8;

        tableswitch(i1)
        {
            case 0: goto label1;
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label2;
            case 4: goto label3;
            case 5: goto label4;
            case 6: goto label5;
            default: goto label6;
        };

     label1:
        r2 = newarray (byte)[i4];

        interfaceinvoke r1.<java.io.DataInput: void readFully(byte[])>(r2);

        $r10 = r0.<org.hipi.opencv.OpenCVMatWritable: org.bytedeco.javacpp.opencv_core$Mat mat>;

        $r12 = virtualinvoke $r10.<org.bytedeco.javacpp.opencv_core$Mat: java.nio.Buffer createBuffer()>();

        $r11 = (java.nio.ByteBuffer) $r12;

        virtualinvoke $r11.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>(r2);

        goto label7;

     label2:
        $i12 = i4 * 2;

        r3 = newarray (byte)[$i12];

        interfaceinvoke r1.<java.io.DataInput: void readFully(byte[])>(r3);

        $r28 = r0.<org.hipi.opencv.OpenCVMatWritable: org.bytedeco.javacpp.opencv_core$Mat mat>;

        $r29 = virtualinvoke $r28.<org.bytedeco.javacpp.opencv_core$Mat: java.nio.Buffer createBuffer()>();

        $r33 = (java.nio.ShortBuffer) $r29;

        $r32 = staticinvoke <org.hipi.util.ByteUtils: short[] byteArrayToShortArray(byte[])>(r3);

        virtualinvoke $r33.<java.nio.ShortBuffer: java.nio.ShortBuffer put(short[])>($r32);

        goto label7;

     label3:
        $i11 = i4 * 4;

        r4 = newarray (byte)[$i11];

        interfaceinvoke r1.<java.io.DataInput: void readFully(byte[])>(r4);

        $r26 = r0.<org.hipi.opencv.OpenCVMatWritable: org.bytedeco.javacpp.opencv_core$Mat mat>;

        $r27 = virtualinvoke $r26.<org.bytedeco.javacpp.opencv_core$Mat: java.nio.Buffer createBuffer()>();

        $r24 = (java.nio.IntBuffer) $r27;

        $r25 = staticinvoke <org.hipi.util.ByteUtils: int[] byteArrayToIntArray(byte[])>(r4);

        virtualinvoke $r24.<java.nio.IntBuffer: java.nio.IntBuffer put(int[])>($r25);

        goto label7;

     label4:
        $i10 = i4 * 4;

        r5 = newarray (byte)[$i10];

        interfaceinvoke r1.<java.io.DataInput: void readFully(byte[])>(r5);

        $r18 = r0.<org.hipi.opencv.OpenCVMatWritable: org.bytedeco.javacpp.opencv_core$Mat mat>;

        $r19 = virtualinvoke $r18.<org.bytedeco.javacpp.opencv_core$Mat: java.nio.Buffer createBuffer()>();

        $r22 = (java.nio.FloatBuffer) $r19;

        $r23 = staticinvoke <org.hipi.util.ByteUtils: float[] byteArrayToFloatArray(byte[])>(r5);

        virtualinvoke $r22.<java.nio.FloatBuffer: java.nio.FloatBuffer put(float[])>($r23);

        goto label7;

     label5:
        $i9 = i4 * 8;

        r6 = newarray (byte)[$i9];

        interfaceinvoke r1.<java.io.DataInput: void readFully(byte[])>(r6);

        $r15 = r0.<org.hipi.opencv.OpenCVMatWritable: org.bytedeco.javacpp.opencv_core$Mat mat>;

        $r14 = virtualinvoke $r15.<org.bytedeco.javacpp.opencv_core$Mat: java.nio.Buffer createBuffer()>();

        $r17 = (java.nio.DoubleBuffer) $r14;

        $r16 = staticinvoke <org.hipi.util.ByteUtils: double[] byteArrayToDoubleArray(byte[])>(r6);

        virtualinvoke $r17.<java.nio.DoubleBuffer: java.nio.DoubleBuffer put(double[])>($r16);

        goto label7;

     label6:
        $r36 = new java.io.IOException;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported matrix depth [");

        $r39 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r38 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("].");

        $r37 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r36.<java.io.IOException: void <init>(java.lang.String)>($r37);

        throw $r36;

     label7:
        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "org/hipi/opencv/OpenCVMatWritable";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.hipi.opencv.OpenCVMatWritable: boolean $assertionsDisabled> = $z1;

        return;
    }
}
