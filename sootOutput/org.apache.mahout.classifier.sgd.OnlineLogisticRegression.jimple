public class org.apache.mahout.classifier.sgd.OnlineLogisticRegression extends org.apache.mahout.classifier.sgd.AbstractOnlineLogisticRegression implements org.apache.hadoop.io.Writable
{
    public static final int WRITABLE_VERSION;
    private double mu0;
    private double decayFactor;
    private int stepOffset;
    private double forgettingExponent;
    private int perTermAnnealingOffset;

    public void <init>()
    {
        org.apache.mahout.classifier.sgd.OnlineLogisticRegression r0;

        r0 := @this: org.apache.mahout.classifier.sgd.OnlineLogisticRegression;

        specialinvoke r0.<org.apache.mahout.classifier.sgd.AbstractOnlineLogisticRegression: void <init>()>();

        r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: double mu0> = 1.0;

        r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: double decayFactor> = 0.999;

        r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: int stepOffset> = 10;

        r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: double forgettingExponent> = -0.5;

        r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: int perTermAnnealingOffset> = 20;

        return;
    }

    public void <init>(int, int, org.apache.mahout.classifier.sgd.PriorFunction)
    {
        org.apache.mahout.classifier.sgd.OnlineLogisticRegression r0;
        int i0, i1, $i2, $i3;
        org.apache.mahout.classifier.sgd.PriorFunction r1;
        org.apache.mahout.math.DenseVector $r2, $r3;
        double $d0;
        org.apache.mahout.math.Vector $r4;
        org.apache.mahout.math.DenseMatrix $r5;

        r0 := @this: org.apache.mahout.classifier.sgd.OnlineLogisticRegression;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: org.apache.mahout.classifier.sgd.PriorFunction;

        specialinvoke r0.<org.apache.mahout.classifier.sgd.AbstractOnlineLogisticRegression: void <init>()>();

        r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: double mu0> = 1.0;

        r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: double decayFactor> = 0.999;

        r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: int stepOffset> = 10;

        r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: double forgettingExponent> = -0.5;

        r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: int perTermAnnealingOffset> = 20;

        r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: int numCategories> = i0;

        r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: org.apache.mahout.classifier.sgd.PriorFunction prior> = r1;

        $r2 = new org.apache.mahout.math.DenseVector;

        specialinvoke $r2.<org.apache.mahout.math.DenseVector: void <init>(int)>(i1);

        r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: org.apache.mahout.math.Vector updateSteps> = $r2;

        $r3 = new org.apache.mahout.math.DenseVector;

        specialinvoke $r3.<org.apache.mahout.math.DenseVector: void <init>(int)>(i1);

        $i2 = r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: int perTermAnnealingOffset>;

        $d0 = (double) $i2;

        $r4 = virtualinvoke $r3.<org.apache.mahout.math.DenseVector: org.apache.mahout.math.Vector assign(double)>($d0);

        r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: org.apache.mahout.math.Vector updateCounts> = $r4;

        $r5 = new org.apache.mahout.math.DenseMatrix;

        $i3 = i0 - 1;

        specialinvoke $r5.<org.apache.mahout.math.DenseMatrix: void <init>(int,int)>($i3, i1);

        r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: org.apache.mahout.math.Matrix beta> = $r5;

        return;
    }

    public org.apache.mahout.classifier.sgd.OnlineLogisticRegression alpha(double)
    {
        org.apache.mahout.classifier.sgd.OnlineLogisticRegression r0;
        double d0;

        r0 := @this: org.apache.mahout.classifier.sgd.OnlineLogisticRegression;

        d0 := @parameter0: double;

        r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: double decayFactor> = d0;

        return r0;
    }

    public org.apache.mahout.classifier.sgd.OnlineLogisticRegression lambda(double)
    {
        org.apache.mahout.classifier.sgd.OnlineLogisticRegression r0;
        double d0;

        r0 := @this: org.apache.mahout.classifier.sgd.OnlineLogisticRegression;

        d0 := @parameter0: double;

        specialinvoke r0.<org.apache.mahout.classifier.sgd.AbstractOnlineLogisticRegression: org.apache.mahout.classifier.sgd.AbstractOnlineLogisticRegression lambda(double)>(d0);

        return r0;
    }

    public org.apache.mahout.classifier.sgd.OnlineLogisticRegression learningRate(double)
    {
        org.apache.mahout.classifier.sgd.OnlineLogisticRegression r0;
        double d0;

        r0 := @this: org.apache.mahout.classifier.sgd.OnlineLogisticRegression;

        d0 := @parameter0: double;

        r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: double mu0> = d0;

        return r0;
    }

    public org.apache.mahout.classifier.sgd.OnlineLogisticRegression stepOffset(int)
    {
        org.apache.mahout.classifier.sgd.OnlineLogisticRegression r0;
        int i0;

        r0 := @this: org.apache.mahout.classifier.sgd.OnlineLogisticRegression;

        i0 := @parameter0: int;

        r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: int stepOffset> = i0;

        return r0;
    }

    public org.apache.mahout.classifier.sgd.OnlineLogisticRegression decayExponent(double)
    {
        org.apache.mahout.classifier.sgd.OnlineLogisticRegression r0;
        byte $b0;
        double d0;

        r0 := @this: org.apache.mahout.classifier.sgd.OnlineLogisticRegression;

        d0 := @parameter0: double;

        $b0 = d0 cmpl 0.0;

        if $b0 <= 0 goto label1;

        d0 = neg d0;

     label1:
        r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: double forgettingExponent> = d0;

        return r0;
    }

    public double perTermLearningRate(int)
    {
        org.apache.mahout.classifier.sgd.OnlineLogisticRegression r0;
        int i0, $i1;
        org.apache.mahout.math.Vector $r1;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.apache.mahout.classifier.sgd.OnlineLogisticRegression;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: int perTermAnnealingOffset>;

        $d0 = (double) $i1;

        $r1 = r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: org.apache.mahout.math.Vector updateCounts>;

        $d1 = interfaceinvoke $r1.<org.apache.mahout.math.Vector: double get(int)>(i0);

        $d2 = $d0 / $d1;

        $d3 = staticinvoke <java.lang.Math: double sqrt(double)>($d2);

        return $d3;
    }

    public double currentLearningRate()
    {
        org.apache.mahout.classifier.sgd.OnlineLogisticRegression r0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.mahout.classifier.sgd.OnlineLogisticRegression;

        $d0 = r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: double mu0>;

        $d1 = r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: double decayFactor>;

        $i0 = virtualinvoke r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: int getStep()>();

        $d2 = (double) $i0;

        $d3 = staticinvoke <java.lang.Math: double pow(double,double)>($d1, $d2);

        $d4 = $d0 * $d3;

        $i1 = virtualinvoke r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: int getStep()>();

        $i2 = r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: int stepOffset>;

        $i3 = $i1 + $i2;

        $d6 = (double) $i3;

        $d5 = r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: double forgettingExponent>;

        $d7 = staticinvoke <java.lang.Math: double pow(double,double)>($d6, $d5);

        $d8 = $d4 * $d7;

        return $d8;
    }

    public void copyFrom(org.apache.mahout.classifier.sgd.OnlineLogisticRegression)
    {
        org.apache.mahout.classifier.sgd.OnlineLogisticRegression r0, r1;
        double $d0, $d1, $d2;
        int $i0, $i1;

        r0 := @this: org.apache.mahout.classifier.sgd.OnlineLogisticRegression;

        r1 := @parameter0: org.apache.mahout.classifier.sgd.OnlineLogisticRegression;

        specialinvoke r0.<org.apache.mahout.classifier.sgd.AbstractOnlineLogisticRegression: void copyFrom(org.apache.mahout.classifier.sgd.AbstractOnlineLogisticRegression)>(r1);

        $d0 = r1.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: double mu0>;

        r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: double mu0> = $d0;

        $d1 = r1.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: double decayFactor>;

        r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: double decayFactor> = $d1;

        $i0 = r1.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: int stepOffset>;

        r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: int stepOffset> = $i0;

        $d2 = r1.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: double forgettingExponent>;

        r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: double forgettingExponent> = $d2;

        $i1 = r1.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: int perTermAnnealingOffset>;

        r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: int perTermAnnealingOffset> = $i1;

        return;
    }

    public org.apache.mahout.classifier.sgd.OnlineLogisticRegression copy()
    {
        org.apache.mahout.classifier.sgd.OnlineLogisticRegression r0, $r2;
        int $i0, $i1;
        org.apache.mahout.classifier.sgd.PriorFunction $r3;

        r0 := @this: org.apache.mahout.classifier.sgd.OnlineLogisticRegression;

        virtualinvoke r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: void close()>();

        $r2 = new org.apache.mahout.classifier.sgd.OnlineLogisticRegression;

        $i0 = virtualinvoke r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: int numCategories()>();

        $i1 = virtualinvoke r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: int numFeatures()>();

        $r3 = r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: org.apache.mahout.classifier.sgd.PriorFunction prior>;

        specialinvoke $r2.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: void <init>(int,int,org.apache.mahout.classifier.sgd.PriorFunction)>($i0, $i1, $r3);

        virtualinvoke $r2.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: void copyFrom(org.apache.mahout.classifier.sgd.OnlineLogisticRegression)>(r0);

        return $r2;
    }

    public void write(java.io.DataOutput) throws java.io.IOException
    {
        org.apache.mahout.classifier.sgd.OnlineLogisticRegression r0;
        java.io.DataOutput r1;
        double $d0, $d1, $d2, $d3;
        int $i0, $i1, $i2, $i3;
        org.apache.mahout.math.Matrix $r2;
        org.apache.mahout.classifier.sgd.PriorFunction $r3;
        org.apache.mahout.math.Vector $r4, $r5;

        r0 := @this: org.apache.mahout.classifier.sgd.OnlineLogisticRegression;

        r1 := @parameter0: java.io.DataOutput;

        interfaceinvoke r1.<java.io.DataOutput: void writeInt(int)>(1);

        $d0 = r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: double mu0>;

        interfaceinvoke r1.<java.io.DataOutput: void writeDouble(double)>($d0);

        $d1 = virtualinvoke r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: double getLambda()>();

        interfaceinvoke r1.<java.io.DataOutput: void writeDouble(double)>($d1);

        $d2 = r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: double decayFactor>;

        interfaceinvoke r1.<java.io.DataOutput: void writeDouble(double)>($d2);

        $i0 = r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: int stepOffset>;

        interfaceinvoke r1.<java.io.DataOutput: void writeInt(int)>($i0);

        $i1 = r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: int step>;

        interfaceinvoke r1.<java.io.DataOutput: void writeInt(int)>($i1);

        $d3 = r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: double forgettingExponent>;

        interfaceinvoke r1.<java.io.DataOutput: void writeDouble(double)>($d3);

        $i2 = r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: int perTermAnnealingOffset>;

        interfaceinvoke r1.<java.io.DataOutput: void writeInt(int)>($i2);

        $i3 = r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: int numCategories>;

        interfaceinvoke r1.<java.io.DataOutput: void writeInt(int)>($i3);

        $r2 = r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: org.apache.mahout.math.Matrix beta>;

        staticinvoke <org.apache.mahout.math.MatrixWritable: void writeMatrix(java.io.DataOutput,org.apache.mahout.math.Matrix)>(r1, $r2);

        $r3 = r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: org.apache.mahout.classifier.sgd.PriorFunction prior>;

        staticinvoke <org.apache.mahout.classifier.sgd.PolymorphicWritable: void write(java.io.DataOutput,org.apache.hadoop.io.Writable)>(r1, $r3);

        $r4 = r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: org.apache.mahout.math.Vector updateCounts>;

        staticinvoke <org.apache.mahout.math.VectorWritable: void writeVector(java.io.DataOutput,org.apache.mahout.math.Vector)>(r1, $r4);

        $r5 = r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: org.apache.mahout.math.Vector updateSteps>;

        staticinvoke <org.apache.mahout.math.VectorWritable: void writeVector(java.io.DataOutput,org.apache.mahout.math.Vector)>(r1, $r5);

        return;
    }

    public void readFields(java.io.DataInput) throws java.io.IOException
    {
        org.apache.mahout.classifier.sgd.OnlineLogisticRegression r0;
        java.io.DataInput r1;
        int i0, $i1, $i2, $i3, $i4;
        java.io.IOException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;
        double $d0, $d1, $d2, $d3;
        org.apache.hadoop.io.Writable $r8;
        org.apache.mahout.math.Matrix $r9;
        org.apache.mahout.math.Vector $r10, $r12;
        org.apache.mahout.classifier.sgd.PriorFunction $r11;

        r0 := @this: org.apache.mahout.classifier.sgd.OnlineLogisticRegression;

        r1 := @parameter0: java.io.DataInput;

        i0 = interfaceinvoke r1.<java.io.DataInput: int readInt()>();

        if i0 != 1 goto label1;

        $d0 = interfaceinvoke r1.<java.io.DataInput: double readDouble()>();

        r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: double mu0> = $d0;

        $d1 = interfaceinvoke r1.<java.io.DataInput: double readDouble()>();

        virtualinvoke r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: org.apache.mahout.classifier.sgd.OnlineLogisticRegression lambda(double)>($d1);

        $d2 = interfaceinvoke r1.<java.io.DataInput: double readDouble()>();

        r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: double decayFactor> = $d2;

        $i1 = interfaceinvoke r1.<java.io.DataInput: int readInt()>();

        r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: int stepOffset> = $i1;

        $i2 = interfaceinvoke r1.<java.io.DataInput: int readInt()>();

        r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: int step> = $i2;

        $d3 = interfaceinvoke r1.<java.io.DataInput: double readDouble()>();

        r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: double forgettingExponent> = $d3;

        $i4 = interfaceinvoke r1.<java.io.DataInput: int readInt()>();

        r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: int perTermAnnealingOffset> = $i4;

        $i3 = interfaceinvoke r1.<java.io.DataInput: int readInt()>();

        r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: int numCategories> = $i3;

        $r9 = staticinvoke <org.apache.mahout.math.MatrixWritable: org.apache.mahout.math.Matrix readMatrix(java.io.DataInput)>(r1);

        r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: org.apache.mahout.math.Matrix beta> = $r9;

        $r8 = staticinvoke <org.apache.mahout.classifier.sgd.PolymorphicWritable: org.apache.hadoop.io.Writable read(java.io.DataInput,java.lang.Class)>(r1, class "org/apache/mahout/classifier/sgd/PriorFunction");

        $r11 = (org.apache.mahout.classifier.sgd.PriorFunction) $r8;

        r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: org.apache.mahout.classifier.sgd.PriorFunction prior> = $r11;

        $r10 = staticinvoke <org.apache.mahout.math.VectorWritable: org.apache.mahout.math.Vector readVector(java.io.DataInput)>(r1);

        r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: org.apache.mahout.math.Vector updateCounts> = $r10;

        $r12 = staticinvoke <org.apache.mahout.math.VectorWritable: org.apache.mahout.math.Vector readVector(java.io.DataInput)>(r1);

        r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: org.apache.mahout.math.Vector updateSteps> = $r12;

        goto label2;

     label1:
        $r2 = new java.io.IOException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incorrect object version, wanted 1 got ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label2:
        return;
    }

    public volatile org.apache.mahout.classifier.sgd.AbstractOnlineLogisticRegression lambda(double)
    {
        org.apache.mahout.classifier.sgd.OnlineLogisticRegression r0, $r1;
        double d0;

        r0 := @this: org.apache.mahout.classifier.sgd.OnlineLogisticRegression;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.mahout.classifier.sgd.OnlineLogisticRegression: org.apache.mahout.classifier.sgd.OnlineLogisticRegression lambda(double)>(d0);

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.mahout.classifier.sgd.OnlineLogisticRegression: int WRITABLE_VERSION> = 1;

        return;
    }
}
