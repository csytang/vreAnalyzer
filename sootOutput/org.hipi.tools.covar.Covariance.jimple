public class org.hipi.tools.covar.Covariance extends org.apache.hadoop.conf.Configured implements org.apache.hadoop.util.Tool
{
    public static final int patchSize;
    public static final float sigma;

    public void <init>()
    {
        org.hipi.tools.covar.Covariance r0;

        r0 := @this: org.hipi.tools.covar.Covariance;

        specialinvoke r0.<org.apache.hadoop.conf.Configured: void <init>()>();

        return;
    }

    public static boolean convertFloatImageToGrayscaleMat(org.hipi.image.FloatImage, org.bytedeco.javacpp.opencv_core$Mat)
    {
        org.hipi.image.FloatImage r0;
        org.hipi.image.HipiImageHeader$HipiColorSpace r1;
        org.bytedeco.javacpp.opencv_core$Mat r2, r10;
        int[] $r3;
        int $i0, $i1;
        java.lang.StringBuilder $r4, $r6, $r7, $r8;
        java.io.PrintStream $r5;
        java.lang.String $r9;

        r0 := @parameter0: org.hipi.image.FloatImage;

        r10 := @parameter1: org.bytedeco.javacpp.opencv_core$Mat;

        r1 = virtualinvoke r0.<org.hipi.image.FloatImage: org.hipi.image.HipiImageHeader$HipiColorSpace getColorSpace()>();

        $r3 = <org.hipi.tools.covar.Covariance$1: int[] $SwitchMap$org$hipi$image$HipiImageHeader$HipiColorSpace>;

        $i0 = virtualinvoke r1.<org.hipi.image.HipiImageHeader$HipiColorSpace: int ordinal()>();

        $i1 = $r3[$i0];

        lookupswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            default: goto label3;
        };

     label1:
        r2 = staticinvoke <org.hipi.opencv.OpenCVUtils: org.bytedeco.javacpp.opencv_core$Mat convertRasterImageToMat(org.hipi.image.RasterImage)>(r0);

        staticinvoke <org.bytedeco.javacpp.opencv_imgproc: void cvtColor(org.bytedeco.javacpp.opencv_core$Mat,org.bytedeco.javacpp.opencv_core$Mat,int)>(r2, r10, 7);

        return 1;

     label2:
        staticinvoke <org.hipi.opencv.OpenCVUtils: org.bytedeco.javacpp.opencv_core$Mat convertRasterImageToMat(org.hipi.image.RasterImage)>(r0);

        return 1;

     label3:
        $r5 = <java.lang.System: java.io.PrintStream out>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HipiColorSpace [");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] not supported in covar example. ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r9);

        return 0;
    }

    private static void rmdir(java.lang.String, org.apache.hadoop.conf.Configuration) throws java.io.IOException
    {
        java.lang.String r0;
        org.apache.hadoop.conf.Configuration r1;
        org.apache.hadoop.fs.FileSystem r3;
        org.apache.hadoop.fs.Path $r4;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.hadoop.conf.Configuration;

        $r4 = new org.apache.hadoop.fs.Path;

        specialinvoke $r4.<org.apache.hadoop.fs.Path: void <init>(java.lang.String)>(r0);

        r3 = staticinvoke <org.apache.hadoop.fs.FileSystem: org.apache.hadoop.fs.FileSystem get(org.apache.hadoop.conf.Configuration)>(r1);

        $z0 = virtualinvoke r3.<org.apache.hadoop.fs.FileSystem: boolean exists(org.apache.hadoop.fs.Path)>($r4);

        if $z0 == 0 goto label1;

        virtualinvoke r3.<org.apache.hadoop.fs.FileSystem: boolean delete(org.apache.hadoop.fs.Path,boolean)>($r4, 1);

     label1:
        return;
    }

    private static void mkdir(java.lang.String, org.apache.hadoop.conf.Configuration) throws java.io.IOException
    {
        java.lang.String r0;
        org.apache.hadoop.conf.Configuration r1;
        org.apache.hadoop.fs.FileSystem r3;
        org.apache.hadoop.fs.Path $r4;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.hadoop.conf.Configuration;

        $r4 = new org.apache.hadoop.fs.Path;

        specialinvoke $r4.<org.apache.hadoop.fs.Path: void <init>(java.lang.String)>(r0);

        r3 = staticinvoke <org.apache.hadoop.fs.FileSystem: org.apache.hadoop.fs.FileSystem get(org.apache.hadoop.conf.Configuration)>(r1);

        $z0 = virtualinvoke r3.<org.apache.hadoop.fs.FileSystem: boolean exists(org.apache.hadoop.fs.Path)>($r4);

        if $z0 != 0 goto label1;

        virtualinvoke r3.<org.apache.hadoop.fs.FileSystem: boolean mkdirs(org.apache.hadoop.fs.Path)>($r4);

     label1:
        return;
    }

    private static void validateArgs(java.lang.String[], org.apache.hadoop.conf.Configuration) throws java.io.IOException
    {
        java.lang.String[] r0;
        org.apache.hadoop.conf.Configuration r1;
        org.apache.hadoop.fs.FileSystem r3;
        int $i0;
        org.apache.hadoop.fs.Path $r4;
        java.lang.String $r5, $r10;
        boolean $z0;
        java.lang.StringBuilder $r6, $r8, $r9;
        java.io.PrintStream $r7, $r11;

        r0 := @parameter0: java.lang.String[];

        r1 := @parameter1: org.apache.hadoop.conf.Configuration;

        $i0 = lengthof r0;

        if $i0 == 2 goto label1;

        $r11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("Usage: covar.jar <input HIB> <output directory>");

        staticinvoke <java.lang.System: void exit(int)>(1);

     label1:
        $r4 = new org.apache.hadoop.fs.Path;

        $r5 = r0[0];

        specialinvoke $r4.<org.apache.hadoop.fs.Path: void <init>(java.lang.String)>($r5);

        r3 = staticinvoke <org.apache.hadoop.fs.FileSystem: org.apache.hadoop.fs.FileSystem get(org.apache.hadoop.conf.Configuration)>(r1);

        $z0 = virtualinvoke r3.<org.apache.hadoop.fs.FileSystem: boolean exists(org.apache.hadoop.fs.Path)>($r4);

        if $z0 != 0 goto label2;

        $r7 = <java.lang.System: java.io.PrintStream out>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Input HIB does not exist at location: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>($r10);

        staticinvoke <java.lang.System: void exit(int)>(1);

     label2:
        return;
    }

    private static void validateMeanPath(java.lang.String, org.apache.hadoop.conf.Configuration) throws java.io.IOException
    {
        java.lang.String r0, $r9;
        org.apache.hadoop.conf.Configuration r1;
        org.apache.hadoop.fs.FileSystem r3;
        org.apache.hadoop.fs.Path $r4;
        boolean $z0;
        java.lang.StringBuilder $r5, $r7, $r8;
        java.io.PrintStream $r6;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.hadoop.conf.Configuration;

        $r4 = new org.apache.hadoop.fs.Path;

        specialinvoke $r4.<org.apache.hadoop.fs.Path: void <init>(java.lang.String)>(r0);

        r3 = staticinvoke <org.apache.hadoop.fs.FileSystem: org.apache.hadoop.fs.FileSystem get(org.apache.hadoop.conf.Configuration)>(r1);

        $z0 = virtualinvoke r3.<org.apache.hadoop.fs.FileSystem: boolean exists(org.apache.hadoop.fs.Path)>($r4);

        if $z0 != 0 goto label1;

        $r6 = <java.lang.System: java.io.PrintStream out>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Mean patch does not exist at location: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r9);

        staticinvoke <java.lang.System: void exit(int)>(1);

     label1:
        return;
    }

    public int run(java.lang.String[]) throws java.lang.Exception
    {
        org.hipi.tools.covar.Covariance r0;
        java.lang.String[] r1;
        org.apache.hadoop.conf.Configuration r2;
        java.lang.String r3, r4, r5, r6, r7, $r44;
        org.apache.hadoop.mapreduce.Job $r8;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r40, $r42, $r43;
        int $i0, $i1;
        java.io.PrintStream $r18, $r19, $r41;
        org.apache.hadoop.fs.FileSystem r23, r28, r33, r38;
        org.apache.hadoop.fs.Path $r24, $r29, $r34, $r39;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.hipi.tools.covar.Covariance;

        r1 := @parameter0: java.lang.String[];

        $r8 = staticinvoke <org.apache.hadoop.mapreduce.Job: org.apache.hadoop.mapreduce.Job getInstance()>();

        r2 = virtualinvoke $r8.<org.apache.hadoop.mapreduce.Job: org.apache.hadoop.conf.Configuration getConfiguration()>();

        staticinvoke <org.hipi.tools.covar.Covariance: void validateArgs(java.lang.String[],org.apache.hadoop.conf.Configuration)>(r1, r2);

        r3 = r1[0];

        r4 = r1[1];

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/mean-output/");

        r5 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/covariance-output/");

        r6 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("part-r-00000");

        r7 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        $r24 = new org.apache.hadoop.fs.Path;

        specialinvoke $r24.<org.apache.hadoop.fs.Path: void <init>(java.lang.String)>(r4);

        r23 = staticinvoke <org.apache.hadoop.fs.FileSystem: org.apache.hadoop.fs.FileSystem get(org.apache.hadoop.conf.Configuration)>(r2);

        $z0 = virtualinvoke r23.<org.apache.hadoop.fs.FileSystem: boolean exists(org.apache.hadoop.fs.Path)>($r24);

        if $z0 != 0 goto label1;

        virtualinvoke r23.<org.apache.hadoop.fs.FileSystem: boolean mkdirs(org.apache.hadoop.fs.Path)>($r24);

     label1:
        $r29 = new org.apache.hadoop.fs.Path;

        specialinvoke $r29.<org.apache.hadoop.fs.Path: void <init>(java.lang.String)>(r5);

        r28 = staticinvoke <org.apache.hadoop.fs.FileSystem: org.apache.hadoop.fs.FileSystem get(org.apache.hadoop.conf.Configuration)>(r2);

        $z1 = virtualinvoke r28.<org.apache.hadoop.fs.FileSystem: boolean exists(org.apache.hadoop.fs.Path)>($r29);

        if $z1 == 0 goto label2;

        virtualinvoke r28.<org.apache.hadoop.fs.FileSystem: boolean delete(org.apache.hadoop.fs.Path,boolean)>($r29, 1);

     label2:
        $r34 = new org.apache.hadoop.fs.Path;

        specialinvoke $r34.<org.apache.hadoop.fs.Path: void <init>(java.lang.String)>(r6);

        r33 = staticinvoke <org.apache.hadoop.fs.FileSystem: org.apache.hadoop.fs.FileSystem get(org.apache.hadoop.conf.Configuration)>(r2);

        $z2 = virtualinvoke r33.<org.apache.hadoop.fs.FileSystem: boolean exists(org.apache.hadoop.fs.Path)>($r34);

        if $z2 == 0 goto label3;

        virtualinvoke r33.<org.apache.hadoop.fs.FileSystem: boolean delete(org.apache.hadoop.fs.Path,boolean)>($r34, 1);

     label3:
        $i1 = staticinvoke <org.hipi.tools.covar.ComputeMean: int run(java.lang.String[],java.lang.String,java.lang.String)>(r1, r3, r5);

        if $i1 != 1 goto label4;

        $r18 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r18.<java.io.PrintStream: void println(java.lang.String)>("Compute mean job failed to complete.");

        return 1;

     label4:
        $r39 = new org.apache.hadoop.fs.Path;

        specialinvoke $r39.<org.apache.hadoop.fs.Path: void <init>(java.lang.String)>(r7);

        r38 = staticinvoke <org.apache.hadoop.fs.FileSystem: org.apache.hadoop.fs.FileSystem get(org.apache.hadoop.conf.Configuration)>(r2);

        $z3 = virtualinvoke r38.<org.apache.hadoop.fs.FileSystem: boolean exists(org.apache.hadoop.fs.Path)>($r39);

        if $z3 != 0 goto label5;

        $r41 = <java.lang.System: java.io.PrintStream out>;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r42 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Mean patch does not exist at location: ");

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r39);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r41.<java.io.PrintStream: void println(java.lang.String)>($r44);

        staticinvoke <java.lang.System: void exit(int)>(1);

     label5:
        $i0 = staticinvoke <org.hipi.tools.covar.ComputeCovariance: int run(java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>(r1, r3, r6, r7);

        if $i0 != 1 goto label6;

        $r19 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r19.<java.io.PrintStream: void println(java.lang.String)>("Compute covariance job failed to complete.");

        return 1;

     label6:
        return 0;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        java.lang.String[] r0;
        int i0;
        org.hipi.tools.covar.Covariance $r1;

        r0 := @parameter0: java.lang.String[];

        $r1 = new org.hipi.tools.covar.Covariance;

        specialinvoke $r1.<org.hipi.tools.covar.Covariance: void <init>()>();

        i0 = staticinvoke <org.apache.hadoop.util.ToolRunner: int run(org.apache.hadoop.util.Tool,java.lang.String[])>($r1, r0);

        staticinvoke <java.lang.System: void exit(int)>(i0);

        return;
    }

    public static void <clinit>()
    {
        <org.hipi.tools.covar.Covariance: float sigma> = 10.0F;

        <org.hipi.tools.covar.Covariance: int patchSize> = 64;

        return;
    }
}
