public class org.apache.mahout.common.distance.SquaredEuclideanDistanceMeasure extends java.lang.Object implements org.apache.mahout.common.distance.DistanceMeasure
{

    public void <init>()
    {
        org.apache.mahout.common.distance.SquaredEuclideanDistanceMeasure r0;

        r0 := @this: org.apache.mahout.common.distance.SquaredEuclideanDistanceMeasure;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void configure(org.apache.hadoop.conf.Configuration)
    {
        org.apache.mahout.common.distance.SquaredEuclideanDistanceMeasure r0;
        org.apache.hadoop.conf.Configuration r1;

        r0 := @this: org.apache.mahout.common.distance.SquaredEuclideanDistanceMeasure;

        r1 := @parameter0: org.apache.hadoop.conf.Configuration;

        return;
    }

    public java.util.Collection getParameters()
    {
        org.apache.mahout.common.distance.SquaredEuclideanDistanceMeasure r0;
        java.util.List $r1;

        r0 := @this: org.apache.mahout.common.distance.SquaredEuclideanDistanceMeasure;

        $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r1;
    }

    public void createParameters(java.lang.String, org.apache.hadoop.conf.Configuration)
    {
        org.apache.mahout.common.distance.SquaredEuclideanDistanceMeasure r0;
        java.lang.String r1;
        org.apache.hadoop.conf.Configuration r2;

        r0 := @this: org.apache.mahout.common.distance.SquaredEuclideanDistanceMeasure;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.hadoop.conf.Configuration;

        return;
    }

    public double distance(org.apache.mahout.math.Vector, org.apache.mahout.math.Vector)
    {
        org.apache.mahout.common.distance.SquaredEuclideanDistanceMeasure r0;
        org.apache.mahout.math.Vector r1, r2;
        double $d0;

        r0 := @this: org.apache.mahout.common.distance.SquaredEuclideanDistanceMeasure;

        r1 := @parameter0: org.apache.mahout.math.Vector;

        r2 := @parameter1: org.apache.mahout.math.Vector;

        $d0 = interfaceinvoke r2.<org.apache.mahout.math.Vector: double getDistanceSquared(org.apache.mahout.math.Vector)>(r1);

        return $d0;
    }

    public double distance(double, org.apache.mahout.math.Vector, org.apache.mahout.math.Vector)
    {
        org.apache.mahout.common.distance.SquaredEuclideanDistanceMeasure r0;
        double d0, $d1, $d2, $d3, $d4, $d5;
        org.apache.mahout.math.Vector r1, r2;

        r0 := @this: org.apache.mahout.common.distance.SquaredEuclideanDistanceMeasure;

        d0 := @parameter0: double;

        r1 := @parameter1: org.apache.mahout.math.Vector;

        r2 := @parameter2: org.apache.mahout.math.Vector;

        $d1 = interfaceinvoke r2.<org.apache.mahout.math.Vector: double dot(org.apache.mahout.math.Vector)>(r1);

        $d2 = 2.0 * $d1;

        $d3 = d0 - $d2;

        $d4 = interfaceinvoke r2.<org.apache.mahout.math.Vector: double getLengthSquared()>();

        $d5 = $d3 + $d4;

        return $d5;
    }
}
