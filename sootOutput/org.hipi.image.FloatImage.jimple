public class org.hipi.image.FloatImage extends org.hipi.image.RasterImage
{

    public void <init>()
    {
        org.hipi.image.FloatImage r0;
        org.hipi.image.PixelArrayFloat $r1;

        r0 := @this: org.hipi.image.FloatImage;

        $r1 = new org.hipi.image.PixelArrayFloat;

        specialinvoke $r1.<org.hipi.image.PixelArrayFloat: void <init>()>();

        specialinvoke r0.<org.hipi.image.RasterImage: void <init>(org.hipi.image.PixelArray)>($r1);

        return;
    }

    public void <init>(int, int, int) throws java.lang.IllegalArgumentException
    {
        org.hipi.image.FloatImage r0;
        int i0, i1, i2;
        org.hipi.image.PixelArrayFloat $r2;
        org.hipi.image.HipiImageHeader $r3;
        org.hipi.image.HipiImageHeader$HipiColorSpace $r4;
        org.hipi.image.HipiImageHeader$HipiImageFormat $r5;

        r0 := @this: org.hipi.image.FloatImage;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r2 = new org.hipi.image.PixelArrayFloat;

        specialinvoke $r2.<org.hipi.image.PixelArrayFloat: void <init>()>();

        specialinvoke r0.<org.hipi.image.RasterImage: void <init>(org.hipi.image.PixelArray)>($r2);

        $r3 = new org.hipi.image.HipiImageHeader;

        $r5 = <org.hipi.image.HipiImageHeader$HipiImageFormat: org.hipi.image.HipiImageHeader$HipiImageFormat UNDEFINED>;

        $r4 = <org.hipi.image.HipiImageHeader$HipiColorSpace: org.hipi.image.HipiImageHeader$HipiColorSpace UNDEFINED>;

        specialinvoke $r3.<org.hipi.image.HipiImageHeader: void <init>(org.hipi.image.HipiImageHeader$HipiImageFormat,org.hipi.image.HipiImageHeader$HipiColorSpace,int,int,int,byte[],java.util.Map)>($r5, $r4, i0, i1, i2, null, null);

        virtualinvoke r0.<org.hipi.image.FloatImage: void setHeader(org.hipi.image.HipiImageHeader)>($r3);

        return;
    }

    public void <init>(int, int, int, org.hipi.image.HipiImageHeader$HipiImageFormat, org.hipi.image.HipiImageHeader$HipiColorSpace) throws java.lang.IllegalArgumentException
    {
        org.hipi.image.FloatImage r0;
        int i0, i1, i2;
        org.hipi.image.HipiImageHeader$HipiImageFormat r1;
        org.hipi.image.HipiImageHeader$HipiColorSpace r2;
        org.hipi.image.PixelArrayFloat $r4;
        org.hipi.image.HipiImageHeader $r5;

        r0 := @this: org.hipi.image.FloatImage;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: org.hipi.image.HipiImageHeader$HipiImageFormat;

        r2 := @parameter4: org.hipi.image.HipiImageHeader$HipiColorSpace;

        $r4 = new org.hipi.image.PixelArrayFloat;

        specialinvoke $r4.<org.hipi.image.PixelArrayFloat: void <init>()>();

        specialinvoke r0.<org.hipi.image.RasterImage: void <init>(org.hipi.image.PixelArray)>($r4);

        $r5 = new org.hipi.image.HipiImageHeader;

        specialinvoke $r5.<org.hipi.image.HipiImageHeader: void <init>(org.hipi.image.HipiImageHeader$HipiImageFormat,org.hipi.image.HipiImageHeader$HipiColorSpace,int,int,int,byte[],java.util.Map)>(r1, r2, i0, i1, i2, null, null);

        virtualinvoke r0.<org.hipi.image.FloatImage: void setHeader(org.hipi.image.HipiImageHeader)>($r5);

        return;
    }

    public void <init>(int, int, int, float[]) throws java.lang.IllegalArgumentException
    {
        org.hipi.image.FloatImage r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, i8;
        float[] r1;
        org.hipi.image.PixelArrayFloat $r3;
        org.hipi.image.HipiImageHeader $r4;
        org.hipi.image.HipiImageHeader$HipiColorSpace $r5;
        org.hipi.image.HipiImageHeader$HipiImageFormat $r6;
        java.lang.IllegalArgumentException $r7;
        float $f0;
        org.hipi.image.PixelArray $r8;

        r0 := @this: org.hipi.image.FloatImage;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: float[];

        $r3 = new org.hipi.image.PixelArrayFloat;

        specialinvoke $r3.<org.hipi.image.PixelArrayFloat: void <init>()>();

        specialinvoke r0.<org.hipi.image.RasterImage: void <init>(org.hipi.image.PixelArray)>($r3);

        $r4 = new org.hipi.image.HipiImageHeader;

        $r6 = <org.hipi.image.HipiImageHeader$HipiImageFormat: org.hipi.image.HipiImageHeader$HipiImageFormat UNDEFINED>;

        $r5 = <org.hipi.image.HipiImageHeader$HipiColorSpace: org.hipi.image.HipiImageHeader$HipiColorSpace UNDEFINED>;

        specialinvoke $r4.<org.hipi.image.HipiImageHeader: void <init>(org.hipi.image.HipiImageHeader$HipiImageFormat,org.hipi.image.HipiImageHeader$HipiColorSpace,int,int,int,byte[],java.util.Map)>($r6, $r5, i0, i1, i2, null, null);

        virtualinvoke r0.<org.hipi.image.FloatImage: void setHeader(org.hipi.image.HipiImageHeader)>($r4);

        if r1 == null goto label1;

        $i5 = lengthof r1;

        $i3 = i0 * i1;

        $i4 = $i3 * i2;

        if $i5 == $i4 goto label2;

     label1:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Size of data buffer does not match image dimensions.");

        throw $r7;

     label2:
        i8 = 0;

     label3:
        $i6 = i0 * i1;

        $i7 = $i6 * i2;

        if i8 >= $i7 goto label4;

        $r8 = r0.<org.hipi.image.FloatImage: org.hipi.image.PixelArray pixelArray>;

        $f0 = r1[i8];

        virtualinvoke $r8.<org.hipi.image.PixelArray: void setElemFloat(int,float)>(i8, $f0);

        i8 = i8 + 1;

        goto label3;

     label4:
        return;
    }

    public org.hipi.image.HipiImage$HipiImageType getType()
    {
        org.hipi.image.FloatImage r0;
        org.hipi.image.HipiImage$HipiImageType $r1;

        r0 := @this: org.hipi.image.FloatImage;

        $r1 = <org.hipi.image.HipiImage$HipiImageType: org.hipi.image.HipiImage$HipiImageType FLOAT>;

        return $r1;
    }

    public float[] getData()
    {
        org.hipi.image.FloatImage r0;
        org.hipi.image.PixelArray $r1;
        org.hipi.image.PixelArrayFloat $r2;
        float[] $r3;

        r0 := @this: org.hipi.image.FloatImage;

        $r1 = r0.<org.hipi.image.FloatImage: org.hipi.image.PixelArray pixelArray>;

        $r2 = (org.hipi.image.PixelArrayFloat) $r1;

        $r3 = virtualinvoke $r2.<org.hipi.image.PixelArrayFloat: float[] getData()>();

        return $r3;
    }

    public boolean equalsWithTolerance(org.hipi.image.RasterImage, float)
    {
        org.hipi.image.FloatImage r0;
        org.hipi.image.RasterImage r1;
        float f0, $f1, $f2, $f3, $f4;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, i9;
        org.hipi.image.PixelArray r2, r3;
        double d0, $d1;
        org.hipi.image.HipiImageHeader$HipiColorSpace $r4, $r5;
        byte $b8;

        r0 := @this: org.hipi.image.FloatImage;

        r1 := @parameter0: org.hipi.image.RasterImage;

        f0 := @parameter1: float;

        if r1 != null goto label1;

        return 0;

     label1:
        i0 = virtualinvoke r0.<org.hipi.image.FloatImage: int getWidth()>();

        i1 = virtualinvoke r0.<org.hipi.image.FloatImage: int getHeight()>();

        i2 = virtualinvoke r0.<org.hipi.image.FloatImage: int getNumBands()>();

        $r4 = virtualinvoke r0.<org.hipi.image.FloatImage: org.hipi.image.HipiImageHeader$HipiColorSpace getColorSpace()>();

        $r5 = virtualinvoke r1.<org.hipi.image.RasterImage: org.hipi.image.HipiImageHeader$HipiColorSpace getColorSpace()>();

        if $r4 != $r5 goto label2;

        $i3 = virtualinvoke r1.<org.hipi.image.RasterImage: int getWidth()>();

        if $i3 != i0 goto label2;

        $i5 = virtualinvoke r1.<org.hipi.image.RasterImage: int getHeight()>();

        if $i5 != i1 goto label2;

        $i4 = virtualinvoke r1.<org.hipi.image.RasterImage: int getNumBands()>();

        if $i4 == i2 goto label3;

     label2:
        return 0;

     label3:
        r2 = virtualinvoke r0.<org.hipi.image.FloatImage: org.hipi.image.PixelArray getPixelArray()>();

        r3 = virtualinvoke r1.<org.hipi.image.RasterImage: org.hipi.image.PixelArray getPixelArray()>();

        i9 = 0;

     label4:
        $i7 = i0 * i1;

        $i6 = $i7 * i2;

        if i9 >= $i6 goto label6;

        $f2 = virtualinvoke r2.<org.hipi.image.PixelArray: float getElemFloat(int)>(i9);

        $f1 = virtualinvoke r3.<org.hipi.image.PixelArray: float getElemFloat(int)>(i9);

        $f4 = $f2 - $f1;

        $f3 = staticinvoke <java.lang.Math: float abs(float)>($f4);

        d0 = (double) $f3;

        $d1 = (double) f0;

        $b8 = d0 cmpl $d1;

        if $b8 <= 0 goto label5;

        return 0;

     label5:
        i9 = i9 + 1;

        goto label4;

     label6:
        return 1;
    }

    public boolean equals(java.lang.Object)
    {
        org.hipi.image.FloatImage r0, $r2;
        java.lang.Object r1;
        boolean $z0, $z1;

        r0 := @this: org.hipi.image.FloatImage;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.hipi.image.FloatImage;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r2 = (org.hipi.image.FloatImage) r1;

        $z1 = virtualinvoke r0.<org.hipi.image.FloatImage: boolean equalsWithTolerance(org.hipi.image.RasterImage,float)>($r2, 0.0F);

        return $z1;
    }

    public void add(org.hipi.image.FloatImage) throws java.lang.IllegalArgumentException
    {
        org.hipi.image.FloatImage r0, r1;
        int i0, i1, i2, $i3, $i4, i5;
        float[] r2, r3;
        float $f0, $f1, $f2;

        r0 := @this: org.hipi.image.FloatImage;

        r1 := @parameter0: org.hipi.image.FloatImage;

        virtualinvoke r0.<org.hipi.image.FloatImage: void checkCompatibleInputImage(org.hipi.image.FloatImage)>(r1);

        i0 = virtualinvoke r0.<org.hipi.image.FloatImage: int getWidth()>();

        i1 = virtualinvoke r0.<org.hipi.image.FloatImage: int getHeight()>();

        i2 = virtualinvoke r0.<org.hipi.image.FloatImage: int getNumBands()>();

        r2 = virtualinvoke r0.<org.hipi.image.FloatImage: float[] getData()>();

        r3 = virtualinvoke r1.<org.hipi.image.FloatImage: float[] getData()>();

        i5 = 0;

     label1:
        $i3 = i0 * i1;

        $i4 = $i3 * i2;

        if i5 >= $i4 goto label2;

        $f2 = r2[i5];

        $f0 = r3[i5];

        $f1 = $f2 + $f0;

        r2[i5] = $f1;

        i5 = i5 + 1;

        goto label1;

     label2:
        return;
    }

    public void add(float)
    {
        org.hipi.image.FloatImage r0;
        float f0, $f1, $f2;
        int i0, i1, i2, $i3, $i4, i5;
        float[] r1;

        r0 := @this: org.hipi.image.FloatImage;

        f0 := @parameter0: float;

        i0 = virtualinvoke r0.<org.hipi.image.FloatImage: int getWidth()>();

        i1 = virtualinvoke r0.<org.hipi.image.FloatImage: int getHeight()>();

        i2 = virtualinvoke r0.<org.hipi.image.FloatImage: int getNumBands()>();

        r1 = virtualinvoke r0.<org.hipi.image.FloatImage: float[] getData()>();

        i5 = 0;

     label1:
        $i3 = i0 * i1;

        $i4 = $i3 * i2;

        if i5 >= $i4 goto label2;

        $f1 = r1[i5];

        $f2 = $f1 + f0;

        r1[i5] = $f2;

        i5 = i5 + 1;

        goto label1;

     label2:
        return;
    }

    public void multiply(org.hipi.image.FloatImage) throws java.lang.IllegalArgumentException
    {
        org.hipi.image.FloatImage r0, r1;
        int i0, i1, i2, $i3, $i4, i5;
        float[] r2, r3;
        float $f0, $f1, $f2;

        r0 := @this: org.hipi.image.FloatImage;

        r1 := @parameter0: org.hipi.image.FloatImage;

        virtualinvoke r0.<org.hipi.image.FloatImage: void checkCompatibleInputImage(org.hipi.image.FloatImage)>(r1);

        i0 = virtualinvoke r0.<org.hipi.image.FloatImage: int getWidth()>();

        i1 = virtualinvoke r0.<org.hipi.image.FloatImage: int getHeight()>();

        i2 = virtualinvoke r0.<org.hipi.image.FloatImage: int getNumBands()>();

        r2 = virtualinvoke r0.<org.hipi.image.FloatImage: float[] getData()>();

        r3 = virtualinvoke r1.<org.hipi.image.FloatImage: float[] getData()>();

        i5 = 0;

     label1:
        $i3 = i0 * i1;

        $i4 = $i3 * i2;

        if i5 >= $i4 goto label2;

        $f2 = r2[i5];

        $f0 = r3[i5];

        $f1 = $f2 * $f0;

        r2[i5] = $f1;

        i5 = i5 + 1;

        goto label1;

     label2:
        return;
    }

    public void scale(float)
    {
        org.hipi.image.FloatImage r0;
        float f0, $f1, $f2;
        int i0, i1, i2, $i3, $i4, i5;
        float[] r1;

        r0 := @this: org.hipi.image.FloatImage;

        f0 := @parameter0: float;

        i0 = virtualinvoke r0.<org.hipi.image.FloatImage: int getWidth()>();

        i1 = virtualinvoke r0.<org.hipi.image.FloatImage: int getHeight()>();

        i2 = virtualinvoke r0.<org.hipi.image.FloatImage: int getNumBands()>();

        r1 = virtualinvoke r0.<org.hipi.image.FloatImage: float[] getData()>();

        i5 = 0;

     label1:
        $i3 = i0 * i1;

        $i4 = $i3 * i2;

        if i5 >= $i4 goto label2;

        $f1 = r1[i5];

        $f2 = $f1 * f0;

        r1[i5] = $f2;

        i5 = i5 + 1;

        goto label1;

     label2:
        return;
    }

    public java.lang.String hex()
    {
        org.hipi.image.FloatImage r0;
        float[] r1;
        byte[] $r2;
        java.lang.String $r3;

        r0 := @this: org.hipi.image.FloatImage;

        r1 = virtualinvoke r0.<org.hipi.image.FloatImage: float[] getData()>();

        $r2 = staticinvoke <org.hipi.util.ByteUtils: byte[] floatArrayToByteArray(float[])>(r1);

        $r3 = staticinvoke <org.hipi.util.ByteUtils: java.lang.String asHex(byte[])>($r2);

        return $r3;
    }

    protected void checkCompatibleInputImage(org.hipi.image.FloatImage) throws java.lang.IllegalArgumentException
    {
        org.hipi.image.FloatImage r0, r1;
        org.hipi.image.HipiImageHeader$HipiColorSpace $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.hipi.image.FloatImage;

        r1 := @parameter0: org.hipi.image.FloatImage;

        $r2 = virtualinvoke r1.<org.hipi.image.FloatImage: org.hipi.image.HipiImageHeader$HipiColorSpace getColorSpace()>();

        $r3 = virtualinvoke r0.<org.hipi.image.FloatImage: org.hipi.image.HipiImageHeader$HipiColorSpace getColorSpace()>();

        if $r2 != $r3 goto label1;

        $i0 = virtualinvoke r1.<org.hipi.image.FloatImage: int getWidth()>();

        $i1 = virtualinvoke r0.<org.hipi.image.FloatImage: int getWidth()>();

        if $i0 != $i1 goto label1;

        $i2 = virtualinvoke r1.<org.hipi.image.FloatImage: int getHeight()>();

        $i3 = virtualinvoke r0.<org.hipi.image.FloatImage: int getHeight()>();

        if $i2 != $i3 goto label1;

        $i4 = virtualinvoke r1.<org.hipi.image.FloatImage: int getNumBands()>();

        $i5 = virtualinvoke r0.<org.hipi.image.FloatImage: int getNumBands()>();

        if $i4 == $i5 goto label2;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Color space and/or image dimensions do not match.");

        throw $r4;

     label2:
        return;
    }
}
