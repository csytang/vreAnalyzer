public class org.apache.mahout.vectorizer.encoders.ContinuousValueEncoder extends org.apache.mahout.vectorizer.encoders.CachingValueEncoder
{

    public void <init>(java.lang.String)
    {
        org.apache.mahout.vectorizer.encoders.ContinuousValueEncoder r0;
        java.lang.String r1;

        r0 := @this: org.apache.mahout.vectorizer.encoders.ContinuousValueEncoder;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.mahout.vectorizer.encoders.CachingValueEncoder: void <init>(java.lang.String,int)>(r1, 1);

        return;
    }

    public void addToVector(byte[], double, org.apache.mahout.math.Vector)
    {
        org.apache.mahout.vectorizer.encoders.ContinuousValueEncoder r0;
        byte[] r1;
        double d0, $d1, $d2, $d3;
        org.apache.mahout.math.Vector r2;
        int i0, i1, $i2, i3;
        java.lang.String r3, $r4;
        boolean $z0;

        r0 := @this: org.apache.mahout.vectorizer.encoders.ContinuousValueEncoder;

        r1 := @parameter0: byte[];

        d0 := @parameter1: double;

        r2 := @parameter2: org.apache.mahout.math.Vector;

        i0 = virtualinvoke r0.<org.apache.mahout.vectorizer.encoders.ContinuousValueEncoder: int getProbes()>();

        r3 = virtualinvoke r0.<org.apache.mahout.vectorizer.encoders.ContinuousValueEncoder: java.lang.String getName()>();

        i3 = 0;

     label1:
        if i3 >= i0 goto label3;

        $i2 = interfaceinvoke r2.<org.apache.mahout.math.Vector: int size()>();

        i1 = virtualinvoke r0.<org.apache.mahout.vectorizer.encoders.ContinuousValueEncoder: int hashForProbe(byte[],int,java.lang.String,int)>(r1, $i2, r3, i3);

        $z0 = virtualinvoke r0.<org.apache.mahout.vectorizer.encoders.ContinuousValueEncoder: boolean isTraceEnabled()>();

        if $z0 == 0 goto label2;

        $r4 = null;

        virtualinvoke r0.<org.apache.mahout.vectorizer.encoders.ContinuousValueEncoder: void trace(java.lang.String,int)>($r4, i1);

     label2:
        $d1 = interfaceinvoke r2.<org.apache.mahout.math.Vector: double get(int)>(i1);

        $d2 = virtualinvoke r0.<org.apache.mahout.vectorizer.encoders.ContinuousValueEncoder: double getWeight(byte[],double)>(r1, d0);

        $d3 = $d1 + $d2;

        interfaceinvoke r2.<org.apache.mahout.math.Vector: void set(int,double)>(i1, $d3);

        i3 = i3 + 1;

        goto label1;

     label3:
        return;
    }

    protected double getWeight(byte[], double)
    {
        org.apache.mahout.vectorizer.encoders.ContinuousValueEncoder r0;
        byte[] r1;
        double d0, $d1, $d2;
        java.lang.String $r2;
        java.nio.charset.Charset $r3;

        r0 := @this: org.apache.mahout.vectorizer.encoders.ContinuousValueEncoder;

        r1 := @parameter0: byte[];

        d0 := @parameter1: double;

        if r1 != null goto label1;

        return d0;

     label1:
        $r2 = new java.lang.String;

        $r3 = <com.google.common.base.Charsets: java.nio.charset.Charset UTF_8>;

        specialinvoke $r2.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>(r1, $r3);

        $d1 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r2);

        $d2 = d0 * $d1;

        return $d2;
    }

    public java.lang.String asString(java.lang.String)
    {
        org.apache.mahout.vectorizer.encoders.ContinuousValueEncoder r0;
        java.lang.String r1, $r3, $r7;
        java.lang.StringBuilder $r2, $r4, $r5, $r6;

        r0 := @this: org.apache.mahout.vectorizer.encoders.ContinuousValueEncoder;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r0.<org.apache.mahout.vectorizer.encoders.ContinuousValueEncoder: java.lang.String getName()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    protected int getSeed()
    {
        org.apache.mahout.vectorizer.encoders.ContinuousValueEncoder r0;

        r0 := @this: org.apache.mahout.vectorizer.encoders.ContinuousValueEncoder;

        return 1;
    }
}
