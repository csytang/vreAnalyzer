public class org.apache.mahout.classifier.sgd.ElasticBandPrior extends java.lang.Object implements org.apache.mahout.classifier.sgd.PriorFunction
{
    private double alphaByLambda;
    private org.apache.mahout.classifier.sgd.L1 l1;
    private org.apache.mahout.classifier.sgd.L2 l2;

    public void <init>()
    {
        org.apache.mahout.classifier.sgd.ElasticBandPrior r0;

        r0 := @this: org.apache.mahout.classifier.sgd.ElasticBandPrior;

        specialinvoke r0.<org.apache.mahout.classifier.sgd.ElasticBandPrior: void <init>(double)>(0.0);

        return;
    }

    public void <init>(double)
    {
        org.apache.mahout.classifier.sgd.ElasticBandPrior r0;
        double d0;
        org.apache.mahout.classifier.sgd.L1 $r1;
        org.apache.mahout.classifier.sgd.L2 $r2;

        r0 := @this: org.apache.mahout.classifier.sgd.ElasticBandPrior;

        d0 := @parameter0: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.mahout.classifier.sgd.ElasticBandPrior: double alphaByLambda> = d0;

        $r1 = new org.apache.mahout.classifier.sgd.L1;

        specialinvoke $r1.<org.apache.mahout.classifier.sgd.L1: void <init>()>();

        r0.<org.apache.mahout.classifier.sgd.ElasticBandPrior: org.apache.mahout.classifier.sgd.L1 l1> = $r1;

        $r2 = new org.apache.mahout.classifier.sgd.L2;

        specialinvoke $r2.<org.apache.mahout.classifier.sgd.L2: void <init>(double)>(1.0);

        r0.<org.apache.mahout.classifier.sgd.ElasticBandPrior: org.apache.mahout.classifier.sgd.L2 l2> = $r2;

        return;
    }

    public double age(double, double, double)
    {
        org.apache.mahout.classifier.sgd.ElasticBandPrior r0;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, d11, d12;
        byte $b0;

        r0 := @this: org.apache.mahout.classifier.sgd.ElasticBandPrior;

        d11 := @parameter0: double;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        $d3 = r0.<org.apache.mahout.classifier.sgd.ElasticBandPrior: double alphaByLambda>;

        $d4 = $d3 * d1;

        $d5 = 1.0 - $d4;

        $d6 = staticinvoke <java.lang.Math: double pow(double,double)>($d5, d0);

        d12 = d11 * $d6;

        $d7 = staticinvoke <java.lang.Math: double signum(double)>(d12);

        $d8 = $d7 * d1;

        $d9 = $d8 * d0;

        d2 = d12 - $d9;

        $d10 = d2 * d12;

        $b0 = $d10 cmpg 0.0;

        if $b0 >= 0 goto label1;

        return 0.0;

     label1:
        return d2;
    }

    public double logP(double)
    {
        org.apache.mahout.classifier.sgd.ElasticBandPrior r0;
        double d0, $d1, $d2, $d3, $d4, $d5;
        org.apache.mahout.classifier.sgd.L1 $r1;
        org.apache.mahout.classifier.sgd.L2 $r2;

        r0 := @this: org.apache.mahout.classifier.sgd.ElasticBandPrior;

        d0 := @parameter0: double;

        $r1 = r0.<org.apache.mahout.classifier.sgd.ElasticBandPrior: org.apache.mahout.classifier.sgd.L1 l1>;

        $d1 = virtualinvoke $r1.<org.apache.mahout.classifier.sgd.L1: double logP(double)>(d0);

        $d2 = r0.<org.apache.mahout.classifier.sgd.ElasticBandPrior: double alphaByLambda>;

        $r2 = r0.<org.apache.mahout.classifier.sgd.ElasticBandPrior: org.apache.mahout.classifier.sgd.L2 l2>;

        $d3 = virtualinvoke $r2.<org.apache.mahout.classifier.sgd.L2: double logP(double)>(d0);

        $d4 = $d2 * $d3;

        $d5 = $d1 + $d4;

        return $d5;
    }

    public void write(java.io.DataOutput) throws java.io.IOException
    {
        org.apache.mahout.classifier.sgd.ElasticBandPrior r0;
        java.io.DataOutput r1;
        double $d0;
        org.apache.mahout.classifier.sgd.L1 $r2;
        org.apache.mahout.classifier.sgd.L2 $r3;

        r0 := @this: org.apache.mahout.classifier.sgd.ElasticBandPrior;

        r1 := @parameter0: java.io.DataOutput;

        $d0 = r0.<org.apache.mahout.classifier.sgd.ElasticBandPrior: double alphaByLambda>;

        interfaceinvoke r1.<java.io.DataOutput: void writeDouble(double)>($d0);

        $r2 = r0.<org.apache.mahout.classifier.sgd.ElasticBandPrior: org.apache.mahout.classifier.sgd.L1 l1>;

        virtualinvoke $r2.<org.apache.mahout.classifier.sgd.L1: void write(java.io.DataOutput)>(r1);

        $r3 = r0.<org.apache.mahout.classifier.sgd.ElasticBandPrior: org.apache.mahout.classifier.sgd.L2 l2>;

        virtualinvoke $r3.<org.apache.mahout.classifier.sgd.L2: void write(java.io.DataOutput)>(r1);

        return;
    }

    public void readFields(java.io.DataInput) throws java.io.IOException
    {
        org.apache.mahout.classifier.sgd.ElasticBandPrior r0;
        java.io.DataInput r1;
        double $d0;
        org.apache.mahout.classifier.sgd.L1 $r2, $r3;
        org.apache.mahout.classifier.sgd.L2 $r4, $r5;

        r0 := @this: org.apache.mahout.classifier.sgd.ElasticBandPrior;

        r1 := @parameter0: java.io.DataInput;

        $d0 = interfaceinvoke r1.<java.io.DataInput: double readDouble()>();

        r0.<org.apache.mahout.classifier.sgd.ElasticBandPrior: double alphaByLambda> = $d0;

        $r2 = new org.apache.mahout.classifier.sgd.L1;

        specialinvoke $r2.<org.apache.mahout.classifier.sgd.L1: void <init>()>();

        r0.<org.apache.mahout.classifier.sgd.ElasticBandPrior: org.apache.mahout.classifier.sgd.L1 l1> = $r2;

        $r3 = r0.<org.apache.mahout.classifier.sgd.ElasticBandPrior: org.apache.mahout.classifier.sgd.L1 l1>;

        virtualinvoke $r3.<org.apache.mahout.classifier.sgd.L1: void readFields(java.io.DataInput)>(r1);

        $r4 = new org.apache.mahout.classifier.sgd.L2;

        specialinvoke $r4.<org.apache.mahout.classifier.sgd.L2: void <init>()>();

        r0.<org.apache.mahout.classifier.sgd.ElasticBandPrior: org.apache.mahout.classifier.sgd.L2 l2> = $r4;

        $r5 = r0.<org.apache.mahout.classifier.sgd.ElasticBandPrior: org.apache.mahout.classifier.sgd.L2 l2>;

        virtualinvoke $r5.<org.apache.mahout.classifier.sgd.L2: void readFields(java.io.DataInput)>(r1);

        return;
    }
}
