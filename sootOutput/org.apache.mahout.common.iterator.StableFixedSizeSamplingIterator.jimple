public class org.apache.mahout.common.iterator.StableFixedSizeSamplingIterator extends com.google.common.collect.ForwardingIterator
{
    private final java.util.Iterator delegate;

    public void <init>(int, java.util.Iterator)
    {
        org.apache.mahout.common.iterator.StableFixedSizeSamplingIterator r0;
        int i0, i1, $i2, $i3, i4;
        java.util.Iterator r1, $r5, $r7;
        java.util.ArrayList r2;
        org.apache.mahout.common.RandomWrapper r3;
        java.lang.Object r4;
        boolean $z0;
        org.apache.mahout.common.iterator.StableFixedSizeSamplingIterator$1 $r6;
        org.apache.mahout.common.Pair $r8, $r12;
        java.lang.Integer $r10, $r11;

        r0 := @this: org.apache.mahout.common.iterator.StableFixedSizeSamplingIterator;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.Iterator;

        specialinvoke r0.<com.google.common.collect.ForwardingIterator: void <init>()>();

        r2 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayListWithCapacity(int)>(i0);

        i4 = 0;

        r3 = staticinvoke <org.apache.mahout.common.RandomUtils: org.apache.mahout.common.RandomWrapper getRandom()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        i4 = i4 + 1;

        $i2 = interfaceinvoke r2.<java.util.List: int size()>();

        if $i2 >= i0 goto label2;

        $r12 = new org.apache.mahout.common.Pair;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i4);

        specialinvoke $r12.<org.apache.mahout.common.Pair: void <init>(java.lang.Object,java.lang.Object)>($r11, r4);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r12);

        goto label1;

     label2:
        i1 = virtualinvoke r3.<java.util.Random: int nextInt(int)>(i4);

        $i3 = interfaceinvoke r2.<java.util.List: int size()>();

        if i1 >= $i3 goto label1;

        $r8 = new org.apache.mahout.common.Pair;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i4);

        specialinvoke $r8.<org.apache.mahout.common.Pair: void <init>(java.lang.Object,java.lang.Object)>($r10, r4);

        interfaceinvoke r2.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i1, $r8);

        goto label1;

     label3:
        staticinvoke <java.util.Collections: void sort(java.util.List)>(r2);

        $r5 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

        $r6 = new org.apache.mahout.common.iterator.StableFixedSizeSamplingIterator$1;

        specialinvoke $r6.<org.apache.mahout.common.iterator.StableFixedSizeSamplingIterator$1: void <init>(org.apache.mahout.common.iterator.StableFixedSizeSamplingIterator)>(r0);

        $r7 = staticinvoke <com.google.common.collect.Iterators: java.util.Iterator transform(java.util.Iterator,com.google.common.base.Function)>($r5, $r6);

        r0.<org.apache.mahout.common.iterator.StableFixedSizeSamplingIterator: java.util.Iterator delegate> = $r7;

        return;
    }

    protected java.util.Iterator delegate()
    {
        org.apache.mahout.common.iterator.StableFixedSizeSamplingIterator r0;
        java.util.Iterator $r1;

        r0 := @this: org.apache.mahout.common.iterator.StableFixedSizeSamplingIterator;

        $r1 = r0.<org.apache.mahout.common.iterator.StableFixedSizeSamplingIterator: java.util.Iterator delegate>;

        return $r1;
    }

    protected volatile java.lang.Object delegate()
    {
        org.apache.mahout.common.iterator.StableFixedSizeSamplingIterator r0;
        java.util.Iterator $r1;

        r0 := @this: org.apache.mahout.common.iterator.StableFixedSizeSamplingIterator;

        $r1 = virtualinvoke r0.<org.apache.mahout.common.iterator.StableFixedSizeSamplingIterator: java.util.Iterator delegate()>();

        return $r1;
    }
}
