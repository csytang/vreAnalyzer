public class org.apache.mahout.math.hadoop.MatrixMultiplicationJob extends org.apache.mahout.common.AbstractJob
{
    private static final java.lang.String OUT_CARD;

    public void <init>()
    {
        org.apache.mahout.math.hadoop.MatrixMultiplicationJob r0;

        r0 := @this: org.apache.mahout.math.hadoop.MatrixMultiplicationJob;

        specialinvoke r0.<org.apache.mahout.common.AbstractJob: void <init>()>();

        return;
    }

    public static org.apache.hadoop.conf.Configuration createMatrixMultiplyJobConf(org.apache.hadoop.fs.Path, org.apache.hadoop.fs.Path, org.apache.hadoop.fs.Path, int)
    {
        org.apache.hadoop.fs.Path r0, r1, r2;
        int i0;
        org.apache.hadoop.conf.Configuration $r3, $r4;

        r0 := @parameter0: org.apache.hadoop.fs.Path;

        r1 := @parameter1: org.apache.hadoop.fs.Path;

        r2 := @parameter2: org.apache.hadoop.fs.Path;

        i0 := @parameter3: int;

        $r3 = new org.apache.hadoop.conf.Configuration;

        specialinvoke $r3.<org.apache.hadoop.conf.Configuration: void <init>()>();

        $r4 = staticinvoke <org.apache.mahout.math.hadoop.MatrixMultiplicationJob: org.apache.hadoop.conf.Configuration createMatrixMultiplyJobConf(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,int)>($r3, r0, r1, r2, i0);

        return $r4;
    }

    public static org.apache.hadoop.conf.Configuration createMatrixMultiplyJobConf(org.apache.hadoop.conf.Configuration, org.apache.hadoop.fs.Path, org.apache.hadoop.fs.Path, org.apache.hadoop.fs.Path, int)
    {
        org.apache.hadoop.conf.Configuration r0;
        org.apache.hadoop.fs.Path r1, r2, r3;
        int i0;
        org.apache.hadoop.mapred.JobConf $r5;
        org.apache.hadoop.fs.Path[] $r6;
        java.lang.String $r7;

        r0 := @parameter0: org.apache.hadoop.conf.Configuration;

        r1 := @parameter1: org.apache.hadoop.fs.Path;

        r2 := @parameter2: org.apache.hadoop.fs.Path;

        r3 := @parameter3: org.apache.hadoop.fs.Path;

        i0 := @parameter4: int;

        $r5 = new org.apache.hadoop.mapred.JobConf;

        specialinvoke $r5.<org.apache.hadoop.mapred.JobConf: void <init>(org.apache.hadoop.conf.Configuration,java.lang.Class)>(r0, class "org/apache/mahout/math/hadoop/MatrixMultiplicationJob");

        virtualinvoke $r5.<org.apache.hadoop.mapred.JobConf: void setInputFormat(java.lang.Class)>(class "org/apache/hadoop/mapred/join/CompositeInputFormat");

        $r6 = newarray (org.apache.hadoop.fs.Path)[2];

        $r6[0] = r1;

        $r6[1] = r2;

        $r7 = staticinvoke <org.apache.hadoop.mapred.join.CompositeInputFormat: java.lang.String compose(java.lang.String,java.lang.Class,org.apache.hadoop.fs.Path[])>("inner", class "org/apache/hadoop/mapred/SequenceFileInputFormat", $r6);

        virtualinvoke $r5.<org.apache.hadoop.mapred.JobConf: void set(java.lang.String,java.lang.String)>("mapred.join.expr", $r7);

        virtualinvoke $r5.<org.apache.hadoop.mapred.JobConf: void setInt(java.lang.String,int)>("output.vector.cardinality", i0);

        virtualinvoke $r5.<org.apache.hadoop.mapred.JobConf: void setOutputFormat(java.lang.Class)>(class "org/apache/hadoop/mapred/SequenceFileOutputFormat");

        staticinvoke <org.apache.hadoop.mapred.FileOutputFormat: void setOutputPath(org.apache.hadoop.mapred.JobConf,org.apache.hadoop.fs.Path)>($r5, r3);

        virtualinvoke $r5.<org.apache.hadoop.mapred.JobConf: void setMapperClass(java.lang.Class)>(class "org/apache/mahout/math/hadoop/MatrixMultiplicationJob$MatrixMultiplyMapper");

        virtualinvoke $r5.<org.apache.hadoop.mapred.JobConf: void setCombinerClass(java.lang.Class)>(class "org/apache/mahout/math/hadoop/MatrixMultiplicationJob$MatrixMultiplicationReducer");

        virtualinvoke $r5.<org.apache.hadoop.mapred.JobConf: void setReducerClass(java.lang.Class)>(class "org/apache/mahout/math/hadoop/MatrixMultiplicationJob$MatrixMultiplicationReducer");

        virtualinvoke $r5.<org.apache.hadoop.mapred.JobConf: void setMapOutputKeyClass(java.lang.Class)>(class "org/apache/hadoop/io/IntWritable");

        virtualinvoke $r5.<org.apache.hadoop.mapred.JobConf: void setMapOutputValueClass(java.lang.Class)>(class "org/apache/mahout/math/VectorWritable");

        virtualinvoke $r5.<org.apache.hadoop.mapred.JobConf: void setOutputKeyClass(java.lang.Class)>(class "org/apache/hadoop/io/IntWritable");

        virtualinvoke $r5.<org.apache.hadoop.mapred.JobConf: void setOutputValueClass(java.lang.Class)>(class "org/apache/mahout/math/VectorWritable");

        return $r5;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        java.lang.String[] r0;
        org.apache.mahout.math.hadoop.MatrixMultiplicationJob $r1;

        r0 := @parameter0: java.lang.String[];

        $r1 = new org.apache.mahout.math.hadoop.MatrixMultiplicationJob;

        specialinvoke $r1.<org.apache.mahout.math.hadoop.MatrixMultiplicationJob: void <init>()>();

        staticinvoke <org.apache.hadoop.util.ToolRunner: int run(org.apache.hadoop.util.Tool,java.lang.String[])>($r1, r0);

        return;
    }

    public int run(java.lang.String[]) throws java.lang.Exception
    {
        org.apache.mahout.math.hadoop.MatrixMultiplicationJob r0;
        java.lang.String[] r1;
        java.util.Map r2;
        org.apache.mahout.math.hadoop.DistributedRowMatrix $r5, $r12;
        org.apache.hadoop.fs.Path $r6, $r8, $r14, $r16, $r25;
        java.lang.String $r7, $r9, $r10, $r11, $r13, $r15, $r17, $r18, $r24;
        int $i0, $i1, $i2, $i3;
        org.apache.hadoop.conf.Configuration $r19, $r20, $r21, $r22;
        boolean $z0;

        r0 := @this: org.apache.mahout.math.hadoop.MatrixMultiplicationJob;

        r1 := @parameter0: java.lang.String[];

        virtualinvoke r0.<org.apache.mahout.math.hadoop.MatrixMultiplicationJob: void addOption(java.lang.String,java.lang.String,java.lang.String,boolean)>("numRowsA", "nra", "Number of rows of the first input matrix", 1);

        virtualinvoke r0.<org.apache.mahout.math.hadoop.MatrixMultiplicationJob: void addOption(java.lang.String,java.lang.String,java.lang.String,boolean)>("numColsA", "nca", "Number of columns of the first input matrix", 1);

        virtualinvoke r0.<org.apache.mahout.math.hadoop.MatrixMultiplicationJob: void addOption(java.lang.String,java.lang.String,java.lang.String,boolean)>("numRowsB", "nrb", "Number of rows of the second input matrix", 1);

        virtualinvoke r0.<org.apache.mahout.math.hadoop.MatrixMultiplicationJob: void addOption(java.lang.String,java.lang.String,java.lang.String,boolean)>("numColsB", "ncb", "Number of columns of the second input matrix", 1);

        virtualinvoke r0.<org.apache.mahout.math.hadoop.MatrixMultiplicationJob: void addOption(java.lang.String,java.lang.String,java.lang.String,boolean)>("inputPathA", "ia", "Path to the first input matrix", 1);

        virtualinvoke r0.<org.apache.mahout.math.hadoop.MatrixMultiplicationJob: void addOption(java.lang.String,java.lang.String,java.lang.String,boolean)>("inputPathB", "ib", "Path to the second input matrix", 1);

        virtualinvoke r0.<org.apache.mahout.math.hadoop.MatrixMultiplicationJob: void addOption(java.lang.String,java.lang.String,java.lang.String,boolean)>("outputPath", "op", "Path to the output matrix", 0);

        r2 = virtualinvoke r0.<org.apache.mahout.math.hadoop.MatrixMultiplicationJob: java.util.Map parseArguments(java.lang.String[])>(r1);

        if r2 != null goto label1;

        return -1;

     label1:
        $r5 = new org.apache.mahout.math.hadoop.DistributedRowMatrix;

        $r6 = new org.apache.hadoop.fs.Path;

        $r7 = virtualinvoke r0.<org.apache.mahout.math.hadoop.MatrixMultiplicationJob: java.lang.String getOption(java.lang.String)>("inputPathA");

        specialinvoke $r6.<org.apache.hadoop.fs.Path: void <init>(java.lang.String)>($r7);

        $r8 = new org.apache.hadoop.fs.Path;

        $r9 = virtualinvoke r0.<org.apache.mahout.math.hadoop.MatrixMultiplicationJob: java.lang.String getOption(java.lang.String)>("tempDir");

        specialinvoke $r8.<org.apache.hadoop.fs.Path: void <init>(java.lang.String)>($r9);

        $r10 = virtualinvoke r0.<org.apache.mahout.math.hadoop.MatrixMultiplicationJob: java.lang.String getOption(java.lang.String)>("numRowsA");

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r10);

        $r11 = virtualinvoke r0.<org.apache.mahout.math.hadoop.MatrixMultiplicationJob: java.lang.String getOption(java.lang.String)>("numColsA");

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r11);

        specialinvoke $r5.<org.apache.mahout.math.hadoop.DistributedRowMatrix: void <init>(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,int,int)>($r6, $r8, $i0, $i1);

        $r12 = new org.apache.mahout.math.hadoop.DistributedRowMatrix;

        $r14 = new org.apache.hadoop.fs.Path;

        $r13 = virtualinvoke r0.<org.apache.mahout.math.hadoop.MatrixMultiplicationJob: java.lang.String getOption(java.lang.String)>("inputPathB");

        specialinvoke $r14.<org.apache.hadoop.fs.Path: void <init>(java.lang.String)>($r13);

        $r16 = new org.apache.hadoop.fs.Path;

        $r15 = virtualinvoke r0.<org.apache.mahout.math.hadoop.MatrixMultiplicationJob: java.lang.String getOption(java.lang.String)>("tempDir");

        specialinvoke $r16.<org.apache.hadoop.fs.Path: void <init>(java.lang.String)>($r15);

        $r17 = virtualinvoke r0.<org.apache.mahout.math.hadoop.MatrixMultiplicationJob: java.lang.String getOption(java.lang.String)>("numRowsB");

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r17);

        $r18 = virtualinvoke r0.<org.apache.mahout.math.hadoop.MatrixMultiplicationJob: java.lang.String getOption(java.lang.String)>("numColsB");

        $i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r18);

        specialinvoke $r12.<org.apache.mahout.math.hadoop.DistributedRowMatrix: void <init>(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,int,int)>($r14, $r16, $i2, $i3);

        $r20 = new org.apache.hadoop.conf.Configuration;

        $r19 = virtualinvoke r0.<org.apache.mahout.math.hadoop.MatrixMultiplicationJob: org.apache.hadoop.conf.Configuration getConf()>();

        specialinvoke $r20.<org.apache.hadoop.conf.Configuration: void <init>(org.apache.hadoop.conf.Configuration)>($r19);

        virtualinvoke $r5.<org.apache.mahout.math.hadoop.DistributedRowMatrix: void setConf(org.apache.hadoop.conf.Configuration)>($r20);

        $r22 = new org.apache.hadoop.conf.Configuration;

        $r21 = virtualinvoke r0.<org.apache.mahout.math.hadoop.MatrixMultiplicationJob: org.apache.hadoop.conf.Configuration getConf()>();

        specialinvoke $r22.<org.apache.hadoop.conf.Configuration: void <init>(org.apache.hadoop.conf.Configuration)>($r21);

        virtualinvoke $r12.<org.apache.mahout.math.hadoop.DistributedRowMatrix: void setConf(org.apache.hadoop.conf.Configuration)>($r22);

        $z0 = virtualinvoke r0.<org.apache.mahout.math.hadoop.MatrixMultiplicationJob: boolean hasOption(java.lang.String)>("outputPath");

        if $z0 == 0 goto label2;

        $r25 = new org.apache.hadoop.fs.Path;

        $r24 = virtualinvoke r0.<org.apache.mahout.math.hadoop.MatrixMultiplicationJob: java.lang.String getOption(java.lang.String)>("outputPath");

        specialinvoke $r25.<org.apache.hadoop.fs.Path: void <init>(java.lang.String)>($r24);

        virtualinvoke $r5.<org.apache.mahout.math.hadoop.DistributedRowMatrix: org.apache.mahout.math.hadoop.DistributedRowMatrix times(org.apache.mahout.math.hadoop.DistributedRowMatrix,org.apache.hadoop.fs.Path)>($r12, $r25);

        goto label3;

     label2:
        virtualinvoke $r5.<org.apache.mahout.math.hadoop.DistributedRowMatrix: org.apache.mahout.math.hadoop.DistributedRowMatrix times(org.apache.mahout.math.hadoop.DistributedRowMatrix)>($r12);

     label3:
        return 0;
    }

    public static void <clinit>()
    {
        <org.apache.mahout.math.hadoop.MatrixMultiplicationJob: java.lang.String OUT_CARD> = "output.vector.cardinality";

        return;
    }
}
