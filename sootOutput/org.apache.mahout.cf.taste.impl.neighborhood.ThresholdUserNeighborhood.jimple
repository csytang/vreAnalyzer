public final class org.apache.mahout.cf.taste.impl.neighborhood.ThresholdUserNeighborhood extends org.apache.mahout.cf.taste.impl.neighborhood.AbstractUserNeighborhood
{
    private final double threshold;

    public void <init>(double, org.apache.mahout.cf.taste.similarity.UserSimilarity, org.apache.mahout.cf.taste.model.DataModel)
    {
        org.apache.mahout.cf.taste.impl.neighborhood.ThresholdUserNeighborhood r0;
        double d0;
        org.apache.mahout.cf.taste.similarity.UserSimilarity r1;
        org.apache.mahout.cf.taste.model.DataModel r2;

        r0 := @this: org.apache.mahout.cf.taste.impl.neighborhood.ThresholdUserNeighborhood;

        d0 := @parameter0: double;

        r1 := @parameter1: org.apache.mahout.cf.taste.similarity.UserSimilarity;

        r2 := @parameter2: org.apache.mahout.cf.taste.model.DataModel;

        specialinvoke r0.<org.apache.mahout.cf.taste.impl.neighborhood.ThresholdUserNeighborhood: void <init>(double,org.apache.mahout.cf.taste.similarity.UserSimilarity,org.apache.mahout.cf.taste.model.DataModel,double)>(d0, r1, r2, 1.0);

        return;
    }

    public void <init>(double, org.apache.mahout.cf.taste.similarity.UserSimilarity, org.apache.mahout.cf.taste.model.DataModel, double)
    {
        org.apache.mahout.cf.taste.impl.neighborhood.ThresholdUserNeighborhood r0;
        double d0, d1;
        org.apache.mahout.cf.taste.similarity.UserSimilarity r1;
        org.apache.mahout.cf.taste.model.DataModel r2;
        boolean $z0, $z1;

        r0 := @this: org.apache.mahout.cf.taste.impl.neighborhood.ThresholdUserNeighborhood;

        d0 := @parameter0: double;

        r1 := @parameter1: org.apache.mahout.cf.taste.similarity.UserSimilarity;

        r2 := @parameter2: org.apache.mahout.cf.taste.model.DataModel;

        d1 := @parameter3: double;

        specialinvoke r0.<org.apache.mahout.cf.taste.impl.neighborhood.AbstractUserNeighborhood: void <init>(org.apache.mahout.cf.taste.similarity.UserSimilarity,org.apache.mahout.cf.taste.model.DataModel,double)>(r1, r2, d1);

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "threshold must not be NaN");

        r0.<org.apache.mahout.cf.taste.impl.neighborhood.ThresholdUserNeighborhood: double threshold> = d0;

        return;
    }

    public long[] getUserNeighborhood(long) throws org.apache.mahout.cf.taste.common.TasteException
    {
        org.apache.mahout.cf.taste.impl.neighborhood.ThresholdUserNeighborhood r0;
        long l0, l1;
        org.apache.mahout.cf.taste.model.DataModel r1;
        org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator r3, $r6;
        org.apache.mahout.cf.taste.similarity.UserSimilarity r4;
        double d0, $d1, $d2;
        org.apache.mahout.cf.taste.impl.common.FastIDSet $r5;
        boolean $z0, $z1;
        java.lang.Object $r7;
        long[] $r8;
        java.lang.Long $r9;
        byte $b2, $b3;

        r0 := @this: org.apache.mahout.cf.taste.impl.neighborhood.ThresholdUserNeighborhood;

        l0 := @parameter0: long;

        r1 = virtualinvoke r0.<org.apache.mahout.cf.taste.impl.neighborhood.ThresholdUserNeighborhood: org.apache.mahout.cf.taste.model.DataModel getDataModel()>();

        $r5 = new org.apache.mahout.cf.taste.impl.common.FastIDSet;

        specialinvoke $r5.<org.apache.mahout.cf.taste.impl.common.FastIDSet: void <init>()>();

        $r6 = interfaceinvoke r1.<org.apache.mahout.cf.taste.model.DataModel: org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator getUserIDs()>();

        $d1 = virtualinvoke r0.<org.apache.mahout.cf.taste.impl.neighborhood.ThresholdUserNeighborhood: double getSamplingRate()>();

        r3 = staticinvoke <org.apache.mahout.cf.taste.impl.common.SamplingLongPrimitiveIterator: org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator maybeWrapIterator(org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator,double)>($r6, $d1);

        r4 = virtualinvoke r0.<org.apache.mahout.cf.taste.impl.neighborhood.ThresholdUserNeighborhood: org.apache.mahout.cf.taste.similarity.UserSimilarity getUserSimilarity()>();

     label1:
        $z0 = interfaceinvoke r3.<org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r3.<org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator: java.lang.Object next()>();

        $r9 = (java.lang.Long) $r7;

        l1 = virtualinvoke $r9.<java.lang.Long: long longValue()>();

        $b2 = l0 cmp l1;

        if $b2 == 0 goto label1;

        d0 = interfaceinvoke r4.<org.apache.mahout.cf.taste.similarity.UserSimilarity: double userSimilarity(long,long)>(l0, l1);

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z1 != 0 goto label1;

        $d2 = r0.<org.apache.mahout.cf.taste.impl.neighborhood.ThresholdUserNeighborhood: double threshold>;

        $b3 = d0 cmpl $d2;

        if $b3 < 0 goto label1;

        virtualinvoke $r5.<org.apache.mahout.cf.taste.impl.common.FastIDSet: boolean add(long)>(l1);

        goto label1;

     label2:
        $r8 = virtualinvoke $r5.<org.apache.mahout.cf.taste.impl.common.FastIDSet: long[] toArray()>();

        return $r8;
    }

    public java.lang.String toString()
    {
        org.apache.mahout.cf.taste.impl.neighborhood.ThresholdUserNeighborhood r0;

        r0 := @this: org.apache.mahout.cf.taste.impl.neighborhood.ThresholdUserNeighborhood;

        return "ThresholdUserNeighborhood";
    }
}
