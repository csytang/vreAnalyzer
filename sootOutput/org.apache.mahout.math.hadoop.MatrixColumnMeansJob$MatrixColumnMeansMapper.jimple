public class org.apache.mahout.math.hadoop.MatrixColumnMeansJob$MatrixColumnMeansMapper extends org.apache.hadoop.mapreduce.Mapper
{
    private org.apache.mahout.math.Vector runningSum;
    private java.lang.String vectorClass;

    public void <init>()
    {
        org.apache.mahout.math.hadoop.MatrixColumnMeansJob$MatrixColumnMeansMapper r0;

        r0 := @this: org.apache.mahout.math.hadoop.MatrixColumnMeansJob$MatrixColumnMeansMapper;

        specialinvoke r0.<org.apache.hadoop.mapreduce.Mapper: void <init>()>();

        return;
    }

    public void setup(org.apache.hadoop.mapreduce.Mapper$Context)
    {
        org.apache.mahout.math.hadoop.MatrixColumnMeansJob$MatrixColumnMeansMapper r0;
        org.apache.hadoop.mapreduce.Mapper$Context r1;
        org.apache.hadoop.conf.Configuration $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.mahout.math.hadoop.MatrixColumnMeansJob$MatrixColumnMeansMapper;

        r1 := @parameter0: org.apache.hadoop.mapreduce.Mapper$Context;

        $r2 = virtualinvoke r1.<org.apache.hadoop.mapreduce.Mapper$Context: org.apache.hadoop.conf.Configuration getConfiguration()>();

        $r3 = virtualinvoke $r2.<org.apache.hadoop.conf.Configuration: java.lang.String get(java.lang.String)>("DistributedRowMatrix.columnMeans.vector.class");

        r0.<org.apache.mahout.math.hadoop.MatrixColumnMeansJob$MatrixColumnMeansMapper: java.lang.String vectorClass> = $r3;

        return;
    }

    public void map(org.apache.hadoop.io.Writable, org.apache.mahout.math.VectorWritable, org.apache.hadoop.mapreduce.Mapper$Context) throws java.io.IOException
    {
        org.apache.mahout.math.hadoop.MatrixColumnMeansJob$MatrixColumnMeansMapper r0;
        org.apache.hadoop.io.Writable r1;
        org.apache.mahout.math.VectorWritable r2;
        org.apache.hadoop.mapreduce.Mapper$Context r3;
        org.apache.mahout.math.Vector $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r17, $r19, $r21, $r22, $r23, $r24, $r25;
        double $d0, $d1;
        int $i0, $i1, $i2, $i3;
        org.apache.mahout.math.function.DoubleDoubleFunction $r12;
        java.lang.Class $r13;
        java.lang.Class[] $r14;
        java.lang.String $r15;
        java.lang.Object[] $r16;
        java.lang.Integer $r18;
        java.lang.Object $r20;

        r0 := @this: org.apache.mahout.math.hadoop.MatrixColumnMeansJob$MatrixColumnMeansMapper;

        r1 := @parameter0: org.apache.hadoop.io.Writable;

        r2 := @parameter1: org.apache.mahout.math.VectorWritable;

        r3 := @parameter2: org.apache.hadoop.mapreduce.Mapper$Context;

        $r4 = r0.<org.apache.mahout.math.hadoop.MatrixColumnMeansJob$MatrixColumnMeansMapper: org.apache.mahout.math.Vector runningSum>;

        if $r4 != null goto label1;

        $r15 = r0.<org.apache.mahout.math.hadoop.MatrixColumnMeansJob$MatrixColumnMeansMapper: java.lang.String vectorClass>;

        $r14 = newarray (java.lang.Class)[1];

        $r13 = <java.lang.Integer: java.lang.Class TYPE>;

        $r14[0] = $r13;

        $r16 = newarray (java.lang.Object)[1];

        $r17 = virtualinvoke r2.<org.apache.mahout.math.VectorWritable: org.apache.mahout.math.Vector get()>();

        $i1 = interfaceinvoke $r17.<org.apache.mahout.math.Vector: int size()>();

        $i2 = $i1 + 1;

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r16[0] = $r18;

        $r20 = staticinvoke <org.apache.mahout.common.ClassUtils: java.lang.Object instantiateAs(java.lang.String,java.lang.Class,java.lang.Class[],java.lang.Object[])>($r15, class "org/apache/mahout/math/Vector", $r14, $r16);

        $r19 = (org.apache.mahout.math.Vector) $r20;

        r0.<org.apache.mahout.math.hadoop.MatrixColumnMeansJob$MatrixColumnMeansMapper: org.apache.mahout.math.Vector runningSum> = $r19;

        $r22 = r0.<org.apache.mahout.math.hadoop.MatrixColumnMeansJob$MatrixColumnMeansMapper: org.apache.mahout.math.Vector runningSum>;

        interfaceinvoke $r22.<org.apache.mahout.math.Vector: void set(int,double)>(0, 1.0);

        $r21 = r0.<org.apache.mahout.math.hadoop.MatrixColumnMeansJob$MatrixColumnMeansMapper: org.apache.mahout.math.Vector runningSum>;

        $r24 = virtualinvoke r2.<org.apache.mahout.math.VectorWritable: org.apache.mahout.math.Vector get()>();

        $i3 = interfaceinvoke $r24.<org.apache.mahout.math.Vector: int size()>();

        $r23 = interfaceinvoke $r21.<org.apache.mahout.math.Vector: org.apache.mahout.math.Vector viewPart(int,int)>(1, $i3);

        $r25 = virtualinvoke r2.<org.apache.mahout.math.VectorWritable: org.apache.mahout.math.Vector get()>();

        interfaceinvoke $r23.<org.apache.mahout.math.Vector: org.apache.mahout.math.Vector assign(org.apache.mahout.math.Vector)>($r25);

        goto label2;

     label1:
        $r6 = r0.<org.apache.mahout.math.hadoop.MatrixColumnMeansJob$MatrixColumnMeansMapper: org.apache.mahout.math.Vector runningSum>;

        $r5 = r0.<org.apache.mahout.math.hadoop.MatrixColumnMeansJob$MatrixColumnMeansMapper: org.apache.mahout.math.Vector runningSum>;

        $d0 = interfaceinvoke $r5.<org.apache.mahout.math.Vector: double get(int)>(0);

        $d1 = $d0 + 1.0;

        interfaceinvoke $r6.<org.apache.mahout.math.Vector: void set(int,double)>(0, $d1);

        $r7 = r0.<org.apache.mahout.math.hadoop.MatrixColumnMeansJob$MatrixColumnMeansMapper: org.apache.mahout.math.Vector runningSum>;

        $r8 = virtualinvoke r2.<org.apache.mahout.math.VectorWritable: org.apache.mahout.math.Vector get()>();

        $i0 = interfaceinvoke $r8.<org.apache.mahout.math.Vector: int size()>();

        $r9 = interfaceinvoke $r7.<org.apache.mahout.math.Vector: org.apache.mahout.math.Vector viewPart(int,int)>(1, $i0);

        $r10 = virtualinvoke r2.<org.apache.mahout.math.VectorWritable: org.apache.mahout.math.Vector get()>();

        $r12 = <org.apache.mahout.math.function.Functions: org.apache.mahout.math.function.DoubleDoubleFunction PLUS>;

        interfaceinvoke $r9.<org.apache.mahout.math.Vector: org.apache.mahout.math.Vector assign(org.apache.mahout.math.Vector,org.apache.mahout.math.function.DoubleDoubleFunction)>($r10, $r12);

     label2:
        return;
    }

    public void cleanup(org.apache.hadoop.mapreduce.Mapper$Context) throws java.lang.InterruptedException, java.io.IOException
    {
        org.apache.mahout.math.hadoop.MatrixColumnMeansJob$MatrixColumnMeansMapper r0;
        org.apache.hadoop.mapreduce.Mapper$Context r1;
        org.apache.mahout.math.Vector $r2, $r5;
        org.apache.hadoop.io.NullWritable $r3;
        org.apache.mahout.math.VectorWritable $r4;

        r0 := @this: org.apache.mahout.math.hadoop.MatrixColumnMeansJob$MatrixColumnMeansMapper;

        r1 := @parameter0: org.apache.hadoop.mapreduce.Mapper$Context;

        $r2 = r0.<org.apache.mahout.math.hadoop.MatrixColumnMeansJob$MatrixColumnMeansMapper: org.apache.mahout.math.Vector runningSum>;

        if $r2 == null goto label1;

        $r3 = staticinvoke <org.apache.hadoop.io.NullWritable: org.apache.hadoop.io.NullWritable get()>();

        $r4 = new org.apache.mahout.math.VectorWritable;

        $r5 = r0.<org.apache.mahout.math.hadoop.MatrixColumnMeansJob$MatrixColumnMeansMapper: org.apache.mahout.math.Vector runningSum>;

        specialinvoke $r4.<org.apache.mahout.math.VectorWritable: void <init>(org.apache.mahout.math.Vector)>($r5);

        virtualinvoke r1.<org.apache.hadoop.mapreduce.Mapper$Context: void write(java.lang.Object,java.lang.Object)>($r3, $r4);

     label1:
        return;
    }

    public volatile void map(java.lang.Object, java.lang.Object, org.apache.hadoop.mapreduce.Mapper$Context) throws java.io.IOException, java.lang.InterruptedException
    {
        org.apache.mahout.math.hadoop.MatrixColumnMeansJob$MatrixColumnMeansMapper r0;
        java.lang.Object r1, r2;
        org.apache.hadoop.mapreduce.Mapper$Context r3;
        org.apache.mahout.math.VectorWritable $r4;
        org.apache.hadoop.io.Writable $r5;

        r0 := @this: org.apache.mahout.math.hadoop.MatrixColumnMeansJob$MatrixColumnMeansMapper;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: org.apache.hadoop.mapreduce.Mapper$Context;

        $r5 = (org.apache.hadoop.io.Writable) r1;

        $r4 = (org.apache.mahout.math.VectorWritable) r2;

        virtualinvoke r0.<org.apache.mahout.math.hadoop.MatrixColumnMeansJob$MatrixColumnMeansMapper: void map(org.apache.hadoop.io.Writable,org.apache.mahout.math.VectorWritable,org.apache.hadoop.mapreduce.Mapper$Context)>($r5, $r4, r3);

        return;
    }
}
