public final class org.apache.mahout.common.iterator.FixedSizeSamplingIterator extends com.google.common.collect.ForwardingIterator
{
    private final java.util.Iterator delegate;

    public void <init>(int, java.util.Iterator)
    {
        org.apache.mahout.common.iterator.FixedSizeSamplingIterator r0;
        int i0, i1, $i2, $i3, i4;
        java.util.Iterator r1, $r5;
        java.util.ArrayList r2;
        org.apache.mahout.common.RandomWrapper r3;
        java.lang.Object r4;
        boolean $z0;

        r0 := @this: org.apache.mahout.common.iterator.FixedSizeSamplingIterator;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.Iterator;

        specialinvoke r0.<com.google.common.collect.ForwardingIterator: void <init>()>();

        r2 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayListWithCapacity(int)>(i0);

        i4 = 0;

        r3 = staticinvoke <org.apache.mahout.common.RandomUtils: org.apache.mahout.common.RandomWrapper getRandom()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        i4 = i4 + 1;

        $i2 = interfaceinvoke r2.<java.util.List: int size()>();

        if $i2 >= i0 goto label2;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r4);

        goto label1;

     label2:
        i1 = virtualinvoke r3.<java.util.Random: int nextInt(int)>(i4);

        $i3 = interfaceinvoke r2.<java.util.List: int size()>();

        if i1 >= $i3 goto label1;

        interfaceinvoke r2.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i1, r4);

        goto label1;

     label3:
        $r5 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

        r0.<org.apache.mahout.common.iterator.FixedSizeSamplingIterator: java.util.Iterator delegate> = $r5;

        return;
    }

    protected java.util.Iterator delegate()
    {
        org.apache.mahout.common.iterator.FixedSizeSamplingIterator r0;
        java.util.Iterator $r1;

        r0 := @this: org.apache.mahout.common.iterator.FixedSizeSamplingIterator;

        $r1 = r0.<org.apache.mahout.common.iterator.FixedSizeSamplingIterator: java.util.Iterator delegate>;

        return $r1;
    }

    protected volatile java.lang.Object delegate()
    {
        org.apache.mahout.common.iterator.FixedSizeSamplingIterator r0;
        java.util.Iterator $r1;

        r0 := @this: org.apache.mahout.common.iterator.FixedSizeSamplingIterator;

        $r1 = virtualinvoke r0.<org.apache.mahout.common.iterator.FixedSizeSamplingIterator: java.util.Iterator delegate()>();

        return $r1;
    }
}
