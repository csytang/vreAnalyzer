public class org.apache.mahout.vectorizer.collocations.llr.LLRReducer extends org.apache.hadoop.mapreduce.Reducer
{
    private static final org.slf4j.Logger log;
    public static final java.lang.String NGRAM_TOTAL;
    public static final java.lang.String MIN_LLR;
    public static final float DEFAULT_MIN_LLR;
    private long ngramTotal;
    private float minLLRValue;
    private boolean emitUnigrams;
    private final org.apache.mahout.vectorizer.collocations.llr.LLRReducer$LLCallback ll;

    protected void reduce(org.apache.mahout.vectorizer.collocations.llr.Gram, java.lang.Iterable, org.apache.hadoop.mapreduce.Reducer$Context) throws java.io.IOException, java.lang.InterruptedException
    {
        org.apache.mahout.vectorizer.collocations.llr.LLRReducer r0;
        org.apache.mahout.vectorizer.collocations.llr.Gram r1, r5;
        java.lang.Iterable r2;
        org.apache.hadoop.mapreduce.Reducer$Context r3;
        long l0, l1, $l15, $l17, l26, l27;
        double d0, $d1, $d2;
        int[] $r6;
        org.apache.mahout.vectorizer.collocations.llr.Gram$Type $r8, $r9, $r20, $r25, $r26, $r30, $r31;
        int $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i16, $i19, $i20, $i21, $i22, $i23;
        org.apache.mahout.vectorizer.collocations.llr.LLRReducer$LLCallback $r10;
        byte $b18, $b24;
        org.apache.hadoop.io.Text $r11, $r39;
        float $f0;
        org.apache.mahout.vectorizer.collocations.llr.LLRReducer$Skipped $r12, $r18, $r23, $r28, $r32, $r36;
        org.apache.hadoop.mapreduce.Counter $r13, $r17, $r22, $r29, $r33, $r35;
        java.lang.String $r14, $r24, $r37, $r41, $r42;
        org.apache.hadoop.io.DoubleWritable $r15, $r34;
        org.slf4j.Logger $r16, $r19, $r27, $r44;
        java.lang.Object $r21;
        boolean $z0, $z1;
        java.lang.Object[] $r38;
        java.lang.IllegalArgumentException $r40;
        java.lang.Integer $r43, $r48;
        java.lang.Long $r45, $r46, $r47, $r49;
        java.lang.String[] r52;
        java.util.Iterator r53;

        r0 := @this: org.apache.mahout.vectorizer.collocations.llr.LLRReducer;

        r1 := @parameter0: org.apache.mahout.vectorizer.collocations.llr.Gram;

        r2 := @parameter1: java.lang.Iterable;

        r3 := @parameter2: org.apache.hadoop.mapreduce.Reducer$Context;

        $r6 = newarray (int)[2];

        $r6[0] = -1;

        $r6[1] = -1;

        $r9 = virtualinvoke r1.<org.apache.mahout.vectorizer.collocations.llr.Gram: org.apache.mahout.vectorizer.collocations.llr.Gram$Type getType()>();

        $r8 = <org.apache.mahout.vectorizer.collocations.llr.Gram$Type: org.apache.mahout.vectorizer.collocations.llr.Gram$Type UNIGRAM>;

        if $r9 != $r8 goto label01;

        $z0 = r0.<org.apache.mahout.vectorizer.collocations.llr.LLRReducer: boolean emitUnigrams>;

        if $z0 == 0 goto label01;

        $r34 = new org.apache.hadoop.io.DoubleWritable;

        $i21 = virtualinvoke r1.<org.apache.mahout.vectorizer.collocations.llr.Gram: int getFrequency()>();

        $d2 = (double) $i21;

        specialinvoke $r34.<org.apache.hadoop.io.DoubleWritable: void <init>(double)>($d2);

        $r39 = new org.apache.hadoop.io.Text;

        $r41 = virtualinvoke r1.<org.apache.mahout.vectorizer.collocations.llr.Gram: java.lang.String getString()>();

        specialinvoke $r39.<org.apache.hadoop.io.Text: void <init>(java.lang.String)>($r41);

        virtualinvoke r3.<org.apache.hadoop.mapreduce.Reducer$Context: void write(java.lang.Object,java.lang.Object)>($r39, $r34);

        return;

     label01:
        r52 = newarray (java.lang.String)[2];

        r53 = interfaceinvoke r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label02:
        $z1 = interfaceinvoke r53.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label08;

        $r21 = interfaceinvoke r53.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.mahout.vectorizer.collocations.llr.Gram) $r21;

        $r20 = virtualinvoke r5.<org.apache.mahout.vectorizer.collocations.llr.Gram: org.apache.mahout.vectorizer.collocations.llr.Gram$Type getType()>();

        $r25 = <org.apache.mahout.vectorizer.collocations.llr.Gram$Type: org.apache.mahout.vectorizer.collocations.llr.Gram$Type HEAD>;

        if $r20 != $r25 goto label03;

        $b24 = 0;

        goto label04;

     label03:
        $b24 = 1;

     label04:
        $i20 = $r6[$b24];

        if $i20 == -1 goto label07;

        $r27 = <org.apache.mahout.vectorizer.collocations.llr.LLRReducer: org.slf4j.Logger log>;

        $r26 = virtualinvoke r5.<org.apache.mahout.vectorizer.collocations.llr.Gram: org.apache.mahout.vectorizer.collocations.llr.Gram$Type getType()>();

        interfaceinvoke $r27.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>("Extra {} for {}, skipping", $r26, r1);

        $r30 = virtualinvoke r5.<org.apache.mahout.vectorizer.collocations.llr.Gram: org.apache.mahout.vectorizer.collocations.llr.Gram$Type getType()>();

        $r31 = <org.apache.mahout.vectorizer.collocations.llr.Gram$Type: org.apache.mahout.vectorizer.collocations.llr.Gram$Type HEAD>;

        if $r30 != $r31 goto label05;

        $r28 = <org.apache.mahout.vectorizer.collocations.llr.LLRReducer$Skipped: org.apache.mahout.vectorizer.collocations.llr.LLRReducer$Skipped EXTRA_HEAD>;

        $r29 = virtualinvoke r3.<org.apache.hadoop.mapreduce.Reducer$Context: org.apache.hadoop.mapreduce.Counter getCounter(java.lang.Enum)>($r28);

        interfaceinvoke $r29.<org.apache.hadoop.mapreduce.Counter: void increment(long)>(1L);

        goto label06;

     label05:
        $r32 = <org.apache.mahout.vectorizer.collocations.llr.LLRReducer$Skipped: org.apache.mahout.vectorizer.collocations.llr.LLRReducer$Skipped EXTRA_TAIL>;

        $r33 = virtualinvoke r3.<org.apache.hadoop.mapreduce.Reducer$Context: org.apache.hadoop.mapreduce.Counter getCounter(java.lang.Enum)>($r32);

        interfaceinvoke $r33.<org.apache.hadoop.mapreduce.Counter: void increment(long)>(1L);

     label06:
        return;

     label07:
        $r24 = virtualinvoke r5.<org.apache.mahout.vectorizer.collocations.llr.Gram: java.lang.String getString()>();

        r52[$b24] = $r24;

        $i19 = virtualinvoke r5.<org.apache.mahout.vectorizer.collocations.llr.Gram: int getFrequency()>();

        $r6[$b24] = $i19;

        goto label02;

     label08:
        $i3 = $r6[0];

        if $i3 != -1 goto label09;

        $r16 = <org.apache.mahout.vectorizer.collocations.llr.LLRReducer: org.slf4j.Logger log>;

        interfaceinvoke $r16.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object)>("Missing head for {}, skipping.", r1);

        $r23 = <org.apache.mahout.vectorizer.collocations.llr.LLRReducer$Skipped: org.apache.mahout.vectorizer.collocations.llr.LLRReducer$Skipped MISSING_HEAD>;

        $r22 = virtualinvoke r3.<org.apache.hadoop.mapreduce.Reducer$Context: org.apache.hadoop.mapreduce.Counter getCounter(java.lang.Enum)>($r23);

        interfaceinvoke $r22.<org.apache.hadoop.mapreduce.Counter: void increment(long)>(1L);

        return;

     label09:
        $i2 = $r6[1];

        if $i2 != -1 goto label10;

        $r19 = <org.apache.mahout.vectorizer.collocations.llr.LLRReducer: org.slf4j.Logger log>;

        interfaceinvoke $r19.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object)>("Missing tail for {}, skipping", r1);

        $r18 = <org.apache.mahout.vectorizer.collocations.llr.LLRReducer$Skipped: org.apache.mahout.vectorizer.collocations.llr.LLRReducer$Skipped MISSING_TAIL>;

        $r17 = virtualinvoke r3.<org.apache.hadoop.mapreduce.Reducer$Context: org.apache.hadoop.mapreduce.Counter getCounter(java.lang.Enum)>($r18);

        interfaceinvoke $r17.<org.apache.hadoop.mapreduce.Counter: void increment(long)>(1L);

        return;

     label10:
        $i5 = virtualinvoke r1.<org.apache.mahout.vectorizer.collocations.llr.Gram: int getFrequency()>();

        l26 = (long) $i5;

        $i4 = $r6[0];

        $i7 = virtualinvoke r1.<org.apache.mahout.vectorizer.collocations.llr.Gram: int getFrequency()>();

        $i6 = $i4 - $i7;

        l27 = (long) $i6;

        $i9 = $r6[1];

        $i8 = virtualinvoke r1.<org.apache.mahout.vectorizer.collocations.llr.Gram: int getFrequency()>();

        $i11 = $i9 - $i8;

        l0 = (long) $i11;

        $l15 = r0.<org.apache.mahout.vectorizer.collocations.llr.LLRReducer: long ngramTotal>;

        $i14 = $r6[0];

        $i10 = $r6[1];

        $i12 = $i14 + $i10;

        $i13 = virtualinvoke r1.<org.apache.mahout.vectorizer.collocations.llr.Gram: int getFrequency()>();

        $i16 = $i12 - $i13;

        $l17 = (long) $i16;

        l1 = $l15 - $l17;

     label11:
        $r10 = r0.<org.apache.mahout.vectorizer.collocations.llr.LLRReducer: org.apache.mahout.vectorizer.collocations.llr.LLRReducer$LLCallback ll>;

        d0 = interfaceinvoke $r10.<org.apache.mahout.vectorizer.collocations.llr.LLRReducer$LLCallback: double logLikelihoodRatio(long,long,long,long)>(l26, l27, l0, l1);

     label12:
        goto label14;

     label13:
        $r40 := @caughtexception;

        $r36 = <org.apache.mahout.vectorizer.collocations.llr.LLRReducer$Skipped: org.apache.mahout.vectorizer.collocations.llr.LLRReducer$Skipped LLR_CALCULATION_ERROR>;

        $r35 = virtualinvoke r3.<org.apache.hadoop.mapreduce.Reducer$Context: org.apache.hadoop.mapreduce.Counter getCounter(java.lang.Enum)>($r36);

        interfaceinvoke $r35.<org.apache.hadoop.mapreduce.Counter: void increment(long)>(1L);

        $r44 = <org.apache.mahout.vectorizer.collocations.llr.LLRReducer: org.slf4j.Logger log>;

        $r38 = newarray (java.lang.Object)[10];

        $r38[0] = r1;

        $r37 = r52[0];

        $r38[1] = $r37;

        $i23 = $r6[0];

        $r43 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i23);

        $r38[2] = $r43;

        $r42 = r52[1];

        $r38[3] = $r42;

        $i22 = $r6[1];

        $r48 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i22);

        $r38[4] = $r48;

        $r47 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l26);

        $r38[5] = $r47;

        $r46 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l27);

        $r38[6] = $r46;

        $r45 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r38[7] = $r45;

        $r49 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        $r38[8] = $r49;

        $r38[9] = $r40;

        interfaceinvoke $r44.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object[])>("Problem calculating LLR ratio for ngram {}, HEAD {}:{}, TAIL {}:{}, k11/k12/k21/k22: {}/{}/{}/{}", $r38);

        return;

     label14:
        $f0 = r0.<org.apache.mahout.vectorizer.collocations.llr.LLRReducer: float minLLRValue>;

        $d1 = (double) $f0;

        $b18 = d0 cmpg $d1;

        if $b18 >= 0 goto label15;

        $r12 = <org.apache.mahout.vectorizer.collocations.llr.LLRReducer$Skipped: org.apache.mahout.vectorizer.collocations.llr.LLRReducer$Skipped LESS_THAN_MIN_LLR>;

        $r13 = virtualinvoke r3.<org.apache.hadoop.mapreduce.Reducer$Context: org.apache.hadoop.mapreduce.Counter getCounter(java.lang.Enum)>($r12);

        interfaceinvoke $r13.<org.apache.hadoop.mapreduce.Counter: void increment(long)>(1L);

        goto label16;

     label15:
        $r11 = new org.apache.hadoop.io.Text;

        $r14 = virtualinvoke r1.<org.apache.mahout.vectorizer.collocations.llr.Gram: java.lang.String getString()>();

        specialinvoke $r11.<org.apache.hadoop.io.Text: void <init>(java.lang.String)>($r14);

        $r15 = new org.apache.hadoop.io.DoubleWritable;

        specialinvoke $r15.<org.apache.hadoop.io.DoubleWritable: void <init>(double)>(d0);

        virtualinvoke r3.<org.apache.hadoop.mapreduce.Reducer$Context: void write(java.lang.Object,java.lang.Object)>($r11, $r15);

     label16:
        return;

        catch java.lang.IllegalArgumentException from label11 to label12 with label13;
    }

    protected void setup(org.apache.hadoop.mapreduce.Reducer$Context) throws java.io.IOException, java.lang.InterruptedException
    {
        org.apache.mahout.vectorizer.collocations.llr.LLRReducer r0;
        org.apache.hadoop.mapreduce.Reducer$Context r1;
        org.apache.hadoop.conf.Configuration r2;
        long $l0, $l1, $l2;
        float $f0, $f1;
        boolean $z0, $z1;
        java.lang.Object[] $r3;
        org.slf4j.Logger $r4;
        java.lang.Long $r5;
        java.lang.Float $r6;
        java.lang.Boolean $r7;
        java.lang.IllegalStateException $r8;
        byte $b3;

        r0 := @this: org.apache.mahout.vectorizer.collocations.llr.LLRReducer;

        r1 := @parameter0: org.apache.hadoop.mapreduce.Reducer$Context;

        specialinvoke r0.<org.apache.hadoop.mapreduce.Reducer: void setup(org.apache.hadoop.mapreduce.Reducer$Context)>(r1);

        r2 = virtualinvoke r1.<org.apache.hadoop.mapreduce.Reducer$Context: org.apache.hadoop.conf.Configuration getConfiguration()>();

        $l0 = virtualinvoke r2.<org.apache.hadoop.conf.Configuration: long getLong(java.lang.String,long)>("ngramTotal", -1L);

        r0.<org.apache.mahout.vectorizer.collocations.llr.LLRReducer: long ngramTotal> = $l0;

        $f0 = virtualinvoke r2.<org.apache.hadoop.conf.Configuration: float getFloat(java.lang.String,float)>("minLLR", 1.0F);

        r0.<org.apache.mahout.vectorizer.collocations.llr.LLRReducer: float minLLRValue> = $f0;

        $z0 = virtualinvoke r2.<org.apache.hadoop.conf.Configuration: boolean getBoolean(java.lang.String,boolean)>("emit-unigrams", 0);

        r0.<org.apache.mahout.vectorizer.collocations.llr.LLRReducer: boolean emitUnigrams> = $z0;

        $r4 = <org.apache.mahout.vectorizer.collocations.llr.LLRReducer: org.slf4j.Logger log>;

        $r3 = newarray (java.lang.Object)[3];

        $l1 = r0.<org.apache.mahout.vectorizer.collocations.llr.LLRReducer: long ngramTotal>;

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r3[0] = $r5;

        $f1 = r0.<org.apache.mahout.vectorizer.collocations.llr.LLRReducer: float minLLRValue>;

        $r6 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f1);

        $r3[1] = $r6;

        $z1 = r0.<org.apache.mahout.vectorizer.collocations.llr.LLRReducer: boolean emitUnigrams>;

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        $r3[2] = $r7;

        interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object[])>("NGram Total: {}, Min LLR value: {}, Emit Unigrams: {}", $r3);

        $l2 = r0.<org.apache.mahout.vectorizer.collocations.llr.LLRReducer: long ngramTotal>;

        $b3 = $l2 cmp -1L;

        if $b3 != 0 goto label1;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No NGRAM_TOTAL available in job config");

        throw $r8;

     label1:
        return;
    }

    public void <init>()
    {
        org.apache.mahout.vectorizer.collocations.llr.LLRReducer r0;
        org.apache.mahout.vectorizer.collocations.llr.LLRReducer$ConcreteLLCallback $r1;

        r0 := @this: org.apache.mahout.vectorizer.collocations.llr.LLRReducer;

        specialinvoke r0.<org.apache.hadoop.mapreduce.Reducer: void <init>()>();

        $r1 = new org.apache.mahout.vectorizer.collocations.llr.LLRReducer$ConcreteLLCallback;

        specialinvoke $r1.<org.apache.mahout.vectorizer.collocations.llr.LLRReducer$ConcreteLLCallback: void <init>()>();

        r0.<org.apache.mahout.vectorizer.collocations.llr.LLRReducer: org.apache.mahout.vectorizer.collocations.llr.LLRReducer$LLCallback ll> = $r1;

        return;
    }

    void <init>(org.apache.mahout.vectorizer.collocations.llr.LLRReducer$LLCallback)
    {
        org.apache.mahout.vectorizer.collocations.llr.LLRReducer r0;
        org.apache.mahout.vectorizer.collocations.llr.LLRReducer$LLCallback r1;

        r0 := @this: org.apache.mahout.vectorizer.collocations.llr.LLRReducer;

        r1 := @parameter0: org.apache.mahout.vectorizer.collocations.llr.LLRReducer$LLCallback;

        specialinvoke r0.<org.apache.hadoop.mapreduce.Reducer: void <init>()>();

        r0.<org.apache.mahout.vectorizer.collocations.llr.LLRReducer: org.apache.mahout.vectorizer.collocations.llr.LLRReducer$LLCallback ll> = r1;

        return;
    }

    protected volatile void reduce(java.lang.Object, java.lang.Iterable, org.apache.hadoop.mapreduce.Reducer$Context) throws java.io.IOException, java.lang.InterruptedException
    {
        org.apache.mahout.vectorizer.collocations.llr.LLRReducer r0;
        java.lang.Object r1;
        java.lang.Iterable r2;
        org.apache.hadoop.mapreduce.Reducer$Context r3;
        org.apache.mahout.vectorizer.collocations.llr.Gram $r4;

        r0 := @this: org.apache.mahout.vectorizer.collocations.llr.LLRReducer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Iterable;

        r3 := @parameter2: org.apache.hadoop.mapreduce.Reducer$Context;

        $r4 = (org.apache.mahout.vectorizer.collocations.llr.Gram) r1;

        virtualinvoke r0.<org.apache.mahout.vectorizer.collocations.llr.LLRReducer: void reduce(org.apache.mahout.vectorizer.collocations.llr.Gram,java.lang.Iterable,org.apache.hadoop.mapreduce.Reducer$Context)>($r4, r2, r3);

        return;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        <org.apache.mahout.vectorizer.collocations.llr.LLRReducer: float DEFAULT_MIN_LLR> = 1.0F;

        <org.apache.mahout.vectorizer.collocations.llr.LLRReducer: java.lang.String MIN_LLR> = "minLLR";

        <org.apache.mahout.vectorizer.collocations.llr.LLRReducer: java.lang.String NGRAM_TOTAL> = "ngramTotal";

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "org/apache/mahout/vectorizer/collocations/llr/LLRReducer");

        <org.apache.mahout.vectorizer.collocations.llr.LLRReducer: org.slf4j.Logger log> = $r0;

        return;
    }
}
