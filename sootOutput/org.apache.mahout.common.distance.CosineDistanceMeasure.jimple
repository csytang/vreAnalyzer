public class org.apache.mahout.common.distance.CosineDistanceMeasure extends java.lang.Object implements org.apache.mahout.common.distance.DistanceMeasure
{

    public void <init>()
    {
        org.apache.mahout.common.distance.CosineDistanceMeasure r0;

        r0 := @this: org.apache.mahout.common.distance.CosineDistanceMeasure;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void configure(org.apache.hadoop.conf.Configuration)
    {
        org.apache.mahout.common.distance.CosineDistanceMeasure r0;
        org.apache.hadoop.conf.Configuration r1;

        r0 := @this: org.apache.mahout.common.distance.CosineDistanceMeasure;

        r1 := @parameter0: org.apache.hadoop.conf.Configuration;

        return;
    }

    public java.util.Collection getParameters()
    {
        org.apache.mahout.common.distance.CosineDistanceMeasure r0;
        java.util.List $r1;

        r0 := @this: org.apache.mahout.common.distance.CosineDistanceMeasure;

        $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r1;
    }

    public void createParameters(java.lang.String, org.apache.hadoop.conf.Configuration)
    {
        org.apache.mahout.common.distance.CosineDistanceMeasure r0;
        java.lang.String r1;
        org.apache.hadoop.conf.Configuration r2;

        r0 := @this: org.apache.mahout.common.distance.CosineDistanceMeasure;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.hadoop.conf.Configuration;

        return;
    }

    public static double distance(double[], double[])
    {
        double[] r0, r1;
        int $i0, i4;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, d13, d14, d15, d16;
        byte $b1, $b2, $b3;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        d13 = 0.0;

        d14 = 0.0;

        d15 = 0.0;

        i4 = 0;

     label1:
        $i0 = lengthof r0;

        if i4 >= $i0 goto label2;

        $d6 = r0[i4];

        $d4 = r0[i4];

        $d5 = $d6 * $d4;

        d14 = d14 + $d5;

        $d7 = r1[i4];

        $d8 = r1[i4];

        $d10 = $d7 * $d8;

        d15 = d15 + $d10;

        $d12 = r0[i4];

        $d9 = r1[i4];

        $d11 = $d12 * $d9;

        d13 = d13 + $d11;

        i4 = i4 + 1;

        goto label1;

     label2:
        $d0 = staticinvoke <java.lang.Math: double sqrt(double)>(d14);

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>(d15);

        d16 = $d0 * $d1;

        $b1 = d16 cmpg d13;

        if $b1 >= 0 goto label3;

        d16 = d13;

     label3:
        $b2 = d16 cmpl 0.0;

        if $b2 != 0 goto label4;

        $b3 = d13 cmpl 0.0;

        if $b3 != 0 goto label4;

        return 0.0;

     label4:
        $d2 = d13 / d16;

        $d3 = 1.0 - $d2;

        return $d3;
    }

    public double distance(org.apache.mahout.math.Vector, org.apache.mahout.math.Vector)
    {
        org.apache.mahout.common.distance.CosineDistanceMeasure r0;
        org.apache.mahout.math.Vector r1, r2;
        double d0, d1, d2, $d3, $d4, $d5, $d6, d7;
        int $i0, $i1, $i5, $i6;
        byte $b2, $b3, $b4;
        org.apache.mahout.math.CardinalityException $r3;

        r0 := @this: org.apache.mahout.common.distance.CosineDistanceMeasure;

        r1 := @parameter0: org.apache.mahout.math.Vector;

        r2 := @parameter1: org.apache.mahout.math.Vector;

        $i0 = interfaceinvoke r1.<org.apache.mahout.math.Vector: int size()>();

        $i1 = interfaceinvoke r2.<org.apache.mahout.math.Vector: int size()>();

        if $i0 == $i1 goto label1;

        $r3 = new org.apache.mahout.math.CardinalityException;

        $i5 = interfaceinvoke r1.<org.apache.mahout.math.Vector: int size()>();

        $i6 = interfaceinvoke r2.<org.apache.mahout.math.Vector: int size()>();

        specialinvoke $r3.<org.apache.mahout.math.CardinalityException: void <init>(int,int)>($i5, $i6);

        throw $r3;

     label1:
        d0 = interfaceinvoke r1.<org.apache.mahout.math.Vector: double getLengthSquared()>();

        d1 = interfaceinvoke r2.<org.apache.mahout.math.Vector: double getLengthSquared()>();

        d2 = interfaceinvoke r2.<org.apache.mahout.math.Vector: double dot(org.apache.mahout.math.Vector)>(r1);

        $d4 = staticinvoke <java.lang.Math: double sqrt(double)>(d0);

        $d3 = staticinvoke <java.lang.Math: double sqrt(double)>(d1);

        d7 = $d4 * $d3;

        $b3 = d7 cmpg d2;

        if $b3 >= 0 goto label2;

        d7 = d2;

     label2:
        $b2 = d7 cmpl 0.0;

        if $b2 != 0 goto label3;

        $b4 = d2 cmpl 0.0;

        if $b4 != 0 goto label3;

        return 0.0;

     label3:
        $d6 = d2 / d7;

        $d5 = 1.0 - $d6;

        return $d5;
    }

    public double distance(double, org.apache.mahout.math.Vector, org.apache.mahout.math.Vector)
    {
        org.apache.mahout.common.distance.CosineDistanceMeasure r0;
        double d0, d1, d2, $d3, $d4, $d5, $d6, d7;
        org.apache.mahout.math.Vector r1, r2;
        byte $b0, $b1, $b2;

        r0 := @this: org.apache.mahout.common.distance.CosineDistanceMeasure;

        d0 := @parameter0: double;

        r1 := @parameter1: org.apache.mahout.math.Vector;

        r2 := @parameter2: org.apache.mahout.math.Vector;

        d1 = interfaceinvoke r2.<org.apache.mahout.math.Vector: double getLengthSquared()>();

        d2 = interfaceinvoke r2.<org.apache.mahout.math.Vector: double dot(org.apache.mahout.math.Vector)>(r1);

        $d3 = staticinvoke <java.lang.Math: double sqrt(double)>(d0);

        $d4 = staticinvoke <java.lang.Math: double sqrt(double)>(d1);

        d7 = $d3 * $d4;

        $b0 = d7 cmpg d2;

        if $b0 >= 0 goto label1;

        d7 = d2;

     label1:
        $b1 = d7 cmpl 0.0;

        if $b1 != 0 goto label2;

        $b2 = d2 cmpl 0.0;

        if $b2 != 0 goto label2;

        return 0.0;

     label2:
        $d5 = d2 / d7;

        $d6 = 1.0 - $d5;

        return $d6;
    }
}
