public class org.apache.mahout.classifier.df.node.Leaf extends org.apache.mahout.classifier.df.node.Node
{
    private static final double EPSILON;
    private double label;

    void <init>()
    {
        org.apache.mahout.classifier.df.node.Leaf r0;

        r0 := @this: org.apache.mahout.classifier.df.node.Leaf;

        specialinvoke r0.<org.apache.mahout.classifier.df.node.Node: void <init>()>();

        return;
    }

    public void <init>(double)
    {
        org.apache.mahout.classifier.df.node.Leaf r0;
        double d0;

        r0 := @this: org.apache.mahout.classifier.df.node.Leaf;

        d0 := @parameter0: double;

        specialinvoke r0.<org.apache.mahout.classifier.df.node.Node: void <init>()>();

        r0.<org.apache.mahout.classifier.df.node.Leaf: double label> = d0;

        return;
    }

    public double classify(org.apache.mahout.classifier.df.data.Instance)
    {
        org.apache.mahout.classifier.df.node.Leaf r0;
        org.apache.mahout.classifier.df.data.Instance r1;
        double $d0;

        r0 := @this: org.apache.mahout.classifier.df.node.Leaf;

        r1 := @parameter0: org.apache.mahout.classifier.df.data.Instance;

        $d0 = r0.<org.apache.mahout.classifier.df.node.Leaf: double label>;

        return $d0;
    }

    public long maxDepth()
    {
        org.apache.mahout.classifier.df.node.Leaf r0;

        r0 := @this: org.apache.mahout.classifier.df.node.Leaf;

        return 1L;
    }

    public long nbNodes()
    {
        org.apache.mahout.classifier.df.node.Leaf r0;

        r0 := @this: org.apache.mahout.classifier.df.node.Leaf;

        return 1L;
    }

    protected org.apache.mahout.classifier.df.node.Node$Type getType()
    {
        org.apache.mahout.classifier.df.node.Leaf r0;
        org.apache.mahout.classifier.df.node.Node$Type $r1;

        r0 := @this: org.apache.mahout.classifier.df.node.Leaf;

        $r1 = <org.apache.mahout.classifier.df.node.Node$Type: org.apache.mahout.classifier.df.node.Node$Type LEAF>;

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.mahout.classifier.df.node.Leaf r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        double $d0, $d1, $d2, $d3;
        byte $b0;

        r0 := @this: org.apache.mahout.classifier.df.node.Leaf;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.apache.mahout.classifier.df.node.Leaf;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (org.apache.mahout.classifier.df.node.Leaf) r1;

        $d1 = r0.<org.apache.mahout.classifier.df.node.Leaf: double label>;

        $d0 = r2.<org.apache.mahout.classifier.df.node.Leaf: double label>;

        $d2 = $d1 - $d0;

        $d3 = staticinvoke <java.lang.Math: double abs(double)>($d2);

        $b0 = $d3 cmpg 1.0E-6;

        if $b0 >= 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    public int hashCode()
    {
        org.apache.mahout.classifier.df.node.Leaf r0;
        long l0, $l1, $l2;
        double $d0;
        int $i3;

        r0 := @this: org.apache.mahout.classifier.df.node.Leaf;

        $d0 = r0.<org.apache.mahout.classifier.df.node.Leaf: double label>;

        l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $l1 = l0 >>> 32;

        $l2 = l0 ^ $l1;

        $i3 = (int) $l2;

        return $i3;
    }

    protected java.lang.String getString()
    {
        org.apache.mahout.classifier.df.node.Leaf r0;

        r0 := @this: org.apache.mahout.classifier.df.node.Leaf;

        return "";
    }

    public void readFields(java.io.DataInput) throws java.io.IOException
    {
        org.apache.mahout.classifier.df.node.Leaf r0;
        java.io.DataInput r1;
        double $d0;

        r0 := @this: org.apache.mahout.classifier.df.node.Leaf;

        r1 := @parameter0: java.io.DataInput;

        $d0 = interfaceinvoke r1.<java.io.DataInput: double readDouble()>();

        r0.<org.apache.mahout.classifier.df.node.Leaf: double label> = $d0;

        return;
    }

    protected void writeNode(java.io.DataOutput) throws java.io.IOException
    {
        org.apache.mahout.classifier.df.node.Leaf r0;
        java.io.DataOutput r1;
        double $d0;

        r0 := @this: org.apache.mahout.classifier.df.node.Leaf;

        r1 := @parameter0: java.io.DataOutput;

        $d0 = r0.<org.apache.mahout.classifier.df.node.Leaf: double label>;

        interfaceinvoke r1.<java.io.DataOutput: void writeDouble(double)>($d0);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.mahout.classifier.df.node.Leaf: double EPSILON> = 1.0E-6;

        return;
    }
}
