public class org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer extends org.apache.mahout.cf.taste.impl.recommender.svd.AbstractFactorizer
{
    private final org.apache.mahout.cf.taste.model.DataModel dataModel;
    private final int numFeatures;
    private final double lambda;
    private final int numIterations;
    private final boolean usesImplicitFeedback;
    private final double alpha;
    private final int numTrainingThreads;
    private static final double DEFAULT_ALPHA;
    private static final org.slf4j.Logger log;

    public void <init>(org.apache.mahout.cf.taste.model.DataModel, int, double, int, boolean, double, int) throws org.apache.mahout.cf.taste.common.TasteException
    {
        org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer r0;
        org.apache.mahout.cf.taste.model.DataModel r1;
        int i0, i1, i2;
        double d0, d1;
        boolean z0;

        r0 := @this: org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer;

        r1 := @parameter0: org.apache.mahout.cf.taste.model.DataModel;

        i0 := @parameter1: int;

        d0 := @parameter2: double;

        i1 := @parameter3: int;

        z0 := @parameter4: boolean;

        d1 := @parameter5: double;

        i2 := @parameter6: int;

        specialinvoke r0.<org.apache.mahout.cf.taste.impl.recommender.svd.AbstractFactorizer: void <init>(org.apache.mahout.cf.taste.model.DataModel)>(r1);

        r0.<org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer: org.apache.mahout.cf.taste.model.DataModel dataModel> = r1;

        r0.<org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer: int numFeatures> = i0;

        r0.<org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer: double lambda> = d0;

        r0.<org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer: int numIterations> = i1;

        r0.<org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer: boolean usesImplicitFeedback> = z0;

        r0.<org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer: double alpha> = d1;

        r0.<org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer: int numTrainingThreads> = i2;

        return;
    }

    public void <init>(org.apache.mahout.cf.taste.model.DataModel, int, double, int, boolean, double) throws org.apache.mahout.cf.taste.common.TasteException
    {
        org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer r0;
        org.apache.mahout.cf.taste.model.DataModel r1;
        int i0, i1, $i2;
        double d0, d1;
        boolean z0;
        java.lang.Runtime $r2;

        r0 := @this: org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer;

        r1 := @parameter0: org.apache.mahout.cf.taste.model.DataModel;

        i0 := @parameter1: int;

        d0 := @parameter2: double;

        i1 := @parameter3: int;

        z0 := @parameter4: boolean;

        d1 := @parameter5: double;

        $r2 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $i2 = virtualinvoke $r2.<java.lang.Runtime: int availableProcessors()>();

        specialinvoke r0.<org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer: void <init>(org.apache.mahout.cf.taste.model.DataModel,int,double,int,boolean,double,int)>(r1, i0, d0, i1, z0, d1, $i2);

        return;
    }

    public void <init>(org.apache.mahout.cf.taste.model.DataModel, int, double, int) throws org.apache.mahout.cf.taste.common.TasteException
    {
        org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer r0;
        org.apache.mahout.cf.taste.model.DataModel r1;
        int i0, i1;
        double d0;

        r0 := @this: org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer;

        r1 := @parameter0: org.apache.mahout.cf.taste.model.DataModel;

        i0 := @parameter1: int;

        d0 := @parameter2: double;

        i1 := @parameter3: int;

        specialinvoke r0.<org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer: void <init>(org.apache.mahout.cf.taste.model.DataModel,int,double,int,boolean,double)>(r1, i0, d0, i1, 0, 40.0);

        return;
    }

    public org.apache.mahout.cf.taste.impl.recommender.svd.Factorization factorize() throws org.apache.mahout.cf.taste.common.TasteException
    {
        org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer r0;
        org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator r2, r3, $r30, $r32, r58;
        long l0, $l1, $l4, $l12, $l13, l17;
        org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer$Features $r8;
        org.slf4j.Logger $r9, $r11, $r14, $r38, $r42, $r47, $r48;
        boolean $z0, $z1, $z3, $z7, $z8;
        double[][] $r10, $r13, $r28, $r37;
        org.apache.mahout.cf.taste.impl.recommender.svd.Factorization $r12;
        java.lang.Integer $r15;
        org.apache.mahout.cf.taste.model.DataModel $r16, $r18, $r19, $r20, $r22, $r24, $r26, $r29, $r31, $r33, $r35, $r36, $r45;
        java.util.concurrent.TimeUnit $r17, $r21, $r39, $r43;
        int $i2, $i3, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i14, i15, $i16;
        org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer$2 $r23;
        double $d0, $d1, $d2, $d3;
        org.apache.mahout.cf.taste.impl.common.FastIDSet $r25;
        org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer$1 $r27;
        java.lang.Throwable $r34, $r44;
        java.lang.InterruptedException $r40, $r41, $r46, $r49;
        org.apache.mahout.math.map.OpenIntObjectHashMap r50, r51;
        java.util.concurrent.ExecutorService r52, r57;
        org.apache.mahout.math.als.ImplicitFeedbackAlternatingLeastSquaresSolver $r53, r54, $r59, r60;
        org.apache.mahout.cf.taste.model.PreferenceArray r55, r61;

        r0 := @this: org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer;

        $r9 = <org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer: org.slf4j.Logger log>;

        interfaceinvoke $r9.<org.slf4j.Logger: void info(java.lang.String)>("starting to compute the factorization...");

        $r8 = new org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer$Features;

        specialinvoke $r8.<org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer$Features: void <init>(org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer)>(r0);

        r50 = null;

        r51 = null;

        $z0 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer: boolean usesImplicitFeedback>;

        if $z0 == 0 goto label01;

        $r31 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer: org.apache.mahout.cf.taste.model.DataModel dataModel>;

        $r32 = interfaceinvoke $r31.<org.apache.mahout.cf.taste.model.DataModel: org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator getUserIDs()>();

        $r33 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer: org.apache.mahout.cf.taste.model.DataModel dataModel>;

        $i9 = interfaceinvoke $r33.<org.apache.mahout.cf.taste.model.DataModel: int getNumUsers()>();

        $r28 = virtualinvoke $r8.<org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer$Features: double[][] getU()>();

        r50 = virtualinvoke r0.<org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer: org.apache.mahout.math.map.OpenIntObjectHashMap userFeaturesMapping(org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator,int,double[][])>($r32, $i9, $r28);

        $r29 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer: org.apache.mahout.cf.taste.model.DataModel dataModel>;

        $r30 = interfaceinvoke $r29.<org.apache.mahout.cf.taste.model.DataModel: org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator getItemIDs()>();

        $r36 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer: org.apache.mahout.cf.taste.model.DataModel dataModel>;

        $i11 = interfaceinvoke $r36.<org.apache.mahout.cf.taste.model.DataModel: int getNumItems()>();

        $r37 = virtualinvoke $r8.<org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer$Features: double[][] getM()>();

        r51 = virtualinvoke r0.<org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer: org.apache.mahout.math.map.OpenIntObjectHashMap itemFeaturesMapping(org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator,int,double[][])>($r30, $i11, $r37);

     label01:
        i15 = 0;

     label02:
        $i16 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer: int numIterations>;

        if i15 >= $i16 goto label33;

        $r14 = <org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer: org.slf4j.Logger log>;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i15);

        interfaceinvoke $r14.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("iteration {}", $r15);

        r52 = virtualinvoke r0.<org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer: java.util.concurrent.ExecutorService createQueue()>();

        $r16 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer: org.apache.mahout.cf.taste.model.DataModel dataModel>;

        r2 = interfaceinvoke $r16.<org.apache.mahout.cf.taste.model.DataModel: org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator getUserIDs()>();

     label03:
        $z1 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer: boolean usesImplicitFeedback>;

        if $z1 == 0 goto label04;

        $r53 = new org.apache.mahout.math.als.ImplicitFeedbackAlternatingLeastSquaresSolver;

        $i8 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer: int numFeatures>;

        $d3 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer: double lambda>;

        $d2 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer: double alpha>;

        $i7 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer: int numTrainingThreads>;

        specialinvoke $r53.<org.apache.mahout.math.als.ImplicitFeedbackAlternatingLeastSquaresSolver: void <init>(int,double,double,org.apache.mahout.math.map.OpenIntObjectHashMap,int)>($i8, $d3, $d2, r51, $i7);

        goto label05;

     label04:
        $r53 = null;

     label05:
        r54 = $r53;

     label06:
        $z7 = interfaceinvoke r2.<org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator: boolean hasNext()>();

        if $z7 == 0 goto label07;

        l17 = interfaceinvoke r2.<org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator: long nextLong()>();

        $r26 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer: org.apache.mahout.cf.taste.model.DataModel dataModel>;

        $r25 = interfaceinvoke $r26.<org.apache.mahout.cf.taste.model.DataModel: org.apache.mahout.cf.taste.impl.common.FastIDSet getItemIDsFromUser(long)>(l17);

        r3 = virtualinvoke $r25.<org.apache.mahout.cf.taste.impl.common.FastIDSet: org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator iterator()>();

        $r24 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer: org.apache.mahout.cf.taste.model.DataModel dataModel>;

        r55 = interfaceinvoke $r24.<org.apache.mahout.cf.taste.model.DataModel: org.apache.mahout.cf.taste.model.PreferenceArray getPreferencesFromUser(long)>(l17);

        $r27 = new org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer$1;

        specialinvoke $r27.<org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer$1: void <init>(org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer,org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator,org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer$Features,org.apache.mahout.math.als.ImplicitFeedbackAlternatingLeastSquaresSolver,org.apache.mahout.cf.taste.model.PreferenceArray,long)>(r0, r3, $r8, r54, r55, l17);

        interfaceinvoke r52.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>($r27);

        goto label06;

     label07:
        interfaceinvoke r52.<java.util.concurrent.ExecutorService: void shutdown()>();

     label08:
        $r18 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer: org.apache.mahout.cf.taste.model.DataModel dataModel>;

        $i2 = interfaceinvoke $r18.<org.apache.mahout.cf.taste.model.DataModel: int getNumUsers()>();

        $l1 = (long) $i2;

        $r17 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        interfaceinvoke r52.<java.util.concurrent.ExecutorService: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>($l1, $r17);

     label09:
        goto label17;

     label10:
        $r40 := @caughtexception;

        $r38 = <org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer: org.slf4j.Logger log>;

        interfaceinvoke $r38.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Error when computing user features", $r40);

        goto label17;

     label11:
        $r44 := @caughtexception;

     label12:
        interfaceinvoke r52.<java.util.concurrent.ExecutorService: void shutdown()>();

     label13:
        $r45 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer: org.apache.mahout.cf.taste.model.DataModel dataModel>;

        $i14 = interfaceinvoke $r45.<org.apache.mahout.cf.taste.model.DataModel: int getNumUsers()>();

        $l13 = (long) $i14;

        $r43 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        interfaceinvoke r52.<java.util.concurrent.ExecutorService: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>($l13, $r43);

     label14:
        goto label16;

     label15:
        $r41 := @caughtexception;

        $r42 = <org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer: org.slf4j.Logger log>;

        interfaceinvoke $r42.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Error when computing user features", $r41);

     label16:
        throw $r44;

     label17:
        r57 = virtualinvoke r0.<org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer: java.util.concurrent.ExecutorService createQueue()>();

        $r19 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer: org.apache.mahout.cf.taste.model.DataModel dataModel>;

        r58 = interfaceinvoke $r19.<org.apache.mahout.cf.taste.model.DataModel: org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator getItemIDs()>();

     label18:
        $z3 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer: boolean usesImplicitFeedback>;

        if $z3 == 0 goto label19;

        $r59 = new org.apache.mahout.math.als.ImplicitFeedbackAlternatingLeastSquaresSolver;

        $i6 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer: int numFeatures>;

        $d0 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer: double lambda>;

        $d1 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer: double alpha>;

        $i5 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer: int numTrainingThreads>;

        specialinvoke $r59.<org.apache.mahout.math.als.ImplicitFeedbackAlternatingLeastSquaresSolver: void <init>(int,double,double,org.apache.mahout.math.map.OpenIntObjectHashMap,int)>($i6, $d0, $d1, r50, $i5);

        goto label20;

     label19:
        $r59 = null;

     label20:
        r60 = $r59;

     label21:
        $z8 = interfaceinvoke r58.<org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator: boolean hasNext()>();

        if $z8 == 0 goto label22;

        l0 = interfaceinvoke r58.<org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator: long nextLong()>();

        $r22 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer: org.apache.mahout.cf.taste.model.DataModel dataModel>;

        r61 = interfaceinvoke $r22.<org.apache.mahout.cf.taste.model.DataModel: org.apache.mahout.cf.taste.model.PreferenceArray getPreferencesForItem(long)>(l0);

        $r23 = new org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer$2;

        specialinvoke $r23.<org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer$2: void <init>(org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer,org.apache.mahout.cf.taste.model.PreferenceArray,org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer$Features,org.apache.mahout.math.als.ImplicitFeedbackAlternatingLeastSquaresSolver,long)>(r0, r61, $r8, r60, l0);

        interfaceinvoke r57.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>($r23);

        goto label21;

     label22:
        interfaceinvoke r57.<java.util.concurrent.ExecutorService: void shutdown()>();

     label23:
        $r20 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer: org.apache.mahout.cf.taste.model.DataModel dataModel>;

        $i3 = interfaceinvoke $r20.<org.apache.mahout.cf.taste.model.DataModel: int getNumItems()>();

        $l4 = (long) $i3;

        $r21 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        interfaceinvoke r57.<java.util.concurrent.ExecutorService: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>($l4, $r21);

     label24:
        goto label32;

     label25:
        $r46 := @caughtexception;

        $r47 = <org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer: org.slf4j.Logger log>;

        interfaceinvoke $r47.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Error when computing item features", $r46);

        goto label32;

     label26:
        $r34 := @caughtexception;

     label27:
        interfaceinvoke r57.<java.util.concurrent.ExecutorService: void shutdown()>();

     label28:
        $r35 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer: org.apache.mahout.cf.taste.model.DataModel dataModel>;

        $i10 = interfaceinvoke $r35.<org.apache.mahout.cf.taste.model.DataModel: int getNumItems()>();

        $l12 = (long) $i10;

        $r39 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        interfaceinvoke r57.<java.util.concurrent.ExecutorService: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>($l12, $r39);

     label29:
        goto label31;

     label30:
        $r49 := @caughtexception;

        $r48 = <org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer: org.slf4j.Logger log>;

        interfaceinvoke $r48.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Error when computing item features", $r49);

     label31:
        throw $r34;

     label32:
        i15 = i15 + 1;

        goto label02;

     label33:
        $r11 = <org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer: org.slf4j.Logger log>;

        interfaceinvoke $r11.<org.slf4j.Logger: void info(java.lang.String)>("finished computation of the factorization...");

        $r10 = virtualinvoke $r8.<org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer$Features: double[][] getU()>();

        $r13 = virtualinvoke $r8.<org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer$Features: double[][] getM()>();

        $r12 = virtualinvoke r0.<org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer: org.apache.mahout.cf.taste.impl.recommender.svd.Factorization createFactorization(double[][],double[][])>($r10, $r13);

        return $r12;

        catch java.lang.InterruptedException from label08 to label09 with label10;
        catch java.lang.Throwable from label03 to label07 with label11;
        catch java.lang.InterruptedException from label13 to label14 with label15;
        catch java.lang.Throwable from label11 to label12 with label11;
        catch java.lang.InterruptedException from label23 to label24 with label25;
        catch java.lang.Throwable from label18 to label22 with label26;
        catch java.lang.InterruptedException from label28 to label29 with label30;
        catch java.lang.Throwable from label26 to label27 with label26;
    }

    protected java.util.concurrent.ExecutorService createQueue()
    {
        org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer r0;
        int $i0;
        java.util.concurrent.ExecutorService $r1;

        r0 := @this: org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer;

        $i0 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer: int numTrainingThreads>;

        $r1 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int)>($i0);

        return $r1;
    }

    protected static org.apache.mahout.math.Vector ratingVector(org.apache.mahout.cf.taste.model.PreferenceArray)
    {
        org.apache.mahout.cf.taste.model.PreferenceArray r0;
        double[] r1;
        int $i0, $i1, i2;
        org.apache.mahout.math.DenseVector $r2;
        org.apache.mahout.cf.taste.model.Preference $r3;
        float $f0;
        double $d0;

        r0 := @parameter0: org.apache.mahout.cf.taste.model.PreferenceArray;

        $i0 = interfaceinvoke r0.<org.apache.mahout.cf.taste.model.PreferenceArray: int length()>();

        r1 = newarray (double)[$i0];

        i2 = 0;

     label1:
        $i1 = interfaceinvoke r0.<org.apache.mahout.cf.taste.model.PreferenceArray: int length()>();

        if i2 >= $i1 goto label2;

        $r3 = interfaceinvoke r0.<org.apache.mahout.cf.taste.model.PreferenceArray: org.apache.mahout.cf.taste.model.Preference get(int)>(i2);

        $f0 = interfaceinvoke $r3.<org.apache.mahout.cf.taste.model.Preference: float getValue()>();

        $d0 = (double) $f0;

        r1[i2] = $d0;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r2 = new org.apache.mahout.math.DenseVector;

        specialinvoke $r2.<org.apache.mahout.math.DenseVector: void <init>(double[],boolean)>(r1, 1);

        return $r2;
    }

    protected org.apache.mahout.math.map.OpenIntObjectHashMap itemFeaturesMapping(org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator, int, double[][])
    {
        org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer r0;
        org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator r1;
        int i0, i2, $i3;
        double[][] r2;
        long l1;
        org.apache.mahout.math.map.OpenIntObjectHashMap $r4;
        boolean $z0;
        java.lang.Object $r5;
        java.lang.Long $r6;
        java.lang.Integer $r7, $r9;
        org.apache.mahout.math.DenseVector $r8;
        double[] $r10;

        r0 := @this: org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer;

        r1 := @parameter0: org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator;

        i0 := @parameter1: int;

        r2 := @parameter2: double[][];

        $r4 = new org.apache.mahout.math.map.OpenIntObjectHashMap;

        specialinvoke $r4.<org.apache.mahout.math.map.OpenIntObjectHashMap: void <init>(int)>(i0);

     label1:
        $z0 = interfaceinvoke r1.<org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r1.<org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator: java.lang.Object next()>();

        $r6 = (java.lang.Long) $r5;

        l1 = virtualinvoke $r6.<java.lang.Long: long longValue()>();

        $r7 = virtualinvoke r0.<org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer: java.lang.Integer itemIndex(long)>(l1);

        i2 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        $r8 = new org.apache.mahout.math.DenseVector;

        $r9 = virtualinvoke r0.<org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer: java.lang.Integer itemIndex(long)>(l1);

        $i3 = virtualinvoke $r9.<java.lang.Integer: int intValue()>();

        $r10 = r2[$i3];

        specialinvoke $r8.<org.apache.mahout.math.DenseVector: void <init>(double[],boolean)>($r10, 1);

        virtualinvoke $r4.<org.apache.mahout.math.map.OpenIntObjectHashMap: boolean put(int,java.lang.Object)>(i2, $r8);

        goto label1;

     label2:
        return $r4;
    }

    protected org.apache.mahout.math.map.OpenIntObjectHashMap userFeaturesMapping(org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator, int, double[][])
    {
        org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer r0;
        org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator r1;
        int i0, i2, $i3;
        double[][] r2;
        long l1;
        org.apache.mahout.math.map.OpenIntObjectHashMap $r4;
        boolean $z0;
        java.lang.Object $r5;
        java.lang.Long $r6;
        java.lang.Integer $r7, $r9;
        org.apache.mahout.math.DenseVector $r8;
        double[] $r10;

        r0 := @this: org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer;

        r1 := @parameter0: org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator;

        i0 := @parameter1: int;

        r2 := @parameter2: double[][];

        $r4 = new org.apache.mahout.math.map.OpenIntObjectHashMap;

        specialinvoke $r4.<org.apache.mahout.math.map.OpenIntObjectHashMap: void <init>(int)>(i0);

     label1:
        $z0 = interfaceinvoke r1.<org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r1.<org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator: java.lang.Object next()>();

        $r6 = (java.lang.Long) $r5;

        l1 = virtualinvoke $r6.<java.lang.Long: long longValue()>();

        $r7 = virtualinvoke r0.<org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer: java.lang.Integer userIndex(long)>(l1);

        i2 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        $r8 = new org.apache.mahout.math.DenseVector;

        $r9 = virtualinvoke r0.<org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer: java.lang.Integer userIndex(long)>(l1);

        $i3 = virtualinvoke $r9.<java.lang.Integer: int intValue()>();

        $r10 = r2[$i3];

        specialinvoke $r8.<org.apache.mahout.math.DenseVector: void <init>(double[],boolean)>($r10, 1);

        virtualinvoke $r4.<org.apache.mahout.math.map.OpenIntObjectHashMap: boolean put(int,java.lang.Object)>(i2, $r8);

        goto label1;

     label2:
        return $r4;
    }

    protected org.apache.mahout.math.Vector sparseItemRatingVector(org.apache.mahout.cf.taste.model.PreferenceArray)
    {
        org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer r0;
        org.apache.mahout.cf.taste.model.PreferenceArray r1;
        java.util.Iterator r3;
        org.apache.mahout.cf.taste.model.Preference r4;
        org.apache.mahout.math.SequentialAccessSparseVector $r5;
        int $i0, $i2;
        boolean $z0;
        java.lang.Object $r6;
        long $l1;
        java.lang.Integer $r7;
        float $f0;
        double $d0;

        r0 := @this: org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer;

        r1 := @parameter0: org.apache.mahout.cf.taste.model.PreferenceArray;

        $r5 = new org.apache.mahout.math.SequentialAccessSparseVector;

        $i0 = interfaceinvoke r1.<org.apache.mahout.cf.taste.model.PreferenceArray: int length()>();

        specialinvoke $r5.<org.apache.mahout.math.SequentialAccessSparseVector: void <init>(int,int)>(2147483647, $i0);

        r3 = interfaceinvoke r1.<org.apache.mahout.cf.taste.model.PreferenceArray: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.mahout.cf.taste.model.Preference) $r6;

        $l1 = interfaceinvoke r4.<org.apache.mahout.cf.taste.model.Preference: long getUserID()>();

        $r7 = virtualinvoke r0.<org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer: java.lang.Integer userIndex(long)>($l1);

        $i2 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        $f0 = interfaceinvoke r4.<org.apache.mahout.cf.taste.model.Preference: float getValue()>();

        $d0 = (double) $f0;

        virtualinvoke $r5.<org.apache.mahout.math.SequentialAccessSparseVector: void set(int,double)>($i2, $d0);

        goto label1;

     label2:
        return $r5;
    }

    protected org.apache.mahout.math.Vector sparseUserRatingVector(org.apache.mahout.cf.taste.model.PreferenceArray)
    {
        org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer r0;
        org.apache.mahout.cf.taste.model.PreferenceArray r1;
        java.util.Iterator r3;
        org.apache.mahout.cf.taste.model.Preference r4;
        org.apache.mahout.math.SequentialAccessSparseVector $r5;
        int $i0, $i2;
        boolean $z0;
        java.lang.Object $r6;
        long $l1;
        java.lang.Integer $r7;
        float $f0;
        double $d0;

        r0 := @this: org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer;

        r1 := @parameter0: org.apache.mahout.cf.taste.model.PreferenceArray;

        $r5 = new org.apache.mahout.math.SequentialAccessSparseVector;

        $i0 = interfaceinvoke r1.<org.apache.mahout.cf.taste.model.PreferenceArray: int length()>();

        specialinvoke $r5.<org.apache.mahout.math.SequentialAccessSparseVector: void <init>(int,int)>(2147483647, $i0);

        r3 = interfaceinvoke r1.<org.apache.mahout.cf.taste.model.PreferenceArray: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.mahout.cf.taste.model.Preference) $r6;

        $l1 = interfaceinvoke r4.<org.apache.mahout.cf.taste.model.Preference: long getItemID()>();

        $r7 = virtualinvoke r0.<org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer: java.lang.Integer itemIndex(long)>($l1);

        $i2 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        $f0 = interfaceinvoke r4.<org.apache.mahout.cf.taste.model.Preference: float getValue()>();

        $d0 = (double) $f0;

        virtualinvoke $r5.<org.apache.mahout.math.SequentialAccessSparseVector: void set(int,double)>($i2, $d0);

        goto label1;

     label2:
        return $r5;
    }

    static org.apache.mahout.cf.taste.model.DataModel access$000(org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer)
    {
        org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer r0;
        org.apache.mahout.cf.taste.model.DataModel $r1;

        r0 := @parameter0: org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer;

        $r1 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer: org.apache.mahout.cf.taste.model.DataModel dataModel>;

        return $r1;
    }

    static int access$100(org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer)
    {
        org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer r0;
        int $i0;

        r0 := @parameter0: org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer;

        $i0 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer: int numFeatures>;

        return $i0;
    }

    static boolean access$200(org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer)
    {
        org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer r0;
        boolean $z0;

        r0 := @parameter0: org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer;

        $z0 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer: boolean usesImplicitFeedback>;

        return $z0;
    }

    static double access$300(org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer)
    {
        org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer r0;
        double $d0;

        r0 := @parameter0: org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer;

        $d0 = r0.<org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer: double lambda>;

        return $d0;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        <org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer: double DEFAULT_ALPHA> = 40.0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "org/apache/mahout/cf/taste/impl/recommender/svd/ALSWRFactorizer");

        <org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer: org.slf4j.Logger log> = $r0;

        return;
    }
}
