public final class org.apache.mahout.common.HadoopUtil extends java.lang.Object
{
    private static final org.slf4j.Logger log;

    private void <init>()
    {
        org.apache.mahout.common.HadoopUtil r0;

        r0 := @this: org.apache.mahout.common.HadoopUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.apache.hadoop.mapreduce.Job prepareJob(org.apache.hadoop.fs.Path, org.apache.hadoop.fs.Path, java.lang.Class, java.lang.Class, java.lang.Class, java.lang.Class, java.lang.Class, org.apache.hadoop.conf.Configuration) throws java.io.IOException
    {
        org.apache.hadoop.fs.Path r0, r1;
        java.lang.Class r2, r3, r4, r5, r6;
        org.apache.hadoop.conf.Configuration r7, r9, $r11;
        org.apache.hadoop.mapreduce.Job $r10;
        boolean $z0;
        java.lang.String $r12, $r13;
        java.lang.IllegalStateException $r14;

        r0 := @parameter0: org.apache.hadoop.fs.Path;

        r1 := @parameter1: org.apache.hadoop.fs.Path;

        r2 := @parameter2: java.lang.Class;

        r3 := @parameter3: java.lang.Class;

        r4 := @parameter4: java.lang.Class;

        r5 := @parameter5: java.lang.Class;

        r6 := @parameter6: java.lang.Class;

        r7 := @parameter7: org.apache.hadoop.conf.Configuration;

        $r10 = new org.apache.hadoop.mapreduce.Job;

        $r11 = new org.apache.hadoop.conf.Configuration;

        specialinvoke $r11.<org.apache.hadoop.conf.Configuration: void <init>(org.apache.hadoop.conf.Configuration)>(r7);

        specialinvoke $r10.<org.apache.hadoop.mapreduce.Job: void <init>(org.apache.hadoop.conf.Configuration)>($r11);

        r9 = virtualinvoke $r10.<org.apache.hadoop.mapreduce.Job: org.apache.hadoop.conf.Configuration getConfiguration()>();

        $z0 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(class "org/apache/hadoop/mapreduce/Mapper");

        if $z0 == 0 goto label1;

        $r14 = new java.lang.IllegalStateException;

        specialinvoke $r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Can\'t figure out the user class jar file from mapper/reducer");

        throw $r14;

     label1:
        virtualinvoke $r10.<org.apache.hadoop.mapreduce.Job: void setJarByClass(java.lang.Class)>(r3);

        virtualinvoke $r10.<org.apache.hadoop.mapreduce.Job: void setInputFormatClass(java.lang.Class)>(r2);

        $r12 = virtualinvoke r0.<org.apache.hadoop.fs.Path: java.lang.String toString()>();

        virtualinvoke r9.<org.apache.hadoop.conf.Configuration: void set(java.lang.String,java.lang.String)>("mapred.input.dir", $r12);

        virtualinvoke $r10.<org.apache.hadoop.mapreduce.Job: void setMapperClass(java.lang.Class)>(r3);

        virtualinvoke $r10.<org.apache.hadoop.mapreduce.Job: void setMapOutputKeyClass(java.lang.Class)>(r4);

        virtualinvoke $r10.<org.apache.hadoop.mapreduce.Job: void setMapOutputValueClass(java.lang.Class)>(r5);

        virtualinvoke $r10.<org.apache.hadoop.mapreduce.Job: void setOutputKeyClass(java.lang.Class)>(r4);

        virtualinvoke $r10.<org.apache.hadoop.mapreduce.Job: void setOutputValueClass(java.lang.Class)>(r5);

        virtualinvoke r9.<org.apache.hadoop.conf.Configuration: void setBoolean(java.lang.String,boolean)>("mapred.compress.map.output", 1);

        virtualinvoke $r10.<org.apache.hadoop.mapreduce.Job: void setNumReduceTasks(int)>(0);

        virtualinvoke $r10.<org.apache.hadoop.mapreduce.Job: void setOutputFormatClass(java.lang.Class)>(r6);

        $r13 = virtualinvoke r1.<org.apache.hadoop.fs.Path: java.lang.String toString()>();

        virtualinvoke r9.<org.apache.hadoop.conf.Configuration: void set(java.lang.String,java.lang.String)>("mapred.output.dir", $r13);

        return $r10;
    }

    public static org.apache.hadoop.mapreduce.Job prepareJob(org.apache.hadoop.fs.Path, org.apache.hadoop.fs.Path, java.lang.Class, java.lang.Class, java.lang.Class, java.lang.Class, java.lang.Class, java.lang.Class, java.lang.Class, java.lang.Class, org.apache.hadoop.conf.Configuration) throws java.io.IOException
    {
        org.apache.hadoop.fs.Path r0, r1;
        java.lang.Class r2, r3, r4, r5, r6, r7, r8, r9;
        org.apache.hadoop.conf.Configuration r10, r12, $r14;
        org.apache.hadoop.mapreduce.Job $r13;
        boolean $z0, $z1;
        java.lang.String $r15, $r16;
        java.lang.IllegalStateException $r17;

        r0 := @parameter0: org.apache.hadoop.fs.Path;

        r1 := @parameter1: org.apache.hadoop.fs.Path;

        r2 := @parameter2: java.lang.Class;

        r3 := @parameter3: java.lang.Class;

        r4 := @parameter4: java.lang.Class;

        r5 := @parameter5: java.lang.Class;

        r6 := @parameter6: java.lang.Class;

        r7 := @parameter7: java.lang.Class;

        r8 := @parameter8: java.lang.Class;

        r9 := @parameter9: java.lang.Class;

        r10 := @parameter10: org.apache.hadoop.conf.Configuration;

        $r13 = new org.apache.hadoop.mapreduce.Job;

        $r14 = new org.apache.hadoop.conf.Configuration;

        specialinvoke $r14.<org.apache.hadoop.conf.Configuration: void <init>(org.apache.hadoop.conf.Configuration)>(r10);

        specialinvoke $r13.<org.apache.hadoop.mapreduce.Job: void <init>(org.apache.hadoop.conf.Configuration)>($r14);

        r12 = virtualinvoke $r13.<org.apache.hadoop.mapreduce.Job: org.apache.hadoop.conf.Configuration getConfiguration()>();

        $z0 = virtualinvoke r6.<java.lang.Object: boolean equals(java.lang.Object)>(class "org/apache/hadoop/mapreduce/Reducer");

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(class "org/apache/hadoop/mapreduce/Mapper");

        if $z1 == 0 goto label1;

        $r17 = new java.lang.IllegalStateException;

        specialinvoke $r17.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Can\'t figure out the user class jar file from mapper/reducer");

        throw $r17;

     label1:
        virtualinvoke $r13.<org.apache.hadoop.mapreduce.Job: void setJarByClass(java.lang.Class)>(r3);

        goto label3;

     label2:
        virtualinvoke $r13.<org.apache.hadoop.mapreduce.Job: void setJarByClass(java.lang.Class)>(r6);

     label3:
        virtualinvoke $r13.<org.apache.hadoop.mapreduce.Job: void setInputFormatClass(java.lang.Class)>(r2);

        $r15 = virtualinvoke r0.<org.apache.hadoop.fs.Path: java.lang.String toString()>();

        virtualinvoke r12.<org.apache.hadoop.conf.Configuration: void set(java.lang.String,java.lang.String)>("mapred.input.dir", $r15);

        virtualinvoke $r13.<org.apache.hadoop.mapreduce.Job: void setMapperClass(java.lang.Class)>(r3);

        if r4 == null goto label4;

        virtualinvoke $r13.<org.apache.hadoop.mapreduce.Job: void setMapOutputKeyClass(java.lang.Class)>(r4);

     label4:
        if r5 == null goto label5;

        virtualinvoke $r13.<org.apache.hadoop.mapreduce.Job: void setMapOutputValueClass(java.lang.Class)>(r5);

     label5:
        virtualinvoke r12.<org.apache.hadoop.conf.Configuration: void setBoolean(java.lang.String,boolean)>("mapred.compress.map.output", 1);

        virtualinvoke $r13.<org.apache.hadoop.mapreduce.Job: void setReducerClass(java.lang.Class)>(r6);

        virtualinvoke $r13.<org.apache.hadoop.mapreduce.Job: void setOutputKeyClass(java.lang.Class)>(r7);

        virtualinvoke $r13.<org.apache.hadoop.mapreduce.Job: void setOutputValueClass(java.lang.Class)>(r8);

        virtualinvoke $r13.<org.apache.hadoop.mapreduce.Job: void setOutputFormatClass(java.lang.Class)>(r9);

        $r16 = virtualinvoke r1.<org.apache.hadoop.fs.Path: java.lang.String toString()>();

        virtualinvoke r12.<org.apache.hadoop.conf.Configuration: void set(java.lang.String,java.lang.String)>("mapred.output.dir", $r16);

        return $r13;
    }

    public static java.lang.String getCustomJobName(java.lang.String, org.apache.hadoop.mapreduce.JobContext, java.lang.Class, java.lang.Class)
    {
        java.lang.String r0, r5, $r9, $r12, $r14, $r15;
        org.apache.hadoop.mapreduce.JobContext r1;
        java.lang.Class r2, r3;
        java.lang.StringBuilder $r6, $r8, $r11;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.hadoop.mapreduce.JobContext;

        r2 := @parameter2: java.lang.Class;

        r3 := @parameter3: java.lang.Class;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(int)>(100);

        r5 = interfaceinvoke r1.<org.apache.hadoop.mapreduce.JobContext: java.lang.String getJobName()>();

        if r5 == null goto label1;

        $r15 = virtualinvoke r5.<java.lang.String: java.lang.String trim()>();

        $z0 = virtualinvoke $r15.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        goto label3;

     label2:
        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

     label3:
        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

        $r9 = virtualinvoke r2.<java.lang.Class: java.lang.String getSimpleName()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

        $r12 = virtualinvoke r3.<java.lang.Class: java.lang.String getSimpleName()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r14;
    }

    public static void delete(org.apache.hadoop.conf.Configuration, java.lang.Iterable) throws java.io.IOException
    {
        java.lang.Iterable r0;
        java.util.Iterator r1;
        org.apache.hadoop.fs.Path r2;
        org.apache.hadoop.fs.FileSystem r3;
        java.lang.Object $r4;
        boolean $z0, $z2;
        org.slf4j.Logger $r5;
        org.apache.hadoop.conf.Configuration $r6, r7;

        r7 := @parameter0: org.apache.hadoop.conf.Configuration;

        r0 := @parameter1: java.lang.Iterable;

        if r7 != null goto label1;

        $r6 = new org.apache.hadoop.conf.Configuration;

        specialinvoke $r6.<org.apache.hadoop.conf.Configuration: void <init>()>();

        r7 = $r6;

     label1:
        r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (org.apache.hadoop.fs.Path) $r4;

        r3 = virtualinvoke r2.<org.apache.hadoop.fs.Path: org.apache.hadoop.fs.FileSystem getFileSystem(org.apache.hadoop.conf.Configuration)>(r7);

        $z0 = virtualinvoke r3.<org.apache.hadoop.fs.FileSystem: boolean exists(org.apache.hadoop.fs.Path)>(r2);

        if $z0 == 0 goto label2;

        $r5 = <org.apache.mahout.common.HadoopUtil: org.slf4j.Logger log>;

        interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Deleting {}", r2);

        virtualinvoke r3.<org.apache.hadoop.fs.FileSystem: boolean delete(org.apache.hadoop.fs.Path,boolean)>(r2, 1);

        goto label2;

     label3:
        return;
    }

    public static transient void delete(org.apache.hadoop.conf.Configuration, org.apache.hadoop.fs.Path[]) throws java.io.IOException
    {
        org.apache.hadoop.conf.Configuration r0;
        org.apache.hadoop.fs.Path[] r1;
        java.util.List $r2;

        r0 := @parameter0: org.apache.hadoop.conf.Configuration;

        r1 := @parameter1: org.apache.hadoop.fs.Path[];

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        staticinvoke <org.apache.mahout.common.HadoopUtil: void delete(org.apache.hadoop.conf.Configuration,java.lang.Iterable)>(r0, $r2);

        return;
    }

    public static long countRecords(org.apache.hadoop.fs.Path, org.apache.hadoop.conf.Configuration) throws java.io.IOException
    {
        org.apache.hadoop.fs.Path r0;
        org.apache.hadoop.conf.Configuration r1;
        org.apache.mahout.common.iterator.sequencefile.SequenceFileValueIterator $r3;
        boolean $z0;
        long l0;

        r0 := @parameter0: org.apache.hadoop.fs.Path;

        r1 := @parameter1: org.apache.hadoop.conf.Configuration;

        l0 = 0L;

        $r3 = new org.apache.mahout.common.iterator.sequencefile.SequenceFileValueIterator;

        specialinvoke $r3.<org.apache.mahout.common.iterator.sequencefile.SequenceFileValueIterator: void <init>(org.apache.hadoop.fs.Path,boolean,org.apache.hadoop.conf.Configuration)>(r0, 1, r1);

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        l0 = l0 + 1L;

        goto label1;

     label2:
        return l0;
    }

    public static long countRecords(org.apache.hadoop.fs.Path, org.apache.mahout.common.iterator.sequencefile.PathType, org.apache.hadoop.fs.PathFilter, org.apache.hadoop.conf.Configuration) throws java.io.IOException
    {
        org.apache.hadoop.fs.Path r0;
        org.apache.mahout.common.iterator.sequencefile.PathType r1;
        org.apache.hadoop.fs.PathFilter r2;
        org.apache.hadoop.conf.Configuration r3;
        org.apache.mahout.common.iterator.sequencefile.SequenceFileDirValueIterator $r5;
        boolean $z0;
        long l0;

        r0 := @parameter0: org.apache.hadoop.fs.Path;

        r1 := @parameter1: org.apache.mahout.common.iterator.sequencefile.PathType;

        r2 := @parameter2: org.apache.hadoop.fs.PathFilter;

        r3 := @parameter3: org.apache.hadoop.conf.Configuration;

        l0 = 0L;

        $r5 = new org.apache.mahout.common.iterator.sequencefile.SequenceFileDirValueIterator;

        specialinvoke $r5.<org.apache.mahout.common.iterator.sequencefile.SequenceFileDirValueIterator: void <init>(org.apache.hadoop.fs.Path,org.apache.mahout.common.iterator.sequencefile.PathType,org.apache.hadoop.fs.PathFilter,java.util.Comparator,boolean,org.apache.hadoop.conf.Configuration)>(r0, r1, r2, null, 1, r3);

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        l0 = l0 + 1L;

        goto label1;

     label2:
        return l0;
    }

    public static java.io.InputStream openStream(org.apache.hadoop.fs.Path, org.apache.hadoop.conf.Configuration) throws java.io.IOException
    {
        org.apache.hadoop.fs.Path r0, $r5;
        org.apache.hadoop.conf.Configuration r1;
        org.apache.hadoop.fs.FileSystem r2;
        java.net.URI $r3, $r4;
        org.apache.hadoop.fs.FSDataInputStream $r6;

        r0 := @parameter0: org.apache.hadoop.fs.Path;

        r1 := @parameter1: org.apache.hadoop.conf.Configuration;

        $r3 = virtualinvoke r0.<org.apache.hadoop.fs.Path: java.net.URI toUri()>();

        r2 = staticinvoke <org.apache.hadoop.fs.FileSystem: org.apache.hadoop.fs.FileSystem get(java.net.URI,org.apache.hadoop.conf.Configuration)>($r3, r1);

        $r4 = virtualinvoke r0.<org.apache.hadoop.fs.Path: java.net.URI toUri()>();

        $r5 = virtualinvoke r0.<org.apache.hadoop.fs.Path: org.apache.hadoop.fs.Path makeQualified(java.net.URI,org.apache.hadoop.fs.Path)>($r4, r0);

        $r6 = virtualinvoke r2.<org.apache.hadoop.fs.FileSystem: org.apache.hadoop.fs.FSDataInputStream open(org.apache.hadoop.fs.Path)>($r5);

        return $r6;
    }

    public static org.apache.hadoop.fs.FileStatus[] getFileStatus(org.apache.hadoop.fs.Path, org.apache.mahout.common.iterator.sequencefile.PathType, org.apache.hadoop.fs.PathFilter, java.util.Comparator, org.apache.hadoop.conf.Configuration) throws java.io.IOException
    {
        org.apache.hadoop.fs.Path r0;
        org.apache.mahout.common.iterator.sequencefile.PathType r1, $r6, $r7;
        org.apache.hadoop.fs.PathFilter r2;
        java.util.Comparator r3;
        org.apache.hadoop.conf.Configuration r4;
        org.apache.hadoop.fs.FileSystem r5;
        org.apache.hadoop.fs.FileStatus[] $r8, r9, $r10;

        r0 := @parameter0: org.apache.hadoop.fs.Path;

        r1 := @parameter1: org.apache.mahout.common.iterator.sequencefile.PathType;

        r2 := @parameter2: org.apache.hadoop.fs.PathFilter;

        r3 := @parameter3: java.util.Comparator;

        r4 := @parameter4: org.apache.hadoop.conf.Configuration;

        r5 = virtualinvoke r0.<org.apache.hadoop.fs.Path: org.apache.hadoop.fs.FileSystem getFileSystem(org.apache.hadoop.conf.Configuration)>(r4);

        if r2 != null goto label3;

        $r7 = <org.apache.mahout.common.iterator.sequencefile.PathType: org.apache.mahout.common.iterator.sequencefile.PathType GLOB>;

        if r1 != $r7 goto label1;

        $r8 = virtualinvoke r5.<org.apache.hadoop.fs.FileSystem: org.apache.hadoop.fs.FileStatus[] globStatus(org.apache.hadoop.fs.Path)>(r0);

        goto label2;

     label1:
        $r8 = staticinvoke <org.apache.mahout.common.HadoopUtil: org.apache.hadoop.fs.FileStatus[] listStatus(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path)>(r5, r0);

     label2:
        r9 = $r8;

        goto label6;

     label3:
        $r6 = <org.apache.mahout.common.iterator.sequencefile.PathType: org.apache.mahout.common.iterator.sequencefile.PathType GLOB>;

        if r1 != $r6 goto label4;

        $r10 = virtualinvoke r5.<org.apache.hadoop.fs.FileSystem: org.apache.hadoop.fs.FileStatus[] globStatus(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.PathFilter)>(r0, r2);

        goto label5;

     label4:
        $r10 = staticinvoke <org.apache.mahout.common.HadoopUtil: org.apache.hadoop.fs.FileStatus[] listStatus(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.PathFilter)>(r5, r0, r2);

     label5:
        r9 = $r10;

     label6:
        if r3 == null goto label7;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>(r9, r3);

     label7:
        return r9;
    }

    public static org.apache.hadoop.fs.FileStatus[] listStatus(org.apache.hadoop.fs.FileSystem, org.apache.hadoop.fs.Path) throws java.io.IOException
    {
        org.apache.hadoop.fs.FileSystem r0;
        org.apache.hadoop.fs.Path r1;
        org.apache.hadoop.fs.FileStatus[] $r3, $r5;
        java.io.FileNotFoundException $r4;

        r0 := @parameter0: org.apache.hadoop.fs.FileSystem;

        r1 := @parameter1: org.apache.hadoop.fs.Path;

     label1:
        $r3 = virtualinvoke r0.<org.apache.hadoop.fs.FileSystem: org.apache.hadoop.fs.FileStatus[] listStatus(org.apache.hadoop.fs.Path)>(r1);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = newarray (org.apache.hadoop.fs.FileStatus)[0];

        return $r5;

        catch java.io.FileNotFoundException from label1 to label2 with label3;
    }

    public static org.apache.hadoop.fs.FileStatus[] listStatus(org.apache.hadoop.fs.FileSystem, org.apache.hadoop.fs.Path, org.apache.hadoop.fs.PathFilter) throws java.io.IOException
    {
        org.apache.hadoop.fs.FileSystem r0;
        org.apache.hadoop.fs.Path r1;
        org.apache.hadoop.fs.PathFilter r2;
        org.apache.hadoop.fs.FileStatus[] $r4, $r6;
        java.io.FileNotFoundException $r5;

        r0 := @parameter0: org.apache.hadoop.fs.FileSystem;

        r1 := @parameter1: org.apache.hadoop.fs.Path;

        r2 := @parameter2: org.apache.hadoop.fs.PathFilter;

     label1:
        $r4 = virtualinvoke r0.<org.apache.hadoop.fs.FileSystem: org.apache.hadoop.fs.FileStatus[] listStatus(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.PathFilter)>(r1, r2);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = newarray (org.apache.hadoop.fs.FileStatus)[0];

        return $r6;

        catch java.io.FileNotFoundException from label1 to label2 with label3;
    }

    public static void cacheFiles(org.apache.hadoop.fs.Path, org.apache.hadoop.conf.Configuration)
    {
        org.apache.hadoop.fs.Path r0;
        org.apache.hadoop.conf.Configuration r1;
        java.net.URI[] $r2;
        java.net.URI $r3;

        r0 := @parameter0: org.apache.hadoop.fs.Path;

        r1 := @parameter1: org.apache.hadoop.conf.Configuration;

        $r2 = newarray (java.net.URI)[1];

        $r3 = virtualinvoke r0.<org.apache.hadoop.fs.Path: java.net.URI toUri()>();

        $r2[0] = $r3;

        staticinvoke <org.apache.hadoop.filecache.DistributedCache: void setCacheFiles(java.net.URI[],org.apache.hadoop.conf.Configuration)>($r2, r1);

        return;
    }

    public static org.apache.hadoop.fs.Path getSingleCachedFile(org.apache.hadoop.conf.Configuration) throws java.io.IOException
    {
        org.apache.hadoop.conf.Configuration r0;
        org.apache.hadoop.fs.Path[] $r1;
        org.apache.hadoop.fs.Path $r2;

        r0 := @parameter0: org.apache.hadoop.conf.Configuration;

        $r1 = staticinvoke <org.apache.mahout.common.HadoopUtil: org.apache.hadoop.fs.Path[] getCachedFiles(org.apache.hadoop.conf.Configuration)>(r0);

        $r2 = $r1[0];

        return $r2;
    }

    public static org.apache.hadoop.fs.Path[] getCachedFiles(org.apache.hadoop.conf.Configuration) throws java.io.IOException
    {
        org.apache.hadoop.conf.Configuration r0;
        org.apache.hadoop.fs.LocalFileSystem r1;
        java.net.URI[] r2;
        int $i0, $i1, $i2, i3, $i4, i5;
        org.apache.hadoop.fs.Path $r3, $r4, $r5, $r6, $r9;
        boolean $z0, $z1, $z2;
        java.lang.String $r7, $r10;
        java.net.URI $r8, $r11;
        org.apache.hadoop.fs.Path[] r12;

        r0 := @parameter0: org.apache.hadoop.conf.Configuration;

        r1 = staticinvoke <org.apache.hadoop.fs.FileSystem: org.apache.hadoop.fs.LocalFileSystem getLocal(org.apache.hadoop.conf.Configuration)>(r0);

        r12 = staticinvoke <org.apache.hadoop.filecache.DistributedCache: org.apache.hadoop.fs.Path[] getLocalCacheFiles(org.apache.hadoop.conf.Configuration)>(r0);

        r2 = staticinvoke <org.apache.hadoop.filecache.DistributedCache: java.net.URI[] getCacheFiles(org.apache.hadoop.conf.Configuration)>(r0);

        if r12 != null goto label4;

        if r2 == null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z1, "Unable to find cached files!");

        $i2 = lengthof r2;

        r12 = newarray (org.apache.hadoop.fs.Path)[$i2];

        i3 = 0;

     label3:
        $i4 = lengthof r2;

        if i3 >= $i4 goto label7;

        $r9 = new org.apache.hadoop.fs.Path;

        $r11 = r2[i3];

        $r10 = virtualinvoke $r11.<java.net.URI: java.lang.String getPath()>();

        specialinvoke $r9.<org.apache.hadoop.fs.Path: void <init>(java.lang.String)>($r10);

        r12[i3] = $r9;

        i3 = i3 + 1;

        goto label3;

     label4:
        i5 = 0;

     label5:
        $i0 = lengthof r12;

        if i5 >= $i0 goto label7;

        $r3 = r12[i5];

        $r4 = virtualinvoke r1.<org.apache.hadoop.fs.LocalFileSystem: org.apache.hadoop.fs.Path makeQualified(org.apache.hadoop.fs.Path)>($r3);

        r12[i5] = $r4;

        $r5 = r12[i5];

        $z0 = virtualinvoke r1.<org.apache.hadoop.fs.LocalFileSystem: boolean exists(org.apache.hadoop.fs.Path)>($r5);

        if $z0 != 0 goto label6;

        $r6 = new org.apache.hadoop.fs.Path;

        $r8 = r2[i5];

        $r7 = virtualinvoke $r8.<java.net.URI: java.lang.String getPath()>();

        specialinvoke $r6.<org.apache.hadoop.fs.Path: void <init>(java.lang.String)>($r7);

        r12[i5] = $r6;

     label6:
        i5 = i5 + 1;

        goto label5;

     label7:
        $i1 = lengthof r12;

        if $i1 <= 0 goto label8;

        $z2 = 1;

        goto label9;

     label8:
        $z2 = 0;

     label9:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z2, "Unable to find cached files!");

        return r12;
    }

    public static void setSerializations(org.apache.hadoop.conf.Configuration)
    {
        org.apache.hadoop.conf.Configuration r0;

        r0 := @parameter0: org.apache.hadoop.conf.Configuration;

        virtualinvoke r0.<org.apache.hadoop.conf.Configuration: void set(java.lang.String,java.lang.String)>("io.serializations", "org.apache.hadoop.io.serializer.JavaSerialization,org.apache.hadoop.io.serializer.WritableSerialization");

        return;
    }

    public static void writeInt(int, org.apache.hadoop.fs.Path, org.apache.hadoop.conf.Configuration) throws java.io.IOException
    {
        int i0;
        org.apache.hadoop.fs.Path r0;
        org.apache.hadoop.conf.Configuration r1;
        org.apache.hadoop.fs.FileSystem r2;
        org.apache.hadoop.fs.FSDataOutputStream r3;
        java.net.URI $r6;
        java.lang.Throwable $r7, $r8, $r9, r11;

        i0 := @parameter0: int;

        r0 := @parameter1: org.apache.hadoop.fs.Path;

        r1 := @parameter2: org.apache.hadoop.conf.Configuration;

        $r6 = virtualinvoke r0.<org.apache.hadoop.fs.Path: java.net.URI toUri()>();

        r2 = staticinvoke <org.apache.hadoop.fs.FileSystem: org.apache.hadoop.fs.FileSystem get(java.net.URI,org.apache.hadoop.conf.Configuration)>($r6, r1);

        r3 = virtualinvoke r2.<org.apache.hadoop.fs.FileSystem: org.apache.hadoop.fs.FSDataOutputStream create(org.apache.hadoop.fs.Path)>(r0);

        r11 = null;

     label01:
        virtualinvoke r3.<org.apache.hadoop.fs.FSDataOutputStream: void writeInt(int)>(i0);

     label02:
        if r3 == null goto label11;

        virtualinvoke r3.<org.apache.hadoop.fs.FSDataOutputStream: void close()>();

        goto label11;

     label03:
        $r8 := @caughtexception;

        r11 = $r8;

        throw $r8;

     label04:
        $r7 := @caughtexception;

     label05:
        if r3 == null goto label10;

        if r11 == null goto label09;

     label06:
        virtualinvoke r3.<org.apache.hadoop.fs.FSDataOutputStream: void close()>();

     label07:
        goto label10;

     label08:
        $r9 := @caughtexception;

        virtualinvoke r11.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r9);

        goto label10;

     label09:
        virtualinvoke r3.<org.apache.hadoop.fs.FSDataOutputStream: void close()>();

     label10:
        throw $r7;

     label11:
        return;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label03 to label05 with label04;
    }

    public static int readInt(org.apache.hadoop.fs.Path, org.apache.hadoop.conf.Configuration) throws java.io.IOException
    {
        org.apache.hadoop.fs.Path r0;
        org.apache.hadoop.conf.Configuration r1;
        org.apache.hadoop.fs.FileSystem r2;
        org.apache.hadoop.fs.FSDataInputStream r3;
        java.net.URI $r7;
        java.lang.Throwable $r8, $r9, $r10, r12;
        int i0;

        r0 := @parameter0: org.apache.hadoop.fs.Path;

        r1 := @parameter1: org.apache.hadoop.conf.Configuration;

        $r7 = virtualinvoke r0.<org.apache.hadoop.fs.Path: java.net.URI toUri()>();

        r2 = staticinvoke <org.apache.hadoop.fs.FileSystem: org.apache.hadoop.fs.FileSystem get(java.net.URI,org.apache.hadoop.conf.Configuration)>($r7, r1);

        r3 = virtualinvoke r2.<org.apache.hadoop.fs.FileSystem: org.apache.hadoop.fs.FSDataInputStream open(org.apache.hadoop.fs.Path)>(r0);

        r12 = null;

     label01:
        i0 = virtualinvoke r3.<org.apache.hadoop.fs.FSDataInputStream: int readInt()>();

     label02:
        if r3 == null goto label03;

        virtualinvoke r3.<org.apache.hadoop.fs.FSDataInputStream: void close()>();

     label03:
        return i0;

     label04:
        $r8 := @caughtexception;

        r12 = $r8;

        throw $r8;

     label05:
        $r10 := @caughtexception;

     label06:
        if r3 == null goto label11;

        if r12 == null goto label10;

     label07:
        virtualinvoke r3.<org.apache.hadoop.fs.FSDataInputStream: void close()>();

     label08:
        goto label11;

     label09:
        $r9 := @caughtexception;

        virtualinvoke r12.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r9);

        goto label11;

     label10:
        virtualinvoke r3.<org.apache.hadoop.fs.FSDataInputStream: void close()>();

     label11:
        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label06 with label05;
    }

    public static java.lang.String buildDirList(org.apache.hadoop.fs.FileSystem, org.apache.hadoop.fs.FileStatus) throws java.io.IOException
    {
        org.apache.hadoop.fs.FileSystem r0;
        org.apache.hadoop.fs.FileStatus r1, r4;
        org.apache.hadoop.fs.FileStatus[] r3;
        int i0, i1;
        java.lang.String r5, $r11, $r14;
        java.util.ArrayList $r6;
        org.apache.hadoop.fs.Path $r7, $r13;
        com.google.common.base.Joiner $r8, $r9;
        java.util.Iterator $r10;
        java.net.URI $r12;
        boolean $z1, z3;

        r0 := @parameter0: org.apache.hadoop.fs.FileSystem;

        r1 := @parameter1: org.apache.hadoop.fs.FileStatus;

        z3 = 0;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        $r7 = virtualinvoke r1.<org.apache.hadoop.fs.FileStatus: org.apache.hadoop.fs.Path getPath()>();

        r3 = virtualinvoke r0.<org.apache.hadoop.fs.FileSystem: org.apache.hadoop.fs.FileStatus[] listStatus(org.apache.hadoop.fs.Path)>($r7);

        i0 = lengthof r3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r4 = r3[i1];

        $z1 = virtualinvoke r4.<org.apache.hadoop.fs.FileStatus: boolean isDir()>();

        if $z1 == 0 goto label2;

        r5 = staticinvoke <org.apache.mahout.common.HadoopUtil: java.lang.String buildDirList(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.FileStatus)>(r0, r4);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r5);

        goto label3;

     label2:
        z3 = 1;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        if z3 == 0 goto label5;

        $r13 = virtualinvoke r1.<org.apache.hadoop.fs.FileStatus: org.apache.hadoop.fs.Path getPath()>();

        $r12 = virtualinvoke $r13.<org.apache.hadoop.fs.Path: java.net.URI toUri()>();

        $r14 = virtualinvoke $r12.<java.net.URI: java.lang.String getPath()>();

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r14);

     label5:
        $r8 = staticinvoke <com.google.common.base.Joiner: com.google.common.base.Joiner on(char)>(44);

        $r9 = virtualinvoke $r8.<com.google.common.base.Joiner: com.google.common.base.Joiner skipNulls()>();

        $r10 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

        $r11 = virtualinvoke $r9.<com.google.common.base.Joiner: java.lang.String join(java.util.Iterator)>($r10);

        return $r11;
    }

    public static java.lang.String buildDirList(org.apache.hadoop.fs.FileSystem, org.apache.hadoop.fs.FileStatus, org.apache.hadoop.fs.PathFilter) throws java.io.IOException
    {
        org.apache.hadoop.fs.FileSystem r0;
        org.apache.hadoop.fs.FileStatus r1, r5;
        org.apache.hadoop.fs.PathFilter r2;
        org.apache.hadoop.fs.FileStatus[] r4;
        int i0, i1;
        java.lang.String r6, $r13, $r14;
        java.util.ArrayList $r7;
        org.apache.hadoop.fs.Path $r8, $r12;
        com.google.common.base.Joiner $r9, $r10;
        java.util.Iterator $r11;
        java.net.URI $r15;
        boolean $z1, z3;

        r0 := @parameter0: org.apache.hadoop.fs.FileSystem;

        r1 := @parameter1: org.apache.hadoop.fs.FileStatus;

        r2 := @parameter2: org.apache.hadoop.fs.PathFilter;

        z3 = 0;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        $r8 = virtualinvoke r1.<org.apache.hadoop.fs.FileStatus: org.apache.hadoop.fs.Path getPath()>();

        r4 = virtualinvoke r0.<org.apache.hadoop.fs.FileSystem: org.apache.hadoop.fs.FileStatus[] listStatus(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.PathFilter)>($r8, r2);

        i0 = lengthof r4;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r5 = r4[i1];

        $z1 = virtualinvoke r5.<org.apache.hadoop.fs.FileStatus: boolean isDir()>();

        if $z1 == 0 goto label2;

        r6 = staticinvoke <org.apache.mahout.common.HadoopUtil: java.lang.String buildDirList(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.FileStatus)>(r0, r5);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>(r6);

        goto label3;

     label2:
        z3 = 1;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        if z3 == 0 goto label5;

        $r12 = virtualinvoke r1.<org.apache.hadoop.fs.FileStatus: org.apache.hadoop.fs.Path getPath()>();

        $r15 = virtualinvoke $r12.<org.apache.hadoop.fs.Path: java.net.URI toUri()>();

        $r14 = virtualinvoke $r15.<java.net.URI: java.lang.String getPath()>();

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r14);

     label5:
        $r9 = staticinvoke <com.google.common.base.Joiner: com.google.common.base.Joiner on(char)>(44);

        $r10 = virtualinvoke $r9.<com.google.common.base.Joiner: com.google.common.base.Joiner skipNulls()>();

        $r11 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

        $r13 = virtualinvoke $r10.<com.google.common.base.Joiner: java.lang.String join(java.util.Iterator)>($r11);

        return $r13;
    }

    public static java.lang.String calcRelativeFilePath(org.apache.hadoop.conf.Configuration, org.apache.hadoop.fs.Path) throws java.io.IOException
    {
        org.apache.hadoop.conf.Configuration r0;
        org.apache.hadoop.fs.Path r1, $r6;
        org.apache.hadoop.fs.FileSystem r2;
        org.apache.hadoop.fs.FileStatus r3;
        java.lang.String r4, $r7, $r8, $r9, r13, r14;
        java.lang.String[] r5;
        boolean $z0;
        int $i0, $i1;
        java.lang.StringBuilder $r10, $r11, $r12;

        r0 := @parameter0: org.apache.hadoop.conf.Configuration;

        r1 := @parameter1: org.apache.hadoop.fs.Path;

        r2 = virtualinvoke r1.<org.apache.hadoop.fs.Path: org.apache.hadoop.fs.FileSystem getFileSystem(org.apache.hadoop.conf.Configuration)>(r0);

        r3 = virtualinvoke r2.<org.apache.hadoop.fs.FileSystem: org.apache.hadoop.fs.FileStatus getFileStatus(org.apache.hadoop.fs.Path)>(r1);

        $r6 = virtualinvoke r3.<org.apache.hadoop.fs.FileStatus: org.apache.hadoop.fs.Path getPath()>();

        $r7 = virtualinvoke $r6.<org.apache.hadoop.fs.Path: java.lang.String toString()>();

        r4 = virtualinvoke $r7.<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>("file:", "");

        r13 = virtualinvoke r0.<org.apache.hadoop.conf.Configuration: java.lang.String get(java.lang.String)>("baseinputpath");

        $z0 = virtualinvoke r13.<java.lang.String: boolean endsWith(java.lang.String)>("/");

        if $z0 != 0 goto label1;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        r14 = virtualinvoke r13.<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>("file:", "");

        r5 = virtualinvoke r4.<java.lang.String: java.lang.String[] split(java.lang.String)>(r14);

        $i1 = lengthof r5;

        if $i1 != 2 goto label2;

        $r8 = r5[1];

        return $r8;

     label2:
        $i0 = lengthof r5;

        if $i0 != 1 goto label3;

        $r9 = r5[0];

        return $r9;

     label3:
        return r4;
    }

    public static org.apache.hadoop.fs.Path findInCacheByPartOfFilename(java.lang.String, java.net.URI[])
    {
        java.lang.String r0, $r5, $r7, $r9;
        java.net.URI[] r1;
        int i0, i1;
        java.net.URI r3;
        org.slf4j.Logger $r4, $r6;
        boolean $z0;
        org.apache.hadoop.fs.Path $r8;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.net.URI[];

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r3 = r1[i1];

        $r4 = <org.apache.mahout.common.HadoopUtil: org.slf4j.Logger log>;

        interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("trying find a file in distributed cache containing [{}] in its name", r0);

        if r3 == null goto label2;

        $r5 = virtualinvoke r3.<java.net.URI: java.lang.String toString()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean contains(java.lang.CharSequence)>(r0);

        if $z0 == 0 goto label2;

        $r6 = <org.apache.mahout.common.HadoopUtil: org.slf4j.Logger log>;

        $r7 = virtualinvoke r3.<java.net.URI: java.lang.String toString()>();

        interfaceinvoke $r6.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("found file [{}] containing [{}]", $r7, r0);

        $r8 = new org.apache.hadoop.fs.Path;

        $r9 = virtualinvoke r3.<java.net.URI: java.lang.String getPath()>();

        specialinvoke $r8.<org.apache.hadoop.fs.Path: void <init>(java.lang.String)>($r9);

        return $r8;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return null;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "org/apache/mahout/common/HadoopUtil");

        <org.apache.mahout.common.HadoopUtil: org.slf4j.Logger log> = $r0;

        return;
    }
}
