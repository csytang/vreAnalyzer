public abstract class org.apache.mahout.vectorizer.encoders.WordValueEncoder extends org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder
{
    private final byte[] nameBytes;

    protected void <init>(java.lang.String)
    {
        org.apache.mahout.vectorizer.encoders.WordValueEncoder r0;
        java.lang.String r1;
        byte[] $r2;

        r0 := @this: org.apache.mahout.vectorizer.encoders.WordValueEncoder;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder: void <init>(java.lang.String,int)>(r1, 2);

        $r2 = staticinvoke <org.apache.mahout.vectorizer.encoders.WordValueEncoder: byte[] bytesForString(java.lang.String)>(r1);

        r0.<org.apache.mahout.vectorizer.encoders.WordValueEncoder: byte[] nameBytes> = $r2;

        return;
    }

    public void addToVector(byte[], double, org.apache.mahout.math.Vector)
    {
        org.apache.mahout.vectorizer.encoders.WordValueEncoder r0;
        byte[] r1;
        double d0, d1, $d2, $d3;
        org.apache.mahout.math.Vector r2;
        int i0, i1, $i2, i3;
        java.lang.String r3;
        boolean $z0;

        r0 := @this: org.apache.mahout.vectorizer.encoders.WordValueEncoder;

        r1 := @parameter0: byte[];

        d0 := @parameter1: double;

        r2 := @parameter2: org.apache.mahout.math.Vector;

        i0 = virtualinvoke r0.<org.apache.mahout.vectorizer.encoders.WordValueEncoder: int getProbes()>();

        r3 = virtualinvoke r0.<org.apache.mahout.vectorizer.encoders.WordValueEncoder: java.lang.String getName()>();

        d1 = virtualinvoke r0.<org.apache.mahout.vectorizer.encoders.WordValueEncoder: double getWeight(byte[],double)>(r1, d0);

        i3 = 0;

     label1:
        if i3 >= i0 goto label3;

        $i2 = interfaceinvoke r2.<org.apache.mahout.math.Vector: int size()>();

        i1 = virtualinvoke r0.<org.apache.mahout.vectorizer.encoders.WordValueEncoder: int hashForProbe(byte[],int,java.lang.String,int)>(r1, $i2, r3, i3);

        $z0 = virtualinvoke r0.<org.apache.mahout.vectorizer.encoders.WordValueEncoder: boolean isTraceEnabled()>();

        if $z0 == 0 goto label2;

        virtualinvoke r0.<org.apache.mahout.vectorizer.encoders.WordValueEncoder: void trace(byte[],int)>(r1, i1);

     label2:
        $d2 = interfaceinvoke r2.<org.apache.mahout.math.Vector: double get(int)>(i1);

        $d3 = $d2 + d1;

        interfaceinvoke r2.<org.apache.mahout.math.Vector: void set(int,double)>(i1, $d3);

        i3 = i3 + 1;

        goto label1;

     label3:
        return;
    }

    protected double getWeight(byte[], double)
    {
        org.apache.mahout.vectorizer.encoders.WordValueEncoder r0;
        byte[] r1;
        double d0, $d1, $d2;

        r0 := @this: org.apache.mahout.vectorizer.encoders.WordValueEncoder;

        r1 := @parameter0: byte[];

        d0 := @parameter1: double;

        $d1 = virtualinvoke r0.<org.apache.mahout.vectorizer.encoders.WordValueEncoder: double weight(byte[])>(r1);

        $d2 = d0 * $d1;

        return $d2;
    }

    protected int hashForProbe(byte[], int, java.lang.String, int)
    {
        org.apache.mahout.vectorizer.encoders.WordValueEncoder r0;
        byte[] r1, $r3;
        int i0, i1, $i2, $i3;
        java.lang.String r2;

        r0 := @this: org.apache.mahout.vectorizer.encoders.WordValueEncoder;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        i1 := @parameter3: int;

        $r3 = r0.<org.apache.mahout.vectorizer.encoders.WordValueEncoder: byte[] nameBytes>;

        $i2 = 100 + i1;

        $i3 = virtualinvoke r0.<org.apache.mahout.vectorizer.encoders.WordValueEncoder: int hash(byte[],byte[],int,int)>($r3, r1, $i2, i0);

        return $i3;
    }

    public java.lang.String asString(java.lang.String)
    {
        org.apache.mahout.vectorizer.encoders.WordValueEncoder r0;
        java.lang.String r1, $r4, $r7;
        java.lang.Object[] $r2;
        java.util.Locale $r3;
        byte[] $r5;
        double $d0;
        java.lang.Double $r6;

        r0 := @this: org.apache.mahout.vectorizer.encoders.WordValueEncoder;

        r1 := @parameter0: java.lang.String;

        $r3 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r2 = newarray (java.lang.Object)[3];

        $r4 = virtualinvoke r0.<org.apache.mahout.vectorizer.encoders.WordValueEncoder: java.lang.String getName()>();

        $r2[0] = $r4;

        $r2[1] = r1;

        $r5 = staticinvoke <org.apache.mahout.vectorizer.encoders.WordValueEncoder: byte[] bytesForString(java.lang.String)>(r1);

        $d0 = virtualinvoke r0.<org.apache.mahout.vectorizer.encoders.WordValueEncoder: double weight(byte[])>($r5);

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r2[2] = $r6;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r3, "%s:%s:%.4f", $r2);

        return $r7;
    }

    protected abstract double weight(byte[]);
}
