public class org.apache.mahout.classifier.df.ref.SequentialBuilder extends java.lang.Object
{
    private static final org.slf4j.Logger log;
    private final java.util.Random rng;
    private final org.apache.mahout.classifier.df.Bagging bagging;

    public void <init>(java.util.Random, org.apache.mahout.classifier.df.builder.TreeBuilder, org.apache.mahout.classifier.df.data.Data)
    {
        org.apache.mahout.classifier.df.ref.SequentialBuilder r0;
        java.util.Random r1;
        org.apache.mahout.classifier.df.builder.TreeBuilder r2;
        org.apache.mahout.classifier.df.data.Data r3;
        org.apache.mahout.classifier.df.Bagging $r4;

        r0 := @this: org.apache.mahout.classifier.df.ref.SequentialBuilder;

        r1 := @parameter0: java.util.Random;

        r2 := @parameter1: org.apache.mahout.classifier.df.builder.TreeBuilder;

        r3 := @parameter2: org.apache.mahout.classifier.df.data.Data;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.mahout.classifier.df.ref.SequentialBuilder: java.util.Random rng> = r1;

        $r4 = new org.apache.mahout.classifier.df.Bagging;

        specialinvoke $r4.<org.apache.mahout.classifier.df.Bagging: void <init>(org.apache.mahout.classifier.df.builder.TreeBuilder,org.apache.mahout.classifier.df.data.Data)>(r2, r3);

        r0.<org.apache.mahout.classifier.df.ref.SequentialBuilder: org.apache.mahout.classifier.df.Bagging bagging> = $r4;

        return;
    }

    public org.apache.mahout.classifier.df.DecisionForest build(int)
    {
        org.apache.mahout.classifier.df.ref.SequentialBuilder r0;
        int i0, i1;
        java.util.ArrayList $r2;
        org.apache.mahout.classifier.df.DecisionForest $r3;
        java.util.Random $r4;
        org.apache.mahout.classifier.df.Bagging $r5;
        org.apache.mahout.classifier.df.node.Node $r6;
        float $f0, $f1, $f2, $f3;

        r0 := @this: org.apache.mahout.classifier.df.ref.SequentialBuilder;

        i0 := @parameter0: int;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r5 = r0.<org.apache.mahout.classifier.df.ref.SequentialBuilder: org.apache.mahout.classifier.df.Bagging bagging>;

        $r4 = r0.<org.apache.mahout.classifier.df.ref.SequentialBuilder: java.util.Random rng>;

        $r6 = virtualinvoke $r5.<org.apache.mahout.classifier.df.Bagging: org.apache.mahout.classifier.df.node.Node build(java.util.Random)>($r4);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r6);

        $f0 = (float) i1;

        $f2 = $f0 + 1.0F;

        $f1 = (float) i0;

        $f3 = $f2 / $f1;

        staticinvoke <org.apache.mahout.classifier.df.ref.SequentialBuilder: void logProgress(float)>($f3);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r3 = new org.apache.mahout.classifier.df.DecisionForest;

        specialinvoke $r3.<org.apache.mahout.classifier.df.DecisionForest: void <init>(java.util.List)>($r2);

        return $r3;
    }

    private static void logProgress(float)
    {
        float f0, $f1;
        int i0, $i1;
        org.slf4j.Logger $r0;
        java.lang.Integer $r1;

        f0 := @parameter0: float;

        $f1 = f0 * 100.0F;

        i0 = (int) $f1;

        $i1 = i0 % 10;

        if $i1 != 0 goto label1;

        $r0 = <org.apache.mahout.classifier.df.ref.SequentialBuilder: org.slf4j.Logger log>;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r0.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Building {}%", $r1);

     label1:
        return;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "org/apache/mahout/classifier/df/ref/SequentialBuilder");

        <org.apache.mahout.classifier.df.ref.SequentialBuilder: org.slf4j.Logger log> = $r0;

        return;
    }
}
