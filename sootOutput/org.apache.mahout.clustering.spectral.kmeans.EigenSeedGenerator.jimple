public final class org.apache.mahout.clustering.spectral.kmeans.EigenSeedGenerator extends java.lang.Object
{
    private static final org.slf4j.Logger log;
    public static final java.lang.String K;

    private void <init>()
    {
        org.apache.mahout.clustering.spectral.kmeans.EigenSeedGenerator r0;

        r0 := @this: org.apache.mahout.clustering.spectral.kmeans.EigenSeedGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.apache.hadoop.fs.Path buildFromEigens(org.apache.hadoop.conf.Configuration, org.apache.hadoop.fs.Path, org.apache.hadoop.fs.Path, int, org.apache.mahout.common.distance.DistanceMeasure) throws java.io.IOException
    {
        org.apache.hadoop.conf.Configuration r0;
        org.apache.hadoop.fs.Path r1, r2, $r22, $r37, $r62, r67;
        int i0, i1, $i2, i4, i5;
        org.apache.mahout.common.distance.DistanceMeasure r3;
        org.apache.hadoop.fs.FileSystem r4;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.apache.hadoop.fs.FileStatus[] r6;
        java.util.Iterator r10, r13, r72;
        org.apache.hadoop.io.Writable r11, $r33, $r36;
        org.apache.mahout.common.Pair r12;
        org.apache.mahout.math.VectorWritable r14;
        org.apache.mahout.math.Vector$Element r15;
        double d0, $d1, $d2;
        java.net.URI $r20;
        org.apache.hadoop.fs.Path[] $r23;
        org.apache.hadoop.fs.PathFilter $r24;
        org.apache.hadoop.fs.FileStatus $r25, r69;
        java.util.HashMap $r26, $r27, $r28;
        org.slf4j.Logger $r29;
        java.util.Set $r30;
        java.lang.Integer $r31, $r44, $r45, $r48, $r55, $r61, r73;
        java.lang.Object $r32, $r34, $r35, $r41, $r42, $r43, $r46, $r57;
        org.apache.mahout.common.iterator.sequencefile.SequenceFileIterable $r38;
        org.apache.mahout.math.Vector $r39, $r49, $r59;
        java.lang.Iterable $r40;
        org.apache.mahout.clustering.kmeans.Kluster $r50;
        java.lang.Double $r52, $r56;
        java.lang.String $r53;
        org.apache.hadoop.io.Text $r54;
        org.apache.mahout.clustering.iterator.ClusterWritable $r58;
        byte $b3;
        java.lang.Throwable $r63, $r65, $r66, r71;
        org.apache.hadoop.io.SequenceFile$Writer r70;

        r0 := @parameter0: org.apache.hadoop.conf.Configuration;

        r1 := @parameter1: org.apache.hadoop.fs.Path;

        r2 := @parameter2: org.apache.hadoop.fs.Path;

        i0 := @parameter3: int;

        r3 := @parameter4: org.apache.mahout.common.distance.DistanceMeasure;

        $r20 = virtualinvoke r2.<org.apache.hadoop.fs.Path: java.net.URI toUri()>();

        r4 = staticinvoke <org.apache.hadoop.fs.FileSystem: org.apache.hadoop.fs.FileSystem get(java.net.URI,org.apache.hadoop.conf.Configuration)>($r20, r0);

        $r23 = newarray (org.apache.hadoop.fs.Path)[1];

        $r23[0] = r2;

        staticinvoke <org.apache.mahout.common.HadoopUtil: void delete(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.Path[])>(r0, $r23);

        $r22 = new org.apache.hadoop.fs.Path;

        specialinvoke $r22.<org.apache.hadoop.fs.Path: void <init>(org.apache.hadoop.fs.Path,java.lang.String)>(r2, "part-eigenSeed");

        z0 = virtualinvoke r4.<org.apache.hadoop.fs.FileSystem: boolean createNewFile(org.apache.hadoop.fs.Path)>($r22);

        if z0 == 0 goto label21;

        $r25 = virtualinvoke r4.<org.apache.hadoop.fs.FileSystem: org.apache.hadoop.fs.FileStatus getFileStatus(org.apache.hadoop.fs.Path)>(r1);

        $z1 = virtualinvoke $r25.<org.apache.hadoop.fs.FileStatus: boolean isDir()>();

        if $z1 == 0 goto label01;

        $r62 = new org.apache.hadoop.fs.Path;

        specialinvoke $r62.<org.apache.hadoop.fs.Path: void <init>(org.apache.hadoop.fs.Path,java.lang.String)>(r1, "*");

        r67 = $r62;

        goto label02;

     label01:
        r67 = r1;

     label02:
        $r24 = staticinvoke <org.apache.mahout.common.iterator.sequencefile.PathFilters: org.apache.hadoop.fs.PathFilter logsCRCFilter()>();

        r6 = virtualinvoke r4.<org.apache.hadoop.fs.FileSystem: org.apache.hadoop.fs.FileStatus[] globStatus(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.PathFilter)>(r67, $r24);

        $r27 = new java.util.HashMap;

        specialinvoke $r27.<java.util.HashMap: void <init>(int)>(i0);

        $r28 = new java.util.HashMap;

        specialinvoke $r28.<java.util.HashMap: void <init>(int)>(i0);

        $r26 = new java.util.HashMap;

        specialinvoke $r26.<java.util.HashMap: void <init>(int)>(i0);

        i4 = lengthof r6;

        i5 = 0;

     label03:
        if i5 >= i4 goto label08;

        r69 = r6[i5];

        $z3 = virtualinvoke r69.<org.apache.hadoop.fs.FileStatus: boolean isDir()>();

        if $z3 != 0 goto label07;

        $r38 = new org.apache.mahout.common.iterator.sequencefile.SequenceFileIterable;

        $r37 = virtualinvoke r69.<org.apache.hadoop.fs.FileStatus: org.apache.hadoop.fs.Path getPath()>();

        specialinvoke $r38.<org.apache.mahout.common.iterator.sequencefile.SequenceFileIterable: void <init>(org.apache.hadoop.fs.Path,boolean,org.apache.hadoop.conf.Configuration)>($r37, 1, r0);

        r10 = virtualinvoke $r38.<org.apache.mahout.common.iterator.sequencefile.SequenceFileIterable: java.util.Iterator iterator()>();

     label04:
        $z5 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label07;

        $r41 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (org.apache.mahout.common.Pair) $r41;

        $r42 = virtualinvoke r12.<org.apache.mahout.common.Pair: java.lang.Object getFirst()>();

        r11 = (org.apache.hadoop.io.Writable) $r42;

        $r43 = virtualinvoke r12.<org.apache.mahout.common.Pair: java.lang.Object getSecond()>();

        r14 = (org.apache.mahout.math.VectorWritable) $r43;

        $r39 = virtualinvoke r14.<org.apache.mahout.math.VectorWritable: org.apache.mahout.math.Vector get()>();

        $r40 = interfaceinvoke $r39.<org.apache.mahout.math.Vector: java.lang.Iterable nonZeroes()>();

        r13 = interfaceinvoke $r40.<java.lang.Iterable: java.util.Iterator iterator()>();

     label05:
        $z4 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label04;

        $r46 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        r15 = (org.apache.mahout.math.Vector$Element) $r46;

        i1 = interfaceinvoke r15.<org.apache.mahout.math.Vector$Element: int index()>();

        $d1 = interfaceinvoke r15.<org.apache.mahout.math.Vector$Element: double get()>();

        d0 = staticinvoke <java.lang.Math: double abs(double)>($d1);

        $r44 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $z6 = interfaceinvoke $r27.<java.util.Map: boolean containsKey(java.lang.Object)>($r44);

        if $z6 == 0 goto label06;

        $r55 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r57 = interfaceinvoke $r27.<java.util.Map: java.lang.Object get(java.lang.Object)>($r55);

        $r56 = (java.lang.Double) $r57;

        $d2 = virtualinvoke $r56.<java.lang.Double: double doubleValue()>();

        $b3 = d0 cmpl $d2;

        if $b3 <= 0 goto label05;

     label06:
        $r45 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r52 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        interfaceinvoke $r27.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r45, $r52);

        $r54 = new org.apache.hadoop.io.Text;

        $r53 = virtualinvoke r11.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r54.<org.apache.hadoop.io.Text: void <init>(java.lang.String)>($r53);

        $r48 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        interfaceinvoke $r28.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r48, $r54);

        $r50 = new org.apache.mahout.clustering.kmeans.Kluster;

        $r49 = virtualinvoke r14.<org.apache.mahout.math.VectorWritable: org.apache.mahout.math.Vector get()>();

        specialinvoke $r50.<org.apache.mahout.clustering.kmeans.Kluster: void <init>(org.apache.mahout.math.Vector,int,org.apache.mahout.common.distance.DistanceMeasure)>($r49, i1, r3);

        $r59 = virtualinvoke r14.<org.apache.mahout.math.VectorWritable: org.apache.mahout.math.Vector get()>();

        virtualinvoke $r50.<org.apache.mahout.clustering.kmeans.Kluster: void observe(org.apache.mahout.math.Vector,double)>($r59, 1.0);

        $r58 = new org.apache.mahout.clustering.iterator.ClusterWritable;

        specialinvoke $r58.<org.apache.mahout.clustering.iterator.ClusterWritable: void <init>()>();

        virtualinvoke $r58.<org.apache.mahout.clustering.iterator.ClusterWritable: void setValue(org.apache.mahout.clustering.Cluster)>($r50);

        $r61 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        interfaceinvoke $r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r61, $r58);

        goto label05;

     label07:
        i5 = i5 + 1;

        goto label03;

     label08:
        r70 = staticinvoke <org.apache.hadoop.io.SequenceFile: org.apache.hadoop.io.SequenceFile$Writer createWriter(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.Path,java.lang.Class,java.lang.Class)>(r4, r0, $r22, class "org/apache/hadoop/io/Text", class "org/apache/mahout/clustering/iterator/ClusterWritable");

        r71 = null;

     label09:
        $r30 = interfaceinvoke $r27.<java.util.Map: java.util.Set keySet()>();

        r72 = interfaceinvoke $r30.<java.util.Set: java.util.Iterator iterator()>();

     label10:
        $z2 = interfaceinvoke r72.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label11;

        $r35 = interfaceinvoke r72.<java.util.Iterator: java.lang.Object next()>();

        r73 = (java.lang.Integer) $r35;

        $r34 = interfaceinvoke $r28.<java.util.Map: java.lang.Object get(java.lang.Object)>(r73);

        $r33 = (org.apache.hadoop.io.Writable) $r34;

        $r32 = interfaceinvoke $r26.<java.util.Map: java.lang.Object get(java.lang.Object)>(r73);

        $r36 = (org.apache.hadoop.io.Writable) $r32;

        virtualinvoke r70.<org.apache.hadoop.io.SequenceFile$Writer: void append(org.apache.hadoop.io.Writable,org.apache.hadoop.io.Writable)>($r33, $r36);

        goto label10;

     label11:
        $r29 = <org.apache.mahout.clustering.spectral.kmeans.EigenSeedGenerator: org.slf4j.Logger log>;

        $i2 = interfaceinvoke $r28.<java.util.Map: int size()>();

        $r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        interfaceinvoke $r29.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("EigenSeedGenerator:: Wrote {} Klusters to {}", $r31, $r22);

     label12:
        if r70 == null goto label21;

        virtualinvoke r70.<org.apache.hadoop.io.SequenceFile$Writer: void close()>();

        goto label21;

     label13:
        $r66 := @caughtexception;

        r71 = $r66;

        throw $r66;

     label14:
        $r63 := @caughtexception;

     label15:
        if r70 == null goto label20;

        if r71 == null goto label19;

     label16:
        virtualinvoke r70.<org.apache.hadoop.io.SequenceFile$Writer: void close()>();

     label17:
        goto label20;

     label18:
        $r65 := @caughtexception;

        virtualinvoke r71.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r65);

        goto label20;

     label19:
        virtualinvoke r70.<org.apache.hadoop.io.SequenceFile$Writer: void close()>();

     label20:
        throw $r63;

     label21:
        return $r22;

        catch java.lang.Throwable from label09 to label12 with label13;
        catch java.lang.Throwable from label09 to label12 with label14;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label13 to label15 with label14;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        <org.apache.mahout.clustering.spectral.kmeans.EigenSeedGenerator: java.lang.String K> = "k";

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "org/apache/mahout/clustering/spectral/kmeans/EigenSeedGenerator");

        <org.apache.mahout.clustering.spectral.kmeans.EigenSeedGenerator: org.slf4j.Logger log> = $r0;

        return;
    }
}
