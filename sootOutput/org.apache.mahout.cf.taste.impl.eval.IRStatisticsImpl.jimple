public final class org.apache.mahout.cf.taste.impl.eval.IRStatisticsImpl extends java.lang.Object implements org.apache.mahout.cf.taste.eval.IRStatistics, java.io.Serializable
{
    private final double precision;
    private final double recall;
    private final double fallOut;
    private final double ndcg;
    private final double reach;

    void <init>(double, double, double, double, double)
    {
        org.apache.mahout.cf.taste.impl.eval.IRStatisticsImpl r0;
        double d0, d1, d2, d3, d4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        byte $b0, $b1, $b2, $b3, $b4, $b5, $b6, $b7, $b8, $b9;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r6, $r7, $r8, $r9, $r11, $r12, $r13, $r14, $r16, $r17, $r18, $r19, $r21, $r22, $r23, $r24;
        java.lang.String $r5, $r10, $r15, $r20, $r25;

        r0 := @this: org.apache.mahout.cf.taste.impl.eval.IRStatisticsImpl;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z0 != 0 goto label01;

        $b7 = d0 cmpl 0.0;

        if $b7 < 0 goto label02;

        $b9 = d0 cmpg 1.0;

        if $b9 > 0 goto label02;

     label01:
        $z1 = 1;

        goto label03;

     label02:
        $z1 = 0;

     label03:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal precision: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Must be: 0.0 <= precision <= 1.0 or NaN");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, $r5);

        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1);

        if $z2 != 0 goto label04;

        $b5 = d1 cmpl 0.0;

        if $b5 < 0 goto label05;

        $b8 = d1 cmpg 1.0;

        if $b8 > 0 goto label05;

     label04:
        $z3 = 1;

        goto label06;

     label05:
        $z3 = 0;

     label06:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal recall: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Must be: 0.0 <= recall <= 1.0 or NaN");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z3, $r10);

        $z4 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d2);

        if $z4 != 0 goto label07;

        $b4 = d2 cmpl 0.0;

        if $b4 < 0 goto label08;

        $b6 = d2 cmpg 1.0;

        if $b6 > 0 goto label08;

     label07:
        $z5 = 1;

        goto label09;

     label08:
        $z5 = 0;

     label09:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal fallOut: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d2);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Must be: 0.0 <= fallOut <= 1.0 or NaN");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z5, $r15);

        $z6 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d3);

        if $z6 != 0 goto label10;

        $b1 = d3 cmpl 0.0;

        if $b1 < 0 goto label11;

        $b3 = d3 cmpg 1.0;

        if $b3 > 0 goto label11;

     label10:
        $z7 = 1;

        goto label12;

     label11:
        $z7 = 0;

     label12:
        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal nDCG: ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d3);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Must be: 0.0 <= nDCG <= 1.0 or NaN");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z7, $r20);

        $z8 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d4);

        if $z8 != 0 goto label13;

        $b0 = d4 cmpl 0.0;

        if $b0 < 0 goto label14;

        $b2 = d4 cmpg 1.0;

        if $b2 > 0 goto label14;

     label13:
        $z9 = 1;

        goto label15;

     label14:
        $z9 = 0;

     label15:
        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal reach: ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d4);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Must be: 0.0 <= reach <= 1.0 or NaN");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z9, $r25);

        r0.<org.apache.mahout.cf.taste.impl.eval.IRStatisticsImpl: double precision> = d0;

        r0.<org.apache.mahout.cf.taste.impl.eval.IRStatisticsImpl: double recall> = d1;

        r0.<org.apache.mahout.cf.taste.impl.eval.IRStatisticsImpl: double fallOut> = d2;

        r0.<org.apache.mahout.cf.taste.impl.eval.IRStatisticsImpl: double ndcg> = d3;

        r0.<org.apache.mahout.cf.taste.impl.eval.IRStatisticsImpl: double reach> = d4;

        return;
    }

    public double getPrecision()
    {
        org.apache.mahout.cf.taste.impl.eval.IRStatisticsImpl r0;
        double $d0;

        r0 := @this: org.apache.mahout.cf.taste.impl.eval.IRStatisticsImpl;

        $d0 = r0.<org.apache.mahout.cf.taste.impl.eval.IRStatisticsImpl: double precision>;

        return $d0;
    }

    public double getRecall()
    {
        org.apache.mahout.cf.taste.impl.eval.IRStatisticsImpl r0;
        double $d0;

        r0 := @this: org.apache.mahout.cf.taste.impl.eval.IRStatisticsImpl;

        $d0 = r0.<org.apache.mahout.cf.taste.impl.eval.IRStatisticsImpl: double recall>;

        return $d0;
    }

    public double getFallOut()
    {
        org.apache.mahout.cf.taste.impl.eval.IRStatisticsImpl r0;
        double $d0;

        r0 := @this: org.apache.mahout.cf.taste.impl.eval.IRStatisticsImpl;

        $d0 = r0.<org.apache.mahout.cf.taste.impl.eval.IRStatisticsImpl: double fallOut>;

        return $d0;
    }

    public double getF1Measure()
    {
        org.apache.mahout.cf.taste.impl.eval.IRStatisticsImpl r0;
        double $d0;

        r0 := @this: org.apache.mahout.cf.taste.impl.eval.IRStatisticsImpl;

        $d0 = virtualinvoke r0.<org.apache.mahout.cf.taste.impl.eval.IRStatisticsImpl: double getFNMeasure(double)>(1.0);

        return $d0;
    }

    public double getFNMeasure(double)
    {
        org.apache.mahout.cf.taste.impl.eval.IRStatisticsImpl r0;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11;
        byte $b0;

        r0 := @this: org.apache.mahout.cf.taste.impl.eval.IRStatisticsImpl;

        d0 := @parameter0: double;

        d1 = d0 * d0;

        $d3 = r0.<org.apache.mahout.cf.taste.impl.eval.IRStatisticsImpl: double precision>;

        $d5 = d1 * $d3;

        $d4 = r0.<org.apache.mahout.cf.taste.impl.eval.IRStatisticsImpl: double recall>;

        d2 = $d5 + $d4;

        $b0 = d2 cmpl 0.0;

        if $b0 != 0 goto label1;

        $d11 = #NaN;

        goto label2;

     label1:
        $d7 = 1.0 + d1;

        $d6 = r0.<org.apache.mahout.cf.taste.impl.eval.IRStatisticsImpl: double precision>;

        $d9 = $d7 * $d6;

        $d8 = r0.<org.apache.mahout.cf.taste.impl.eval.IRStatisticsImpl: double recall>;

        $d10 = $d9 * $d8;

        $d11 = $d10 / d2;

     label2:
        return $d11;
    }

    public double getNormalizedDiscountedCumulativeGain()
    {
        org.apache.mahout.cf.taste.impl.eval.IRStatisticsImpl r0;
        double $d0;

        r0 := @this: org.apache.mahout.cf.taste.impl.eval.IRStatisticsImpl;

        $d0 = r0.<org.apache.mahout.cf.taste.impl.eval.IRStatisticsImpl: double ndcg>;

        return $d0;
    }

    public double getReach()
    {
        org.apache.mahout.cf.taste.impl.eval.IRStatisticsImpl r0;
        double $d0;

        r0 := @this: org.apache.mahout.cf.taste.impl.eval.IRStatisticsImpl;

        $d0 = r0.<org.apache.mahout.cf.taste.impl.eval.IRStatisticsImpl: double reach>;

        return $d0;
    }

    public java.lang.String toString()
    {
        org.apache.mahout.cf.taste.impl.eval.IRStatisticsImpl r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        double $d0, $d1, $d2, $d3, $d4;
        java.lang.String $r13;

        r0 := @this: org.apache.mahout.cf.taste.impl.eval.IRStatisticsImpl;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IRStatisticsImpl[precision:");

        $d0 = r0.<org.apache.mahout.cf.taste.impl.eval.IRStatisticsImpl: double precision>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",recall:");

        $d1 = r0.<org.apache.mahout.cf.taste.impl.eval.IRStatisticsImpl: double recall>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",fallOut:");

        $d2 = r0.<org.apache.mahout.cf.taste.impl.eval.IRStatisticsImpl: double fallOut>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",nDCG:");

        $d3 = r0.<org.apache.mahout.cf.taste.impl.eval.IRStatisticsImpl: double ndcg>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",reach:");

        $d4 = r0.<org.apache.mahout.cf.taste.impl.eval.IRStatisticsImpl: double reach>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d4);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;
    }
}
