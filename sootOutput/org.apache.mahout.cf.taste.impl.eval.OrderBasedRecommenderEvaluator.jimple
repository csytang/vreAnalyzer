public final class org.apache.mahout.cf.taste.impl.eval.OrderBasedRecommenderEvaluator extends java.lang.Object
{
    private static final org.slf4j.Logger log;

    private void <init>()
    {
        org.apache.mahout.cf.taste.impl.eval.OrderBasedRecommenderEvaluator r0;

        r0 := @this: org.apache.mahout.cf.taste.impl.eval.OrderBasedRecommenderEvaluator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void evaluate(org.apache.mahout.cf.taste.recommender.Recommender, org.apache.mahout.cf.taste.recommender.Recommender, int, org.apache.mahout.cf.taste.impl.common.RunningAverage, java.lang.String) throws org.apache.mahout.cf.taste.common.TasteException
    {
        org.apache.mahout.cf.taste.recommender.Recommender r0, r1;
        int i0, i5, i6;
        org.apache.mahout.cf.taste.impl.common.RunningAverage r2;
        java.lang.String r3;
        org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator r4;
        long l1, $l2, l3, l4;
        java.util.List r5, r6;
        java.lang.Long[] r9, r10;
        double d0;
        org.apache.mahout.cf.taste.model.DataModel $r11;
        org.apache.mahout.cf.taste.impl.common.FastIDSet $r12, $r13;
        boolean $z0;

        r0 := @parameter0: org.apache.mahout.cf.taste.recommender.Recommender;

        r1 := @parameter1: org.apache.mahout.cf.taste.recommender.Recommender;

        i0 := @parameter2: int;

        r2 := @parameter3: org.apache.mahout.cf.taste.impl.common.RunningAverage;

        r3 := @parameter4: java.lang.String;

        staticinvoke <org.apache.mahout.cf.taste.impl.eval.OrderBasedRecommenderEvaluator: void printHeader()>();

        $r11 = interfaceinvoke r0.<org.apache.mahout.cf.taste.recommender.Recommender: org.apache.mahout.cf.taste.model.DataModel getDataModel()>();

        r4 = interfaceinvoke $r11.<org.apache.mahout.cf.taste.model.DataModel: org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator getUserIDs()>();

     label1:
        $z0 = interfaceinvoke r4.<org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        l1 = interfaceinvoke r4.<org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator: long nextLong()>();

        r5 = interfaceinvoke r0.<org.apache.mahout.cf.taste.recommender.Recommender: java.util.List recommend(long,int)>(l1, i0);

        r6 = interfaceinvoke r1.<org.apache.mahout.cf.taste.recommender.Recommender: java.util.List recommend(long,int)>(l1, i0);

        $r12 = new org.apache.mahout.cf.taste.impl.common.FastIDSet;

        specialinvoke $r12.<org.apache.mahout.cf.taste.impl.common.FastIDSet: void <init>()>();

        l3 = staticinvoke <org.apache.mahout.cf.taste.impl.eval.OrderBasedRecommenderEvaluator: long setBits(org.apache.mahout.cf.taste.impl.common.FastIDSet,java.util.List,int)>($r12, r5, i0);

        $r13 = new org.apache.mahout.cf.taste.impl.common.FastIDSet;

        specialinvoke $r13.<org.apache.mahout.cf.taste.impl.common.FastIDSet: void <init>()>();

        $l2 = staticinvoke <org.apache.mahout.cf.taste.impl.eval.OrderBasedRecommenderEvaluator: long setBits(org.apache.mahout.cf.taste.impl.common.FastIDSet,java.util.List,int)>($r13, r6, i0);

        l4 = staticinvoke <java.lang.Math: long max(long,long)>(l3, $l2);

        i5 = staticinvoke <org.apache.mahout.cf.taste.impl.eval.OrderBasedRecommenderEvaluator: int mask(org.apache.mahout.cf.taste.impl.common.FastIDSet,org.apache.mahout.cf.taste.impl.common.FastIDSet,long)>($r12, $r13, l4);

        i6 = staticinvoke <java.lang.Math: int min(int,int)>(i5, i0);

        if i6 >= 2 goto label2;

        goto label1;

     label2:
        r9 = staticinvoke <org.apache.mahout.cf.taste.impl.eval.OrderBasedRecommenderEvaluator: java.lang.Long[] getCommonItems(org.apache.mahout.cf.taste.impl.common.FastIDSet,java.lang.Iterable,int)>($r12, r5, i6);

        r10 = staticinvoke <org.apache.mahout.cf.taste.impl.eval.OrderBasedRecommenderEvaluator: java.lang.Long[] getCommonItems(org.apache.mahout.cf.taste.impl.common.FastIDSet,java.lang.Iterable,int)>($r12, r6, i6);

        d0 = staticinvoke <org.apache.mahout.cf.taste.impl.eval.OrderBasedRecommenderEvaluator: double scoreCommonSubset(java.lang.String,long,int,int,java.lang.Long[],java.lang.Long[])>(r3, l1, i0, i6, r9, r10);

        interfaceinvoke r2.<org.apache.mahout.cf.taste.impl.common.RunningAverage: void addDatum(double)>(d0);

        goto label1;

     label3:
        return;
    }

    public static void evaluate(org.apache.mahout.cf.taste.recommender.Recommender, org.apache.mahout.cf.taste.model.DataModel, int, org.apache.mahout.cf.taste.impl.common.RunningAverage, java.lang.String) throws org.apache.mahout.cf.taste.common.TasteException
    {
        org.apache.mahout.cf.taste.recommender.Recommender r0;
        org.apache.mahout.cf.taste.model.DataModel r1, $r11;
        int i0, $i2, i6, i7;
        org.apache.mahout.cf.taste.impl.common.RunningAverage r2;
        java.lang.String r3;
        org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator r4;
        long l1, $l3, l4, l5;
        java.util.List r5;
        org.apache.mahout.cf.taste.model.PreferenceArray r6;
        java.lang.Long[] r9, r10;
        double d0;
        org.apache.mahout.cf.taste.impl.common.FastIDSet $r12, $r13;
        boolean $z0;

        r0 := @parameter0: org.apache.mahout.cf.taste.recommender.Recommender;

        r1 := @parameter1: org.apache.mahout.cf.taste.model.DataModel;

        i0 := @parameter2: int;

        r2 := @parameter3: org.apache.mahout.cf.taste.impl.common.RunningAverage;

        r3 := @parameter4: java.lang.String;

        staticinvoke <org.apache.mahout.cf.taste.impl.eval.OrderBasedRecommenderEvaluator: void printHeader()>();

        $r11 = interfaceinvoke r0.<org.apache.mahout.cf.taste.recommender.Recommender: org.apache.mahout.cf.taste.model.DataModel getDataModel()>();

        r4 = interfaceinvoke $r11.<org.apache.mahout.cf.taste.model.DataModel: org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator getUserIDs()>();

     label1:
        $z0 = interfaceinvoke r4.<org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        l1 = interfaceinvoke r4.<org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator: long nextLong()>();

        $i2 = interfaceinvoke r1.<org.apache.mahout.cf.taste.model.DataModel: int getNumItems()>();

        r5 = interfaceinvoke r0.<org.apache.mahout.cf.taste.recommender.Recommender: java.util.List recommend(long,int)>(l1, $i2);

        r6 = interfaceinvoke r1.<org.apache.mahout.cf.taste.model.DataModel: org.apache.mahout.cf.taste.model.PreferenceArray getPreferencesFromUser(long)>(l1);

        interfaceinvoke r6.<org.apache.mahout.cf.taste.model.PreferenceArray: void sortByValueReversed()>();

        $r12 = new org.apache.mahout.cf.taste.impl.common.FastIDSet;

        specialinvoke $r12.<org.apache.mahout.cf.taste.impl.common.FastIDSet: void <init>()>();

        l4 = staticinvoke <org.apache.mahout.cf.taste.impl.eval.OrderBasedRecommenderEvaluator: long setBits(org.apache.mahout.cf.taste.impl.common.FastIDSet,java.util.List,int)>($r12, r5, i0);

        $r13 = new org.apache.mahout.cf.taste.impl.common.FastIDSet;

        specialinvoke $r13.<org.apache.mahout.cf.taste.impl.common.FastIDSet: void <init>()>();

        $l3 = staticinvoke <org.apache.mahout.cf.taste.impl.eval.OrderBasedRecommenderEvaluator: long setBits(org.apache.mahout.cf.taste.impl.common.FastIDSet,org.apache.mahout.cf.taste.model.PreferenceArray,int)>($r13, r6, i0);

        l5 = staticinvoke <java.lang.Math: long max(long,long)>(l4, $l3);

        i6 = staticinvoke <org.apache.mahout.cf.taste.impl.eval.OrderBasedRecommenderEvaluator: int mask(org.apache.mahout.cf.taste.impl.common.FastIDSet,org.apache.mahout.cf.taste.impl.common.FastIDSet,long)>($r12, $r13, l5);

        i7 = staticinvoke <java.lang.Math: int min(int,int)>(i6, i0);

        if i7 >= 2 goto label2;

        goto label1;

     label2:
        r9 = staticinvoke <org.apache.mahout.cf.taste.impl.eval.OrderBasedRecommenderEvaluator: java.lang.Long[] getCommonItems(org.apache.mahout.cf.taste.impl.common.FastIDSet,java.lang.Iterable,int)>($r12, r5, i7);

        r10 = staticinvoke <org.apache.mahout.cf.taste.impl.eval.OrderBasedRecommenderEvaluator: java.lang.Long[] getCommonItems(org.apache.mahout.cf.taste.impl.common.FastIDSet,org.apache.mahout.cf.taste.model.PreferenceArray,int)>($r12, r6, i7);

        d0 = staticinvoke <org.apache.mahout.cf.taste.impl.eval.OrderBasedRecommenderEvaluator: double scoreCommonSubset(java.lang.String,long,int,int,java.lang.Long[],java.lang.Long[])>(r3, l1, i0, i7, r9, r10);

        interfaceinvoke r2.<org.apache.mahout.cf.taste.impl.common.RunningAverage: void addDatum(double)>(d0);

        goto label1;

     label3:
        return;
    }

    public static void evaluate(org.apache.mahout.cf.taste.model.DataModel, org.apache.mahout.cf.taste.model.DataModel, int, org.apache.mahout.cf.taste.impl.common.RunningAverage, java.lang.String) throws org.apache.mahout.cf.taste.common.TasteException
    {
        org.apache.mahout.cf.taste.model.DataModel r0, r1;
        int i0, i5, i6;
        org.apache.mahout.cf.taste.impl.common.RunningAverage r2;
        java.lang.String r3;
        org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator r4;
        long l1, $l2, l3, l4;
        org.apache.mahout.cf.taste.model.PreferenceArray r5, r6;
        java.lang.Long[] r9, r10;
        double d0;
        org.apache.mahout.cf.taste.impl.common.FastIDSet $r11, $r12;
        boolean $z0;

        r0 := @parameter0: org.apache.mahout.cf.taste.model.DataModel;

        r1 := @parameter1: org.apache.mahout.cf.taste.model.DataModel;

        i0 := @parameter2: int;

        r2 := @parameter3: org.apache.mahout.cf.taste.impl.common.RunningAverage;

        r3 := @parameter4: java.lang.String;

        staticinvoke <org.apache.mahout.cf.taste.impl.eval.OrderBasedRecommenderEvaluator: void printHeader()>();

        r4 = interfaceinvoke r0.<org.apache.mahout.cf.taste.model.DataModel: org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator getUserIDs()>();

     label1:
        $z0 = interfaceinvoke r4.<org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        l1 = interfaceinvoke r4.<org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator: long nextLong()>();

        r5 = interfaceinvoke r0.<org.apache.mahout.cf.taste.model.DataModel: org.apache.mahout.cf.taste.model.PreferenceArray getPreferencesFromUser(long)>(l1);

        r6 = interfaceinvoke r1.<org.apache.mahout.cf.taste.model.DataModel: org.apache.mahout.cf.taste.model.PreferenceArray getPreferencesFromUser(long)>(l1);

        interfaceinvoke r5.<org.apache.mahout.cf.taste.model.PreferenceArray: void sortByValueReversed()>();

        interfaceinvoke r6.<org.apache.mahout.cf.taste.model.PreferenceArray: void sortByValueReversed()>();

        $r11 = new org.apache.mahout.cf.taste.impl.common.FastIDSet;

        specialinvoke $r11.<org.apache.mahout.cf.taste.impl.common.FastIDSet: void <init>()>();

        l3 = staticinvoke <org.apache.mahout.cf.taste.impl.eval.OrderBasedRecommenderEvaluator: long setBits(org.apache.mahout.cf.taste.impl.common.FastIDSet,org.apache.mahout.cf.taste.model.PreferenceArray,int)>($r11, r5, i0);

        $r12 = new org.apache.mahout.cf.taste.impl.common.FastIDSet;

        specialinvoke $r12.<org.apache.mahout.cf.taste.impl.common.FastIDSet: void <init>()>();

        $l2 = staticinvoke <org.apache.mahout.cf.taste.impl.eval.OrderBasedRecommenderEvaluator: long setBits(org.apache.mahout.cf.taste.impl.common.FastIDSet,org.apache.mahout.cf.taste.model.PreferenceArray,int)>($r12, r6, i0);

        l4 = staticinvoke <java.lang.Math: long max(long,long)>(l3, $l2);

        i5 = staticinvoke <org.apache.mahout.cf.taste.impl.eval.OrderBasedRecommenderEvaluator: int mask(org.apache.mahout.cf.taste.impl.common.FastIDSet,org.apache.mahout.cf.taste.impl.common.FastIDSet,long)>($r11, $r12, l4);

        i6 = staticinvoke <java.lang.Math: int min(int,int)>(i5, i0);

        if i6 >= 2 goto label2;

        goto label1;

     label2:
        r9 = staticinvoke <org.apache.mahout.cf.taste.impl.eval.OrderBasedRecommenderEvaluator: java.lang.Long[] getCommonItems(org.apache.mahout.cf.taste.impl.common.FastIDSet,org.apache.mahout.cf.taste.model.PreferenceArray,int)>($r11, r5, i6);

        r10 = staticinvoke <org.apache.mahout.cf.taste.impl.eval.OrderBasedRecommenderEvaluator: java.lang.Long[] getCommonItems(org.apache.mahout.cf.taste.impl.common.FastIDSet,org.apache.mahout.cf.taste.model.PreferenceArray,int)>($r11, r6, i6);

        d0 = staticinvoke <org.apache.mahout.cf.taste.impl.eval.OrderBasedRecommenderEvaluator: double scoreCommonSubset(java.lang.String,long,int,int,java.lang.Long[],java.lang.Long[])>(r3, l1, i0, i6, r9, r10);

        interfaceinvoke r2.<org.apache.mahout.cf.taste.impl.common.RunningAverage: void addDatum(double)>(d0);

        goto label1;

     label3:
        return;
    }

    private static int mask(org.apache.mahout.cf.taste.impl.common.FastIDSet, org.apache.mahout.cf.taste.impl.common.FastIDSet, long)
    {
        org.apache.mahout.cf.taste.impl.common.FastIDSet r0, r1;
        long l0, $l1, $l3, $l4, $l5;
        byte $b2;
        boolean $z0, $z1;
        int i6, i7;

        r0 := @parameter0: org.apache.mahout.cf.taste.impl.common.FastIDSet;

        r1 := @parameter1: org.apache.mahout.cf.taste.impl.common.FastIDSet;

        l0 := @parameter2: long;

        i6 = 0;

        i7 = 0;

     label1:
        $l1 = (long) i7;

        $b2 = $l1 cmp l0;

        if $b2 > 0 goto label4;

        $l3 = (long) i7;

        $z0 = virtualinvoke r0.<org.apache.mahout.cf.taste.impl.common.FastIDSet: boolean contains(long)>($l3);

        if $z0 == 0 goto label3;

        $l4 = (long) i7;

        $z1 = virtualinvoke r1.<org.apache.mahout.cf.taste.impl.common.FastIDSet: boolean contains(long)>($l4);

        if $z1 == 0 goto label2;

        i6 = i6 + 1;

        goto label3;

     label2:
        $l5 = (long) i7;

        virtualinvoke r0.<org.apache.mahout.cf.taste.impl.common.FastIDSet: boolean remove(long)>($l5);

     label3:
        i7 = i7 + 1;

        goto label1;

     label4:
        return i6;
    }

    private static java.lang.Long[] getCommonItems(org.apache.mahout.cf.taste.impl.common.FastIDSet, java.lang.Iterable, int)
    {
        org.apache.mahout.cf.taste.impl.common.FastIDSet r0;
        java.lang.Iterable r1;
        int i0, $i3, i4;
        java.lang.Long[] r2;
        java.util.Iterator r3;
        org.apache.mahout.cf.taste.recommender.RecommendedItem r4;
        java.lang.Long r5;
        boolean $z0, $z1;
        java.lang.Object $r6;
        long $l1, $l2;

        r0 := @parameter0: org.apache.mahout.cf.taste.impl.common.FastIDSet;

        r1 := @parameter1: java.lang.Iterable;

        i0 := @parameter2: int;

        r2 = newarray (java.lang.Long)[i0];

        i4 = 0;

        r3 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.mahout.cf.taste.recommender.RecommendedItem) $r6;

        $l1 = interfaceinvoke r4.<org.apache.mahout.cf.taste.recommender.RecommendedItem: long getItemID()>();

        r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $l2 = virtualinvoke r5.<java.lang.Long: long longValue()>();

        $z1 = virtualinvoke r0.<org.apache.mahout.cf.taste.impl.common.FastIDSet: boolean contains(long)>($l2);

        if $z1 == 0 goto label2;

        $i3 = i4;

        i4 = i4 + 1;

        r2[$i3] = r5;

     label2:
        if i4 != i0 goto label1;

     label3:
        return r2;
    }

    private static java.lang.Long[] getCommonItems(org.apache.mahout.cf.taste.impl.common.FastIDSet, org.apache.mahout.cf.taste.model.PreferenceArray, int)
    {
        org.apache.mahout.cf.taste.impl.common.FastIDSet r0;
        org.apache.mahout.cf.taste.model.PreferenceArray r1;
        int i0, $i1, $i4, i5, i6;
        java.lang.Long[] r2;
        java.lang.Long r3;
        long $l2, $l3;
        boolean $z0;

        r0 := @parameter0: org.apache.mahout.cf.taste.impl.common.FastIDSet;

        r1 := @parameter1: org.apache.mahout.cf.taste.model.PreferenceArray;

        i0 := @parameter2: int;

        r2 = newarray (java.lang.Long)[i0];

        i5 = 0;

        i6 = 0;

     label1:
        $i1 = interfaceinvoke r1.<org.apache.mahout.cf.taste.model.PreferenceArray: int length()>();

        if i6 >= $i1 goto label4;

        $l2 = interfaceinvoke r1.<org.apache.mahout.cf.taste.model.PreferenceArray: long getItemID(int)>(i6);

        r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $l3 = virtualinvoke r3.<java.lang.Long: long longValue()>();

        $z0 = virtualinvoke r0.<org.apache.mahout.cf.taste.impl.common.FastIDSet: boolean contains(long)>($l3);

        if $z0 == 0 goto label2;

        $i4 = i5;

        i5 = i5 + 1;

        r2[$i4] = r3;

     label2:
        if i5 != i0 goto label3;

        goto label4;

     label3:
        i6 = i6 + 1;

        goto label1;

     label4:
        return r2;
    }

    private static long setBits(org.apache.mahout.cf.taste.impl.common.FastIDSet, java.util.List, int)
    {
        org.apache.mahout.cf.taste.impl.common.FastIDSet r0;
        java.util.List r1;
        int i0, $i2, i5;
        long l1, l4;
        java.lang.Object $r2;
        org.apache.mahout.cf.taste.recommender.RecommendedItem $r3;
        byte $b3;

        r0 := @parameter0: org.apache.mahout.cf.taste.impl.common.FastIDSet;

        r1 := @parameter1: java.util.List;

        i0 := @parameter2: int;

        l4 = -1L;

        i5 = 0;

     label1:
        $i2 = interfaceinvoke r1.<java.util.List: int size()>();

        if i5 >= $i2 goto label3;

        if i5 >= i0 goto label3;

        $r2 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i5);

        $r3 = (org.apache.mahout.cf.taste.recommender.RecommendedItem) $r2;

        l1 = interfaceinvoke $r3.<org.apache.mahout.cf.taste.recommender.RecommendedItem: long getItemID()>();

        virtualinvoke r0.<org.apache.mahout.cf.taste.impl.common.FastIDSet: boolean add(long)>(l1);

        $b3 = l1 cmp l4;

        if $b3 <= 0 goto label2;

        l4 = l1;

     label2:
        i5 = i5 + 1;

        goto label1;

     label3:
        return l4;
    }

    private static long setBits(org.apache.mahout.cf.taste.impl.common.FastIDSet, org.apache.mahout.cf.taste.model.PreferenceArray, int)
    {
        org.apache.mahout.cf.taste.impl.common.FastIDSet r0;
        org.apache.mahout.cf.taste.model.PreferenceArray r1;
        int i0, $i2, i5;
        long l1, l4;
        byte $b3;

        r0 := @parameter0: org.apache.mahout.cf.taste.impl.common.FastIDSet;

        r1 := @parameter1: org.apache.mahout.cf.taste.model.PreferenceArray;

        i0 := @parameter2: int;

        l4 = -1L;

        i5 = 0;

     label1:
        $i2 = interfaceinvoke r1.<org.apache.mahout.cf.taste.model.PreferenceArray: int length()>();

        if i5 >= $i2 goto label3;

        if i5 >= i0 goto label3;

        l1 = interfaceinvoke r1.<org.apache.mahout.cf.taste.model.PreferenceArray: long getItemID(int)>(i5);

        virtualinvoke r0.<org.apache.mahout.cf.taste.impl.common.FastIDSet: boolean add(long)>(l1);

        $b3 = l1 cmp l4;

        if $b3 <= 0 goto label2;

        l4 = l1;

     label2:
        i5 = i5 + 1;

        goto label1;

     label3:
        return l4;
    }

    private static void printHeader()
    {
        org.slf4j.Logger $r0;

        $r0 = <org.apache.mahout.cf.taste.impl.eval.OrderBasedRecommenderEvaluator: org.slf4j.Logger log>;

        interfaceinvoke $r0.<org.slf4j.Logger: void info(java.lang.String)>("tag,user,samples,common,hamming,bubble,rank,normal,score");

        return;
    }

    private static double scoreCommonSubset(java.lang.String, long, int, int, java.lang.Long[], java.lang.Long[])
    {
        java.lang.String r0;
        long l0, l3;
        int i1, i2, i4;
        java.lang.Long[] r1, r2;
        int[] r3, r4;
        double d0, d1, d2;
        java.lang.Object[] $r5;
        org.slf4j.Logger $r6;
        java.lang.Long $r7, $r10;
        java.lang.Integer $r8, $r9, $r11;
        java.lang.Double $r12, $r13, $r15;
        java.lang.IllegalStateException $r14;

        r0 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r1 := @parameter4: java.lang.Long[];

        r2 := @parameter5: java.lang.Long[];

        r3 = newarray (int)[i2];

        r4 = newarray (int)[i2];

        l3 = staticinvoke <org.apache.mahout.cf.taste.impl.eval.OrderBasedRecommenderEvaluator: long sort(java.lang.Long[],java.lang.Long[])>(r1, r2);

        i4 = staticinvoke <org.apache.mahout.cf.taste.impl.eval.OrderBasedRecommenderEvaluator: int slidingWindowHamming(java.lang.Long[],java.lang.Long[])>(r2, r1);

        if i4 <= i1 goto label1;

        $r14 = new java.lang.IllegalStateException;

        specialinvoke $r14.<java.lang.IllegalStateException: void <init>()>();

        throw $r14;

     label1:
        staticinvoke <org.apache.mahout.cf.taste.impl.eval.OrderBasedRecommenderEvaluator: void getVectorZ(java.lang.Long[],java.lang.Long[],int[],int[])>(r2, r1, r3, r4);

        d0 = staticinvoke <org.apache.mahout.cf.taste.impl.eval.OrderBasedRecommenderEvaluator: double normalWilcoxon(int[],int[])>(r3, r4);

        d1 = staticinvoke <org.apache.mahout.cf.taste.impl.eval.OrderBasedRecommenderEvaluator: double getMeanRank(int[])>(r4);

        d2 = staticinvoke <java.lang.Math: double sqrt(double)>(d1);

        $r6 = <org.apache.mahout.cf.taste.impl.eval.OrderBasedRecommenderEvaluator: org.slf4j.Logger log>;

        $r5 = newarray (java.lang.Object)[9];

        $r5[0] = r0;

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r5[1] = $r7;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r5[2] = $r8;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r5[3] = $r9;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i4);

        $r5[4] = $r11;

        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l3);

        $r5[5] = $r10;

        $r13 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        $r5[6] = $r13;

        $r12 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r5[7] = $r12;

        $r15 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d2);

        $r5[8] = $r15;

        interfaceinvoke $r6.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object[])>("{},{},{},{},{},{},{},{},{}", $r5);

        return d2;
    }

    private static int slidingWindowHamming(java.lang.Long[], java.lang.Long[])
    {
        java.lang.Long[] r0, r1;
        int i0, $i2, $i3, $i4, $i5, $i8, $i9, i14, i15, $i16;
        long l1, $l6, $l10, $l12;
        java.lang.Long $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        boolean $z0, $z1, $z2, $z3;
        byte $b7, $b11, $b13;

        r0 := @parameter0: java.lang.Long[];

        r1 := @parameter1: java.lang.Long[];

        i14 = 0;

        i0 = lengthof r0;

        $r3 = r0[0];

        $r2 = r1[0];

        $z0 = virtualinvoke $r3.<java.lang.Long: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        $r13 = r0[0];

        $r12 = r1[1];

        $z3 = virtualinvoke $r13.<java.lang.Long: boolean equals(java.lang.Object)>($r12);

        if $z3 == 0 goto label2;

     label1:
        i14 = 1;

     label2:
        i15 = 1;

     label3:
        $i16 = i0 - 1;

        if i15 >= $i16 goto label6;

        $r8 = r1[i15];

        l1 = virtualinvoke $r8.<java.lang.Long: long longValue()>();

        $r9 = r0[i15];

        $l6 = virtualinvoke $r9.<java.lang.Long: long longValue()>();

        $b7 = $l6 cmp l1;

        if $b7 == 0 goto label4;

        $i8 = i15 - 1;

        $r10 = r0[$i8];

        $l10 = virtualinvoke $r10.<java.lang.Long: long longValue()>();

        $b11 = $l10 cmp l1;

        if $b11 == 0 goto label4;

        $i9 = i15 + 1;

        $r11 = r0[$i9];

        $l12 = virtualinvoke $r11.<java.lang.Long: long longValue()>();

        $b13 = $l12 cmp l1;

        if $b13 != 0 goto label5;

     label4:
        i14 = i14 + 1;

     label5:
        i15 = i15 + 1;

        goto label3;

     label6:
        $i2 = i0 - 1;

        $r5 = r0[$i2];

        $i3 = i0 - 1;

        $r4 = r1[$i3];

        $z1 = virtualinvoke $r5.<java.lang.Long: boolean equals(java.lang.Object)>($r4);

        if $z1 != 0 goto label7;

        $i5 = i0 - 1;

        $r6 = r0[$i5];

        $i4 = i0 - 2;

        $r7 = r1[$i4];

        $z2 = virtualinvoke $r6.<java.lang.Long: boolean equals(java.lang.Object)>($r7);

        if $z2 == 0 goto label8;

     label7:
        i14 = i14 + 1;

     label8:
        return i14;
    }

    static double normalWilcoxon(int[], int[])
    {
        int[] r0, r1;
        int i0;
        double[] r2, r3;
        double $d0, $d1, $d2;

        r0 := @parameter0: int[];

        r1 := @parameter1: int[];

        i0 = lengthof r0;

        r2 = newarray (double)[i0];

        r3 = newarray (double)[i0];

        staticinvoke <org.apache.mahout.cf.taste.impl.eval.OrderBasedRecommenderEvaluator: void wilcoxonRanks(int[],int[],double[],double[])>(r0, r1, r2, r3);

        $d0 = staticinvoke <org.apache.mahout.cf.taste.impl.eval.OrderBasedRecommenderEvaluator: double getMeanWplus(double[])>(r2);

        $d1 = staticinvoke <org.apache.mahout.cf.taste.impl.eval.OrderBasedRecommenderEvaluator: double getMeanWminus(double[])>(r2);

        $d2 = staticinvoke <java.lang.Math: double min(double,double)>($d0, $d1);

        return $d2;
    }

    private static void getVectorZ(java.lang.Long[], java.lang.Long[], int[], int[])
    {
        java.lang.Long[] r0, r1;
        int[] r2, r3;
        int i0, $i4, $i5, $i6, i7, i8, i9, i10;
        long l1, l2;
        java.lang.Long $r4, $r5, $r6;
        byte $b3;

        r0 := @parameter0: java.lang.Long[];

        r1 := @parameter1: java.lang.Long[];

        r2 := @parameter2: int[];

        r3 := @parameter3: int[];

        i0 = lengthof r0;

        i7 = 0;

        i8 = i0 - 1;

        i9 = 0;

     label1:
        if i9 >= i0 goto label8;

        $r4 = r0[i9];

        l1 = virtualinvoke $r4.<java.lang.Long: long longValue()>();

        i10 = i7;

     label2:
        if i10 > i8 goto label7;

        $r5 = r1[i10];

        if $r5 != null goto label3;

        goto label6;

     label3:
        $r6 = r1[i10];

        l2 = virtualinvoke $r6.<java.lang.Long: long longValue()>();

        $b3 = l1 cmp l2;

        if $b3 != 0 goto label6;

        $i4 = i9 - i10;

        r2[i9] = $i4;

        $i6 = i9 - i10;

        $i5 = staticinvoke <java.lang.Math: int abs(int)>($i6);

        r3[i9] = $i5;

        if i10 != i7 goto label4;

        i7 = i7 + 1;

        goto label7;

     label4:
        if i10 != i8 goto label5;

        i8 = i8 + -1;

        goto label7;

     label5:
        r1[i10] = null;

        goto label7;

     label6:
        i10 = i10 + 1;

        goto label2;

     label7:
        i9 = i9 + 1;

        goto label1;

     label8:
        return;
    }

    private static void wilcoxonRanks(int[], int[], double[], double[])
    {
        int[] r0, r1, r4;
        double[] r2, r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12, i13;
        java.lang.Object $r5;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, d7;
        byte $b14;

        r0 := @parameter0: int[];

        r1 := @parameter1: int[];

        r2 := @parameter2: double[];

        r3 := @parameter3: double[];

        i0 = lengthof r0;

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        r4 = (int[]) $r5;

        staticinvoke <java.util.Arrays: void sort(int[])>(r4);

        i10 = 0;

     label01:
        if i10 >= i0 goto label03;

        $i9 = r4[i10];

        if $i9 <= 0 goto label02;

        goto label03;

     label02:
        i10 = i10 + 1;

        goto label01;

     label03:
        i11 = 0;

     label04:
        if i11 >= i0 goto label12;

        d7 = 0.0;

        i12 = 0;

        i1 = r1[i11];

        i13 = 0;

     label05:
        if i13 >= i0 goto label08;

        $i5 = r4[i13];

        if i1 != $i5 goto label06;

        $i8 = i13 + 1;

        $i7 = $i8 - i10;

        $d6 = (double) $i7;

        d7 = d7 + $d6;

        i12 = i12 + 1;

        goto label07;

     label06:
        $i6 = r4[i13];

        if i1 >= $i6 goto label07;

        goto label08;

     label07:
        i13 = i13 + 1;

        goto label05;

     label08:
        $i2 = r0[i11];

        if $i2 == 0 goto label11;

        $i4 = i11;

        $d0 = (double) i12;

        $d3 = d7 / $d0;

        $i3 = r0[i11];

        if $i3 >= 0 goto label09;

        $b14 = -1;

        goto label10;

     label09:
        $b14 = 1;

     label10:
        $d1 = (double) $b14;

        $d2 = $d3 * $d1;

        r2[$i4] = $d2;

        $d5 = r2[i11];

        $d4 = staticinvoke <java.lang.Math: double abs(double)>($d5);

        r3[i11] = $d4;

     label11:
        i11 = i11 + 1;

        goto label04;

     label12:
        return;
    }

    private static double getMeanRank(int[])
    {
        int[] r0;
        int i0, i1, i2, i3;
        double $d0, $d1, $d2, d3;

        r0 := @parameter0: int[];

        i0 = lengthof r0;

        d3 = 0.0;

        i1 = lengthof r0;

        i3 = 0;

     label1:
        if i3 >= i1 goto label2;

        i2 = r0[i3];

        $d2 = (double) i2;

        d3 = d3 + $d2;

        i3 = i3 + 1;

        goto label1;

     label2:
        $d0 = (double) i0;

        $d1 = d3 / $d0;

        return $d1;
    }

    private static double getMeanWplus(double[])
    {
        double[] r0;
        int i0, i1, i3;
        double d0, $d1, $d2, d3;
        byte $b2;

        r0 := @parameter0: double[];

        i0 = lengthof r0;

        d3 = 0.0;

        i1 = lengthof r0;

        i3 = 0;

     label1:
        if i3 >= i1 goto label3;

        d0 = r0[i3];

        $b2 = d0 cmpl 0.0;

        if $b2 <= 0 goto label2;

        d3 = d3 + d0;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        $d1 = (double) i0;

        $d2 = d3 / $d1;

        return $d2;
    }

    private static double getMeanWminus(double[])
    {
        double[] r0;
        int i0, i1, i3;
        double d0, $d1, $d2, d3;
        byte $b2;

        r0 := @parameter0: double[];

        i0 = lengthof r0;

        d3 = 0.0;

        i1 = lengthof r0;

        i3 = 0;

     label1:
        if i3 >= i1 goto label3;

        d0 = r0[i3];

        $b2 = d0 cmpg 0.0;

        if $b2 >= 0 goto label2;

        d3 = d3 - d0;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        $d1 = (double) i0;

        $d2 = d3 / $d1;

        return $d2;
    }

    static long sort(java.lang.Long[], java.lang.Long[])
    {
        java.lang.Long[] r0, r1;
        long[] r2, r3;
        long l0, $l1, $l2, $l5, $l6, $l8, $l10, $l11, $l14, $l17, $l20, $l24, $l25, $l26, $l30, $l31, $l32, $l34, $l36, l39;
        byte $b3, $b7, $b9, $b18, $b23, $b27, $b33;
        int $i4, $i12, $i13, $i15, $i16, $i19, $i21, $i22, $i28, $i29, i35, i37, i38, $i40, i41, i42, $i43;
        java.lang.Long $r4, $r5, $r6, $r7;

        r0 := @parameter0: java.lang.Long[];

        r1 := @parameter1: java.lang.Long[];

        i35 = lengthof r0;

        if i35 >= 2 goto label01;

        return 0L;

     label01:
        if i35 != 2 goto label04;

        $r4 = r0[0];

        $l32 = virtualinvoke $r4.<java.lang.Long: long longValue()>();

        $r7 = r1[0];

        $l34 = virtualinvoke $r7.<java.lang.Long: long longValue()>();

        $b33 = $l32 cmp $l34;

        if $b33 != 0 goto label02;

        $l36 = 0L;

        goto label03;

     label02:
        $l36 = 1L;

     label03:
        return $l36;

     label04:
        r2 = newarray (long)[i35];

        r3 = newarray (long)[i35];

        i37 = 0;

     label05:
        if i37 >= i35 goto label06;

        $r5 = r0[i37];

        $l31 = virtualinvoke $r5.<java.lang.Long: long longValue()>();

        r2[i37] = $l31;

        $r6 = r1[i37];

        $l30 = virtualinvoke $r6.<java.lang.Long: long longValue()>();

        r3[i37] = $l30;

        i37 = i37 + 1;

        goto label05;

     label06:
        i38 = 0;

        l39 = 0L;

     label07:
        $i40 = i35 - 1;

        if i38 >= $i40 goto label17;

     label08:
        if i35 <= 0 goto label09;

        $i28 = i35 - 1;

        $l26 = r2[$i28];

        $i29 = i35 - 1;

        $l25 = r3[$i29];

        $b27 = $l26 cmp $l25;

        if $b27 != 0 goto label09;

        i35 = i35 + -1;

        goto label08;

     label09:
        if i35 != 0 goto label10;

        goto label17;

     label10:
        $l2 = r2[i38];

        $l1 = r3[i38];

        $b3 = $l2 cmp $l1;

        if $b3 != 0 goto label11;

        i38 = i38 + 1;

        goto label07;

     label11:
        i41 = i38;

     label12:
        $i4 = i35 - 1;

        if i41 >= $i4 goto label07;

        i42 = 1;

        $l5 = r2[i41];

        $l6 = r3[i41];

        $b7 = $l5 cmp $l6;

        if $b7 != 0 goto label14;

     label13:
        $i19 = i41 + i42;

        if $i19 >= i35 goto label14;

        $i22 = i41 + i42;

        $l24 = r2[$i22];

        $i21 = i41 + i42;

        $l20 = r3[$i21];

        $b23 = $l24 cmp $l20;

        if $b23 != 0 goto label14;

        i42 = i42 + 1;

        goto label13;

     label14:
        $i43 = i41 + i42;

        if $i43 >= i35 goto label16;

        $l10 = r2[i41];

        $l8 = r3[i41];

        $b9 = $l10 cmp $l8;

        if $b9 != 0 goto label15;

        $i16 = i41 + i42;

        $l17 = r2[$i16];

        $i13 = i41 + i42;

        $l14 = r3[$i13];

        $b18 = $l17 cmp $l14;

        if $b18 == 0 goto label16;

     label15:
        l0 = r3[i41];

        $i12 = i41 + 1;

        $l11 = r3[$i12];

        r3[i41] = $l11;

        $i15 = i41 + 1;

        r3[$i15] = l0;

        l39 = l39 + 1L;

     label16:
        i41 = i41 + 1;

        goto label12;

     label17:
        return l39;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "org/apache/mahout/cf/taste/impl/eval/OrderBasedRecommenderEvaluator");

        <org.apache.mahout.cf.taste.impl.eval.OrderBasedRecommenderEvaluator: org.slf4j.Logger log> = $r0;

        return;
    }
}
