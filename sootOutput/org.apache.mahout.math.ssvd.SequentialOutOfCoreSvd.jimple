public class org.apache.mahout.math.ssvd.SequentialOutOfCoreSvd extends java.lang.Object
{
    private final org.apache.mahout.math.CholeskyDecomposition l2;
    private final org.apache.mahout.math.SingularValueDecomposition svd;
    private final org.apache.mahout.math.CholeskyDecomposition r2;
    private final int columnsPerSlice;
    private final int seed;
    private final int dim;

    public void <init>(java.lang.Iterable, java.io.File, int, int) throws java.io.IOException
    {
        org.apache.mahout.math.ssvd.SequentialOutOfCoreSvd r0;
        java.lang.Iterable r1;
        java.io.File r2, $r11, $r14, $r23, r48, r61;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, $i9, $i10, $i11, i12, $i13, i14;
        boolean $z0, $z1, $z2;
        org.apache.mahout.math.CholeskyDecomposition $r5, $r7, $r9, $r24;
        org.apache.mahout.math.DenseMatrix $r6;
        org.apache.mahout.math.MatrixWritable $r8, $r19, $r27;
        org.apache.mahout.math.SingularValueDecomposition $r10;
        org.apache.mahout.math.Matrix $r12, $r21, $r22, $r30, $r32, $r33, r46, r56, r59, r69, r72, r73, r74, $r81, $r82, $r83, $r84;
        java.io.FileInputStream $r13, $r17, $r25;
        java.io.DataInputStream $r15, $r18, $r26;
        java.lang.Object $r20, $r28;
        org.apache.mahout.math.function.DoubleDoubleFunction $r29, $r85;
        java.lang.Throwable $r35, $r36, $r37, $r38, $r39, $r40, $r42, $r44, $r45, r51, r64, r78;
        java.util.Iterator r47, r60;
        org.apache.mahout.math.RandomTrinaryMatrix $r57, $r70;

        r0 := @this: org.apache.mahout.math.ssvd.SequentialOutOfCoreSvd;

        r1 := @parameter0: java.lang.Iterable;

        r2 := @parameter1: java.io.File;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.mahout.math.ssvd.SequentialOutOfCoreSvd: int columnsPerSlice> = i1;

        r0.<org.apache.mahout.math.ssvd.SequentialOutOfCoreSvd: int dim> = i0;

        r0.<org.apache.mahout.math.ssvd.SequentialOutOfCoreSvd: int seed> = 1;

        r46 = null;

        r47 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r47.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label14;

        $r28 = interfaceinvoke r47.<java.util.Iterator: java.lang.Object next()>();

        r48 = (java.io.File) $r28;

        $r27 = new org.apache.mahout.math.MatrixWritable;

        specialinvoke $r27.<org.apache.mahout.math.MatrixWritable: void <init>()>();

        $r26 = new java.io.DataInputStream;

        $r25 = new java.io.FileInputStream;

        specialinvoke $r25.<java.io.FileInputStream: void <init>(java.io.File)>(r48);

        specialinvoke $r26.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r25);

        r51 = null;

     label02:
        virtualinvoke $r27.<org.apache.mahout.math.MatrixWritable: void readFields(java.io.DataInput)>($r26);

     label03:
        if $r26 == null goto label12;

        virtualinvoke $r26.<java.io.DataInputStream: void close()>();

        goto label12;

     label04:
        $r45 := @caughtexception;

        r51 = $r45;

        throw $r45;

     label05:
        $r39 := @caughtexception;

     label06:
        if $r26 == null goto label11;

        if r51 == null goto label10;

     label07:
        virtualinvoke $r26.<java.io.DataInputStream: void close()>();

     label08:
        goto label11;

     label09:
        $r40 := @caughtexception;

        virtualinvoke r51.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r40);

        goto label11;

     label10:
        virtualinvoke $r26.<java.io.DataInputStream: void close()>();

     label11:
        throw $r39;

     label12:
        r56 = virtualinvoke $r27.<org.apache.mahout.math.MatrixWritable: org.apache.mahout.math.Matrix get()>();

        $r57 = new org.apache.mahout.math.RandomTrinaryMatrix;

        $i6 = r0.<org.apache.mahout.math.ssvd.SequentialOutOfCoreSvd: int seed>;

        $i7 = interfaceinvoke r56.<org.apache.mahout.math.Matrix: int columnSize()>();

        specialinvoke $r57.<org.apache.mahout.math.RandomTrinaryMatrix: void <init>(int,int,int,boolean)>($i6, $i7, i0, 0);

        r59 = interfaceinvoke r56.<org.apache.mahout.math.Matrix: org.apache.mahout.math.Matrix times(org.apache.mahout.math.Matrix)>($r57);

        if r46 != null goto label13;

        $r33 = interfaceinvoke r59.<org.apache.mahout.math.Matrix: org.apache.mahout.math.Matrix transpose()>();

        r46 = interfaceinvoke $r33.<org.apache.mahout.math.Matrix: org.apache.mahout.math.Matrix times(org.apache.mahout.math.Matrix)>(r59);

        goto label01;

     label13:
        $r32 = interfaceinvoke r59.<org.apache.mahout.math.Matrix: org.apache.mahout.math.Matrix transpose()>();

        $r30 = interfaceinvoke $r32.<org.apache.mahout.math.Matrix: org.apache.mahout.math.Matrix times(org.apache.mahout.math.Matrix)>(r59);

        $r29 = <org.apache.mahout.math.function.Functions: org.apache.mahout.math.function.DoubleDoubleFunction PLUS>;

        interfaceinvoke r46.<org.apache.mahout.math.Matrix: org.apache.mahout.math.Matrix assign(org.apache.mahout.math.Matrix,org.apache.mahout.math.function.DoubleDoubleFunction)>($r30, $r29);

        goto label01;

     label14:
        $r5 = new org.apache.mahout.math.CholeskyDecomposition;

        specialinvoke $r5.<org.apache.mahout.math.CholeskyDecomposition: void <init>(org.apache.mahout.math.Matrix)>(r46);

        r0.<org.apache.mahout.math.ssvd.SequentialOutOfCoreSvd: org.apache.mahout.math.CholeskyDecomposition r2> = $r5;

        i8 = 0;

        r60 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label15:
        $z1 = interfaceinvoke r60.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label28;

        $r20 = interfaceinvoke r60.<java.util.Iterator: java.lang.Object next()>();

        r61 = (java.io.File) $r20;

        $r19 = new org.apache.mahout.math.MatrixWritable;

        specialinvoke $r19.<org.apache.mahout.math.MatrixWritable: void <init>()>();

        $r18 = new java.io.DataInputStream;

        $r17 = new java.io.FileInputStream;

        specialinvoke $r17.<java.io.FileInputStream: void <init>(java.io.File)>(r61);

        specialinvoke $r18.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r17);

        r64 = null;

     label16:
        virtualinvoke $r19.<org.apache.mahout.math.MatrixWritable: void readFields(java.io.DataInput)>($r18);

     label17:
        if $r18 == null goto label26;

        virtualinvoke $r18.<java.io.DataInputStream: void close()>();

        goto label26;

     label18:
        $r35 := @caughtexception;

        r64 = $r35;

        throw $r35;

     label19:
        $r36 := @caughtexception;

     label20:
        if $r18 == null goto label25;

        if r64 == null goto label24;

     label21:
        virtualinvoke $r18.<java.io.DataInputStream: void close()>();

     label22:
        goto label25;

     label23:
        $r44 := @caughtexception;

        virtualinvoke r64.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r44);

        goto label25;

     label24:
        virtualinvoke $r18.<java.io.DataInputStream: void close()>();

     label25:
        throw $r36;

     label26:
        r69 = virtualinvoke $r19.<org.apache.mahout.math.MatrixWritable: org.apache.mahout.math.Matrix get()>();

        $i9 = interfaceinvoke r69.<org.apache.mahout.math.Matrix: int columnSize()>();

        i8 = staticinvoke <java.lang.Math: int max(int,int)>(i8, $i9);

        $r70 = new org.apache.mahout.math.RandomTrinaryMatrix;

        $i10 = r0.<org.apache.mahout.math.ssvd.SequentialOutOfCoreSvd: int seed>;

        $i11 = interfaceinvoke r69.<org.apache.mahout.math.Matrix: int numCols()>();

        specialinvoke $r70.<org.apache.mahout.math.RandomTrinaryMatrix: void <init>(int,int,int,boolean)>($i10, $i11, i0, 0);

        i12 = 0;

     label27:
        $i13 = interfaceinvoke r69.<org.apache.mahout.math.Matrix: int numCols()>();

        if i12 >= $i13 goto label15;

        r72 = interfaceinvoke r69.<org.apache.mahout.math.Matrix: org.apache.mahout.math.Matrix times(org.apache.mahout.math.Matrix)>($r70);

        $i3 = interfaceinvoke r69.<org.apache.mahout.math.Matrix: int rowSize()>();

        $i2 = interfaceinvoke r69.<org.apache.mahout.math.Matrix: int columnSize()>();

        $i4 = $i2 - i12;

        $i5 = staticinvoke <java.lang.Math: int min(int,int)>(i1, $i4);

        r73 = interfaceinvoke r69.<org.apache.mahout.math.Matrix: org.apache.mahout.math.Matrix viewPart(int,int,int,int)>(0, $i3, i12, $i5);

        $r24 = r0.<org.apache.mahout.math.ssvd.SequentialOutOfCoreSvd: org.apache.mahout.math.CholeskyDecomposition r2>;

        $r21 = virtualinvoke $r24.<org.apache.mahout.math.CholeskyDecomposition: org.apache.mahout.math.Matrix solveRight(org.apache.mahout.math.Matrix)>(r72);

        $r22 = interfaceinvoke $r21.<org.apache.mahout.math.Matrix: org.apache.mahout.math.Matrix transpose()>();

        r74 = interfaceinvoke $r22.<org.apache.mahout.math.Matrix: org.apache.mahout.math.Matrix times(org.apache.mahout.math.Matrix)>(r73);

        $r23 = staticinvoke <org.apache.mahout.math.ssvd.SequentialOutOfCoreSvd: java.io.File bFile(java.io.File,int)>(r2, i12);

        staticinvoke <org.apache.mahout.math.ssvd.SequentialOutOfCoreSvd: void addToSavedCopy(java.io.File,org.apache.mahout.math.Matrix)>($r23, r74);

        i12 = i12 + i1;

        goto label27;

     label28:
        $r6 = new org.apache.mahout.math.DenseMatrix;

        specialinvoke $r6.<org.apache.mahout.math.DenseMatrix: void <init>(int,int)>(i0, i0);

        $r8 = new org.apache.mahout.math.MatrixWritable;

        specialinvoke $r8.<org.apache.mahout.math.MatrixWritable: void <init>()>();

        i14 = 0;

     label29:
        if i14 >= i8 goto label42;

        $r11 = staticinvoke <org.apache.mahout.math.ssvd.SequentialOutOfCoreSvd: java.io.File bFile(java.io.File,int)>(r2, i14);

        $z2 = virtualinvoke $r11.<java.io.File: boolean exists()>();

        if $z2 == 0 goto label41;

        $r15 = new java.io.DataInputStream;

        $r13 = new java.io.FileInputStream;

        $r14 = staticinvoke <org.apache.mahout.math.ssvd.SequentialOutOfCoreSvd: java.io.File bFile(java.io.File,int)>(r2, i14);

        specialinvoke $r13.<java.io.FileInputStream: void <init>(java.io.File)>($r14);

        specialinvoke $r15.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r13);

        r78 = null;

     label30:
        virtualinvoke $r8.<org.apache.mahout.math.MatrixWritable: void readFields(java.io.DataInput)>($r15);

     label31:
        if $r15 == null goto label40;

        virtualinvoke $r15.<java.io.DataInputStream: void close()>();

        goto label40;

     label32:
        $r42 := @caughtexception;

        r78 = $r42;

        throw $r42;

     label33:
        $r37 := @caughtexception;

     label34:
        if $r15 == null goto label39;

        if r78 == null goto label38;

     label35:
        virtualinvoke $r15.<java.io.DataInputStream: void close()>();

     label36:
        goto label39;

     label37:
        $r38 := @caughtexception;

        virtualinvoke r78.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r38);

        goto label39;

     label38:
        virtualinvoke $r15.<java.io.DataInputStream: void close()>();

     label39:
        throw $r37;

     label40:
        $r81 = virtualinvoke $r8.<org.apache.mahout.math.MatrixWritable: org.apache.mahout.math.Matrix get()>();

        $r82 = virtualinvoke $r8.<org.apache.mahout.math.MatrixWritable: org.apache.mahout.math.Matrix get()>();

        $r83 = interfaceinvoke $r82.<org.apache.mahout.math.Matrix: org.apache.mahout.math.Matrix transpose()>();

        $r84 = interfaceinvoke $r81.<org.apache.mahout.math.Matrix: org.apache.mahout.math.Matrix times(org.apache.mahout.math.Matrix)>($r83);

        $r85 = <org.apache.mahout.math.function.Functions: org.apache.mahout.math.function.DoubleDoubleFunction PLUS>;

        interfaceinvoke $r6.<org.apache.mahout.math.Matrix: org.apache.mahout.math.Matrix assign(org.apache.mahout.math.Matrix,org.apache.mahout.math.function.DoubleDoubleFunction)>($r84, $r85);

     label41:
        i14 = i14 + i1;

        goto label29;

     label42:
        $r7 = new org.apache.mahout.math.CholeskyDecomposition;

        specialinvoke $r7.<org.apache.mahout.math.CholeskyDecomposition: void <init>(org.apache.mahout.math.Matrix)>($r6);

        r0.<org.apache.mahout.math.ssvd.SequentialOutOfCoreSvd: org.apache.mahout.math.CholeskyDecomposition l2> = $r7;

        $r10 = new org.apache.mahout.math.SingularValueDecomposition;

        $r9 = r0.<org.apache.mahout.math.ssvd.SequentialOutOfCoreSvd: org.apache.mahout.math.CholeskyDecomposition l2>;

        $r12 = virtualinvoke $r9.<org.apache.mahout.math.CholeskyDecomposition: org.apache.mahout.math.Matrix getL()>();

        specialinvoke $r10.<org.apache.mahout.math.SingularValueDecomposition: void <init>(org.apache.mahout.math.Matrix)>($r12);

        r0.<org.apache.mahout.math.ssvd.SequentialOutOfCoreSvd: org.apache.mahout.math.SingularValueDecomposition svd> = $r10;

        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label06 with label05;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label16 to label17 with label19;
        catch java.lang.Throwable from label21 to label22 with label23;
        catch java.lang.Throwable from label18 to label20 with label19;
        catch java.lang.Throwable from label30 to label31 with label32;
        catch java.lang.Throwable from label30 to label31 with label33;
        catch java.lang.Throwable from label35 to label36 with label37;
        catch java.lang.Throwable from label32 to label34 with label33;
    }

    public void computeV(java.io.File, int) throws java.io.IOException
    {
        org.apache.mahout.math.ssvd.SequentialOutOfCoreSvd r0;
        java.io.File r1, r2, $r32;
        int i0, i1, $i2;
        boolean $z0;
        java.io.DataInputStream $r8;
        org.apache.mahout.math.MatrixWritable $r9;
        java.io.FileInputStream $r10;
        java.lang.Throwable $r12, $r14, $r15, $r16, $r17, $r18, r20, r38;
        org.apache.mahout.math.CholeskyDecomposition $r23;
        org.apache.mahout.math.Matrix $r24, $r25, $r26, $r28, $r29;
        org.apache.mahout.math.SingularValueDecomposition $r27;
        java.io.DataOutputStream $r30;
        java.io.FileOutputStream $r31;
        java.lang.Object[] $r33;
        java.lang.String $r34, $r35, $r36;

        r0 := @this: org.apache.mahout.math.ssvd.SequentialOutOfCoreSvd;

        r1 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        i1 = 0;

     label01:
        if i1 >= i0 goto label24;

        r2 = staticinvoke <org.apache.mahout.math.ssvd.SequentialOutOfCoreSvd: java.io.File bFile(java.io.File,int)>(r1, i1);

        $z0 = virtualinvoke r2.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label23;

        $r9 = new org.apache.mahout.math.MatrixWritable;

        specialinvoke $r9.<org.apache.mahout.math.MatrixWritable: void <init>()>();

        $r8 = new java.io.DataInputStream;

        $r10 = new java.io.FileInputStream;

        specialinvoke $r10.<java.io.FileInputStream: void <init>(java.io.File)>(r2);

        specialinvoke $r8.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r10);

        r20 = null;

     label02:
        virtualinvoke $r9.<org.apache.mahout.math.MatrixWritable: void readFields(java.io.DataInput)>($r8);

     label03:
        if $r8 == null goto label12;

        virtualinvoke $r8.<java.io.DataInputStream: void close()>();

        goto label12;

     label04:
        $r12 := @caughtexception;

        r20 = $r12;

        throw $r12;

     label05:
        $r15 := @caughtexception;

     label06:
        if $r8 == null goto label11;

        if r20 == null goto label10;

     label07:
        virtualinvoke $r8.<java.io.DataInputStream: void close()>();

     label08:
        goto label11;

     label09:
        $r17 := @caughtexception;

        virtualinvoke r20.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r17);

        goto label11;

     label10:
        virtualinvoke $r8.<java.io.DataInputStream: void close()>();

     label11:
        throw $r15;

     label12:
        $r23 = r0.<org.apache.mahout.math.ssvd.SequentialOutOfCoreSvd: org.apache.mahout.math.CholeskyDecomposition l2>;

        $r24 = virtualinvoke $r9.<org.apache.mahout.math.MatrixWritable: org.apache.mahout.math.Matrix get()>();

        $r25 = interfaceinvoke $r24.<org.apache.mahout.math.Matrix: org.apache.mahout.math.Matrix transpose()>();

        $r26 = virtualinvoke $r23.<org.apache.mahout.math.CholeskyDecomposition: org.apache.mahout.math.Matrix solveRight(org.apache.mahout.math.Matrix)>($r25);

        $r27 = r0.<org.apache.mahout.math.ssvd.SequentialOutOfCoreSvd: org.apache.mahout.math.SingularValueDecomposition svd>;

        $r28 = virtualinvoke $r27.<org.apache.mahout.math.SingularValueDecomposition: org.apache.mahout.math.Matrix getV()>();

        $r29 = interfaceinvoke $r26.<org.apache.mahout.math.Matrix: org.apache.mahout.math.Matrix times(org.apache.mahout.math.Matrix)>($r28);

        virtualinvoke $r9.<org.apache.mahout.math.MatrixWritable: void set(org.apache.mahout.math.Matrix)>($r29);

        $r30 = new java.io.DataOutputStream;

        $r31 = new java.io.FileOutputStream;

        $r32 = new java.io.File;

        $r33 = newarray (java.lang.Object)[1];

        $r34 = virtualinvoke r2.<java.io.File: java.lang.String getName()>();

        $r35 = virtualinvoke $r34.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(".*-", "");

        $r33[0] = $r35;

        $r36 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("V-%s", $r33);

        specialinvoke $r32.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, $r36);

        specialinvoke $r31.<java.io.FileOutputStream: void <init>(java.io.File)>($r32);

        specialinvoke $r30.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r31);

        r38 = null;

     label13:
        virtualinvoke $r9.<org.apache.mahout.math.MatrixWritable: void write(java.io.DataOutput)>($r30);

     label14:
        if $r30 == null goto label23;

        virtualinvoke $r30.<java.io.DataOutputStream: void close()>();

        goto label23;

     label15:
        $r14 := @caughtexception;

        r38 = $r14;

        throw $r14;

     label16:
        $r18 := @caughtexception;

     label17:
        if $r30 == null goto label22;

        if r38 == null goto label21;

     label18:
        virtualinvoke $r30.<java.io.DataOutputStream: void close()>();

     label19:
        goto label22;

     label20:
        $r16 := @caughtexception;

        virtualinvoke r38.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r16);

        goto label22;

     label21:
        virtualinvoke $r30.<java.io.DataOutputStream: void close()>();

     label22:
        throw $r18;

     label23:
        $i2 = r0.<org.apache.mahout.math.ssvd.SequentialOutOfCoreSvd: int columnsPerSlice>;

        i1 = i1 + $i2;

        goto label01;

     label24:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label06 with label05;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label13 to label14 with label16;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.lang.Throwable from label15 to label17 with label16;
    }

    public void computeU(java.lang.Iterable, java.io.File) throws java.io.IOException
    {
        org.apache.mahout.math.ssvd.SequentialOutOfCoreSvd r0;
        java.lang.Iterable r1;
        java.io.File r2, r4, $r24;
        java.util.Iterator r3;
        org.apache.mahout.math.Matrix r6, r7, r8, $r17, $r19;
        boolean $z0;
        org.apache.mahout.math.MatrixWritable $r12;
        java.lang.Object $r13;
        java.io.FileInputStream $r14;
        java.io.DataInputStream $r15;
        org.apache.mahout.math.RandomTrinaryMatrix $r16;
        int $i0, $i1, $i2;
        org.apache.mahout.math.CholeskyDecomposition $r18;
        org.apache.mahout.math.SingularValueDecomposition $r20;
        java.io.DataOutputStream $r21;
        java.lang.Object[] $r22;
        java.io.FileOutputStream $r23;
        java.lang.String $r25, $r26, $r27;
        java.lang.Throwable $r28, $r29, $r30, r32;

        r0 := @this: org.apache.mahout.math.ssvd.SequentialOutOfCoreSvd;

        r1 := @parameter0: java.lang.Iterable;

        r2 := @parameter1: java.io.File;

        r3 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label12;

        $r13 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.io.File) $r13;

        $r12 = new org.apache.mahout.math.MatrixWritable;

        specialinvoke $r12.<org.apache.mahout.math.MatrixWritable: void <init>()>();

        $r15 = new java.io.DataInputStream;

        $r14 = new java.io.FileInputStream;

        specialinvoke $r14.<java.io.FileInputStream: void <init>(java.io.File)>(r4);

        specialinvoke $r15.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r14);

        virtualinvoke $r12.<org.apache.mahout.math.MatrixWritable: void readFields(java.io.DataInput)>($r15);

        r6 = virtualinvoke $r12.<org.apache.mahout.math.MatrixWritable: org.apache.mahout.math.Matrix get()>();

        $r16 = new org.apache.mahout.math.RandomTrinaryMatrix;

        $i1 = r0.<org.apache.mahout.math.ssvd.SequentialOutOfCoreSvd: int seed>;

        $i0 = interfaceinvoke r6.<org.apache.mahout.math.Matrix: int numCols()>();

        $i2 = r0.<org.apache.mahout.math.ssvd.SequentialOutOfCoreSvd: int dim>;

        specialinvoke $r16.<org.apache.mahout.math.RandomTrinaryMatrix: void <init>(int,int,int,boolean)>($i1, $i0, $i2, 0);

        r7 = interfaceinvoke r6.<org.apache.mahout.math.Matrix: org.apache.mahout.math.Matrix times(org.apache.mahout.math.Matrix)>($r16);

        $r18 = r0.<org.apache.mahout.math.ssvd.SequentialOutOfCoreSvd: org.apache.mahout.math.CholeskyDecomposition r2>;

        $r17 = virtualinvoke $r18.<org.apache.mahout.math.CholeskyDecomposition: org.apache.mahout.math.Matrix solveRight(org.apache.mahout.math.Matrix)>(r7);

        $r20 = r0.<org.apache.mahout.math.ssvd.SequentialOutOfCoreSvd: org.apache.mahout.math.SingularValueDecomposition svd>;

        $r19 = virtualinvoke $r20.<org.apache.mahout.math.SingularValueDecomposition: org.apache.mahout.math.Matrix getU()>();

        r8 = interfaceinvoke $r17.<org.apache.mahout.math.Matrix: org.apache.mahout.math.Matrix times(org.apache.mahout.math.Matrix)>($r19);

        virtualinvoke $r12.<org.apache.mahout.math.MatrixWritable: void set(org.apache.mahout.math.Matrix)>(r8);

        $r21 = new java.io.DataOutputStream;

        $r23 = new java.io.FileOutputStream;

        $r24 = new java.io.File;

        $r22 = newarray (java.lang.Object)[1];

        $r27 = virtualinvoke r4.<java.io.File: java.lang.String getName()>();

        $r25 = virtualinvoke $r27.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(".*-", "");

        $r22[0] = $r25;

        $r26 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("U-%s", $r22);

        specialinvoke $r24.<java.io.File: void <init>(java.io.File,java.lang.String)>(r2, $r26);

        specialinvoke $r23.<java.io.FileOutputStream: void <init>(java.io.File)>($r24);

        specialinvoke $r21.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r23);

        r32 = null;

     label02:
        virtualinvoke $r12.<org.apache.mahout.math.MatrixWritable: void write(java.io.DataOutput)>($r21);

     label03:
        if $r21 == null goto label01;

        virtualinvoke $r21.<java.io.DataOutputStream: void close()>();

        goto label01;

     label04:
        $r29 := @caughtexception;

        r32 = $r29;

        throw $r29;

     label05:
        $r28 := @caughtexception;

     label06:
        if $r21 == null goto label11;

        if r32 == null goto label10;

     label07:
        virtualinvoke $r21.<java.io.DataOutputStream: void close()>();

     label08:
        goto label11;

     label09:
        $r30 := @caughtexception;

        virtualinvoke r32.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r30);

        goto label11;

     label10:
        virtualinvoke $r21.<java.io.DataOutputStream: void close()>();

     label11:
        throw $r28;

     label12:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label06 with label05;
    }

    private static void addToSavedCopy(java.io.File, org.apache.mahout.math.Matrix) throws java.io.IOException
    {
        java.io.File r0;
        org.apache.mahout.math.Matrix r1, $r25;
        org.apache.mahout.math.MatrixWritable $r7;
        boolean $z0;
        java.io.DataOutputStream $r8;
        java.io.FileOutputStream $r9;
        java.io.DataInputStream $r10;
        java.io.FileInputStream $r11;
        java.lang.Throwable $r13, $r16, $r17, $r18, $r19, $r20, r22, r28;
        org.apache.mahout.math.function.DoubleDoubleFunction $r26;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: org.apache.mahout.math.Matrix;

        $r7 = new org.apache.mahout.math.MatrixWritable;

        specialinvoke $r7.<org.apache.mahout.math.MatrixWritable: void <init>()>();

        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label12;

        $r10 = new java.io.DataInputStream;

        $r11 = new java.io.FileInputStream;

        specialinvoke $r11.<java.io.FileInputStream: void <init>(java.io.File)>(r0);

        specialinvoke $r10.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r11);

        r22 = null;

     label01:
        virtualinvoke $r7.<org.apache.mahout.math.MatrixWritable: void readFields(java.io.DataInput)>($r10);

     label02:
        if $r10 == null goto label11;

        virtualinvoke $r10.<java.io.DataInputStream: void close()>();

        goto label11;

     label03:
        $r17 := @caughtexception;

        r22 = $r17;

        throw $r17;

     label04:
        $r19 := @caughtexception;

     label05:
        if $r10 == null goto label10;

        if r22 == null goto label09;

     label06:
        virtualinvoke $r10.<java.io.DataInputStream: void close()>();

     label07:
        goto label10;

     label08:
        $r13 := @caughtexception;

        virtualinvoke r22.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r13);

        goto label10;

     label09:
        virtualinvoke $r10.<java.io.DataInputStream: void close()>();

     label10:
        throw $r19;

     label11:
        $r25 = virtualinvoke $r7.<org.apache.mahout.math.MatrixWritable: org.apache.mahout.math.Matrix get()>();

        $r26 = <org.apache.mahout.math.function.Functions: org.apache.mahout.math.function.DoubleDoubleFunction PLUS>;

        interfaceinvoke $r25.<org.apache.mahout.math.Matrix: org.apache.mahout.math.Matrix assign(org.apache.mahout.math.Matrix,org.apache.mahout.math.function.DoubleDoubleFunction)>(r1, $r26);

        goto label13;

     label12:
        virtualinvoke $r7.<org.apache.mahout.math.MatrixWritable: void set(org.apache.mahout.math.Matrix)>(r1);

     label13:
        $r8 = new java.io.DataOutputStream;

        $r9 = new java.io.FileOutputStream;

        specialinvoke $r9.<java.io.FileOutputStream: void <init>(java.io.File)>(r0);

        specialinvoke $r8.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r9);

        r28 = null;

     label14:
        virtualinvoke $r7.<org.apache.mahout.math.MatrixWritable: void write(java.io.DataOutput)>($r8);

     label15:
        if $r8 == null goto label24;

        virtualinvoke $r8.<java.io.DataOutputStream: void close()>();

        goto label24;

     label16:
        $r18 := @caughtexception;

        r28 = $r18;

        throw $r18;

     label17:
        $r20 := @caughtexception;

     label18:
        if $r8 == null goto label23;

        if r28 == null goto label22;

     label19:
        virtualinvoke $r8.<java.io.DataOutputStream: void close()>();

     label20:
        goto label23;

     label21:
        $r16 := @caughtexception;

        virtualinvoke r28.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r16);

        goto label23;

     label22:
        virtualinvoke $r8.<java.io.DataOutputStream: void close()>();

     label23:
        throw $r20;

     label24:
        return;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label03 to label05 with label04;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label14 to label15 with label17;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label16 to label18 with label17;
    }

    private static java.io.File bFile(java.io.File, int)
    {
        java.io.File r0, $r1;
        int i0;
        java.lang.Object[] $r2;
        java.lang.Integer $r3;
        java.lang.String $r4;

        r0 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        $r1 = new java.io.File;

        $r2 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2[0] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("B-%09d", $r2);

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, $r4);

        return $r1;
    }

    public org.apache.mahout.math.Vector getSingularValues()
    {
        org.apache.mahout.math.ssvd.SequentialOutOfCoreSvd r0;
        org.apache.mahout.math.DenseVector $r1;
        org.apache.mahout.math.SingularValueDecomposition $r2;
        double[] $r3;

        r0 := @this: org.apache.mahout.math.ssvd.SequentialOutOfCoreSvd;

        $r1 = new org.apache.mahout.math.DenseVector;

        $r2 = r0.<org.apache.mahout.math.ssvd.SequentialOutOfCoreSvd: org.apache.mahout.math.SingularValueDecomposition svd>;

        $r3 = virtualinvoke $r2.<org.apache.mahout.math.SingularValueDecomposition: double[] getSingularValues()>();

        specialinvoke $r1.<org.apache.mahout.math.DenseVector: void <init>(double[])>($r3);

        return $r1;
    }
}
