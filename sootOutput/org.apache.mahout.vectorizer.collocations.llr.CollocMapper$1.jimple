class org.apache.mahout.vectorizer.collocations.llr.CollocMapper$1 extends java.lang.Object implements org.apache.mahout.math.function.ObjectIntProcedure
{
    final org.apache.mahout.vectorizer.collocations.llr.GramKey val$gramKey;
    final org.apache.hadoop.mapreduce.Mapper$Context val$context;
    final org.apache.mahout.vectorizer.collocations.llr.CollocMapper this$0;

    void <init>(org.apache.mahout.vectorizer.collocations.llr.CollocMapper, org.apache.mahout.vectorizer.collocations.llr.GramKey, org.apache.hadoop.mapreduce.Mapper$Context)
    {
        org.apache.mahout.vectorizer.collocations.llr.CollocMapper$1 r0;
        org.apache.mahout.vectorizer.collocations.llr.CollocMapper r1;
        org.apache.mahout.vectorizer.collocations.llr.GramKey r2;
        org.apache.hadoop.mapreduce.Mapper$Context r3;

        r0 := @this: org.apache.mahout.vectorizer.collocations.llr.CollocMapper$1;

        r1 := @parameter0: org.apache.mahout.vectorizer.collocations.llr.CollocMapper;

        r2 := @parameter1: org.apache.mahout.vectorizer.collocations.llr.GramKey;

        r3 := @parameter2: org.apache.hadoop.mapreduce.Mapper$Context;

        r0.<org.apache.mahout.vectorizer.collocations.llr.CollocMapper$1: org.apache.mahout.vectorizer.collocations.llr.CollocMapper this$0> = r1;

        r0.<org.apache.mahout.vectorizer.collocations.llr.CollocMapper$1: org.apache.mahout.vectorizer.collocations.llr.GramKey val$gramKey> = r2;

        r0.<org.apache.mahout.vectorizer.collocations.llr.CollocMapper$1: org.apache.hadoop.mapreduce.Mapper$Context val$context> = r3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean apply(java.lang.String, int)
    {
        org.apache.mahout.vectorizer.collocations.llr.CollocMapper$1 r0;
        java.lang.String r1, $r7, $r10;
        int i0, i1, $i2;
        org.apache.mahout.vectorizer.collocations.llr.Gram $r4, $r6, $r9;
        org.apache.mahout.vectorizer.collocations.llr.Gram$Type $r5, $r8, $r12;
        org.apache.mahout.vectorizer.collocations.llr.GramKey $r11, $r13, $r15, $r17, $r19, $r21, $r23, $r25;
        byte[] $r14, $r18, $r22, $r26;
        org.apache.hadoop.mapreduce.Mapper$Context $r16, $r20, $r24, $r29;
        java.lang.Exception $r27;
        java.lang.IllegalStateException $r28;

        r0 := @this: org.apache.mahout.vectorizer.collocations.llr.CollocMapper$1;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 = virtualinvoke r1.<java.lang.String: int lastIndexOf(int)>(32);

        if i1 == -1 goto label4;

     label1:
        $r4 = new org.apache.mahout.vectorizer.collocations.llr.Gram;

        $r5 = <org.apache.mahout.vectorizer.collocations.llr.Gram$Type: org.apache.mahout.vectorizer.collocations.llr.Gram$Type NGRAM>;

        specialinvoke $r4.<org.apache.mahout.vectorizer.collocations.llr.Gram: void <init>(java.lang.String,int,org.apache.mahout.vectorizer.collocations.llr.Gram$Type)>(r1, i0, $r5);

        $r6 = new org.apache.mahout.vectorizer.collocations.llr.Gram;

        $r7 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i1);

        $r8 = <org.apache.mahout.vectorizer.collocations.llr.Gram$Type: org.apache.mahout.vectorizer.collocations.llr.Gram$Type HEAD>;

        specialinvoke $r6.<org.apache.mahout.vectorizer.collocations.llr.Gram: void <init>(java.lang.String,int,org.apache.mahout.vectorizer.collocations.llr.Gram$Type)>($r7, i0, $r8);

        $r9 = new org.apache.mahout.vectorizer.collocations.llr.Gram;

        $i2 = i1 + 1;

        $r10 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i2);

        $r12 = <org.apache.mahout.vectorizer.collocations.llr.Gram$Type: org.apache.mahout.vectorizer.collocations.llr.Gram$Type TAIL>;

        specialinvoke $r9.<org.apache.mahout.vectorizer.collocations.llr.Gram: void <init>(java.lang.String,int,org.apache.mahout.vectorizer.collocations.llr.Gram$Type)>($r10, i0, $r12);

        $r11 = r0.<org.apache.mahout.vectorizer.collocations.llr.CollocMapper$1: org.apache.mahout.vectorizer.collocations.llr.GramKey val$gramKey>;

        $r14 = staticinvoke <org.apache.mahout.vectorizer.collocations.llr.CollocMapper: byte[] access$000()>();

        virtualinvoke $r11.<org.apache.mahout.vectorizer.collocations.llr.GramKey: void set(org.apache.mahout.vectorizer.collocations.llr.Gram,byte[])>($r6, $r14);

        $r16 = r0.<org.apache.mahout.vectorizer.collocations.llr.CollocMapper$1: org.apache.hadoop.mapreduce.Mapper$Context val$context>;

        $r13 = r0.<org.apache.mahout.vectorizer.collocations.llr.CollocMapper$1: org.apache.mahout.vectorizer.collocations.llr.GramKey val$gramKey>;

        virtualinvoke $r16.<org.apache.hadoop.mapreduce.Mapper$Context: void write(java.lang.Object,java.lang.Object)>($r13, $r6);

        $r15 = r0.<org.apache.mahout.vectorizer.collocations.llr.CollocMapper$1: org.apache.mahout.vectorizer.collocations.llr.GramKey val$gramKey>;

        $r18 = virtualinvoke $r4.<org.apache.mahout.vectorizer.collocations.llr.Gram: byte[] getBytes()>();

        virtualinvoke $r15.<org.apache.mahout.vectorizer.collocations.llr.GramKey: void set(org.apache.mahout.vectorizer.collocations.llr.Gram,byte[])>($r6, $r18);

        $r20 = r0.<org.apache.mahout.vectorizer.collocations.llr.CollocMapper$1: org.apache.hadoop.mapreduce.Mapper$Context val$context>;

        $r17 = r0.<org.apache.mahout.vectorizer.collocations.llr.CollocMapper$1: org.apache.mahout.vectorizer.collocations.llr.GramKey val$gramKey>;

        virtualinvoke $r20.<org.apache.hadoop.mapreduce.Mapper$Context: void write(java.lang.Object,java.lang.Object)>($r17, $r4);

        $r19 = r0.<org.apache.mahout.vectorizer.collocations.llr.CollocMapper$1: org.apache.mahout.vectorizer.collocations.llr.GramKey val$gramKey>;

        $r22 = staticinvoke <org.apache.mahout.vectorizer.collocations.llr.CollocMapper: byte[] access$000()>();

        virtualinvoke $r19.<org.apache.mahout.vectorizer.collocations.llr.GramKey: void set(org.apache.mahout.vectorizer.collocations.llr.Gram,byte[])>($r9, $r22);

        $r24 = r0.<org.apache.mahout.vectorizer.collocations.llr.CollocMapper$1: org.apache.hadoop.mapreduce.Mapper$Context val$context>;

        $r21 = r0.<org.apache.mahout.vectorizer.collocations.llr.CollocMapper$1: org.apache.mahout.vectorizer.collocations.llr.GramKey val$gramKey>;

        virtualinvoke $r24.<org.apache.hadoop.mapreduce.Mapper$Context: void write(java.lang.Object,java.lang.Object)>($r21, $r9);

        $r23 = r0.<org.apache.mahout.vectorizer.collocations.llr.CollocMapper$1: org.apache.mahout.vectorizer.collocations.llr.GramKey val$gramKey>;

        $r26 = virtualinvoke $r4.<org.apache.mahout.vectorizer.collocations.llr.Gram: byte[] getBytes()>();

        virtualinvoke $r23.<org.apache.mahout.vectorizer.collocations.llr.GramKey: void set(org.apache.mahout.vectorizer.collocations.llr.Gram,byte[])>($r9, $r26);

        $r29 = r0.<org.apache.mahout.vectorizer.collocations.llr.CollocMapper$1: org.apache.hadoop.mapreduce.Mapper$Context val$context>;

        $r25 = r0.<org.apache.mahout.vectorizer.collocations.llr.CollocMapper$1: org.apache.mahout.vectorizer.collocations.llr.GramKey val$gramKey>;

        virtualinvoke $r29.<org.apache.hadoop.mapreduce.Mapper$Context: void write(java.lang.Object,java.lang.Object)>($r25, $r4);

     label2:
        goto label4;

     label3:
        $r27 := @caughtexception;

        $r28 = new java.lang.IllegalStateException;

        specialinvoke $r28.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r27);

        throw $r28;

     label4:
        return 1;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    public volatile boolean apply(java.lang.Object, int)
    {
        org.apache.mahout.vectorizer.collocations.llr.CollocMapper$1 r0;
        java.lang.Object r1;
        int i0;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: org.apache.mahout.vectorizer.collocations.llr.CollocMapper$1;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $r2 = (java.lang.String) r1;

        $z0 = virtualinvoke r0.<org.apache.mahout.vectorizer.collocations.llr.CollocMapper$1: boolean apply(java.lang.String,int)>($r2, i0);

        return $z0;
    }
}
