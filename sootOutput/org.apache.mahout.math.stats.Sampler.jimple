public class org.apache.mahout.math.stats.Sampler extends java.lang.Object
{
    private final java.util.Random random;
    private final double[] sampler;

    public void <init>(java.util.Random)
    {
        org.apache.mahout.math.stats.Sampler r0;
        java.util.Random r1;

        r0 := @this: org.apache.mahout.math.stats.Sampler;

        r1 := @parameter0: java.util.Random;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.mahout.math.stats.Sampler: java.util.Random random> = r1;

        r0.<org.apache.mahout.math.stats.Sampler: double[] sampler> = null;

        return;
    }

    public void <init>(java.util.Random, double[])
    {
        org.apache.mahout.math.stats.Sampler r0;
        java.util.Random r1;
        double[] r2;

        r0 := @this: org.apache.mahout.math.stats.Sampler;

        r1 := @parameter0: java.util.Random;

        r2 := @parameter1: double[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.mahout.math.stats.Sampler: java.util.Random random> = r1;

        r0.<org.apache.mahout.math.stats.Sampler: double[] sampler> = r2;

        return;
    }

    public void <init>(java.util.Random, org.apache.mahout.math.Vector)
    {
        org.apache.mahout.math.stats.Sampler r0;
        java.util.Random r1;
        org.apache.mahout.math.Vector r2;
        double[] $r3;

        r0 := @this: org.apache.mahout.math.stats.Sampler;

        r1 := @parameter0: java.util.Random;

        r2 := @parameter1: org.apache.mahout.math.Vector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.mahout.math.stats.Sampler: java.util.Random random> = r1;

        $r3 = staticinvoke <org.apache.mahout.math.stats.Sampler: double[] samplerFor(org.apache.mahout.math.Vector)>(r2);

        r0.<org.apache.mahout.math.stats.Sampler: double[] sampler> = $r3;

        return;
    }

    public int sample(org.apache.mahout.math.Vector)
    {
        org.apache.mahout.math.stats.Sampler r0;
        org.apache.mahout.math.Vector r1;
        double[] $r2;
        int $i0;

        r0 := @this: org.apache.mahout.math.stats.Sampler;

        r1 := @parameter0: org.apache.mahout.math.Vector;

        $r2 = staticinvoke <org.apache.mahout.math.stats.Sampler: double[] samplerFor(org.apache.mahout.math.Vector)>(r1);

        $i0 = specialinvoke r0.<org.apache.mahout.math.stats.Sampler: int sample(double[])>($r2);

        return $i0;
    }

    public int sample()
    {
        org.apache.mahout.math.stats.Sampler r0;
        double[] $r1, $r3;
        int $i0;

        r0 := @this: org.apache.mahout.math.stats.Sampler;

        $r1 = r0.<org.apache.mahout.math.stats.Sampler: double[] sampler>;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r1, "Sampler must have been constructed with a distribution, or else sample(Vector) should be used to sample");

        $r3 = r0.<org.apache.mahout.math.stats.Sampler: double[] sampler>;

        $i0 = specialinvoke r0.<org.apache.mahout.math.stats.Sampler: int sample(double[])>($r3);

        return $i0;
    }

    private static double[] samplerFor(org.apache.mahout.math.Vector)
    {
        org.apache.mahout.math.Vector r0;
        int i0, i1;
        double[] r1;
        double d0, $d1, $d2, d3;

        r0 := @parameter0: org.apache.mahout.math.Vector;

        i0 = interfaceinvoke r0.<org.apache.mahout.math.Vector: int size()>();

        r1 = newarray (double)[i0];

        d0 = interfaceinvoke r0.<org.apache.mahout.math.Vector: double norm(double)>(1.0);

        d3 = 0.0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $d1 = interfaceinvoke r0.<org.apache.mahout.math.Vector: double get(int)>(i1);

        $d2 = $d1 / d0;

        d3 = d3 + $d2;

        r1[i1] = d3;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r1;
    }

    private int sample(double[])
    {
        org.apache.mahout.math.stats.Sampler r0;
        double[] r1;
        int i0, $i1, $i2;
        java.util.Random $r2;
        double $d0;

        r0 := @this: org.apache.mahout.math.stats.Sampler;

        r1 := @parameter0: double[];

        $r2 = r0.<org.apache.mahout.math.stats.Sampler: java.util.Random random>;

        $d0 = virtualinvoke $r2.<java.util.Random: double nextDouble()>();

        i0 = staticinvoke <java.util.Arrays: int binarySearch(double[],double)>(r1, $d0);

        if i0 >= 0 goto label1;

        $i1 = i0 + 1;

        $i2 = neg $i1;

        goto label2;

     label1:
        $i2 = i0;

     label2:
        return $i2;
    }
}
