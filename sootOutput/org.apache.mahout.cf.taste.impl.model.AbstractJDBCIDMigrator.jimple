public abstract class org.apache.mahout.cf.taste.impl.model.AbstractJDBCIDMigrator extends org.apache.mahout.cf.taste.impl.model.AbstractIDMigrator implements org.apache.mahout.cf.taste.model.UpdatableIDMigrator
{
    public static final java.lang.String DEFAULT_MAPPING_TABLE;
    public static final java.lang.String DEFAULT_LONG_ID_COLUMN;
    public static final java.lang.String DEFAULT_STRING_ID_COLUMN;
    private final javax.sql.DataSource dataSource;
    private final java.lang.String getStringIDSQL;
    private final java.lang.String storeMappingSQL;

    protected void <init>(javax.sql.DataSource, java.lang.String, java.lang.String)
    {
        org.apache.mahout.cf.taste.impl.model.AbstractJDBCIDMigrator r0;
        javax.sql.DataSource r1;
        java.lang.String r2, r3;

        r0 := @this: org.apache.mahout.cf.taste.impl.model.AbstractJDBCIDMigrator;

        r1 := @parameter0: javax.sql.DataSource;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<org.apache.mahout.cf.taste.impl.model.AbstractIDMigrator: void <init>()>();

        r0.<org.apache.mahout.cf.taste.impl.model.AbstractJDBCIDMigrator: javax.sql.DataSource dataSource> = r1;

        r0.<org.apache.mahout.cf.taste.impl.model.AbstractJDBCIDMigrator: java.lang.String getStringIDSQL> = r2;

        r0.<org.apache.mahout.cf.taste.impl.model.AbstractJDBCIDMigrator: java.lang.String storeMappingSQL> = r3;

        return;
    }

    public final void storeMapping(long, java.lang.String) throws org.apache.mahout.cf.taste.common.TasteException
    {
        org.apache.mahout.cf.taste.impl.model.AbstractJDBCIDMigrator r0;
        long l0;
        java.lang.String r1, $r5;
        javax.sql.DataSource $r4;
        java.sql.SQLException $r6;
        org.apache.mahout.cf.taste.common.TasteException $r7;
        java.lang.Throwable $r8;
        java.sql.Connection r9;
        java.sql.PreparedStatement r10;

        r0 := @this: org.apache.mahout.cf.taste.impl.model.AbstractJDBCIDMigrator;

        l0 := @parameter0: long;

        r1 := @parameter1: java.lang.String;

        r9 = null;

        r10 = null;

     label1:
        $r4 = r0.<org.apache.mahout.cf.taste.impl.model.AbstractJDBCIDMigrator: javax.sql.DataSource dataSource>;

        r9 = interfaceinvoke $r4.<javax.sql.DataSource: java.sql.Connection getConnection()>();

        $r5 = r0.<org.apache.mahout.cf.taste.impl.model.AbstractJDBCIDMigrator: java.lang.String storeMappingSQL>;

        r10 = interfaceinvoke r9.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r5);

        interfaceinvoke r10.<java.sql.PreparedStatement: void setLong(int,long)>(1, l0);

        interfaceinvoke r10.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(2, r1);

        interfaceinvoke r10.<java.sql.PreparedStatement: int executeUpdate()>();

     label2:
        staticinvoke <org.apache.mahout.common.IOUtils: void quietClose(java.sql.ResultSet,java.sql.Statement,java.sql.Connection)>(null, r10, r9);

        goto label6;

     label3:
        $r6 := @caughtexception;

        $r7 = new org.apache.mahout.cf.taste.common.TasteException;

        specialinvoke $r7.<org.apache.mahout.cf.taste.common.TasteException: void <init>(java.lang.Throwable)>($r6);

        throw $r7;

     label4:
        $r8 := @caughtexception;

     label5:
        staticinvoke <org.apache.mahout.common.IOUtils: void quietClose(java.sql.ResultSet,java.sql.Statement,java.sql.Connection)>(null, r10, r9);

        throw $r8;

     label6:
        return;

        catch java.sql.SQLException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label5 with label4;
    }

    public final java.lang.String toStringID(long) throws org.apache.mahout.cf.taste.common.TasteException
    {
        org.apache.mahout.cf.taste.impl.model.AbstractJDBCIDMigrator r0;
        long l0;
        javax.sql.DataSource $r2;
        java.lang.String $r3, r10;
        boolean $z0;
        java.sql.SQLException $r4;
        java.lang.Throwable $r5;
        org.apache.mahout.cf.taste.common.TasteException $r6;
        java.sql.Connection r7;
        java.sql.PreparedStatement r8;
        java.sql.ResultSet r9;

        r0 := @this: org.apache.mahout.cf.taste.impl.model.AbstractJDBCIDMigrator;

        l0 := @parameter0: long;

        r7 = null;

        r8 = null;

        r9 = null;

     label1:
        $r2 = r0.<org.apache.mahout.cf.taste.impl.model.AbstractJDBCIDMigrator: javax.sql.DataSource dataSource>;

        r7 = interfaceinvoke $r2.<javax.sql.DataSource: java.sql.Connection getConnection()>();

        $r3 = r0.<org.apache.mahout.cf.taste.impl.model.AbstractJDBCIDMigrator: java.lang.String getStringIDSQL>;

        r8 = interfaceinvoke r7.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String,int,int)>($r3, 1003, 1007);

        interfaceinvoke r8.<java.sql.PreparedStatement: void setFetchDirection(int)>(1000);

        interfaceinvoke r8.<java.sql.PreparedStatement: void setFetchSize(int)>(1);

        interfaceinvoke r8.<java.sql.PreparedStatement: void setLong(int,long)>(1, l0);

        r9 = interfaceinvoke r8.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>();

        $z0 = interfaceinvoke r9.<java.sql.ResultSet: boolean next()>();

        if $z0 == 0 goto label3;

        r10 = interfaceinvoke r9.<java.sql.ResultSet: java.lang.String getString(int)>(1);

     label2:
        staticinvoke <org.apache.mahout.common.IOUtils: void quietClose(java.sql.ResultSet,java.sql.Statement,java.sql.Connection)>(r9, r8, r7);

        return r10;

     label3:
        staticinvoke <org.apache.mahout.common.IOUtils: void quietClose(java.sql.ResultSet,java.sql.Statement,java.sql.Connection)>(r9, r8, r7);

        return null;

     label4:
        $r4 := @caughtexception;

        $r6 = new org.apache.mahout.cf.taste.common.TasteException;

        specialinvoke $r6.<org.apache.mahout.cf.taste.common.TasteException: void <init>(java.lang.Throwable)>($r4);

        throw $r6;

     label5:
        $r5 := @caughtexception;

     label6:
        staticinvoke <org.apache.mahout.common.IOUtils: void quietClose(java.sql.ResultSet,java.sql.Statement,java.sql.Connection)>(r9, r8, r7);

        throw $r5;

        catch java.sql.SQLException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label4 to label6 with label5;
    }

    public void initialize(java.lang.Iterable) throws org.apache.mahout.cf.taste.common.TasteException
    {
        org.apache.mahout.cf.taste.impl.model.AbstractJDBCIDMigrator r0;
        java.lang.Iterable r1;
        java.util.Iterator r2;
        java.lang.String r3;
        boolean $z0;
        java.lang.Object $r4;
        long $l0;

        r0 := @this: org.apache.mahout.cf.taste.impl.model.AbstractJDBCIDMigrator;

        r1 := @parameter0: java.lang.Iterable;

        r2 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r4;

        $l0 = virtualinvoke r0.<org.apache.mahout.cf.taste.impl.model.AbstractJDBCIDMigrator: long toLongID(java.lang.String)>(r3);

        virtualinvoke r0.<org.apache.mahout.cf.taste.impl.model.AbstractJDBCIDMigrator: void storeMapping(long,java.lang.String)>($l0, r3);

        goto label1;

     label2:
        return;
    }

    public static void <clinit>()
    {
        <org.apache.mahout.cf.taste.impl.model.AbstractJDBCIDMigrator: java.lang.String DEFAULT_STRING_ID_COLUMN> = "string_id";

        <org.apache.mahout.cf.taste.impl.model.AbstractJDBCIDMigrator: java.lang.String DEFAULT_LONG_ID_COLUMN> = "long_id";

        <org.apache.mahout.cf.taste.impl.model.AbstractJDBCIDMigrator: java.lang.String DEFAULT_MAPPING_TABLE> = "taste_id_mapping";

        return;
    }
}
