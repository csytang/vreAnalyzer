public class org.apache.mahout.classifier.df.data.DataConverter extends java.lang.Object
{
    private static final java.util.regex.Pattern COMMA_SPACE;
    private final org.apache.mahout.classifier.df.data.Dataset dataset;

    public void <init>(org.apache.mahout.classifier.df.data.Dataset)
    {
        org.apache.mahout.classifier.df.data.DataConverter r0;
        org.apache.mahout.classifier.df.data.Dataset r1;

        r0 := @this: org.apache.mahout.classifier.df.data.DataConverter;

        r1 := @parameter0: org.apache.mahout.classifier.df.data.Dataset;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.mahout.classifier.df.data.DataConverter: org.apache.mahout.classifier.df.data.Dataset dataset> = r1;

        return;
    }

    public org.apache.mahout.classifier.df.data.Instance convert(java.lang.CharSequence)
    {
        org.apache.mahout.classifier.df.data.DataConverter r0;
        java.lang.CharSequence r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9;
        java.lang.String[] r2;
        java.lang.String r4, $r15, $r20, $r22;
        org.apache.mahout.classifier.df.data.Dataset $r5, $r6, $r14, $r17, $r21, $r23;
        int[] $r7, $r19;
        java.util.regex.Pattern $r8;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r13;
        org.apache.mahout.math.DenseVector $r16;
        org.apache.mahout.classifier.df.data.Instance $r18;
        boolean $z0, $z1, $z2, $z3;
        double $d0, $d1;

        r0 := @this: org.apache.mahout.classifier.df.data.DataConverter;

        r1 := @parameter0: java.lang.CharSequence;

        $r5 = r0.<org.apache.mahout.classifier.df.data.DataConverter: org.apache.mahout.classifier.df.data.Dataset dataset>;

        $i2 = virtualinvoke $r5.<org.apache.mahout.classifier.df.data.Dataset: int nbAttributes()>();

        $r6 = r0.<org.apache.mahout.classifier.df.data.DataConverter: org.apache.mahout.classifier.df.data.Dataset dataset>;

        $r7 = virtualinvoke $r6.<org.apache.mahout.classifier.df.data.Dataset: int[] getIgnored()>();

        $i3 = lengthof $r7;

        i0 = $i2 + $i3;

        $r8 = <org.apache.mahout.classifier.df.data.DataConverter: java.util.regex.Pattern COMMA_SPACE>;

        r2 = virtualinvoke $r8.<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence)>(r1);

        $i4 = lengthof r2;

        if $i4 != i0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wrong number of attributes in the string: ");

        $i5 = lengthof r2;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Must be ");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z3, $r15);

        $r14 = r0.<org.apache.mahout.classifier.df.data.DataConverter: org.apache.mahout.classifier.df.data.Dataset dataset>;

        i1 = virtualinvoke $r14.<org.apache.mahout.classifier.df.data.Dataset: int nbAttributes()>();

        $r16 = new org.apache.mahout.math.DenseVector;

        specialinvoke $r16.<org.apache.mahout.math.DenseVector: void <init>(int)>(i1);

        i8 = 0;

        i9 = 0;

     label3:
        if i9 >= i0 goto label7;

        $r17 = r0.<org.apache.mahout.classifier.df.data.DataConverter: org.apache.mahout.classifier.df.data.Dataset dataset>;

        $r19 = virtualinvoke $r17.<org.apache.mahout.classifier.df.data.Dataset: int[] getIgnored()>();

        $z0 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(int[],int)>($r19, i9);

        if $z0 != 0 goto label6;

        $r20 = r2[i9];

        r4 = virtualinvoke $r20.<java.lang.String: java.lang.String trim()>();

        $r22 = "?";

        $z2 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z2 == 0 goto label4;

        return null;

     label4:
        $r21 = r0.<org.apache.mahout.classifier.df.data.DataConverter: org.apache.mahout.classifier.df.data.Dataset dataset>;

        $z1 = virtualinvoke $r21.<org.apache.mahout.classifier.df.data.Dataset: boolean isNumerical(int)>(i8);

        if $z1 == 0 goto label5;

        $i6 = i8;

        i8 = i8 + 1;

        $d1 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r4);

        virtualinvoke $r16.<org.apache.mahout.math.DenseVector: void set(int,double)>($i6, $d1);

        goto label6;

     label5:
        $r23 = r0.<org.apache.mahout.classifier.df.data.DataConverter: org.apache.mahout.classifier.df.data.Dataset dataset>;

        $i7 = virtualinvoke $r23.<org.apache.mahout.classifier.df.data.Dataset: int valueOf(int,java.lang.String)>(i8, r4);

        $d0 = (double) $i7;

        virtualinvoke $r16.<org.apache.mahout.math.DenseVector: void set(int,double)>(i8, $d0);

        i8 = i8 + 1;

     label6:
        i9 = i9 + 1;

        goto label3;

     label7:
        $r18 = new org.apache.mahout.classifier.df.data.Instance;

        specialinvoke $r18.<org.apache.mahout.classifier.df.data.Instance: void <init>(org.apache.mahout.math.Vector)>($r16);

        return $r18;
    }

    static void <clinit>()
    {
        java.util.regex.Pattern $r0;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[, ]");

        <org.apache.mahout.classifier.df.data.DataConverter: java.util.regex.Pattern COMMA_SPACE> = $r0;

        return;
    }
}
