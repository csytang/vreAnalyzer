public class org.apache.mahout.cf.taste.hadoop.als.SolveExplicitFeedbackMapper extends org.apache.mahout.cf.taste.hadoop.als.SharingMapper
{
    private double lambda;
    private int numFeatures;
    private final org.apache.mahout.math.VectorWritable uiOrmj;

    public void <init>()
    {
        org.apache.mahout.cf.taste.hadoop.als.SolveExplicitFeedbackMapper r0;
        org.apache.mahout.math.VectorWritable $r1;

        r0 := @this: org.apache.mahout.cf.taste.hadoop.als.SolveExplicitFeedbackMapper;

        specialinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.SharingMapper: void <init>()>();

        $r1 = new org.apache.mahout.math.VectorWritable;

        specialinvoke $r1.<org.apache.mahout.math.VectorWritable: void <init>()>();

        r0.<org.apache.mahout.cf.taste.hadoop.als.SolveExplicitFeedbackMapper: org.apache.mahout.math.VectorWritable uiOrmj> = $r1;

        return;
    }

    org.apache.mahout.math.map.OpenIntObjectHashMap createSharedInstance(org.apache.hadoop.mapreduce.Mapper$Context) throws java.io.IOException
    {
        org.apache.mahout.cf.taste.hadoop.als.SolveExplicitFeedbackMapper r0;
        org.apache.hadoop.mapreduce.Mapper$Context r1;
        org.apache.hadoop.conf.Configuration r2;
        int i0;
        java.lang.String $r3, $r4;
        org.apache.mahout.math.map.OpenIntObjectHashMap $r5;

        r0 := @this: org.apache.mahout.cf.taste.hadoop.als.SolveExplicitFeedbackMapper;

        r1 := @parameter0: org.apache.hadoop.mapreduce.Mapper$Context;

        r2 = virtualinvoke r1.<org.apache.hadoop.mapreduce.Mapper$Context: org.apache.hadoop.conf.Configuration getConfiguration()>();

        $r3 = <org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: java.lang.String NUM_ENTITIES>;

        $r4 = virtualinvoke r2.<org.apache.hadoop.conf.Configuration: java.lang.String get(java.lang.String)>($r3);

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r4);

        $r5 = staticinvoke <org.apache.mahout.cf.taste.hadoop.als.ALS: org.apache.mahout.math.map.OpenIntObjectHashMap readMatrixByRowsFromDistributedCache(int,org.apache.hadoop.conf.Configuration)>(i0, r2);

        return $r5;
    }

    protected void setup(org.apache.hadoop.mapreduce.Mapper$Context) throws java.io.IOException, java.lang.InterruptedException
    {
        org.apache.mahout.cf.taste.hadoop.als.SolveExplicitFeedbackMapper r0;
        org.apache.hadoop.mapreduce.Mapper$Context r1;
        org.apache.hadoop.conf.Configuration $r2, $r5;
        java.lang.String $r3, $r4, $r6;
        double $d0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.mahout.cf.taste.hadoop.als.SolveExplicitFeedbackMapper;

        r1 := @parameter0: org.apache.hadoop.mapreduce.Mapper$Context;

        $r2 = virtualinvoke r1.<org.apache.hadoop.mapreduce.Mapper$Context: org.apache.hadoop.conf.Configuration getConfiguration()>();

        $r3 = <org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: java.lang.String LAMBDA>;

        $r4 = virtualinvoke $r2.<org.apache.hadoop.conf.Configuration: java.lang.String get(java.lang.String)>($r3);

        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r4);

        r0.<org.apache.mahout.cf.taste.hadoop.als.SolveExplicitFeedbackMapper: double lambda> = $d0;

        $r5 = virtualinvoke r1.<org.apache.hadoop.mapreduce.Mapper$Context: org.apache.hadoop.conf.Configuration getConfiguration()>();

        $r6 = <org.apache.mahout.cf.taste.hadoop.als.ParallelALSFactorizationJob: java.lang.String NUM_FEATURES>;

        $i0 = virtualinvoke $r5.<org.apache.hadoop.conf.Configuration: int getInt(java.lang.String,int)>($r6, -1);

        r0.<org.apache.mahout.cf.taste.hadoop.als.SolveExplicitFeedbackMapper: int numFeatures> = $i0;

        $i1 = r0.<org.apache.mahout.cf.taste.hadoop.als.SolveExplicitFeedbackMapper: int numFeatures>;

        if $i1 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "numFeatures must be greater then 0!");

        return;
    }

    protected void map(org.apache.hadoop.io.IntWritable, org.apache.mahout.math.VectorWritable, org.apache.hadoop.mapreduce.Mapper$Context) throws java.io.IOException, java.lang.InterruptedException
    {
        org.apache.mahout.cf.taste.hadoop.als.SolveExplicitFeedbackMapper r0;
        org.apache.hadoop.io.IntWritable r1;
        org.apache.mahout.math.VectorWritable r2, $r6, $r8;
        org.apache.hadoop.mapreduce.Mapper$Context r3;
        org.apache.mahout.math.map.OpenIntObjectHashMap r4;
        java.lang.Object $r5;
        int $i0;
        double $d0;
        org.apache.mahout.math.Vector $r7;

        r0 := @this: org.apache.mahout.cf.taste.hadoop.als.SolveExplicitFeedbackMapper;

        r1 := @parameter0: org.apache.hadoop.io.IntWritable;

        r2 := @parameter1: org.apache.mahout.math.VectorWritable;

        r3 := @parameter2: org.apache.hadoop.mapreduce.Mapper$Context;

        $r5 = virtualinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.SolveExplicitFeedbackMapper: java.lang.Object getSharedInstance()>();

        r4 = (org.apache.mahout.math.map.OpenIntObjectHashMap) $r5;

        $r6 = r0.<org.apache.mahout.cf.taste.hadoop.als.SolveExplicitFeedbackMapper: org.apache.mahout.math.VectorWritable uiOrmj>;

        $d0 = r0.<org.apache.mahout.cf.taste.hadoop.als.SolveExplicitFeedbackMapper: double lambda>;

        $i0 = r0.<org.apache.mahout.cf.taste.hadoop.als.SolveExplicitFeedbackMapper: int numFeatures>;

        $r7 = staticinvoke <org.apache.mahout.cf.taste.hadoop.als.ALS: org.apache.mahout.math.Vector solveExplicit(org.apache.mahout.math.VectorWritable,org.apache.mahout.math.map.OpenIntObjectHashMap,double,int)>(r2, r4, $d0, $i0);

        virtualinvoke $r6.<org.apache.mahout.math.VectorWritable: void set(org.apache.mahout.math.Vector)>($r7);

        $r8 = r0.<org.apache.mahout.cf.taste.hadoop.als.SolveExplicitFeedbackMapper: org.apache.mahout.math.VectorWritable uiOrmj>;

        virtualinvoke r3.<org.apache.hadoop.mapreduce.Mapper$Context: void write(java.lang.Object,java.lang.Object)>(r1, $r8);

        return;
    }

    volatile java.lang.Object createSharedInstance(org.apache.hadoop.mapreduce.Mapper$Context) throws java.io.IOException
    {
        org.apache.mahout.cf.taste.hadoop.als.SolveExplicitFeedbackMapper r0;
        org.apache.hadoop.mapreduce.Mapper$Context r1;
        org.apache.mahout.math.map.OpenIntObjectHashMap $r2;

        r0 := @this: org.apache.mahout.cf.taste.hadoop.als.SolveExplicitFeedbackMapper;

        r1 := @parameter0: org.apache.hadoop.mapreduce.Mapper$Context;

        $r2 = virtualinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.SolveExplicitFeedbackMapper: org.apache.mahout.math.map.OpenIntObjectHashMap createSharedInstance(org.apache.hadoop.mapreduce.Mapper$Context)>(r1);

        return $r2;
    }

    protected volatile void map(java.lang.Object, java.lang.Object, org.apache.hadoop.mapreduce.Mapper$Context) throws java.io.IOException, java.lang.InterruptedException
    {
        org.apache.mahout.cf.taste.hadoop.als.SolveExplicitFeedbackMapper r0;
        java.lang.Object r1, r2;
        org.apache.hadoop.mapreduce.Mapper$Context r3;
        org.apache.mahout.math.VectorWritable $r4;
        org.apache.hadoop.io.IntWritable $r5;

        r0 := @this: org.apache.mahout.cf.taste.hadoop.als.SolveExplicitFeedbackMapper;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: org.apache.hadoop.mapreduce.Mapper$Context;

        $r5 = (org.apache.hadoop.io.IntWritable) r1;

        $r4 = (org.apache.mahout.math.VectorWritable) r2;

        virtualinvoke r0.<org.apache.mahout.cf.taste.hadoop.als.SolveExplicitFeedbackMapper: void map(org.apache.hadoop.io.IntWritable,org.apache.mahout.math.VectorWritable,org.apache.hadoop.mapreduce.Mapper$Context)>($r5, $r4, r3);

        return;
    }
}
