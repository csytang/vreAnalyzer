public class org.apache.mahout.clustering.canopy.CanopyClusterer extends java.lang.Object
{
    private static final org.slf4j.Logger log;
    private int nextCanopyId;
    private double t1;
    private double t2;
    private double t3;
    private double t4;
    private org.apache.mahout.common.distance.DistanceMeasure measure;

    public void <init>(org.apache.mahout.common.distance.DistanceMeasure, double, double)
    {
        org.apache.mahout.clustering.canopy.CanopyClusterer r0;
        org.apache.mahout.common.distance.DistanceMeasure r1;
        double d0, d1;

        r0 := @this: org.apache.mahout.clustering.canopy.CanopyClusterer;

        r1 := @parameter0: org.apache.mahout.common.distance.DistanceMeasure;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.mahout.clustering.canopy.CanopyClusterer: double t1> = d0;

        r0.<org.apache.mahout.clustering.canopy.CanopyClusterer: double t2> = d1;

        r0.<org.apache.mahout.clustering.canopy.CanopyClusterer: double t3> = d0;

        r0.<org.apache.mahout.clustering.canopy.CanopyClusterer: double t4> = d1;

        r0.<org.apache.mahout.clustering.canopy.CanopyClusterer: org.apache.mahout.common.distance.DistanceMeasure measure> = r1;

        return;
    }

    public double getT1()
    {
        org.apache.mahout.clustering.canopy.CanopyClusterer r0;
        double $d0;

        r0 := @this: org.apache.mahout.clustering.canopy.CanopyClusterer;

        $d0 = r0.<org.apache.mahout.clustering.canopy.CanopyClusterer: double t1>;

        return $d0;
    }

    public double getT2()
    {
        org.apache.mahout.clustering.canopy.CanopyClusterer r0;
        double $d0;

        r0 := @this: org.apache.mahout.clustering.canopy.CanopyClusterer;

        $d0 = r0.<org.apache.mahout.clustering.canopy.CanopyClusterer: double t2>;

        return $d0;
    }

    public double getT3()
    {
        org.apache.mahout.clustering.canopy.CanopyClusterer r0;
        double $d0;

        r0 := @this: org.apache.mahout.clustering.canopy.CanopyClusterer;

        $d0 = r0.<org.apache.mahout.clustering.canopy.CanopyClusterer: double t3>;

        return $d0;
    }

    public double getT4()
    {
        org.apache.mahout.clustering.canopy.CanopyClusterer r0;
        double $d0;

        r0 := @this: org.apache.mahout.clustering.canopy.CanopyClusterer;

        $d0 = r0.<org.apache.mahout.clustering.canopy.CanopyClusterer: double t4>;

        return $d0;
    }

    public void useT3T4()
    {
        org.apache.mahout.clustering.canopy.CanopyClusterer r0;
        double $d0, $d1;

        r0 := @this: org.apache.mahout.clustering.canopy.CanopyClusterer;

        $d0 = r0.<org.apache.mahout.clustering.canopy.CanopyClusterer: double t3>;

        r0.<org.apache.mahout.clustering.canopy.CanopyClusterer: double t1> = $d0;

        $d1 = r0.<org.apache.mahout.clustering.canopy.CanopyClusterer: double t4>;

        r0.<org.apache.mahout.clustering.canopy.CanopyClusterer: double t2> = $d1;

        return;
    }

    public void addPointToCanopies(org.apache.mahout.math.Vector, java.util.Collection)
    {
        org.apache.mahout.clustering.canopy.CanopyClusterer r0;
        org.apache.mahout.math.Vector r1, $r13, $r15;
        java.util.Collection r2;
        java.util.Iterator r3;
        org.apache.mahout.clustering.canopy.Canopy r4, $r6;
        double d0, $d1, $d2, $d3;
        boolean $z0, $z1, $z3, z4, $z5;
        org.slf4j.Logger $r5, $r8, $r16, $r17;
        int $i0, $i1, $i2;
        org.apache.mahout.common.distance.DistanceMeasure $r7, $r14;
        java.lang.String $r9, $r18, $r19;
        java.lang.Integer $r10;
        java.lang.Object $r12;
        byte $b3, $b4;

        r0 := @this: org.apache.mahout.clustering.canopy.CanopyClusterer;

        r1 := @parameter0: org.apache.mahout.math.Vector;

        r2 := @parameter1: java.util.Collection;

        z4 = 0;

        r3 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r12 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.mahout.clustering.canopy.Canopy) $r12;

        $r14 = r0.<org.apache.mahout.clustering.canopy.CanopyClusterer: org.apache.mahout.common.distance.DistanceMeasure measure>;

        $r13 = virtualinvoke r4.<org.apache.mahout.clustering.canopy.Canopy: org.apache.mahout.math.Vector getCenter()>();

        $d1 = interfaceinvoke $r13.<org.apache.mahout.math.Vector: double getLengthSquared()>();

        $r15 = virtualinvoke r4.<org.apache.mahout.clustering.canopy.Canopy: org.apache.mahout.math.Vector getCenter()>();

        d0 = interfaceinvoke $r14.<org.apache.mahout.common.distance.DistanceMeasure: double distance(double,org.apache.mahout.math.Vector,org.apache.mahout.math.Vector)>($d1, $r15, r1);

        $d2 = r0.<org.apache.mahout.clustering.canopy.CanopyClusterer: double t1>;

        $b3 = d0 cmpg $d2;

        if $b3 >= 0 goto label3;

        $r16 = <org.apache.mahout.clustering.canopy.CanopyClusterer: org.slf4j.Logger log>;

        $z3 = interfaceinvoke $r16.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z3 == 0 goto label2;

        $r17 = <org.apache.mahout.clustering.canopy.CanopyClusterer: org.slf4j.Logger log>;

        $r18 = staticinvoke <org.apache.mahout.clustering.AbstractCluster: java.lang.String formatVector(org.apache.mahout.math.Vector,java.lang.String[])>(r1, null);

        $r19 = virtualinvoke r4.<org.apache.mahout.clustering.canopy.Canopy: java.lang.String getIdentifier()>();

        interfaceinvoke $r17.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Added point: {} to canopy: {}", $r18, $r19);

     label2:
        virtualinvoke r4.<org.apache.mahout.clustering.canopy.Canopy: void observe(org.apache.mahout.math.Vector)>(r1);

     label3:
        if z4 != 0 goto label4;

        $d3 = r0.<org.apache.mahout.clustering.canopy.CanopyClusterer: double t2>;

        $b4 = d0 cmpg $d3;

        if $b4 >= 0 goto label5;

     label4:
        $z5 = 1;

        goto label6;

     label5:
        $z5 = 0;

     label6:
        z4 = $z5;

        goto label1;

     label7:
        if z4 != 0 goto label9;

        $r5 = <org.apache.mahout.clustering.canopy.CanopyClusterer: org.slf4j.Logger log>;

        $z1 = interfaceinvoke $r5.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z1 == 0 goto label8;

        $r8 = <org.apache.mahout.clustering.canopy.CanopyClusterer: org.slf4j.Logger log>;

        $i2 = r0.<org.apache.mahout.clustering.canopy.CanopyClusterer: int nextCanopyId>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r9 = staticinvoke <org.apache.mahout.clustering.AbstractCluster: java.lang.String formatVector(org.apache.mahout.math.Vector,java.lang.String[])>(r1, null);

        interfaceinvoke $r8.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Created new Canopy:{} at center:{}", $r10, $r9);

     label8:
        $r6 = new org.apache.mahout.clustering.canopy.Canopy;

        $i0 = r0.<org.apache.mahout.clustering.canopy.CanopyClusterer: int nextCanopyId>;

        $i1 = $i0 + 1;

        r0.<org.apache.mahout.clustering.canopy.CanopyClusterer: int nextCanopyId> = $i1;

        $r7 = r0.<org.apache.mahout.clustering.canopy.CanopyClusterer: org.apache.mahout.common.distance.DistanceMeasure measure>;

        specialinvoke $r6.<org.apache.mahout.clustering.canopy.Canopy: void <init>(org.apache.mahout.math.Vector,int,org.apache.mahout.common.distance.DistanceMeasure)>(r1, $i0, $r7);

        interfaceinvoke r2.<java.util.Collection: boolean add(java.lang.Object)>($r6);

     label9:
        return;
    }

    public boolean canopyCovers(org.apache.mahout.clustering.canopy.Canopy, org.apache.mahout.math.Vector)
    {
        org.apache.mahout.clustering.canopy.CanopyClusterer r0;
        org.apache.mahout.clustering.canopy.Canopy r1;
        org.apache.mahout.math.Vector r2, $r4, $r5;
        org.apache.mahout.common.distance.DistanceMeasure $r3;
        double $d0, $d1, $d2;
        byte $b0;
        boolean $z0;

        r0 := @this: org.apache.mahout.clustering.canopy.CanopyClusterer;

        r1 := @parameter0: org.apache.mahout.clustering.canopy.Canopy;

        r2 := @parameter1: org.apache.mahout.math.Vector;

        $r3 = r0.<org.apache.mahout.clustering.canopy.CanopyClusterer: org.apache.mahout.common.distance.DistanceMeasure measure>;

        $r4 = virtualinvoke r1.<org.apache.mahout.clustering.canopy.Canopy: org.apache.mahout.math.Vector getCenter()>();

        $d0 = interfaceinvoke $r4.<org.apache.mahout.math.Vector: double getLengthSquared()>();

        $r5 = virtualinvoke r1.<org.apache.mahout.clustering.canopy.Canopy: org.apache.mahout.math.Vector getCenter()>();

        $d1 = interfaceinvoke $r3.<org.apache.mahout.common.distance.DistanceMeasure: double distance(double,org.apache.mahout.math.Vector,org.apache.mahout.math.Vector)>($d0, $r5, r2);

        $d2 = r0.<org.apache.mahout.clustering.canopy.CanopyClusterer: double t1>;

        $b0 = $d1 cmpg $d2;

        if $b0 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static java.util.List createCanopies(java.util.List, org.apache.mahout.common.distance.DistanceMeasure, double, double)
    {
        java.util.List r0;
        org.apache.mahout.common.distance.DistanceMeasure r1;
        double d0, d1, d2;
        java.util.ArrayList r2;
        java.util.Iterator r3, r11;
        org.apache.mahout.math.Vector r4, r10;
        boolean $z0, $z1, $z3;
        java.lang.Object $r6, $r8, $r9;
        int $i0, i3;
        org.apache.mahout.clustering.canopy.Canopy $r7, r12;
        byte $b1, $b2;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: org.apache.mahout.common.distance.DistanceMeasure;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        r2 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

        i3 = 0;

     label1:
        $z0 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label6;

        r3 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.mahout.math.Vector) $r6;

        interfaceinvoke r3.<java.util.Iterator: void remove()>();

        $r7 = new org.apache.mahout.clustering.canopy.Canopy;

        $i0 = i3;

        i3 = i3 + 1;

        specialinvoke $r7.<org.apache.mahout.clustering.canopy.Canopy: void <init>(org.apache.mahout.math.Vector,int,org.apache.mahout.common.distance.DistanceMeasure)>(r4, $i0, r1);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r7);

     label2:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.apache.mahout.math.Vector) $r9;

        d2 = interfaceinvoke r1.<org.apache.mahout.common.distance.DistanceMeasure: double distance(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector)>(r4, r10);

        $b1 = d2 cmpg d0;

        if $b1 >= 0 goto label3;

        virtualinvoke $r7.<org.apache.mahout.clustering.canopy.Canopy: void observe(org.apache.mahout.math.Vector)>(r10);

     label3:
        $b2 = d2 cmpg d1;

        if $b2 >= 0 goto label2;

        interfaceinvoke r3.<java.util.Iterator: void remove()>();

        goto label2;

     label4:
        r11 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z3 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label1;

        $r8 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        r12 = (org.apache.mahout.clustering.canopy.Canopy) $r8;

        virtualinvoke r12.<org.apache.mahout.clustering.canopy.Canopy: void computeParameters()>();

        goto label5;

     label6:
        return r2;
    }

    public static java.util.List getCenters(java.lang.Iterable)
    {
        java.lang.Iterable r0;
        java.util.ArrayList r1;
        java.util.Iterator r2;
        org.apache.mahout.clustering.canopy.Canopy r3;
        boolean $z0;
        java.lang.Object $r4;
        org.apache.mahout.math.Vector $r5;

        r0 := @parameter0: java.lang.Iterable;

        r1 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

        r2 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.mahout.clustering.canopy.Canopy) $r4;

        $r5 = virtualinvoke r3.<org.apache.mahout.clustering.canopy.Canopy: org.apache.mahout.math.Vector getCenter()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r5);

        goto label1;

     label2:
        return r1;
    }

    public static void updateCentroids(java.lang.Iterable)
    {
        java.lang.Iterable r0;
        java.util.Iterator r1;
        org.apache.mahout.clustering.canopy.Canopy r2;
        boolean $z0;
        java.lang.Object $r3;

        r0 := @parameter0: java.lang.Iterable;

        r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (org.apache.mahout.clustering.canopy.Canopy) $r3;

        virtualinvoke r2.<org.apache.mahout.clustering.canopy.Canopy: void computeParameters()>();

        goto label1;

     label2:
        return;
    }

    public void setT3(double)
    {
        org.apache.mahout.clustering.canopy.CanopyClusterer r0;
        double d0;

        r0 := @this: org.apache.mahout.clustering.canopy.CanopyClusterer;

        d0 := @parameter0: double;

        r0.<org.apache.mahout.clustering.canopy.CanopyClusterer: double t3> = d0;

        return;
    }

    public void setT4(double)
    {
        org.apache.mahout.clustering.canopy.CanopyClusterer r0;
        double d0;

        r0 := @this: org.apache.mahout.clustering.canopy.CanopyClusterer;

        d0 := @parameter0: double;

        r0.<org.apache.mahout.clustering.canopy.CanopyClusterer: double t4> = d0;

        return;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "org/apache/mahout/clustering/canopy/CanopyClusterer");

        <org.apache.mahout.clustering.canopy.CanopyClusterer: org.slf4j.Logger log> = $r0;

        return;
    }
}
