public class org.apache.mahout.classifier.sgd.PassiveAggressive extends org.apache.mahout.classifier.AbstractVectorClassifier implements org.apache.mahout.classifier.OnlineLearner, org.apache.hadoop.io.Writable
{
    private static final org.slf4j.Logger log;
    public static final int WRITABLE_VERSION;
    private double learningRate;
    private int lossCount;
    private double lossSum;
    private org.apache.mahout.math.Matrix weights;
    private int numCategories;

    public void <init>(int, int)
    {
        org.apache.mahout.classifier.sgd.PassiveAggressive r0;
        int i0, i1;
        org.apache.mahout.math.DenseMatrix $r1;
        org.apache.mahout.math.Matrix $r2;

        r0 := @this: org.apache.mahout.classifier.sgd.PassiveAggressive;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<org.apache.mahout.classifier.AbstractVectorClassifier: void <init>()>();

        r0.<org.apache.mahout.classifier.sgd.PassiveAggressive: double learningRate> = 0.1;

        r0.<org.apache.mahout.classifier.sgd.PassiveAggressive: int lossCount> = 0;

        r0.<org.apache.mahout.classifier.sgd.PassiveAggressive: double lossSum> = 0.0;

        r0.<org.apache.mahout.classifier.sgd.PassiveAggressive: int numCategories> = i0;

        $r1 = new org.apache.mahout.math.DenseMatrix;

        specialinvoke $r1.<org.apache.mahout.math.DenseMatrix: void <init>(int,int)>(i0, i1);

        r0.<org.apache.mahout.classifier.sgd.PassiveAggressive: org.apache.mahout.math.Matrix weights> = $r1;

        $r2 = r0.<org.apache.mahout.classifier.sgd.PassiveAggressive: org.apache.mahout.math.Matrix weights>;

        interfaceinvoke $r2.<org.apache.mahout.math.Matrix: org.apache.mahout.math.Matrix assign(double)>(0.0);

        return;
    }

    public org.apache.mahout.classifier.sgd.PassiveAggressive learningRate(double)
    {
        org.apache.mahout.classifier.sgd.PassiveAggressive r0;
        double d0;

        r0 := @this: org.apache.mahout.classifier.sgd.PassiveAggressive;

        d0 := @parameter0: double;

        r0.<org.apache.mahout.classifier.sgd.PassiveAggressive: double learningRate> = d0;

        return r0;
    }

    public void copyFrom(org.apache.mahout.classifier.sgd.PassiveAggressive)
    {
        org.apache.mahout.classifier.sgd.PassiveAggressive r0, r1;
        double $d0;
        int $i0;
        org.apache.mahout.math.Matrix $r2;

        r0 := @this: org.apache.mahout.classifier.sgd.PassiveAggressive;

        r1 := @parameter0: org.apache.mahout.classifier.sgd.PassiveAggressive;

        $d0 = r1.<org.apache.mahout.classifier.sgd.PassiveAggressive: double learningRate>;

        r0.<org.apache.mahout.classifier.sgd.PassiveAggressive: double learningRate> = $d0;

        $i0 = r1.<org.apache.mahout.classifier.sgd.PassiveAggressive: int numCategories>;

        r0.<org.apache.mahout.classifier.sgd.PassiveAggressive: int numCategories> = $i0;

        $r2 = r1.<org.apache.mahout.classifier.sgd.PassiveAggressive: org.apache.mahout.math.Matrix weights>;

        r0.<org.apache.mahout.classifier.sgd.PassiveAggressive: org.apache.mahout.math.Matrix weights> = $r2;

        return;
    }

    public int numCategories()
    {
        org.apache.mahout.classifier.sgd.PassiveAggressive r0;
        int $i0;

        r0 := @this: org.apache.mahout.classifier.sgd.PassiveAggressive;

        $i0 = r0.<org.apache.mahout.classifier.sgd.PassiveAggressive: int numCategories>;

        return $i0;
    }

    public org.apache.mahout.math.Vector classify(org.apache.mahout.math.Vector)
    {
        org.apache.mahout.classifier.sgd.PassiveAggressive r0;
        org.apache.mahout.math.Vector r1, $r3, $r6, r7, r8;
        double d0, $d1;
        org.apache.mahout.math.function.DoubleFunction $r2, $r4;
        int $i0, $i1;

        r0 := @this: org.apache.mahout.classifier.sgd.PassiveAggressive;

        r1 := @parameter0: org.apache.mahout.math.Vector;

        r7 = virtualinvoke r0.<org.apache.mahout.classifier.sgd.PassiveAggressive: org.apache.mahout.math.Vector classifyNoLink(org.apache.mahout.math.Vector)>(r1);

        d0 = interfaceinvoke r7.<org.apache.mahout.math.Vector: double maxValue()>();

        $r2 = staticinvoke <org.apache.mahout.math.function.Functions: org.apache.mahout.math.function.DoubleFunction minus(double)>(d0);

        $r3 = interfaceinvoke r7.<org.apache.mahout.math.Vector: org.apache.mahout.math.Vector assign(org.apache.mahout.math.function.DoubleFunction)>($r2);

        $r4 = <org.apache.mahout.math.function.Functions: org.apache.mahout.math.function.DoubleFunction EXP>;

        interfaceinvoke $r3.<org.apache.mahout.math.Vector: org.apache.mahout.math.Vector assign(org.apache.mahout.math.function.DoubleFunction)>($r4);

        $d1 = interfaceinvoke r7.<org.apache.mahout.math.Vector: double norm(double)>(1.0);

        r8 = interfaceinvoke r7.<org.apache.mahout.math.Vector: org.apache.mahout.math.Vector divide(double)>($d1);

        $i0 = interfaceinvoke r8.<org.apache.mahout.math.Vector: int size()>();

        $i1 = $i0 - 1;

        $r6 = interfaceinvoke r8.<org.apache.mahout.math.Vector: org.apache.mahout.math.Vector viewPart(int,int)>(1, $i1);

        return $r6;
    }

    public org.apache.mahout.math.Vector classifyNoLink(org.apache.mahout.math.Vector)
    {
        org.apache.mahout.classifier.sgd.PassiveAggressive r0;
        org.apache.mahout.math.Vector r1, $r8;
        org.apache.mahout.math.DenseVector $r3;
        org.apache.mahout.math.Matrix $r4, $r6, $r7;
        int $i0, $i1, i2;
        double $d0;

        r0 := @this: org.apache.mahout.classifier.sgd.PassiveAggressive;

        r1 := @parameter0: org.apache.mahout.math.Vector;

        $r3 = new org.apache.mahout.math.DenseVector;

        $r4 = r0.<org.apache.mahout.classifier.sgd.PassiveAggressive: org.apache.mahout.math.Matrix weights>;

        $i0 = interfaceinvoke $r4.<org.apache.mahout.math.Matrix: int numRows()>();

        specialinvoke $r3.<org.apache.mahout.math.DenseVector: void <init>(int)>($i0);

        interfaceinvoke $r3.<org.apache.mahout.math.Vector: org.apache.mahout.math.Vector assign(double)>(0.0);

        i2 = 0;

     label1:
        $r6 = r0.<org.apache.mahout.classifier.sgd.PassiveAggressive: org.apache.mahout.math.Matrix weights>;

        $i1 = interfaceinvoke $r6.<org.apache.mahout.math.Matrix: int numRows()>();

        if i2 >= $i1 goto label2;

        $r7 = r0.<org.apache.mahout.classifier.sgd.PassiveAggressive: org.apache.mahout.math.Matrix weights>;

        $r8 = interfaceinvoke $r7.<org.apache.mahout.math.Matrix: org.apache.mahout.math.Vector viewRow(int)>(i2);

        $d0 = interfaceinvoke $r8.<org.apache.mahout.math.Vector: double dot(org.apache.mahout.math.Vector)>(r1);

        interfaceinvoke $r3.<org.apache.mahout.math.Vector: void setQuick(int,double)>(i2, $d0);

        i2 = i2 + 1;

        goto label1;

     label2:
        return $r3;
    }

    public double classifyScalar(org.apache.mahout.math.Vector)
    {
        org.apache.mahout.classifier.sgd.PassiveAggressive r0;
        org.apache.mahout.math.Vector r1, $r3, $r5;
        org.apache.mahout.math.Matrix $r2, $r4;
        double $d0, $d1, d2, d3, d4, d5;

        r0 := @this: org.apache.mahout.classifier.sgd.PassiveAggressive;

        r1 := @parameter0: org.apache.mahout.math.Vector;

        $r2 = r0.<org.apache.mahout.classifier.sgd.PassiveAggressive: org.apache.mahout.math.Matrix weights>;

        $r3 = interfaceinvoke $r2.<org.apache.mahout.math.Matrix: org.apache.mahout.math.Vector viewRow(int)>(0);

        d2 = interfaceinvoke $r3.<org.apache.mahout.math.Vector: double dot(org.apache.mahout.math.Vector)>(r1);

        $r4 = r0.<org.apache.mahout.classifier.sgd.PassiveAggressive: org.apache.mahout.math.Matrix weights>;

        $r5 = interfaceinvoke $r4.<org.apache.mahout.math.Matrix: org.apache.mahout.math.Vector viewRow(int)>(1);

        d3 = interfaceinvoke $r5.<org.apache.mahout.math.Vector: double dot(org.apache.mahout.math.Vector)>(r1);

        d4 = staticinvoke <java.lang.Math: double exp(double)>(d2);

        d5 = staticinvoke <java.lang.Math: double exp(double)>(d3);

        $d0 = d4 + d5;

        $d1 = d5 / $d0;

        return $d1;
    }

    public int numFeatures()
    {
        org.apache.mahout.classifier.sgd.PassiveAggressive r0;
        org.apache.mahout.math.Matrix $r1;
        int $i0;

        r0 := @this: org.apache.mahout.classifier.sgd.PassiveAggressive;

        $r1 = r0.<org.apache.mahout.classifier.sgd.PassiveAggressive: org.apache.mahout.math.Matrix weights>;

        $i0 = interfaceinvoke $r1.<org.apache.mahout.math.Matrix: int numCols()>();

        return $i0;
    }

    public org.apache.mahout.classifier.sgd.PassiveAggressive copy()
    {
        org.apache.mahout.classifier.sgd.PassiveAggressive r0, $r2;
        int $i0, $i1;

        r0 := @this: org.apache.mahout.classifier.sgd.PassiveAggressive;

        virtualinvoke r0.<org.apache.mahout.classifier.sgd.PassiveAggressive: void close()>();

        $r2 = new org.apache.mahout.classifier.sgd.PassiveAggressive;

        $i0 = virtualinvoke r0.<org.apache.mahout.classifier.sgd.PassiveAggressive: int numCategories()>();

        $i1 = virtualinvoke r0.<org.apache.mahout.classifier.sgd.PassiveAggressive: int numFeatures()>();

        specialinvoke $r2.<org.apache.mahout.classifier.sgd.PassiveAggressive: void <init>(int,int)>($i0, $i1);

        virtualinvoke $r2.<org.apache.mahout.classifier.sgd.PassiveAggressive: void copyFrom(org.apache.mahout.classifier.sgd.PassiveAggressive)>(r0);

        return $r2;
    }

    public void write(java.io.DataOutput) throws java.io.IOException
    {
        org.apache.mahout.classifier.sgd.PassiveAggressive r0;
        java.io.DataOutput r1;
        double $d0;
        int $i0;
        org.apache.mahout.math.Matrix $r2;

        r0 := @this: org.apache.mahout.classifier.sgd.PassiveAggressive;

        r1 := @parameter0: java.io.DataOutput;

        interfaceinvoke r1.<java.io.DataOutput: void writeInt(int)>(1);

        $d0 = r0.<org.apache.mahout.classifier.sgd.PassiveAggressive: double learningRate>;

        interfaceinvoke r1.<java.io.DataOutput: void writeDouble(double)>($d0);

        $i0 = r0.<org.apache.mahout.classifier.sgd.PassiveAggressive: int numCategories>;

        interfaceinvoke r1.<java.io.DataOutput: void writeInt(int)>($i0);

        $r2 = r0.<org.apache.mahout.classifier.sgd.PassiveAggressive: org.apache.mahout.math.Matrix weights>;

        staticinvoke <org.apache.mahout.math.MatrixWritable: void writeMatrix(java.io.DataOutput,org.apache.mahout.math.Matrix)>(r1, $r2);

        return;
    }

    public void readFields(java.io.DataInput) throws java.io.IOException
    {
        org.apache.mahout.classifier.sgd.PassiveAggressive r0;
        java.io.DataInput r1;
        int i0, $i1;
        java.io.IOException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;
        double $d0;
        org.apache.mahout.math.Matrix $r7;

        r0 := @this: org.apache.mahout.classifier.sgd.PassiveAggressive;

        r1 := @parameter0: java.io.DataInput;

        i0 = interfaceinvoke r1.<java.io.DataInput: int readInt()>();

        if i0 != 1 goto label1;

        $d0 = interfaceinvoke r1.<java.io.DataInput: double readDouble()>();

        r0.<org.apache.mahout.classifier.sgd.PassiveAggressive: double learningRate> = $d0;

        $i1 = interfaceinvoke r1.<java.io.DataInput: int readInt()>();

        r0.<org.apache.mahout.classifier.sgd.PassiveAggressive: int numCategories> = $i1;

        $r7 = staticinvoke <org.apache.mahout.math.MatrixWritable: org.apache.mahout.math.Matrix readMatrix(java.io.DataInput)>(r1);

        r0.<org.apache.mahout.classifier.sgd.PassiveAggressive: org.apache.mahout.math.Matrix weights> = $r7;

        goto label2;

     label1:
        $r2 = new java.io.IOException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incorrect object version, wanted 1 got ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label2:
        return;
    }

    public void close()
    {
        org.apache.mahout.classifier.sgd.PassiveAggressive r0;

        r0 := @this: org.apache.mahout.classifier.sgd.PassiveAggressive;

        return;
    }

    public void train(long, java.lang.String, int, org.apache.mahout.math.Vector)
    {
        org.apache.mahout.classifier.sgd.PassiveAggressive r0;
        long l0;
        java.lang.String r1;
        int i1, $i2, $i3, $i5, $i6, i7;
        org.apache.mahout.math.Vector r2, r3, r4, $r10, $r12;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, d13;
        byte $b4;
        org.apache.mahout.math.Matrix $r6, $r15;
        org.apache.mahout.math.function.DoubleFunction $r7, $r9;
        org.apache.mahout.math.function.DoubleDoubleFunction $r11, $r13;
        org.slf4j.Logger $r18;
        java.lang.Double $r19;

        r0 := @this: org.apache.mahout.classifier.sgd.PassiveAggressive;

        l0 := @parameter0: long;

        r1 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        r2 := @parameter3: org.apache.mahout.math.Vector;

        $i2 = r0.<org.apache.mahout.classifier.sgd.PassiveAggressive: int lossCount>;

        if $i2 <= 1000 goto label1;

        $r18 = <org.apache.mahout.classifier.sgd.PassiveAggressive: org.slf4j.Logger log>;

        $d11 = r0.<org.apache.mahout.classifier.sgd.PassiveAggressive: double lossSum>;

        $i6 = r0.<org.apache.mahout.classifier.sgd.PassiveAggressive: int lossCount>;

        $d12 = (double) $i6;

        $d10 = $d11 / $d12;

        $r19 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d10);

        interfaceinvoke $r18.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Avg. Loss = {}", $r19);

        r0.<org.apache.mahout.classifier.sgd.PassiveAggressive: int lossCount> = 0;

        r0.<org.apache.mahout.classifier.sgd.PassiveAggressive: double lossSum> = 0.0;

     label1:
        r3 = virtualinvoke r0.<org.apache.mahout.classifier.sgd.PassiveAggressive: org.apache.mahout.math.Vector classifyNoLink(org.apache.mahout.math.Vector)>(r2);

        d0 = interfaceinvoke r3.<org.apache.mahout.math.Vector: double get(int)>(i1);

        i7 = interfaceinvoke r3.<org.apache.mahout.math.Vector: int maxValueIndex()>();

        d13 = interfaceinvoke r3.<org.apache.mahout.math.Vector: double get(int)>(i7);

        if i7 != i1 goto label2;

        interfaceinvoke r3.<org.apache.mahout.math.Vector: void setQuick(int,double)>(i7, #-Infinity);

        i7 = interfaceinvoke r3.<org.apache.mahout.math.Vector: int maxValueIndex()>();

        d13 = interfaceinvoke r3.<org.apache.mahout.math.Vector: double get(int)>(i7);

     label2:
        $d3 = 1.0 - d0;

        d1 = $d3 + d13;

        $i3 = r0.<org.apache.mahout.classifier.sgd.PassiveAggressive: int lossCount>;

        $i5 = $i3 + 1;

        r0.<org.apache.mahout.classifier.sgd.PassiveAggressive: int lossCount> = $i5;

        $b4 = d1 cmpl 0.0;

        if $b4 < 0 goto label3;

        $d5 = r0.<org.apache.mahout.classifier.sgd.PassiveAggressive: double lossSum>;

        $d4 = $d5 + d1;

        r0.<org.apache.mahout.classifier.sgd.PassiveAggressive: double lossSum> = $d4;

        $d7 = interfaceinvoke r2.<org.apache.mahout.math.Vector: double dot(org.apache.mahout.math.Vector)>(r2);

        $d6 = r0.<org.apache.mahout.classifier.sgd.PassiveAggressive: double learningRate>;

        $d9 = 0.5 / $d6;

        $d8 = $d7 + $d9;

        d2 = d1 / $d8;

        r4 = interfaceinvoke r2.<org.apache.mahout.math.Vector: org.apache.mahout.math.Vector clone()>();

        $r7 = staticinvoke <org.apache.mahout.math.function.Functions: org.apache.mahout.math.function.DoubleFunction mult(double)>(d2);

        interfaceinvoke r4.<org.apache.mahout.math.Vector: org.apache.mahout.math.Vector assign(org.apache.mahout.math.function.DoubleFunction)>($r7);

        $r6 = r0.<org.apache.mahout.classifier.sgd.PassiveAggressive: org.apache.mahout.math.Matrix weights>;

        $r10 = interfaceinvoke $r6.<org.apache.mahout.math.Matrix: org.apache.mahout.math.Vector viewRow(int)>(i1);

        $r11 = <org.apache.mahout.math.function.Functions: org.apache.mahout.math.function.DoubleDoubleFunction PLUS>;

        interfaceinvoke $r10.<org.apache.mahout.math.Vector: org.apache.mahout.math.Vector assign(org.apache.mahout.math.Vector,org.apache.mahout.math.function.DoubleDoubleFunction)>(r4, $r11);

        $r9 = staticinvoke <org.apache.mahout.math.function.Functions: org.apache.mahout.math.function.DoubleFunction mult(double)>(-1.0);

        interfaceinvoke r4.<org.apache.mahout.math.Vector: org.apache.mahout.math.Vector assign(org.apache.mahout.math.function.DoubleFunction)>($r9);

        $r15 = r0.<org.apache.mahout.classifier.sgd.PassiveAggressive: org.apache.mahout.math.Matrix weights>;

        $r12 = interfaceinvoke $r15.<org.apache.mahout.math.Matrix: org.apache.mahout.math.Vector viewRow(int)>(i7);

        $r13 = <org.apache.mahout.math.function.Functions: org.apache.mahout.math.function.DoubleDoubleFunction PLUS>;

        interfaceinvoke $r12.<org.apache.mahout.math.Vector: org.apache.mahout.math.Vector assign(org.apache.mahout.math.Vector,org.apache.mahout.math.function.DoubleDoubleFunction)>(r4, $r13);

     label3:
        return;
    }

    public void train(long, int, org.apache.mahout.math.Vector)
    {
        org.apache.mahout.classifier.sgd.PassiveAggressive r0;
        long l0;
        int i1;
        org.apache.mahout.math.Vector r1;

        r0 := @this: org.apache.mahout.classifier.sgd.PassiveAggressive;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        r1 := @parameter2: org.apache.mahout.math.Vector;

        virtualinvoke r0.<org.apache.mahout.classifier.sgd.PassiveAggressive: void train(long,java.lang.String,int,org.apache.mahout.math.Vector)>(l0, null, i1, r1);

        return;
    }

    public void train(int, org.apache.mahout.math.Vector)
    {
        org.apache.mahout.classifier.sgd.PassiveAggressive r0;
        int i0;
        org.apache.mahout.math.Vector r1;

        r0 := @this: org.apache.mahout.classifier.sgd.PassiveAggressive;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.mahout.math.Vector;

        virtualinvoke r0.<org.apache.mahout.classifier.sgd.PassiveAggressive: void train(long,java.lang.String,int,org.apache.mahout.math.Vector)>(0L, null, i0, r1);

        return;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        <org.apache.mahout.classifier.sgd.PassiveAggressive: int WRITABLE_VERSION> = 1;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "org/apache/mahout/classifier/sgd/PassiveAggressive");

        <org.apache.mahout.classifier.sgd.PassiveAggressive: org.slf4j.Logger log> = $r0;

        return;
    }
}
