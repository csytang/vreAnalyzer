public final class org.apache.mahout.clustering.spectral.VectorCache extends java.lang.Object
{
    private static final org.slf4j.Logger log;

    private void <init>()
    {
        org.apache.mahout.clustering.spectral.VectorCache r0;

        r0 := @this: org.apache.mahout.clustering.spectral.VectorCache;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void save(org.apache.hadoop.io.Writable, org.apache.mahout.math.Vector, org.apache.hadoop.fs.Path, org.apache.hadoop.conf.Configuration, boolean, boolean) throws java.io.IOException
    {
        org.apache.hadoop.io.Writable r0;
        org.apache.mahout.math.Vector r1;
        org.apache.hadoop.conf.Configuration r2;
        boolean z0, z1;
        org.apache.hadoop.fs.FileSystem r3;
        java.net.URI $r7, $r9;
        java.net.URI[] $r8;
        org.apache.mahout.math.VectorWritable $r10;
        org.apache.hadoop.io.SequenceFile$Writer $r11;
        org.apache.hadoop.fs.Path[] $r12;
        java.lang.Throwable $r13, $r14, $r16, r19;
        org.apache.hadoop.fs.Path r17, r18;

        r0 := @parameter0: org.apache.hadoop.io.Writable;

        r1 := @parameter1: org.apache.mahout.math.Vector;

        r17 := @parameter2: org.apache.hadoop.fs.Path;

        r2 := @parameter3: org.apache.hadoop.conf.Configuration;

        z0 := @parameter4: boolean;

        z1 := @parameter5: boolean;

        $r7 = virtualinvoke r17.<org.apache.hadoop.fs.Path: java.net.URI toUri()>();

        r3 = staticinvoke <org.apache.hadoop.fs.FileSystem: org.apache.hadoop.fs.FileSystem get(java.net.URI,org.apache.hadoop.conf.Configuration)>($r7, r2);

        r18 = virtualinvoke r3.<org.apache.hadoop.fs.FileSystem: org.apache.hadoop.fs.Path makeQualified(org.apache.hadoop.fs.Path)>(r17);

        if z0 == 0 goto label01;

        $r12 = newarray (org.apache.hadoop.fs.Path)[1];

        $r12[0] = r18;

        staticinvoke <org.apache.mahout.common.HadoopUtil: void delete(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.Path[])>(r2, $r12);

     label01:
        $r8 = newarray (java.net.URI)[1];

        $r9 = virtualinvoke r18.<org.apache.hadoop.fs.Path: java.net.URI toUri()>();

        $r8[0] = $r9;

        staticinvoke <org.apache.hadoop.filecache.DistributedCache: void setCacheFiles(java.net.URI[],org.apache.hadoop.conf.Configuration)>($r8, r2);

        $r11 = new org.apache.hadoop.io.SequenceFile$Writer;

        specialinvoke $r11.<org.apache.hadoop.io.SequenceFile$Writer: void <init>(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.Path,java.lang.Class,java.lang.Class)>(r3, r2, r18, class "org/apache/hadoop/io/IntWritable", class "org/apache/mahout/math/VectorWritable");

        r19 = null;

     label02:
        $r10 = new org.apache.mahout.math.VectorWritable;

        specialinvoke $r10.<org.apache.mahout.math.VectorWritable: void <init>(org.apache.mahout.math.Vector)>(r1);

        virtualinvoke $r11.<org.apache.hadoop.io.SequenceFile$Writer: void append(org.apache.hadoop.io.Writable,org.apache.hadoop.io.Writable)>(r0, $r10);

     label03:
        if $r11 == null goto label12;

        virtualinvoke $r11.<org.apache.hadoop.io.SequenceFile$Writer: void close()>();

        goto label12;

     label04:
        $r16 := @caughtexception;

        r19 = $r16;

        throw $r16;

     label05:
        $r13 := @caughtexception;

     label06:
        if $r11 == null goto label11;

        if r19 == null goto label10;

     label07:
        virtualinvoke $r11.<org.apache.hadoop.io.SequenceFile$Writer: void close()>();

     label08:
        goto label11;

     label09:
        $r14 := @caughtexception;

        virtualinvoke r19.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r14);

        goto label11;

     label10:
        virtualinvoke $r11.<org.apache.hadoop.io.SequenceFile$Writer: void close()>();

     label11:
        throw $r13;

     label12:
        if z1 == 0 goto label13;

        virtualinvoke r3.<org.apache.hadoop.fs.FileSystem: boolean deleteOnExit(org.apache.hadoop.fs.Path)>(r18);

     label13:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label06 with label05;
    }

    public static void save(org.apache.hadoop.io.Writable, org.apache.mahout.math.Vector, org.apache.hadoop.fs.Path, org.apache.hadoop.conf.Configuration) throws java.io.IOException
    {
        org.apache.hadoop.io.Writable r0;
        org.apache.mahout.math.Vector r1;
        org.apache.hadoop.fs.Path r2;
        org.apache.hadoop.conf.Configuration r3;

        r0 := @parameter0: org.apache.hadoop.io.Writable;

        r1 := @parameter1: org.apache.mahout.math.Vector;

        r2 := @parameter2: org.apache.hadoop.fs.Path;

        r3 := @parameter3: org.apache.hadoop.conf.Configuration;

        staticinvoke <org.apache.mahout.clustering.spectral.VectorCache: void save(org.apache.hadoop.io.Writable,org.apache.mahout.math.Vector,org.apache.hadoop.fs.Path,org.apache.hadoop.conf.Configuration,boolean,boolean)>(r0, r1, r2, r3, 1, 1);

        return;
    }

    public static org.apache.mahout.math.Vector load(org.apache.hadoop.conf.Configuration) throws java.io.IOException
    {
        org.apache.hadoop.conf.Configuration r0;
        org.apache.hadoop.fs.Path[] r1;
        int $i0, $i1;
        org.slf4j.Logger $r2, $r5;
        boolean $z0;
        org.apache.hadoop.fs.Path $r3;
        org.apache.mahout.math.Vector $r4;
        java.lang.String $r6, $r12;
        java.io.IOException $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r11;

        r0 := @parameter0: org.apache.hadoop.conf.Configuration;

        r1 = staticinvoke <org.apache.mahout.common.HadoopUtil: org.apache.hadoop.fs.Path[] getCachedFiles(org.apache.hadoop.conf.Configuration)>(r0);

        $i0 = lengthof r1;

        if $i0 == 1 goto label1;

        $r7 = new java.io.IOException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot read Frequency list from Distributed Cache (");

        $i1 = lengthof r1;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>($r12);

        throw $r7;

     label1:
        $r2 = <org.apache.mahout.clustering.spectral.VectorCache: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r2.<org.slf4j.Logger: boolean isInfoEnabled()>();

        if $z0 == 0 goto label2;

        $r5 = <org.apache.mahout.clustering.spectral.VectorCache: org.slf4j.Logger log>;

        $r6 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(r1);

        interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Files are: {}", $r6);

     label2:
        $r3 = r1[0];

        $r4 = staticinvoke <org.apache.mahout.clustering.spectral.VectorCache: org.apache.mahout.math.Vector load(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.Path)>(r0, $r3);

        return $r4;
    }

    public static org.apache.mahout.math.Vector load(org.apache.hadoop.conf.Configuration, org.apache.hadoop.fs.Path) throws java.io.IOException
    {
        org.apache.hadoop.conf.Configuration r0;
        org.apache.hadoop.fs.Path r1;
        org.slf4j.Logger $r6;
        org.apache.mahout.common.iterator.sequencefile.SequenceFileValueIterator $r7;
        java.lang.Object $r8;
        org.apache.mahout.math.VectorWritable $r9;
        java.lang.Throwable $r11, $r12, $r13, r14;
        org.apache.mahout.math.Vector r15;

        r0 := @parameter0: org.apache.hadoop.conf.Configuration;

        r1 := @parameter1: org.apache.hadoop.fs.Path;

        $r6 = <org.apache.mahout.clustering.spectral.VectorCache: org.slf4j.Logger log>;

        interfaceinvoke $r6.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Loading vector from: {}", r1);

        $r7 = new org.apache.mahout.common.iterator.sequencefile.SequenceFileValueIterator;

        specialinvoke $r7.<org.apache.mahout.common.iterator.sequencefile.SequenceFileValueIterator: void <init>(org.apache.hadoop.fs.Path,boolean,org.apache.hadoop.conf.Configuration)>(r1, 1, r0);

        r14 = null;

     label01:
        $r8 = virtualinvoke $r7.<org.apache.mahout.common.iterator.sequencefile.SequenceFileValueIterator: java.lang.Object next()>();

        $r9 = (org.apache.mahout.math.VectorWritable) $r8;

        r15 = virtualinvoke $r9.<org.apache.mahout.math.VectorWritable: org.apache.mahout.math.Vector get()>();

     label02:
        if $r7 == null goto label03;

        virtualinvoke $r7.<org.apache.mahout.common.iterator.sequencefile.SequenceFileValueIterator: void close()>();

     label03:
        return r15;

     label04:
        $r13 := @caughtexception;

        r14 = $r13;

        throw $r13;

     label05:
        $r11 := @caughtexception;

     label06:
        if $r7 == null goto label11;

        if r14 == null goto label10;

     label07:
        virtualinvoke $r7.<org.apache.mahout.common.iterator.sequencefile.SequenceFileValueIterator: void close()>();

     label08:
        goto label11;

     label09:
        $r12 := @caughtexception;

        virtualinvoke r14.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r12);

        goto label11;

     label10:
        virtualinvoke $r7.<org.apache.mahout.common.iterator.sequencefile.SequenceFileValueIterator: void close()>();

     label11:
        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label06 with label05;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "org/apache/mahout/clustering/spectral/VectorCache");

        <org.apache.mahout.clustering.spectral.VectorCache: org.slf4j.Logger log> = $r0;

        return;
    }
}
