public class org.apache.mahout.vectorizer.tfidf.TFIDFPartialVectorReducer extends org.apache.hadoop.mapreduce.Reducer
{
    private final org.apache.mahout.math.map.OpenIntLongHashMap dictionary;
    private final org.apache.mahout.vectorizer.TFIDF tfidf;
    private int minDf;
    private long maxDf;
    private long vectorCount;
    private long featureCount;
    private boolean sequentialAccess;
    private boolean namedVector;

    public void <init>()
    {
        org.apache.mahout.vectorizer.tfidf.TFIDFPartialVectorReducer r0;
        org.apache.mahout.math.map.OpenIntLongHashMap $r1;
        org.apache.mahout.vectorizer.TFIDF $r2;

        r0 := @this: org.apache.mahout.vectorizer.tfidf.TFIDFPartialVectorReducer;

        specialinvoke r0.<org.apache.hadoop.mapreduce.Reducer: void <init>()>();

        $r1 = new org.apache.mahout.math.map.OpenIntLongHashMap;

        specialinvoke $r1.<org.apache.mahout.math.map.OpenIntLongHashMap: void <init>()>();

        r0.<org.apache.mahout.vectorizer.tfidf.TFIDFPartialVectorReducer: org.apache.mahout.math.map.OpenIntLongHashMap dictionary> = $r1;

        $r2 = new org.apache.mahout.vectorizer.TFIDF;

        specialinvoke $r2.<org.apache.mahout.vectorizer.TFIDF: void <init>()>();

        r0.<org.apache.mahout.vectorizer.tfidf.TFIDFPartialVectorReducer: org.apache.mahout.vectorizer.TFIDF tfidf> = $r2;

        r0.<org.apache.mahout.vectorizer.tfidf.TFIDFPartialVectorReducer: int minDf> = 1;

        r0.<org.apache.mahout.vectorizer.tfidf.TFIDFPartialVectorReducer: long maxDf> = -1L;

        r0.<org.apache.mahout.vectorizer.tfidf.TFIDFPartialVectorReducer: long vectorCount> = 1L;

        return;
    }

    protected void reduce(org.apache.hadoop.io.WritableComparable, java.lang.Iterable, org.apache.hadoop.mapreduce.Reducer$Context) throws java.io.IOException, java.lang.InterruptedException
    {
        org.apache.mahout.vectorizer.tfidf.TFIDFPartialVectorReducer r0;
        org.apache.hadoop.io.WritableComparable r1;
        java.lang.Iterable r2, $r10;
        org.apache.hadoop.mapreduce.Reducer$Context r3;
        java.util.Iterator r4, r20;
        org.apache.mahout.math.Vector r5, r19;
        org.apache.mahout.math.Vector$Element r6;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Object $r7, $r14;
        org.apache.mahout.math.VectorWritable $r8, $r11;
        long $l0, $l7, $l9, $l12, $l13, $l18, $l19, l21;
        org.apache.mahout.math.RandomAccessSparseVector $r9;
        int $i1, $i2, $i3, $i4, $i6, $i8, $i11, $i14, $i15, $i16, $i17;
        java.lang.String $r12;
        org.apache.mahout.math.NamedVector $r13;
        org.apache.mahout.math.map.OpenIntLongHashMap $r15, $r17;
        org.apache.mahout.math.SequentialAccessSparseVector $r16;
        byte $b5, $b10, $b20;
        org.apache.mahout.vectorizer.TFIDF $r18;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;

        r0 := @this: org.apache.mahout.vectorizer.tfidf.TFIDFPartialVectorReducer;

        r1 := @parameter0: org.apache.hadoop.io.WritableComparable;

        r2 := @parameter1: java.lang.Iterable;

        r3 := @parameter2: org.apache.hadoop.mapreduce.Reducer$Context;

        r4 = interfaceinvoke r2.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (org.apache.mahout.math.VectorWritable) $r7;

        r5 = virtualinvoke $r8.<org.apache.mahout.math.VectorWritable: org.apache.mahout.math.Vector get()>();

        $r9 = new org.apache.mahout.math.RandomAccessSparseVector;

        $l0 = r0.<org.apache.mahout.vectorizer.tfidf.TFIDFPartialVectorReducer: long featureCount>;

        $i2 = (int) $l0;

        $i1 = interfaceinvoke r5.<org.apache.mahout.math.Vector: int getNumNondefaultElements()>();

        specialinvoke $r9.<org.apache.mahout.math.RandomAccessSparseVector: void <init>(int,int)>($i2, $i1);

        r19 = $r9;

        $r10 = interfaceinvoke r5.<org.apache.mahout.math.Vector: java.lang.Iterable nonZeroes()>();

        r20 = interfaceinvoke $r10.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z4 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label6;

        $r14 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.mahout.math.Vector$Element) $r14;

        $r15 = r0.<org.apache.mahout.vectorizer.tfidf.TFIDFPartialVectorReducer: org.apache.mahout.math.map.OpenIntLongHashMap dictionary>;

        $i4 = interfaceinvoke r6.<org.apache.mahout.math.Vector$Element: int index()>();

        $z3 = virtualinvoke $r15.<org.apache.mahout.math.map.OpenIntLongHashMap: boolean containsKey(int)>($i4);

        if $z3 != 0 goto label3;

        goto label2;

     label3:
        $r17 = r0.<org.apache.mahout.vectorizer.tfidf.TFIDFPartialVectorReducer: org.apache.mahout.math.map.OpenIntLongHashMap dictionary>;

        $i3 = interfaceinvoke r6.<org.apache.mahout.math.Vector$Element: int index()>();

        l21 = virtualinvoke $r17.<org.apache.mahout.math.map.OpenIntLongHashMap: long get(int)>($i3);

        $l7 = r0.<org.apache.mahout.vectorizer.tfidf.TFIDFPartialVectorReducer: long maxDf>;

        $b5 = $l7 cmp -1L;

        if $b5 <= 0 goto label4;

        $d5 = (double) l21;

        $d2 = 100.0 * $d5;

        $l19 = r0.<org.apache.mahout.vectorizer.tfidf.TFIDFPartialVectorReducer: long vectorCount>;

        $d6 = (double) $l19;

        $d4 = $d2 / $d6;

        $l18 = r0.<org.apache.mahout.vectorizer.tfidf.TFIDFPartialVectorReducer: long maxDf>;

        $d3 = (double) $l18;

        $b20 = $d4 cmpl $d3;

        if $b20 <= 0 goto label4;

        goto label2;

     label4:
        $i6 = r0.<org.apache.mahout.vectorizer.tfidf.TFIDFPartialVectorReducer: int minDf>;

        $l9 = (long) $i6;

        $b10 = l21 cmp $l9;

        if $b10 >= 0 goto label5;

        $i17 = r0.<org.apache.mahout.vectorizer.tfidf.TFIDFPartialVectorReducer: int minDf>;

        l21 = (long) $i17;

     label5:
        $i8 = interfaceinvoke r6.<org.apache.mahout.math.Vector$Element: int index()>();

        $r18 = r0.<org.apache.mahout.vectorizer.tfidf.TFIDFPartialVectorReducer: org.apache.mahout.vectorizer.TFIDF tfidf>;

        $d0 = interfaceinvoke r6.<org.apache.mahout.math.Vector$Element: double get()>();

        $i14 = (int) $d0;

        $i15 = (int) l21;

        $l13 = r0.<org.apache.mahout.vectorizer.tfidf.TFIDFPartialVectorReducer: long featureCount>;

        $i16 = (int) $l13;

        $l12 = r0.<org.apache.mahout.vectorizer.tfidf.TFIDFPartialVectorReducer: long vectorCount>;

        $i11 = (int) $l12;

        $d1 = virtualinvoke $r18.<org.apache.mahout.vectorizer.TFIDF: double calculate(int,int,int,int)>($i14, $i15, $i16, $i11);

        interfaceinvoke $r9.<org.apache.mahout.math.Vector: void setQuick(int,double)>($i8, $d1);

        goto label2;

     label6:
        $z1 = r0.<org.apache.mahout.vectorizer.tfidf.TFIDFPartialVectorReducer: boolean sequentialAccess>;

        if $z1 == 0 goto label7;

        $r16 = new org.apache.mahout.math.SequentialAccessSparseVector;

        specialinvoke $r16.<org.apache.mahout.math.SequentialAccessSparseVector: void <init>(org.apache.mahout.math.Vector)>($r9);

        r19 = $r16;

     label7:
        $z2 = r0.<org.apache.mahout.vectorizer.tfidf.TFIDFPartialVectorReducer: boolean namedVector>;

        if $z2 == 0 goto label8;

        $r13 = new org.apache.mahout.math.NamedVector;

        $r12 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r13.<org.apache.mahout.math.NamedVector: void <init>(org.apache.mahout.math.Vector,java.lang.String)>(r19, $r12);

        r19 = $r13;

     label8:
        $r11 = new org.apache.mahout.math.VectorWritable;

        specialinvoke $r11.<org.apache.mahout.math.VectorWritable: void <init>(org.apache.mahout.math.Vector)>(r19);

        virtualinvoke r3.<org.apache.hadoop.mapreduce.Reducer$Context: void write(java.lang.Object,java.lang.Object)>(r1, $r11);

        return;
    }

    protected void setup(org.apache.hadoop.mapreduce.Reducer$Context) throws java.io.IOException, java.lang.InterruptedException
    {
        org.apache.mahout.vectorizer.tfidf.TFIDFPartialVectorReducer r0;
        org.apache.hadoop.mapreduce.Reducer$Context r1;
        org.apache.hadoop.conf.Configuration r2;
        java.net.URI[] r3;
        org.apache.hadoop.fs.Path r4;
        java.util.Iterator r5;
        org.apache.mahout.common.Pair r6;
        long $l0, $l1, $l3, $l5;
        int $i2, $i4;
        boolean $z0, $z1, $z2;
        org.apache.mahout.common.iterator.sequencefile.SequenceFileIterable $r7;
        java.lang.Object $r8, $r9, $r13;
        org.apache.mahout.math.map.OpenIntLongHashMap $r10;
        org.apache.hadoop.io.IntWritable $r11;
        org.apache.hadoop.io.LongWritable $r12;

        r0 := @this: org.apache.mahout.vectorizer.tfidf.TFIDFPartialVectorReducer;

        r1 := @parameter0: org.apache.hadoop.mapreduce.Reducer$Context;

        specialinvoke r0.<org.apache.hadoop.mapreduce.Reducer: void setup(org.apache.hadoop.mapreduce.Reducer$Context)>(r1);

        r2 = virtualinvoke r1.<org.apache.hadoop.mapreduce.Reducer$Context: org.apache.hadoop.conf.Configuration getConfiguration()>();

        $l0 = virtualinvoke r2.<org.apache.hadoop.conf.Configuration: long getLong(java.lang.String,long)>("vector.count", 1L);

        r0.<org.apache.mahout.vectorizer.tfidf.TFIDFPartialVectorReducer: long vectorCount> = $l0;

        $l1 = virtualinvoke r2.<org.apache.hadoop.conf.Configuration: long getLong(java.lang.String,long)>("feature.count", 1L);

        r0.<org.apache.mahout.vectorizer.tfidf.TFIDFPartialVectorReducer: long featureCount> = $l1;

        $i2 = virtualinvoke r2.<org.apache.hadoop.conf.Configuration: int getInt(java.lang.String,int)>("min.df", 1);

        r0.<org.apache.mahout.vectorizer.tfidf.TFIDFPartialVectorReducer: int minDf> = $i2;

        $l3 = virtualinvoke r2.<org.apache.hadoop.conf.Configuration: long getLong(java.lang.String,long)>("max.df", -1L);

        r0.<org.apache.mahout.vectorizer.tfidf.TFIDFPartialVectorReducer: long maxDf> = $l3;

        $z0 = virtualinvoke r2.<org.apache.hadoop.conf.Configuration: boolean getBoolean(java.lang.String,boolean)>("vector.sequentialAccess", 0);

        r0.<org.apache.mahout.vectorizer.tfidf.TFIDFPartialVectorReducer: boolean sequentialAccess> = $z0;

        $z1 = virtualinvoke r2.<org.apache.hadoop.conf.Configuration: boolean getBoolean(java.lang.String,boolean)>("vector.named", 0);

        r0.<org.apache.mahout.vectorizer.tfidf.TFIDFPartialVectorReducer: boolean namedVector> = $z1;

        r3 = staticinvoke <org.apache.hadoop.filecache.DistributedCache: java.net.URI[] getCacheFiles(org.apache.hadoop.conf.Configuration)>(r2);

        r4 = staticinvoke <org.apache.mahout.common.HadoopUtil: org.apache.hadoop.fs.Path findInCacheByPartOfFilename(java.lang.String,java.net.URI[])>("frequency.file-", r3);

        $r7 = new org.apache.mahout.common.iterator.sequencefile.SequenceFileIterable;

        specialinvoke $r7.<org.apache.mahout.common.iterator.sequencefile.SequenceFileIterable: void <init>(org.apache.hadoop.fs.Path,boolean,org.apache.hadoop.conf.Configuration)>(r4, 1, r2);

        r5 = virtualinvoke $r7.<org.apache.mahout.common.iterator.sequencefile.SequenceFileIterable: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        $r8 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.mahout.common.Pair) $r8;

        $r10 = r0.<org.apache.mahout.vectorizer.tfidf.TFIDFPartialVectorReducer: org.apache.mahout.math.map.OpenIntLongHashMap dictionary>;

        $r9 = virtualinvoke r6.<org.apache.mahout.common.Pair: java.lang.Object getFirst()>();

        $r11 = (org.apache.hadoop.io.IntWritable) $r9;

        $i4 = virtualinvoke $r11.<org.apache.hadoop.io.IntWritable: int get()>();

        $r13 = virtualinvoke r6.<org.apache.mahout.common.Pair: java.lang.Object getSecond()>();

        $r12 = (org.apache.hadoop.io.LongWritable) $r13;

        $l5 = virtualinvoke $r12.<org.apache.hadoop.io.LongWritable: long get()>();

        virtualinvoke $r10.<org.apache.mahout.math.map.OpenIntLongHashMap: boolean put(int,long)>($i4, $l5);

        goto label1;

     label2:
        return;
    }

    protected volatile void reduce(java.lang.Object, java.lang.Iterable, org.apache.hadoop.mapreduce.Reducer$Context) throws java.io.IOException, java.lang.InterruptedException
    {
        org.apache.mahout.vectorizer.tfidf.TFIDFPartialVectorReducer r0;
        java.lang.Object r1;
        java.lang.Iterable r2;
        org.apache.hadoop.mapreduce.Reducer$Context r3;
        org.apache.hadoop.io.WritableComparable $r4;

        r0 := @this: org.apache.mahout.vectorizer.tfidf.TFIDFPartialVectorReducer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Iterable;

        r3 := @parameter2: org.apache.hadoop.mapreduce.Reducer$Context;

        $r4 = (org.apache.hadoop.io.WritableComparable) r1;

        virtualinvoke r0.<org.apache.mahout.vectorizer.tfidf.TFIDFPartialVectorReducer: void reduce(org.apache.hadoop.io.WritableComparable,java.lang.Iterable,org.apache.hadoop.mapreduce.Reducer$Context)>($r4, r2, r3);

        return;
    }
}
