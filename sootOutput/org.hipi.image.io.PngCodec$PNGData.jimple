class org.hipi.image.io.PngCodec$PNGData extends java.lang.Object
{
    private int mNumberOfChunks;
    private org.hipi.image.io.PngCodec$PNGChunk[] mChunks;
    final org.hipi.image.io.PngCodec this$0;

    public void <init>(org.hipi.image.io.PngCodec)
    {
        org.hipi.image.io.PngCodec$PNGData r0;
        org.hipi.image.io.PngCodec r1;
        org.hipi.image.io.PngCodec$PNGChunk[] $r2;

        r0 := @this: org.hipi.image.io.PngCodec$PNGData;

        r1 := @parameter0: org.hipi.image.io.PngCodec;

        r0.<org.hipi.image.io.PngCodec$PNGData: org.hipi.image.io.PngCodec this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.hipi.image.io.PngCodec$PNGData: int mNumberOfChunks> = 0;

        $r2 = newarray (org.hipi.image.io.PngCodec$PNGChunk)[10];

        r0.<org.hipi.image.io.PngCodec$PNGData: org.hipi.image.io.PngCodec$PNGChunk[] mChunks> = $r2;

        return;
    }

    public void printAll()
    {
        org.hipi.image.io.PngCodec$PNGData r0;
        java.lang.StringBuilder $r1, $r3, $r4, $r7, $r9, $r13, $r14, $r16;
        java.io.PrintStream $r2, $r8;
        int $i0, $i1, i2;
        java.lang.String $r5, $r12, $r15;
        org.hipi.image.io.PngCodec$PNGChunk[] $r6, $r10;
        org.hipi.image.io.PngCodec$PNGChunk $r11;

        r0 := @this: org.hipi.image.io.PngCodec$PNGData;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("number of chunks: ");

        $i0 = r0.<org.hipi.image.io.PngCodec$PNGData: int mNumberOfChunks>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r5);

        i2 = 0;

     label1:
        $r6 = r0.<org.hipi.image.io.PngCodec$PNGData: org.hipi.image.io.PngCodec$PNGChunk[] mChunks>;

        $i1 = lengthof $r6;

        if i2 >= $i1 goto label2;

        $r8 = <java.lang.System: java.io.PrintStream out>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r10 = r0.<org.hipi.image.io.PngCodec$PNGData: org.hipi.image.io.PngCodec$PNGChunk[] mChunks>;

        $r11 = $r10[i2];

        $r12 = virtualinvoke $r11.<org.hipi.image.io.PngCodec$PNGChunk: java.lang.String getTypeString()>();

        $r14 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r15);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public void add(org.hipi.image.io.PngCodec$PNGChunk)
    {
        org.hipi.image.io.PngCodec$PNGData r0;
        org.hipi.image.io.PngCodec$PNGChunk r1;
        org.hipi.image.io.PngCodec$PNGChunk[] r2, $r3, $r4, $r5, $r6, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: org.hipi.image.io.PngCodec$PNGData;

        r1 := @parameter0: org.hipi.image.io.PngCodec$PNGChunk;

        $r3 = r0.<org.hipi.image.io.PngCodec$PNGData: org.hipi.image.io.PngCodec$PNGChunk[] mChunks>;

        $i0 = r0.<org.hipi.image.io.PngCodec$PNGData: int mNumberOfChunks>;

        $i1 = $i0 + 1;

        r0.<org.hipi.image.io.PngCodec$PNGData: int mNumberOfChunks> = $i1;

        $r3[$i0] = r1;

        $i3 = r0.<org.hipi.image.io.PngCodec$PNGData: int mNumberOfChunks>;

        $r4 = r0.<org.hipi.image.io.PngCodec$PNGData: org.hipi.image.io.PngCodec$PNGChunk[] mChunks>;

        $i2 = lengthof $r4;

        if $i3 < $i2 goto label1;

        $r5 = r0.<org.hipi.image.io.PngCodec$PNGData: org.hipi.image.io.PngCodec$PNGChunk[] mChunks>;

        $i4 = lengthof $r5;

        $i5 = $i4 + 10;

        r2 = newarray (org.hipi.image.io.PngCodec$PNGChunk)[$i5];

        $r7 = r0.<org.hipi.image.io.PngCodec$PNGData: org.hipi.image.io.PngCodec$PNGChunk[] mChunks>;

        $r6 = r0.<org.hipi.image.io.PngCodec$PNGData: org.hipi.image.io.PngCodec$PNGChunk[] mChunks>;

        $i6 = lengthof $r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, r2, 0, $i6);

        r0.<org.hipi.image.io.PngCodec$PNGData: org.hipi.image.io.PngCodec$PNGChunk[] mChunks> = r2;

     label1:
        return;
    }

    public long getWidth()
    {
        org.hipi.image.io.PngCodec$PNGData r0;
        org.hipi.image.io.PngCodec$PNGChunk $r1;
        long $l0;

        r0 := @this: org.hipi.image.io.PngCodec$PNGData;

        $r1 = virtualinvoke r0.<org.hipi.image.io.PngCodec$PNGData: org.hipi.image.io.PngCodec$PNGChunk getChunk(java.lang.String)>("IHDR");

        $l0 = virtualinvoke $r1.<org.hipi.image.io.PngCodec$PNGChunk: long getUnsignedInt(int)>(0);

        return $l0;
    }

    public long getHeight()
    {
        org.hipi.image.io.PngCodec$PNGData r0;
        org.hipi.image.io.PngCodec$PNGChunk $r1;
        long $l0;

        r0 := @this: org.hipi.image.io.PngCodec$PNGData;

        $r1 = virtualinvoke r0.<org.hipi.image.io.PngCodec$PNGData: org.hipi.image.io.PngCodec$PNGChunk getChunk(java.lang.String)>("IHDR");

        $l0 = virtualinvoke $r1.<org.hipi.image.io.PngCodec$PNGChunk: long getUnsignedInt(int)>(4);

        return $l0;
    }

    public short getBitsPerPixel()
    {
        org.hipi.image.io.PngCodec$PNGData r0;
        org.hipi.image.io.PngCodec$PNGChunk $r1;
        short $s0;

        r0 := @this: org.hipi.image.io.PngCodec$PNGData;

        $r1 = virtualinvoke r0.<org.hipi.image.io.PngCodec$PNGData: org.hipi.image.io.PngCodec$PNGChunk getChunk(java.lang.String)>("IHDR");

        $s0 = virtualinvoke $r1.<org.hipi.image.io.PngCodec$PNGChunk: short getUnsignedByte(int)>(8);

        return $s0;
    }

    public short getColorType()
    {
        org.hipi.image.io.PngCodec$PNGData r0;
        org.hipi.image.io.PngCodec$PNGChunk $r1;
        short $s0;

        r0 := @this: org.hipi.image.io.PngCodec$PNGData;

        $r1 = virtualinvoke r0.<org.hipi.image.io.PngCodec$PNGData: org.hipi.image.io.PngCodec$PNGChunk getChunk(java.lang.String)>("IHDR");

        $s0 = virtualinvoke $r1.<org.hipi.image.io.PngCodec$PNGChunk: short getUnsignedByte(int)>(9);

        return $s0;
    }

    public short getCompression()
    {
        org.hipi.image.io.PngCodec$PNGData r0;
        org.hipi.image.io.PngCodec$PNGChunk $r1;
        short $s0;

        r0 := @this: org.hipi.image.io.PngCodec$PNGData;

        $r1 = virtualinvoke r0.<org.hipi.image.io.PngCodec$PNGData: org.hipi.image.io.PngCodec$PNGChunk getChunk(java.lang.String)>("IHDR");

        $s0 = virtualinvoke $r1.<org.hipi.image.io.PngCodec$PNGChunk: short getUnsignedByte(int)>(10);

        return $s0;
    }

    public short getFilter()
    {
        org.hipi.image.io.PngCodec$PNGData r0;
        org.hipi.image.io.PngCodec$PNGChunk $r1;
        short $s0;

        r0 := @this: org.hipi.image.io.PngCodec$PNGData;

        $r1 = virtualinvoke r0.<org.hipi.image.io.PngCodec$PNGData: org.hipi.image.io.PngCodec$PNGChunk getChunk(java.lang.String)>("IHDR");

        $s0 = virtualinvoke $r1.<org.hipi.image.io.PngCodec$PNGChunk: short getUnsignedByte(int)>(11);

        return $s0;
    }

    public short getInterlace()
    {
        org.hipi.image.io.PngCodec$PNGData r0;
        org.hipi.image.io.PngCodec$PNGChunk $r1;
        short $s0;

        r0 := @this: org.hipi.image.io.PngCodec$PNGData;

        $r1 = virtualinvoke r0.<org.hipi.image.io.PngCodec$PNGData: org.hipi.image.io.PngCodec$PNGChunk getChunk(java.lang.String)>("IHDR");

        $s0 = virtualinvoke $r1.<org.hipi.image.io.PngCodec$PNGChunk: short getUnsignedByte(int)>(12);

        return $s0;
    }

    public byte[] getImageData()
    {
        org.hipi.image.io.PngCodec$PNGData r0;
        byte[] r1, r2, r3, $r8, $r14;
        int i1, i2, i4, $i5, $i6, $i9, $i10, $i11, $i13, $i14, $i15, $i16, $i17, i19, i20, i21;
        short s3, $s12;
        java.io.ByteArrayOutputStream $r4, $r7;
        java.io.ByteArrayInputStream $r5;
        java.util.zip.InflaterInputStream $r6;
        long $l7, $l8;
        java.io.PrintStream $r9;
        byte $b18;
        java.lang.String $r11;
        boolean $z0;
        org.hipi.image.io.PngCodec$PNGChunk[] $r12;
        java.io.IOException $r13;
        org.hipi.image.io.PngCodec$PNGChunk r16;

        r0 := @this: org.hipi.image.io.PngCodec$PNGData;

     label01:
        $r4 = new java.io.ByteArrayOutputStream;

        specialinvoke $r4.<java.io.ByteArrayOutputStream: void <init>()>();

        i19 = 0;

     label02:
        $i5 = r0.<org.hipi.image.io.PngCodec$PNGData: int mNumberOfChunks>;

        if i19 >= $i5 goto label04;

        $r12 = r0.<org.hipi.image.io.PngCodec$PNGData: org.hipi.image.io.PngCodec$PNGChunk[] mChunks>;

        r16 = $r12[i19];

        $r11 = virtualinvoke r16.<org.hipi.image.io.PngCodec$PNGChunk: java.lang.String getTypeString()>();

        $z0 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>("IDAT");

        if $z0 == 0 goto label03;

        $r14 = virtualinvoke r16.<org.hipi.image.io.PngCodec$PNGChunk: byte[] getData()>();

        virtualinvoke $r4.<java.io.ByteArrayOutputStream: void write(byte[])>($r14);

     label03:
        i19 = i19 + 1;

        goto label02;

     label04:
        virtualinvoke $r4.<java.io.ByteArrayOutputStream: void flush()>();

        $r6 = new java.util.zip.InflaterInputStream;

        $r5 = new java.io.ByteArrayInputStream;

        $r8 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r5.<java.io.ByteArrayInputStream: void <init>(byte[])>($r8);

        specialinvoke $r6.<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream)>($r5);

        $r7 = new java.io.ByteArrayOutputStream;

        specialinvoke $r7.<java.io.ByteArrayOutputStream: void <init>()>();

        r1 = newarray (byte)[8192];

     label05:
        $i6 = virtualinvoke $r6.<java.util.zip.InflaterInputStream: int read(byte[])>(r1);

        if $i6 == -1 goto label06;

        virtualinvoke $r7.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r1, 0, $i6);

        goto label05;

     label06:
        virtualinvoke $r7.<java.io.ByteArrayOutputStream: void flush()>();

        r2 = virtualinvoke $r7.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $l8 = virtualinvoke r0.<org.hipi.image.io.PngCodec$PNGData: long getWidth()>();

        i1 = (int) $l8;

        $l7 = virtualinvoke r0.<org.hipi.image.io.PngCodec$PNGData: long getHeight()>();

        i2 = (int) $l7;

        s3 = virtualinvoke r0.<org.hipi.image.io.PngCodec$PNGData: short getBitsPerPixel()>();

        $i9 = i1 * i2;

        $i11 = $i9 * s3;

        $i10 = $i11 / 8;

        i4 = $i10 * 3;

        r3 = newarray (byte)[i4];

        $s12 = virtualinvoke r0.<org.hipi.image.io.PngCodec$PNGData: short getInterlace()>();

        if $s12 != 0 goto label09;

        i20 = 0;

        i21 = 0;

     label07:
        if i21 >= i4 goto label10;

        $i13 = i1 * s3;

        $i16 = $i13 / 8;

        $i17 = $i16 * 3;

        $i14 = i21 % $i17;

        if $i14 != 0 goto label08;

        i20 = i20 + 1;

     label08:
        $i15 = i20;

        i20 = i20 + 1;

        $b18 = r2[$i15];

        r3[i21] = $b18;

        i21 = i21 + 1;

        goto label07;

     label09:
        $r9 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("Couldn\'t undo interlacing.");

     label10:
        return r3;

     label11:
        $r13 := @caughtexception;

        return null;

        catch java.io.IOException from label01 to label10 with label11;
    }

    public org.hipi.image.io.PngCodec$PNGChunk getChunk(java.lang.String)
    {
        org.hipi.image.io.PngCodec$PNGData r0;
        java.lang.String r1, $r4;
        int $i0, i1;
        org.hipi.image.io.PngCodec$PNGChunk[] $r2, $r5;
        org.hipi.image.io.PngCodec$PNGChunk $r3, $r6;
        boolean $z0;

        r0 := @this: org.hipi.image.io.PngCodec$PNGData;

        r1 := @parameter0: java.lang.String;

        i1 = 0;

     label1:
        $i0 = r0.<org.hipi.image.io.PngCodec$PNGData: int mNumberOfChunks>;

        if i1 >= $i0 goto label3;

        $r2 = r0.<org.hipi.image.io.PngCodec$PNGData: org.hipi.image.io.PngCodec$PNGChunk[] mChunks>;

        $r3 = $r2[i1];

        $r4 = virtualinvoke $r3.<org.hipi.image.io.PngCodec$PNGChunk: java.lang.String getTypeString()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        $r5 = r0.<org.hipi.image.io.PngCodec$PNGData: org.hipi.image.io.PngCodec$PNGChunk[] mChunks>;

        $r6 = $r5[i1];

        return $r6;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return null;
    }
}
