public class org.apache.mahout.math.neighborhood.HashedVector extends org.apache.mahout.math.WeightedVector
{
    protected static final int INVALID_INDEX;
    private final long hash;

    public void <init>(org.apache.mahout.math.Vector, long, int)
    {
        org.apache.mahout.math.neighborhood.HashedVector r0;
        org.apache.mahout.math.Vector r1;
        long l0;
        int i1;

        r0 := @this: org.apache.mahout.math.neighborhood.HashedVector;

        r1 := @parameter0: org.apache.mahout.math.Vector;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        specialinvoke r0.<org.apache.mahout.math.WeightedVector: void <init>(org.apache.mahout.math.Vector,double,int)>(r1, 1.0, i1);

        r0.<org.apache.mahout.math.neighborhood.HashedVector: long hash> = l0;

        return;
    }

    public void <init>(org.apache.mahout.math.Vector, org.apache.mahout.math.Matrix, int, long)
    {
        org.apache.mahout.math.neighborhood.HashedVector r0;
        org.apache.mahout.math.Vector r1;
        org.apache.mahout.math.Matrix r2;
        int i0;
        long l1, $l2, $l3;

        r0 := @this: org.apache.mahout.math.neighborhood.HashedVector;

        r1 := @parameter0: org.apache.mahout.math.Vector;

        r2 := @parameter1: org.apache.mahout.math.Matrix;

        i0 := @parameter2: int;

        l1 := @parameter3: long;

        specialinvoke r0.<org.apache.mahout.math.WeightedVector: void <init>(org.apache.mahout.math.Vector,double,int)>(r1, 1.0, i0);

        $l2 = staticinvoke <org.apache.mahout.math.neighborhood.HashedVector: long computeHash64(org.apache.mahout.math.Vector,org.apache.mahout.math.Matrix)>(r1, r2);

        $l3 = l1 & $l2;

        r0.<org.apache.mahout.math.neighborhood.HashedVector: long hash> = $l3;

        return;
    }

    public void <init>(org.apache.mahout.math.WeightedVector, org.apache.mahout.math.Matrix, long)
    {
        org.apache.mahout.math.neighborhood.HashedVector r0;
        org.apache.mahout.math.WeightedVector r1;
        org.apache.mahout.math.Matrix r2;
        long l0, $l2, $l3;
        org.apache.mahout.math.Vector $r3;
        double $d0;
        int $i1;

        r0 := @this: org.apache.mahout.math.neighborhood.HashedVector;

        r1 := @parameter0: org.apache.mahout.math.WeightedVector;

        r2 := @parameter1: org.apache.mahout.math.Matrix;

        l0 := @parameter2: long;

        $r3 = virtualinvoke r1.<org.apache.mahout.math.WeightedVector: org.apache.mahout.math.Vector getVector()>();

        $d0 = virtualinvoke r1.<org.apache.mahout.math.WeightedVector: double getWeight()>();

        $i1 = virtualinvoke r1.<org.apache.mahout.math.WeightedVector: int getIndex()>();

        specialinvoke r0.<org.apache.mahout.math.WeightedVector: void <init>(org.apache.mahout.math.Vector,double,int)>($r3, $d0, $i1);

        $l2 = staticinvoke <org.apache.mahout.math.neighborhood.HashedVector: long computeHash64(org.apache.mahout.math.Vector,org.apache.mahout.math.Matrix)>(r1, r2);

        $l3 = l0 & $l2;

        r0.<org.apache.mahout.math.neighborhood.HashedVector: long hash> = $l3;

        return;
    }

    public static long computeHash64(org.apache.mahout.math.Vector, org.apache.mahout.math.Matrix)
    {
        org.apache.mahout.math.Vector r0, $r4;
        org.apache.mahout.math.Matrix r1;
        java.util.Iterator r2;
        org.apache.mahout.math.Vector$Element r3;
        java.lang.Iterable $r5;
        boolean $z0;
        java.lang.Object $r6;
        double $d0;
        byte $b0;
        int $i1;
        long $l2, l3;

        r0 := @parameter0: org.apache.mahout.math.Vector;

        r1 := @parameter1: org.apache.mahout.math.Matrix;

        l3 = 0L;

        $r4 = interfaceinvoke r1.<org.apache.mahout.math.Matrix: org.apache.mahout.math.Vector times(org.apache.mahout.math.Vector)>(r0);

        $r5 = interfaceinvoke $r4.<org.apache.mahout.math.Vector: java.lang.Iterable nonZeroes()>();

        r2 = interfaceinvoke $r5.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.mahout.math.Vector$Element) $r6;

        $d0 = interfaceinvoke r3.<org.apache.mahout.math.Vector$Element: double get()>();

        $b0 = $d0 cmpl 0.0;

        if $b0 <= 0 goto label1;

        $i1 = interfaceinvoke r3.<org.apache.mahout.math.Vector$Element: int index()>();

        $l2 = 1L << $i1;

        l3 = l3 + $l2;

        goto label1;

     label2:
        return l3;
    }

    public static org.apache.mahout.math.neighborhood.HashedVector hash(org.apache.mahout.math.WeightedVector, org.apache.mahout.math.Matrix)
    {
        org.apache.mahout.math.WeightedVector r0;
        org.apache.mahout.math.Matrix r1;
        org.apache.mahout.math.neighborhood.HashedVector $r2;

        r0 := @parameter0: org.apache.mahout.math.WeightedVector;

        r1 := @parameter1: org.apache.mahout.math.Matrix;

        $r2 = staticinvoke <org.apache.mahout.math.neighborhood.HashedVector: org.apache.mahout.math.neighborhood.HashedVector hash(org.apache.mahout.math.WeightedVector,org.apache.mahout.math.Matrix,long)>(r0, r1, 0L);

        return $r2;
    }

    public static org.apache.mahout.math.neighborhood.HashedVector hash(org.apache.mahout.math.WeightedVector, org.apache.mahout.math.Matrix, long)
    {
        org.apache.mahout.math.WeightedVector r0;
        org.apache.mahout.math.Matrix r1;
        long l0;
        org.apache.mahout.math.neighborhood.HashedVector $r2;

        r0 := @parameter0: org.apache.mahout.math.WeightedVector;

        r1 := @parameter1: org.apache.mahout.math.Matrix;

        l0 := @parameter2: long;

        $r2 = new org.apache.mahout.math.neighborhood.HashedVector;

        specialinvoke $r2.<org.apache.mahout.math.neighborhood.HashedVector: void <init>(org.apache.mahout.math.WeightedVector,org.apache.mahout.math.Matrix,long)>(r0, r1, l0);

        return $r2;
    }

    public int hammingDistance(long)
    {
        org.apache.mahout.math.neighborhood.HashedVector r0;
        long l0, $l1, $l2;
        int $i3;

        r0 := @this: org.apache.mahout.math.neighborhood.HashedVector;

        l0 := @parameter0: long;

        $l1 = r0.<org.apache.mahout.math.neighborhood.HashedVector: long hash>;

        $l2 = $l1 ^ l0;

        $i3 = staticinvoke <java.lang.Long: int bitCount(long)>($l2);

        return $i3;
    }

    public long getHash()
    {
        org.apache.mahout.math.neighborhood.HashedVector r0;
        long $l0;

        r0 := @this: org.apache.mahout.math.neighborhood.HashedVector;

        $l0 = r0.<org.apache.mahout.math.neighborhood.HashedVector: long hash>;

        return $l0;
    }

    public java.lang.String toString()
    {
        org.apache.mahout.math.neighborhood.HashedVector r0;
        java.lang.Object[] $r1;
        int $i0;
        java.lang.Integer $r2;
        long $l1;
        java.lang.Long $r3;
        org.apache.mahout.math.Vector $r4;
        java.lang.String $r5;

        r0 := @this: org.apache.mahout.math.neighborhood.HashedVector;

        $r1 = newarray (java.lang.Object)[3];

        $i0 = virtualinvoke r0.<org.apache.mahout.math.neighborhood.HashedVector: int getIndex()>();

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r1[0] = $r2;

        $l1 = r0.<org.apache.mahout.math.neighborhood.HashedVector: long hash>;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r1[1] = $r3;

        $r4 = virtualinvoke r0.<org.apache.mahout.math.neighborhood.HashedVector: org.apache.mahout.math.Vector getVector()>();

        $r1[2] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("index=%d, hash=%08x, v=%s", $r1);

        return $r5;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.mahout.math.neighborhood.HashedVector r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3;
        long $l0, $l1;
        byte $b2, $b3, $b4;
        org.apache.mahout.math.Vector $r3, $r4, $r5;
        double $d0, $d1;

        r0 := @this: org.apache.mahout.math.neighborhood.HashedVector;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.apache.mahout.math.neighborhood.HashedVector;

        if $z0 != 0 goto label4;

        $z1 = r1 instanceof org.apache.mahout.math.Vector;

        if $z1 == 0 goto label2;

        $r4 = (org.apache.mahout.math.Vector) r1;

        $r5 = virtualinvoke r0.<org.apache.mahout.math.neighborhood.HashedVector: org.apache.mahout.math.Vector minus(org.apache.mahout.math.Vector)>($r4);

        $d1 = interfaceinvoke $r5.<org.apache.mahout.math.Vector: double norm(double)>(1.0);

        $b4 = $d1 cmpl 0.0;

        if $b4 != 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;

     label4:
        r2 = (org.apache.mahout.math.neighborhood.HashedVector) r1;

        $l1 = r2.<org.apache.mahout.math.neighborhood.HashedVector: long hash>;

        $l0 = r0.<org.apache.mahout.math.neighborhood.HashedVector: long hash>;

        $b2 = $l1 cmp $l0;

        if $b2 != 0 goto label5;

        $r3 = virtualinvoke r0.<org.apache.mahout.math.neighborhood.HashedVector: org.apache.mahout.math.Vector minus(org.apache.mahout.math.Vector)>(r2);

        $d0 = interfaceinvoke $r3.<org.apache.mahout.math.Vector: double norm(double)>(1.0);

        $b3 = $d0 cmpl 0.0;

        if $b3 != 0 goto label5;

        $z3 = 1;

        goto label6;

     label5:
        $z3 = 0;

     label6:
        return $z3;
    }

    public int hashCode()
    {
        org.apache.mahout.math.neighborhood.HashedVector r0;
        long $l0, $l1, $l2, $l3;
        int $i4, $i5, i6, i7;

        r0 := @this: org.apache.mahout.math.neighborhood.HashedVector;

        i6 = specialinvoke r0.<org.apache.mahout.math.WeightedVector: int hashCode()>();

        $i5 = 31 * i6;

        $l2 = r0.<org.apache.mahout.math.neighborhood.HashedVector: long hash>;

        $l0 = r0.<org.apache.mahout.math.neighborhood.HashedVector: long hash>;

        $l1 = $l0 >>> 32;

        $l3 = $l2 ^ $l1;

        $i4 = (int) $l3;

        i7 = $i5 + $i4;

        return i7;
    }

    public static void <clinit>()
    {
        <org.apache.mahout.math.neighborhood.HashedVector: int INVALID_INDEX> = -1;

        return;
    }
}
