public final class org.apache.mahout.math.hadoop.similarity.cooccurrence.Vectors extends java.lang.Object
{

    private void <init>()
    {
        org.apache.mahout.math.hadoop.similarity.cooccurrence.Vectors r0;

        r0 := @this: org.apache.mahout.math.hadoop.similarity.cooccurrence.Vectors;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.apache.mahout.math.Vector maybeSample(org.apache.mahout.math.Vector, int)
    {
        org.apache.mahout.math.Vector r0;
        int i0, $i1, $i2, $i3;
        org.apache.mahout.math.Vector$Element r3;
        org.apache.mahout.math.RandomAccessSparseVector $r4;
        org.apache.mahout.common.iterator.FixedSizeSamplingIterator $r5;
        java.lang.Iterable $r6;
        java.util.Iterator $r7;
        boolean $z0;
        java.lang.Object $r8;
        double $d0;

        r0 := @parameter0: org.apache.mahout.math.Vector;

        i0 := @parameter1: int;

        $i1 = interfaceinvoke r0.<org.apache.mahout.math.Vector: int getNumNondefaultElements()>();

        if $i1 > i0 goto label1;

        return r0;

     label1:
        $r4 = new org.apache.mahout.math.RandomAccessSparseVector;

        $i2 = interfaceinvoke r0.<org.apache.mahout.math.Vector: int size()>();

        specialinvoke $r4.<org.apache.mahout.math.RandomAccessSparseVector: void <init>(int,int)>($i2, i0);

        $r5 = new org.apache.mahout.common.iterator.FixedSizeSamplingIterator;

        $r6 = interfaceinvoke r0.<org.apache.mahout.math.Vector: java.lang.Iterable nonZeroes()>();

        $r7 = interfaceinvoke $r6.<java.lang.Iterable: java.util.Iterator iterator()>();

        specialinvoke $r5.<org.apache.mahout.common.iterator.FixedSizeSamplingIterator: void <init>(int,java.util.Iterator)>(i0, $r7);

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r8 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.mahout.math.Vector$Element) $r8;

        $i3 = interfaceinvoke r3.<org.apache.mahout.math.Vector$Element: int index()>();

        $d0 = interfaceinvoke r3.<org.apache.mahout.math.Vector$Element: double get()>();

        interfaceinvoke $r4.<org.apache.mahout.math.Vector: void setQuick(int,double)>($i3, $d0);

        goto label2;

     label3:
        return $r4;
    }

    public static org.apache.mahout.math.Vector topKElements(int, org.apache.mahout.math.Vector)
    {
        int i0, $i1, $i2, $i3, $i5;
        org.apache.mahout.math.Vector r0;
        double d0, $d1, $d2;
        org.apache.mahout.math.hadoop.similarity.cooccurrence.TopElementsQueue $r2;
        java.lang.Iterable $r3;
        boolean $z0, $z1;
        org.apache.mahout.math.RandomAccessSparseVector $r4;
        java.util.List $r5;
        java.lang.Object $r6, $r7, $r8;
        byte $b4;
        java.util.Iterator r10, r14;
        org.apache.mahout.math.Vector$Element r11, r15;
        org.apache.mahout.math.hadoop.similarity.cooccurrence.MutableElement r12;

        i0 := @parameter0: int;

        r0 := @parameter1: org.apache.mahout.math.Vector;

        $i1 = interfaceinvoke r0.<org.apache.mahout.math.Vector: int getNumNondefaultElements()>();

        if $i1 > i0 goto label1;

        return r0;

     label1:
        $r2 = new org.apache.mahout.math.hadoop.similarity.cooccurrence.TopElementsQueue;

        specialinvoke $r2.<org.apache.mahout.math.hadoop.similarity.cooccurrence.TopElementsQueue: void <init>(int)>(i0);

        $r3 = interfaceinvoke r0.<org.apache.mahout.math.Vector: java.lang.Iterable nonZeroes()>();

        r10 = interfaceinvoke $r3.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r8 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        r11 = (org.apache.mahout.math.Vector$Element) $r8;

        $r7 = virtualinvoke $r2.<org.apache.mahout.math.hadoop.similarity.cooccurrence.TopElementsQueue: java.lang.Object top()>();

        r12 = (org.apache.mahout.math.hadoop.similarity.cooccurrence.MutableElement) $r7;

        d0 = interfaceinvoke r11.<org.apache.mahout.math.Vector$Element: double get()>();

        $d2 = virtualinvoke r12.<org.apache.mahout.math.hadoop.similarity.cooccurrence.MutableElement: double get()>();

        $b4 = d0 cmpl $d2;

        if $b4 <= 0 goto label2;

        $i5 = interfaceinvoke r11.<org.apache.mahout.math.Vector$Element: int index()>();

        virtualinvoke r12.<org.apache.mahout.math.hadoop.similarity.cooccurrence.MutableElement: void setIndex(int)>($i5);

        virtualinvoke r12.<org.apache.mahout.math.hadoop.similarity.cooccurrence.MutableElement: void set(double)>(d0);

        virtualinvoke $r2.<org.apache.mahout.math.hadoop.similarity.cooccurrence.TopElementsQueue: java.lang.Object updateTop()>();

        goto label2;

     label3:
        $r4 = new org.apache.mahout.math.RandomAccessSparseVector;

        $i2 = interfaceinvoke r0.<org.apache.mahout.math.Vector: int size()>();

        specialinvoke $r4.<org.apache.mahout.math.RandomAccessSparseVector: void <init>(int,int)>($i2, i0);

        $r5 = virtualinvoke $r2.<org.apache.mahout.math.hadoop.similarity.cooccurrence.TopElementsQueue: java.util.List getTopElements()>();

        r14 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r6 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>();

        r15 = (org.apache.mahout.math.Vector$Element) $r6;

        $i3 = interfaceinvoke r15.<org.apache.mahout.math.Vector$Element: int index()>();

        $d1 = interfaceinvoke r15.<org.apache.mahout.math.Vector$Element: double get()>();

        interfaceinvoke $r4.<org.apache.mahout.math.Vector: void setQuick(int,double)>($i3, $d1);

        goto label4;

     label5:
        return $r4;
    }

    public static org.apache.mahout.math.Vector merge(java.lang.Iterable)
    {
        java.lang.Iterable r0, $r10;
        java.util.Iterator r1, r4;
        org.apache.mahout.math.Vector r2, $r9;
        org.apache.mahout.math.VectorWritable r3, $r7;
        org.apache.mahout.math.Vector$Element r5;
        java.lang.Object $r6, $r8, $r11;
        boolean $z0, $z1;
        double $d0;
        int $i0;

        r0 := @parameter0: java.lang.Iterable;

        r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (org.apache.mahout.math.VectorWritable) $r6;

        r2 = virtualinvoke $r7.<org.apache.mahout.math.VectorWritable: org.apache.mahout.math.Vector get()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r8 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.mahout.math.VectorWritable) $r8;

        if r3 == null goto label1;

        $r9 = virtualinvoke r3.<org.apache.mahout.math.VectorWritable: org.apache.mahout.math.Vector get()>();

        $r10 = interfaceinvoke $r9.<org.apache.mahout.math.Vector: java.lang.Iterable nonZeroes()>();

        r4 = interfaceinvoke $r10.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label1;

        $r11 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.mahout.math.Vector$Element) $r11;

        $i0 = interfaceinvoke r5.<org.apache.mahout.math.Vector$Element: int index()>();

        $d0 = interfaceinvoke r5.<org.apache.mahout.math.Vector$Element: double get()>();

        interfaceinvoke r2.<org.apache.mahout.math.Vector: void setQuick(int,double)>($i0, $d0);

        goto label2;

     label3:
        return r2;
    }

    public static org.apache.mahout.math.Vector sum(java.util.Iterator)
    {
        java.util.Iterator r0;
        org.apache.mahout.math.Vector r1, $r6;
        java.lang.Object $r2, $r4;
        org.apache.mahout.math.VectorWritable $r3, $r5;
        boolean $z0;
        org.apache.mahout.math.function.DoubleDoubleFunction $r7;

        r0 := @parameter0: java.util.Iterator;

        $r2 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (org.apache.mahout.math.VectorWritable) $r2;

        r1 = virtualinvoke $r3.<org.apache.mahout.math.VectorWritable: org.apache.mahout.math.Vector get()>();

     label1:
        $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (org.apache.mahout.math.VectorWritable) $r4;

        $r6 = virtualinvoke $r5.<org.apache.mahout.math.VectorWritable: org.apache.mahout.math.Vector get()>();

        $r7 = <org.apache.mahout.math.function.Functions: org.apache.mahout.math.function.DoubleDoubleFunction PLUS>;

        interfaceinvoke r1.<org.apache.mahout.math.Vector: org.apache.mahout.math.Vector assign(org.apache.mahout.math.Vector,org.apache.mahout.math.function.DoubleDoubleFunction)>($r6, $r7);

        goto label1;

     label2:
        return r1;
    }

    public static org.apache.mahout.math.Vector$Element[] toArray(org.apache.mahout.math.VectorWritable)
    {
        org.apache.mahout.math.VectorWritable r0;
        org.apache.mahout.math.Vector$Element[] r1;
        java.util.Iterator r2;
        org.apache.mahout.math.Vector$Element r3;
        org.apache.mahout.math.Vector $r4, $r5;
        int $i0, $i1, $i2, i3;
        java.lang.Iterable $r6;
        boolean $z0;
        java.lang.Object $r7;
        org.apache.mahout.math.hadoop.similarity.cooccurrence.Vectors$TemporaryElement $r8;
        double $d0;

        r0 := @parameter0: org.apache.mahout.math.VectorWritable;

        $r4 = virtualinvoke r0.<org.apache.mahout.math.VectorWritable: org.apache.mahout.math.Vector get()>();

        $i0 = interfaceinvoke $r4.<org.apache.mahout.math.Vector: int getNumNondefaultElements()>();

        r1 = newarray (org.apache.mahout.math.Vector$Element)[$i0];

        i3 = 0;

        $r5 = virtualinvoke r0.<org.apache.mahout.math.VectorWritable: org.apache.mahout.math.Vector get()>();

        $r6 = interfaceinvoke $r5.<org.apache.mahout.math.Vector: java.lang.Iterable nonZeroes()>();

        r2 = interfaceinvoke $r6.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.mahout.math.Vector$Element) $r7;

        $i1 = i3;

        i3 = i3 + 1;

        $r8 = new org.apache.mahout.math.hadoop.similarity.cooccurrence.Vectors$TemporaryElement;

        $i2 = interfaceinvoke r3.<org.apache.mahout.math.Vector$Element: int index()>();

        $d0 = interfaceinvoke r3.<org.apache.mahout.math.Vector$Element: double get()>();

        specialinvoke $r8.<org.apache.mahout.math.hadoop.similarity.cooccurrence.Vectors$TemporaryElement: void <init>(int,double)>($i2, $d0);

        r1[$i1] = $r8;

        goto label1;

     label2:
        return r1;
    }

    public static void write(org.apache.mahout.math.Vector, org.apache.hadoop.fs.Path, org.apache.hadoop.conf.Configuration) throws java.io.IOException
    {
        org.apache.mahout.math.Vector r0;
        org.apache.hadoop.fs.Path r1;
        org.apache.hadoop.conf.Configuration r2;

        r0 := @parameter0: org.apache.mahout.math.Vector;

        r1 := @parameter1: org.apache.hadoop.fs.Path;

        r2 := @parameter2: org.apache.hadoop.conf.Configuration;

        staticinvoke <org.apache.mahout.math.hadoop.similarity.cooccurrence.Vectors: void write(org.apache.mahout.math.Vector,org.apache.hadoop.fs.Path,org.apache.hadoop.conf.Configuration,boolean)>(r0, r1, r2, 0);

        return;
    }

    public static void write(org.apache.mahout.math.Vector, org.apache.hadoop.fs.Path, org.apache.hadoop.conf.Configuration, boolean) throws java.io.IOException
    {
        org.apache.mahout.math.Vector r0;
        org.apache.hadoop.fs.Path r1;
        org.apache.hadoop.conf.Configuration r2;
        boolean z0;
        org.apache.hadoop.fs.FileSystem r3;
        org.apache.hadoop.fs.FSDataOutputStream r4;
        java.net.URI $r7;
        org.apache.mahout.math.VectorWritable $r8;
        java.lang.Throwable $r9;

        r0 := @parameter0: org.apache.mahout.math.Vector;

        r1 := @parameter1: org.apache.hadoop.fs.Path;

        r2 := @parameter2: org.apache.hadoop.conf.Configuration;

        z0 := @parameter3: boolean;

        $r7 = virtualinvoke r1.<org.apache.hadoop.fs.Path: java.net.URI toUri()>();

        r3 = staticinvoke <org.apache.hadoop.fs.FileSystem: org.apache.hadoop.fs.FileSystem get(java.net.URI,org.apache.hadoop.conf.Configuration)>($r7, r2);

        r4 = virtualinvoke r3.<org.apache.hadoop.fs.FileSystem: org.apache.hadoop.fs.FSDataOutputStream create(org.apache.hadoop.fs.Path)>(r1);

     label1:
        $r8 = new org.apache.mahout.math.VectorWritable;

        specialinvoke $r8.<org.apache.mahout.math.VectorWritable: void <init>(org.apache.mahout.math.Vector)>(r0);

        virtualinvoke $r8.<org.apache.mahout.math.VectorWritable: void setWritesLaxPrecision(boolean)>(z0);

        virtualinvoke $r8.<org.apache.mahout.math.VectorWritable: void write(java.io.DataOutput)>(r4);

     label2:
        staticinvoke <com.google.common.io.Closeables: void close(java.io.Closeable,boolean)>(r4, 0);

        goto label5;

     label3:
        $r9 := @caughtexception;

     label4:
        staticinvoke <com.google.common.io.Closeables: void close(java.io.Closeable,boolean)>(r4, 0);

        throw $r9;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static org.apache.mahout.math.map.OpenIntIntHashMap readAsIntMap(org.apache.hadoop.fs.Path, org.apache.hadoop.conf.Configuration) throws java.io.IOException
    {
        org.apache.hadoop.fs.Path r0;
        org.apache.hadoop.conf.Configuration r1;
        org.apache.hadoop.fs.FileSystem r2;
        org.apache.hadoop.fs.FSDataInputStream r3;
        org.apache.mahout.math.map.OpenIntIntHashMap r4;
        java.net.URI $r6;
        java.lang.Throwable $r7;

        r0 := @parameter0: org.apache.hadoop.fs.Path;

        r1 := @parameter1: org.apache.hadoop.conf.Configuration;

        $r6 = virtualinvoke r0.<org.apache.hadoop.fs.Path: java.net.URI toUri()>();

        r2 = staticinvoke <org.apache.hadoop.fs.FileSystem: org.apache.hadoop.fs.FileSystem get(java.net.URI,org.apache.hadoop.conf.Configuration)>($r6, r1);

        r3 = virtualinvoke r2.<org.apache.hadoop.fs.FileSystem: org.apache.hadoop.fs.FSDataInputStream open(org.apache.hadoop.fs.Path)>(r0);

     label1:
        r4 = staticinvoke <org.apache.mahout.math.hadoop.similarity.cooccurrence.Vectors: org.apache.mahout.math.map.OpenIntIntHashMap readAsIntMap(java.io.DataInput)>(r3);

     label2:
        staticinvoke <com.google.common.io.Closeables: void close(java.io.Closeable,boolean)>(r3, 1);

        return r4;

     label3:
        $r7 := @caughtexception;

     label4:
        staticinvoke <com.google.common.io.Closeables: void close(java.io.Closeable,boolean)>(r3, 1);

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private static org.apache.mahout.math.map.OpenIntIntHashMap readAsIntMap(java.io.DataInput) throws java.io.IOException
    {
        java.io.DataInput r0;
        byte b0, $b3, $b4, $b5, $b7;
        boolean z0, z1, z2, $z4, $z5, $z6, $z7, $z8;
        int i1, i2, $i8, i9;
        java.lang.Object[] $r2;
        java.lang.String $r3;
        float $f0;
        org.apache.mahout.math.map.OpenIntIntHashMap $r4;
        double $d1;

        r0 := @parameter0: java.io.DataInput;

        b0 = interfaceinvoke r0.<java.io.DataInput: byte readByte()>();

        $b3 = b0 >> 4;

        if $b3 != 0 goto label01;

        $z4 = 1;

        goto label02;

     label01:
        $z4 = 0;

     label02:
        $r2 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int,int)>(b0, 2);

        $r2[0] = $r3;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z4, "Unknown flags set: %d", $r2);

        $b5 = b0 & 1;

        if $b5 == 0 goto label03;

        $z5 = 1;

        goto label04;

     label03:
        $z5 = 0;

     label04:
        z0 = $z5;

        $b4 = b0 & 2;

        if $b4 == 0 goto label05;

        $z6 = 1;

        goto label06;

     label05:
        $z6 = 0;

     label06:
        z1 = $z6;

        $b7 = b0 & 8;

        if $b7 == 0 goto label07;

        $z7 = 1;

        goto label08;

     label07:
        $z7 = 0;

     label08:
        z2 = $z7;

        if z0 != 0 goto label09;

        if z1 != 0 goto label09;

        $z8 = 1;

        goto label10;

     label09:
        $z8 = 0;

     label10:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z8, "Only for reading sparse vectors!");

        staticinvoke <org.apache.mahout.math.Varint: int readUnsignedVarInt(java.io.DataInput)>(r0);

        $r4 = new org.apache.mahout.math.map.OpenIntIntHashMap;

        specialinvoke $r4.<org.apache.mahout.math.map.OpenIntIntHashMap: void <init>()>();

        i1 = staticinvoke <org.apache.mahout.math.Varint: int readUnsignedVarInt(java.io.DataInput)>(r0);

        i9 = 0;

     label11:
        if i9 >= i1 goto label14;

        i2 = staticinvoke <org.apache.mahout.math.Varint: int readUnsignedVarInt(java.io.DataInput)>(r0);

        if z2 == 0 goto label12;

        $f0 = interfaceinvoke r0.<java.io.DataInput: float readFloat()>();

        $d1 = (double) $f0;

        goto label13;

     label12:
        $d1 = interfaceinvoke r0.<java.io.DataInput: double readDouble()>();

     label13:
        $i8 = (int) $d1;

        virtualinvoke $r4.<org.apache.mahout.math.map.OpenIntIntHashMap: boolean put(int,int)>(i2, $i8);

        i9 = i9 + 1;

        goto label11;

     label14:
        return $r4;
    }

    public static org.apache.mahout.math.Vector read(org.apache.hadoop.fs.Path, org.apache.hadoop.conf.Configuration) throws java.io.IOException
    {
        org.apache.hadoop.fs.Path r0;
        org.apache.hadoop.conf.Configuration r1;
        org.apache.hadoop.fs.FileSystem r2;
        org.apache.hadoop.fs.FSDataInputStream r3;
        org.apache.mahout.math.Vector r4;
        java.net.URI $r6;
        java.lang.Throwable $r7;

        r0 := @parameter0: org.apache.hadoop.fs.Path;

        r1 := @parameter1: org.apache.hadoop.conf.Configuration;

        $r6 = virtualinvoke r0.<org.apache.hadoop.fs.Path: java.net.URI toUri()>();

        r2 = staticinvoke <org.apache.hadoop.fs.FileSystem: org.apache.hadoop.fs.FileSystem get(java.net.URI,org.apache.hadoop.conf.Configuration)>($r6, r1);

        r3 = virtualinvoke r2.<org.apache.hadoop.fs.FileSystem: org.apache.hadoop.fs.FSDataInputStream open(org.apache.hadoop.fs.Path)>(r0);

     label1:
        r4 = staticinvoke <org.apache.mahout.math.VectorWritable: org.apache.mahout.math.Vector readVector(java.io.DataInput)>(r3);

     label2:
        staticinvoke <com.google.common.io.Closeables: void close(java.io.Closeable,boolean)>(r3, 1);

        return r4;

     label3:
        $r7 := @caughtexception;

     label4:
        staticinvoke <com.google.common.io.Closeables: void close(java.io.Closeable,boolean)>(r3, 1);

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
}
