public class org.apache.mahout.math.hadoop.similarity.VectorDistanceSimilarityJob extends org.apache.mahout.common.AbstractJob
{
    public static final java.lang.String SEEDS;
    public static final java.lang.String SEEDS_PATH_KEY;
    public static final java.lang.String DISTANCE_MEASURE_KEY;
    public static final java.lang.String OUT_TYPE_KEY;
    public static final java.lang.String MAX_DISTANCE;

    public void <init>()
    {
        org.apache.mahout.math.hadoop.similarity.VectorDistanceSimilarityJob r0;

        r0 := @this: org.apache.mahout.math.hadoop.similarity.VectorDistanceSimilarityJob;

        specialinvoke r0.<org.apache.mahout.common.AbstractJob: void <init>()>();

        return;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        java.lang.String[] r0;
        org.apache.hadoop.conf.Configuration $r1;
        org.apache.mahout.math.hadoop.similarity.VectorDistanceSimilarityJob $r2;

        r0 := @parameter0: java.lang.String[];

        $r1 = new org.apache.hadoop.conf.Configuration;

        specialinvoke $r1.<org.apache.hadoop.conf.Configuration: void <init>()>();

        $r2 = new org.apache.mahout.math.hadoop.similarity.VectorDistanceSimilarityJob;

        specialinvoke $r2.<org.apache.mahout.math.hadoop.similarity.VectorDistanceSimilarityJob: void <init>()>();

        staticinvoke <org.apache.hadoop.util.ToolRunner: int run(org.apache.hadoop.conf.Configuration,org.apache.hadoop.util.Tool,java.lang.String[])>($r1, $r2, r0);

        return;
    }

    public int run(java.lang.String[]) throws java.lang.Exception
    {
        org.apache.mahout.math.hadoop.similarity.VectorDistanceSimilarityJob r0;
        java.lang.String[] r1;
        org.apache.hadoop.fs.Path r2, r3, $r15;
        org.apache.mahout.common.distance.DistanceMeasure r5;
        java.lang.String r6, r7, $r16, $r18, r22;
        org.apache.commons.cli2.builder.DefaultOptionBuilder $r8, $r11;
        org.apache.commons.cli2.option.DefaultOption $r9, $r12;
        java.util.Map $r14;
        java.lang.Object $r17;
        boolean $z0, $z1, $z2;
        double $d0, $d1;
        org.apache.hadoop.conf.Configuration $r19, $r24;
        byte $b0;
        org.apache.hadoop.fs.Path[] $r20;
        java.lang.Class $r21;
        java.lang.Double r23;

        r0 := @this: org.apache.mahout.math.hadoop.similarity.VectorDistanceSimilarityJob;

        r1 := @parameter0: java.lang.String[];

        virtualinvoke r0.<org.apache.mahout.math.hadoop.similarity.VectorDistanceSimilarityJob: void addInputOption()>();

        virtualinvoke r0.<org.apache.mahout.math.hadoop.similarity.VectorDistanceSimilarityJob: void addOutputOption()>();

        $r8 = staticinvoke <org.apache.mahout.common.commandline.DefaultOptionCreator: org.apache.commons.cli2.builder.DefaultOptionBuilder distanceMeasureOption()>();

        $r9 = virtualinvoke $r8.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.option.DefaultOption create()>();

        virtualinvoke r0.<org.apache.mahout.math.hadoop.similarity.VectorDistanceSimilarityJob: org.apache.commons.cli2.Option addOption(org.apache.commons.cli2.Option)>($r9);

        virtualinvoke r0.<org.apache.mahout.math.hadoop.similarity.VectorDistanceSimilarityJob: void addOption(java.lang.String,java.lang.String,java.lang.String)>("seeds", "s", "The set of vectors to compute distances against.  Must fit in memory on the mapper");

        virtualinvoke r0.<org.apache.mahout.math.hadoop.similarity.VectorDistanceSimilarityJob: void addOption(java.lang.String,java.lang.String,java.lang.String)>("maxDistance", "mx", "set an upper-bound on distance (double) such that any pair of vectors with a distance greater than this value is ignored in the output. Ignored for non pairwise output!");

        $r11 = staticinvoke <org.apache.mahout.common.commandline.DefaultOptionCreator: org.apache.commons.cli2.builder.DefaultOptionBuilder overwriteOption()>();

        $r12 = virtualinvoke $r11.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.option.DefaultOption create()>();

        virtualinvoke r0.<org.apache.mahout.math.hadoop.similarity.VectorDistanceSimilarityJob: org.apache.commons.cli2.Option addOption(org.apache.commons.cli2.Option)>($r12);

        virtualinvoke r0.<org.apache.mahout.math.hadoop.similarity.VectorDistanceSimilarityJob: void addOption(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("outType", "ot", "[pw|v] -- Define the output style: pairwise, the default, (pw) or vector (v).  Pairwise is a tuple of <seed, other, distance>, vector is <other, <Vector of size the number of seeds>>.", "pw");

        $r14 = virtualinvoke r0.<org.apache.mahout.math.hadoop.similarity.VectorDistanceSimilarityJob: java.util.Map parseArguments(java.lang.String[])>(r1);

        if $r14 != null goto label1;

        return -1;

     label1:
        r2 = virtualinvoke r0.<org.apache.mahout.math.hadoop.similarity.VectorDistanceSimilarityJob: org.apache.hadoop.fs.Path getInputPath()>();

        r3 = virtualinvoke r0.<org.apache.mahout.math.hadoop.similarity.VectorDistanceSimilarityJob: org.apache.hadoop.fs.Path getOutputPath()>();

        $r15 = new org.apache.hadoop.fs.Path;

        $r16 = virtualinvoke r0.<org.apache.mahout.math.hadoop.similarity.VectorDistanceSimilarityJob: java.lang.String getOption(java.lang.String)>("seeds");

        specialinvoke $r15.<org.apache.hadoop.fs.Path: void <init>(java.lang.String)>($r16);

        r22 = virtualinvoke r0.<org.apache.mahout.math.hadoop.similarity.VectorDistanceSimilarityJob: java.lang.String getOption(java.lang.String)>("distanceMeasure");

        if r22 != null goto label2;

        $r21 = class "org/apache/mahout/common/distance/SquaredEuclideanDistanceMeasure";

        r22 = virtualinvoke $r21.<java.lang.Class: java.lang.String getName()>();

     label2:
        $z0 = virtualinvoke r0.<org.apache.mahout.math.hadoop.similarity.VectorDistanceSimilarityJob: boolean hasOption(java.lang.String)>("overwrite");

        if $z0 == 0 goto label3;

        $r19 = virtualinvoke r0.<org.apache.mahout.math.hadoop.similarity.VectorDistanceSimilarityJob: org.apache.hadoop.conf.Configuration getConf()>();

        $r20 = newarray (org.apache.hadoop.fs.Path)[1];

        $r20[0] = r3;

        staticinvoke <org.apache.mahout.common.HadoopUtil: void delete(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.Path[])>($r19, $r20);

     label3:
        $r17 = staticinvoke <org.apache.mahout.common.ClassUtils: java.lang.Object instantiateAs(java.lang.String,java.lang.Class)>(r22, class "org/apache/mahout/common/distance/DistanceMeasure");

        r5 = (org.apache.mahout.common.distance.DistanceMeasure) $r17;

        r6 = virtualinvoke r0.<org.apache.mahout.math.hadoop.similarity.VectorDistanceSimilarityJob: java.lang.String getOption(java.lang.String,java.lang.String)>("outType", "pw");

        r23 = null;

        $r18 = "pw";

        $z1 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z1 == 0 goto label6;

        r7 = virtualinvoke r0.<org.apache.mahout.math.hadoop.similarity.VectorDistanceSimilarityJob: java.lang.String getOption(java.lang.String)>("maxDistance");

        if r7 == null goto label6;

        $d1 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r7);

        r23 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        $d0 = virtualinvoke r23.<java.lang.Double: double doubleValue()>();

        $b0 = $d0 cmpl 0.0;

        if $b0 <= 0 goto label4;

        $z2 = 1;

        goto label5;

     label4:
        $z2 = 0;

     label5:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z2, "value for maxDistance must be greater than zero");

     label6:
        $r24 = virtualinvoke r0.<org.apache.mahout.math.hadoop.similarity.VectorDistanceSimilarityJob: org.apache.hadoop.conf.Configuration getConf()>();

        staticinvoke <org.apache.mahout.math.hadoop.similarity.VectorDistanceSimilarityJob: void run(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,org.apache.mahout.common.distance.DistanceMeasure,java.lang.String,java.lang.Double)>($r24, r2, $r15, r3, r5, r6, r23);

        return 0;
    }

    public static void run(org.apache.hadoop.conf.Configuration, org.apache.hadoop.fs.Path, org.apache.hadoop.fs.Path, org.apache.hadoop.fs.Path, org.apache.mahout.common.distance.DistanceMeasure, java.lang.String) throws java.io.IOException, java.lang.ClassNotFoundException, java.lang.InterruptedException
    {
        org.apache.hadoop.conf.Configuration r0;
        org.apache.hadoop.fs.Path r1, r2, r3;
        org.apache.mahout.common.distance.DistanceMeasure r4;
        java.lang.String r5;

        r0 := @parameter0: org.apache.hadoop.conf.Configuration;

        r1 := @parameter1: org.apache.hadoop.fs.Path;

        r2 := @parameter2: org.apache.hadoop.fs.Path;

        r3 := @parameter3: org.apache.hadoop.fs.Path;

        r4 := @parameter4: org.apache.mahout.common.distance.DistanceMeasure;

        r5 := @parameter5: java.lang.String;

        staticinvoke <org.apache.mahout.math.hadoop.similarity.VectorDistanceSimilarityJob: void run(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,org.apache.mahout.common.distance.DistanceMeasure,java.lang.String,java.lang.Double)>(r0, r1, r2, r3, r4, r5, null);

        return;
    }

    public static void run(org.apache.hadoop.conf.Configuration, org.apache.hadoop.fs.Path, org.apache.hadoop.fs.Path, org.apache.hadoop.fs.Path, org.apache.mahout.common.distance.DistanceMeasure, java.lang.String, java.lang.Double) throws java.io.IOException, java.lang.ClassNotFoundException, java.lang.InterruptedException
    {
        org.apache.hadoop.conf.Configuration r0;
        org.apache.hadoop.fs.Path r1, r2, r3;
        org.apache.mahout.common.distance.DistanceMeasure r4;
        java.lang.String r5, $r9, $r10, $r16, $r18, $r19, $r25, $r28, $r31;
        java.lang.Double r6;
        java.lang.Class $r8;
        org.apache.hadoop.mapreduce.Job $r11;
        java.lang.StringBuilder $r12, $r13, $r14, $r15, $r17, $r20, $r22, $r23, $r27, $r29, $r30;
        boolean $z0, $z1, $z2;
        java.lang.IllegalArgumentException $r21;
        org.apache.hadoop.fs.Path[] $r24;
        java.lang.IllegalStateException $r26;

        r0 := @parameter0: org.apache.hadoop.conf.Configuration;

        r1 := @parameter1: org.apache.hadoop.fs.Path;

        r2 := @parameter2: org.apache.hadoop.fs.Path;

        r3 := @parameter3: org.apache.hadoop.fs.Path;

        r4 := @parameter4: org.apache.mahout.common.distance.DistanceMeasure;

        r5 := @parameter5: java.lang.String;

        r6 := @parameter6: java.lang.Double;

        if r6 == null goto label1;

        $r31 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r6);

        virtualinvoke r0.<org.apache.hadoop.conf.Configuration: void set(java.lang.String,java.lang.String)>("maxDistance", $r31);

     label1:
        $r8 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r0.<org.apache.hadoop.conf.Configuration: void set(java.lang.String,java.lang.String)>("vectorDistSim.measure", $r9);

        $r10 = virtualinvoke r2.<org.apache.hadoop.fs.Path: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.hadoop.conf.Configuration: void set(java.lang.String,java.lang.String)>("seedsPath", $r10);

        $r11 = new org.apache.hadoop.mapreduce.Job;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Vector Distance Similarity: seeds: ");

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" input: ");

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<org.apache.hadoop.mapreduce.Job: void <init>(org.apache.hadoop.conf.Configuration,java.lang.String)>(r0, $r16);

        virtualinvoke $r11.<org.apache.hadoop.mapreduce.Job: void setInputFormatClass(java.lang.Class)>(class "org/apache/hadoop/mapreduce/lib/input/SequenceFileInputFormat");

        virtualinvoke $r11.<org.apache.hadoop.mapreduce.Job: void setOutputFormatClass(java.lang.Class)>(class "org/apache/hadoop/mapreduce/lib/output/SequenceFileOutputFormat");

        $r18 = "pw";

        $z0 = virtualinvoke $r18.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r5);

        if $z0 == 0 goto label2;

        virtualinvoke $r11.<org.apache.hadoop.mapreduce.Job: void setMapOutputKeyClass(java.lang.Class)>(class "org/apache/mahout/common/StringTuple");

        virtualinvoke $r11.<org.apache.hadoop.mapreduce.Job: void setOutputKeyClass(java.lang.Class)>(class "org/apache/mahout/common/StringTuple");

        virtualinvoke $r11.<org.apache.hadoop.mapreduce.Job: void setMapOutputValueClass(java.lang.Class)>(class "org/apache/hadoop/io/DoubleWritable");

        virtualinvoke $r11.<org.apache.hadoop.mapreduce.Job: void setOutputValueClass(java.lang.Class)>(class "org/apache/hadoop/io/DoubleWritable");

        virtualinvoke $r11.<org.apache.hadoop.mapreduce.Job: void setMapperClass(java.lang.Class)>(class "org/apache/mahout/math/hadoop/similarity/VectorDistanceMapper");

        goto label4;

     label2:
        $r19 = "v";

        $z1 = virtualinvoke $r19.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r5);

        if $z1 == 0 goto label3;

        virtualinvoke $r11.<org.apache.hadoop.mapreduce.Job: void setMapOutputKeyClass(java.lang.Class)>(class "org/apache/hadoop/io/Text");

        virtualinvoke $r11.<org.apache.hadoop.mapreduce.Job: void setOutputKeyClass(java.lang.Class)>(class "org/apache/hadoop/io/Text");

        virtualinvoke $r11.<org.apache.hadoop.mapreduce.Job: void setMapOutputValueClass(java.lang.Class)>(class "org/apache/mahout/math/VectorWritable");

        virtualinvoke $r11.<org.apache.hadoop.mapreduce.Job: void setOutputValueClass(java.lang.Class)>(class "org/apache/mahout/math/VectorWritable");

        virtualinvoke $r11.<org.apache.hadoop.mapreduce.Job: void setMapperClass(java.lang.Class)>(class "org/apache/mahout/math/hadoop/similarity/VectorDistanceInvertedMapper");

        goto label4;

     label3:
        $r21 = new java.lang.IllegalArgumentException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid outType specified: ");

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r25);

        throw $r21;

     label4:
        virtualinvoke $r11.<org.apache.hadoop.mapreduce.Job: void setNumReduceTasks(int)>(0);

        staticinvoke <org.apache.hadoop.mapreduce.lib.input.FileInputFormat: void addInputPath(org.apache.hadoop.mapreduce.Job,org.apache.hadoop.fs.Path)>($r11, r1);

        staticinvoke <org.apache.hadoop.mapreduce.lib.output.FileOutputFormat: void setOutputPath(org.apache.hadoop.mapreduce.Job,org.apache.hadoop.fs.Path)>($r11, r3);

        virtualinvoke $r11.<org.apache.hadoop.mapreduce.Job: void setJarByClass(java.lang.Class)>(class "org/apache/mahout/math/hadoop/similarity/VectorDistanceSimilarityJob");

        $r24 = newarray (org.apache.hadoop.fs.Path)[1];

        $r24[0] = r3;

        staticinvoke <org.apache.mahout.common.HadoopUtil: void delete(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.Path[])>(r0, $r24);

        $z2 = virtualinvoke $r11.<org.apache.hadoop.mapreduce.Job: boolean waitForCompletion(boolean)>(1);

        if $z2 != 0 goto label5;

        $r26 = new java.lang.IllegalStateException;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("VectorDistance Similarity failed processing ");

        $r27 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r28);

        throw $r26;

     label5:
        return;
    }

    public static void <clinit>()
    {
        <org.apache.mahout.math.hadoop.similarity.VectorDistanceSimilarityJob: java.lang.String MAX_DISTANCE> = "maxDistance";

        <org.apache.mahout.math.hadoop.similarity.VectorDistanceSimilarityJob: java.lang.String OUT_TYPE_KEY> = "outType";

        <org.apache.mahout.math.hadoop.similarity.VectorDistanceSimilarityJob: java.lang.String DISTANCE_MEASURE_KEY> = "vectorDistSim.measure";

        <org.apache.mahout.math.hadoop.similarity.VectorDistanceSimilarityJob: java.lang.String SEEDS_PATH_KEY> = "seedsPath";

        <org.apache.mahout.math.hadoop.similarity.VectorDistanceSimilarityJob: java.lang.String SEEDS> = "seeds";

        return;
    }
}
