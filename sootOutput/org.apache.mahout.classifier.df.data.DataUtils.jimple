public final class org.apache.mahout.classifier.df.data.DataUtils extends java.lang.Object
{

    private void <init>()
    {
        org.apache.mahout.classifier.df.data.DataUtils r0;

        r0 := @this: org.apache.mahout.classifier.df.data.DataUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int sum(int[])
    {
        int[] r0;
        int i0, i1, i2, i3;

        r0 := @parameter0: int[];

        i2 = 0;

        i0 = lengthof r0;

        i3 = 0;

     label1:
        if i3 >= i0 goto label2;

        i1 = r0[i3];

        i2 = i2 + i1;

        i3 = i3 + 1;

        goto label1;

     label2:
        return i2;
    }

    public static void add(int[], int[])
    {
        int[] r0, r1;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6;
        boolean $z0;

        r0 := @parameter0: int[];

        r1 := @parameter1: int[];

        $i1 = lengthof r0;

        $i0 = lengthof r1;

        if $i1 != $i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "array1.length != array2.length");

        i5 = 0;

     label3:
        $i6 = lengthof r0;

        if i5 >= $i6 goto label4;

        $i3 = r0[i5];

        $i2 = r1[i5];

        $i4 = $i3 + $i2;

        r0[i5] = $i4;

        i5 = i5 + 1;

        goto label3;

     label4:
        return;
    }

    public static void dec(int[], int[])
    {
        int[] r0, r1;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6;
        boolean $z0;

        r0 := @parameter0: int[];

        r1 := @parameter1: int[];

        $i1 = lengthof r0;

        $i0 = lengthof r1;

        if $i1 != $i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "array1.length != array2.length");

        i5 = 0;

     label3:
        $i6 = lengthof r0;

        if i5 >= $i6 goto label4;

        $i3 = r0[i5];

        $i2 = r1[i5];

        $i4 = $i3 - $i2;

        r0[i5] = $i4;

        i5 = i5 + 1;

        goto label3;

     label4:
        return;
    }

    public static int maxindex(java.util.Random, int[])
    {
        java.util.Random r0;
        int[] r1;
        java.util.ArrayList $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8;
        java.lang.Object $r4, $r5;
        java.lang.Integer $r6, $r7, $r8;

        r0 := @parameter0: java.util.Random;

        r1 := @parameter1: int[];

        i7 = 0;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        i8 = 0;

     label1:
        $i0 = lengthof r1;

        if i8 >= $i0 goto label4;

        $i5 = r1[i8];

        if $i5 <= i7 goto label2;

        i7 = r1[i8];

        interfaceinvoke $r3.<java.util.List: void clear()>();

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i8);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label3;

     label2:
        $i6 = r1[i8];

        if $i6 != i7 goto label3;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i8);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r6);

     label3:
        i8 = i8 + 1;

        goto label1;

     label4:
        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i1 <= 1 goto label5;

        $i3 = interfaceinvoke $r3.<java.util.List: int size()>();

        $i4 = virtualinvoke r0.<java.util.Random: int nextInt(int)>($i3);

        $r5 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i4);

        $r8 = (java.lang.Integer) $r5;

        goto label6;

     label5:
        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(0);

        $r8 = (java.lang.Integer) $r4;

     label6:
        $i2 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        return $i2;
    }
}
