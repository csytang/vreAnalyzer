public class org.apache.mahout.classifier.df.builder.DecisionTreeBuilder extends java.lang.Object implements org.apache.mahout.classifier.df.builder.TreeBuilder
{
    private static final org.slf4j.Logger log;
    private static final int[] NO_ATTRIBUTES;
    private static final double EPSILON;
    private boolean[] selected;
    private int m;
    private org.apache.mahout.classifier.df.split.IgSplit igSplit;
    private boolean complemented;
    private double minSplitNum;
    private double minVarianceProportion;
    private org.apache.mahout.classifier.df.data.Data fullSet;
    private double minVariance;

    public void <init>()
    {
        org.apache.mahout.classifier.df.builder.DecisionTreeBuilder r0;

        r0 := @this: org.apache.mahout.classifier.df.builder.DecisionTreeBuilder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: boolean complemented> = 1;

        r0.<org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: double minSplitNum> = 2.0;

        r0.<org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: double minVarianceProportion> = 0.001;

        r0.<org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: double minVariance> = #NaN;

        return;
    }

    public void setM(int)
    {
        org.apache.mahout.classifier.df.builder.DecisionTreeBuilder r0;
        int i0;

        r0 := @this: org.apache.mahout.classifier.df.builder.DecisionTreeBuilder;

        i0 := @parameter0: int;

        r0.<org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: int m> = i0;

        return;
    }

    public void setIgSplit(org.apache.mahout.classifier.df.split.IgSplit)
    {
        org.apache.mahout.classifier.df.builder.DecisionTreeBuilder r0;
        org.apache.mahout.classifier.df.split.IgSplit r1;

        r0 := @this: org.apache.mahout.classifier.df.builder.DecisionTreeBuilder;

        r1 := @parameter0: org.apache.mahout.classifier.df.split.IgSplit;

        r0.<org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: org.apache.mahout.classifier.df.split.IgSplit igSplit> = r1;

        return;
    }

    public void setComplemented(boolean)
    {
        org.apache.mahout.classifier.df.builder.DecisionTreeBuilder r0;
        boolean z0;

        r0 := @this: org.apache.mahout.classifier.df.builder.DecisionTreeBuilder;

        z0 := @parameter0: boolean;

        r0.<org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: boolean complemented> = z0;

        return;
    }

    public void setMinSplitNum(int)
    {
        org.apache.mahout.classifier.df.builder.DecisionTreeBuilder r0;
        int i0;
        double $d0;

        r0 := @this: org.apache.mahout.classifier.df.builder.DecisionTreeBuilder;

        i0 := @parameter0: int;

        $d0 = (double) i0;

        r0.<org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: double minSplitNum> = $d0;

        return;
    }

    public void setMinVarianceProportion(double)
    {
        org.apache.mahout.classifier.df.builder.DecisionTreeBuilder r0;
        double d0;

        r0 := @this: org.apache.mahout.classifier.df.builder.DecisionTreeBuilder;

        d0 := @parameter0: double;

        r0.<org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: double minVarianceProportion> = d0;

        return;
    }

    public org.apache.mahout.classifier.df.node.Node build(java.util.Random, org.apache.mahout.classifier.df.data.Data)
    {
        org.apache.mahout.classifier.df.builder.DecisionTreeBuilder r0;
        java.util.Random r1;
        org.apache.mahout.classifier.df.data.Data r2, $r6, $r22, $r37, $r38, $r44, r96, r97;
        boolean[] $r3, $r7, $r18, $r21, $r24, $r48, $r49, $r53, $r55, $r87, $r89, r95;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i27, $i28, $i30, $i31, $i32, $i33, $i34, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i44, $i45, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, i63, i64, i65, i66, i67, i68, i69, i70, $i71, i72;
        org.apache.mahout.classifier.df.data.Dataset $r4, $r5, $r8, $r9, $r20, $r27, $r28, $r32, $r33, $r45, $r46, $r54, $r58, $r59, $r62, $r68, $r75, $r79, $r80, $r82, $r83, $r88, $r90;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z13, $z14, $z15, $z16, $z17, $z18, $z19, z20;
        org.slf4j.Logger $r10, $r15, $r26, $r36, $r51, $r57, $r60, $r69, $r86;
        org.apache.mahout.classifier.df.node.Leaf $r11, $r30, $r34, $r52, $r64, $r74, $r76, $r81, $r85;
        java.lang.Double $r12, $r16, $r19, $r29, $r31, $r35, $r40, $r41, $r50, $r65, $r71, $r72, $r77, $r84;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, d48, d49, d50, d51, d52, d53, d54, d55, d56, d57, d58;
        byte $b7, $b26, $b29, $b35, $b43, $b46;
        java.lang.Object[] $r13, $r70;
        org.apache.mahout.classifier.df.split.IgSplit $r14, $r63;
        java.lang.Integer $r17, $r61;
        org.apache.mahout.classifier.df.node.Node $r23, r98, r99, r100;
        org.apache.mahout.classifier.df.node.CategoricalNode $r25;
        org.apache.mahout.classifier.df.data.conditions.Condition $r39, $r42, $r47;
        java.util.HashSet $r43, r102;
        org.apache.mahout.classifier.df.node.NumericalNode $r56;
        org.apache.mahout.classifier.df.split.RegressionSplit $r66;
        org.apache.mahout.classifier.df.split.OptIgSplit $r67;
        org.apache.mahout.classifier.df.data.Instance $r73, $r78;
        int[] r91;
        org.apache.mahout.classifier.df.split.Split r92, r94;
        double[] r101, r103;
        org.apache.mahout.classifier.df.data.Data[] r104;
        org.apache.mahout.classifier.df.node.Node[] r105;

        r0 := @this: org.apache.mahout.classifier.df.builder.DecisionTreeBuilder;

        r1 := @parameter0: java.util.Random;

        r2 := @parameter1: org.apache.mahout.classifier.df.data.Data;

        $r3 = r0.<org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: boolean[] selected>;

        if $r3 != null goto label01;

        $r90 = virtualinvoke r2.<org.apache.mahout.classifier.df.data.Data: org.apache.mahout.classifier.df.data.Dataset getDataset()>();

        $i61 = virtualinvoke $r90.<org.apache.mahout.classifier.df.data.Dataset: int nbAttributes()>();

        $r89 = newarray (boolean)[$i61];

        r0.<org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: boolean[] selected> = $r89;

        $r87 = r0.<org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: boolean[] selected>;

        $r88 = virtualinvoke r2.<org.apache.mahout.classifier.df.data.Data: org.apache.mahout.classifier.df.data.Dataset getDataset()>();

        $i60 = virtualinvoke $r88.<org.apache.mahout.classifier.df.data.Dataset: int getLabelId()>();

        $r87[$i60] = 1;

     label01:
        $i0 = r0.<org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: int m>;

        if $i0 != 0 goto label03;

        $r80 = virtualinvoke r2.<org.apache.mahout.classifier.df.data.Data: org.apache.mahout.classifier.df.data.Dataset getDataset()>();

        $i54 = virtualinvoke $r80.<org.apache.mahout.classifier.df.data.Dataset: int nbAttributes()>();

        $i53 = $i54 - 1;

        d48 = (double) $i53;

        $r83 = virtualinvoke r2.<org.apache.mahout.classifier.df.data.Data: org.apache.mahout.classifier.df.data.Dataset getDataset()>();

        $r82 = virtualinvoke r2.<org.apache.mahout.classifier.df.data.Data: org.apache.mahout.classifier.df.data.Dataset getDataset()>();

        $i59 = virtualinvoke $r82.<org.apache.mahout.classifier.df.data.Dataset: int getLabelId()>();

        $z18 = virtualinvoke $r83.<org.apache.mahout.classifier.df.data.Dataset: boolean isNumerical(int)>($i59);

        if $z18 == 0 goto label02;

        $d44 = d48 / 3.0;

        $d45 = staticinvoke <java.lang.Math: double ceil(double)>($d44);

        $i62 = (int) $d45;

        r0.<org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: int m> = $i62;

        goto label03;

     label02:
        $d46 = staticinvoke <java.lang.Math: double sqrt(double)>(d48);

        $d47 = staticinvoke <java.lang.Math: double ceil(double)>($d46);

        $i58 = (int) $d47;

        r0.<org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: int m> = $i58;

     label03:
        $z19 = virtualinvoke r2.<org.apache.mahout.classifier.df.data.Data: boolean isEmpty()>();

        if $z19 == 0 goto label04;

        $r81 = new org.apache.mahout.classifier.df.node.Leaf;

        specialinvoke $r81.<org.apache.mahout.classifier.df.node.Leaf: void <init>(double)>(#NaN);

        return $r81;

     label04:
        d49 = 0.0;

        $r5 = virtualinvoke r2.<org.apache.mahout.classifier.df.data.Data: org.apache.mahout.classifier.df.data.Dataset getDataset()>();

        $r4 = virtualinvoke r2.<org.apache.mahout.classifier.df.data.Data: org.apache.mahout.classifier.df.data.Dataset getDataset()>();

        $i1 = virtualinvoke $r4.<org.apache.mahout.classifier.df.data.Dataset: int getLabelId()>();

        $z0 = virtualinvoke $r5.<org.apache.mahout.classifier.df.data.Dataset: boolean isNumerical(int)>($i1);

        if $z0 == 0 goto label08;

        d50 = 0.0;

        i63 = 0;

     label05:
        $i48 = virtualinvoke r2.<org.apache.mahout.classifier.df.data.Data: int size()>();

        if i63 >= $i48 goto label06;

        $r79 = virtualinvoke r2.<org.apache.mahout.classifier.df.data.Data: org.apache.mahout.classifier.df.data.Dataset getDataset()>();

        $r78 = virtualinvoke r2.<org.apache.mahout.classifier.df.data.Data: org.apache.mahout.classifier.df.data.Instance get(int)>(i63);

        d51 = virtualinvoke $r79.<org.apache.mahout.classifier.df.data.Dataset: double getLabel(org.apache.mahout.classifier.df.data.Instance)>($r78);

        d49 = d49 + d51;

        $d34 = d51 * d51;

        d50 = d50 + $d34;

        i63 = i63 + 1;

        goto label05;

     label06:
        $d31 = d49 * d49;

        $i50 = virtualinvoke r2.<org.apache.mahout.classifier.df.data.Data: int size()>();

        $d29 = (double) $i50;

        $d30 = $d31 / $d29;

        d52 = d50 - $d30;

        $d33 = r0.<org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: double minVariance>;

        $i52 = staticinvoke <java.lang.Double: int compare(double,double)>($d33, #NaN);

        if $i52 != 0 goto label07;

        $i57 = virtualinvoke r2.<org.apache.mahout.classifier.df.data.Data: int size()>();

        $d39 = (double) $i57;

        $d41 = d52 / $d39;

        $d40 = r0.<org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: double minVarianceProportion>;

        $d42 = $d41 * $d40;

        r0.<org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: double minVariance> = $d42;

        $r86 = <org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: org.slf4j.Logger log>;

        $d43 = r0.<org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: double minVariance>;

        $r77 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d43);

        interfaceinvoke $r86.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("minVariance:{}", $r77);

     label07:
        $i51 = virtualinvoke r2.<org.apache.mahout.classifier.df.data.Data: int size()>();

        $d32 = (double) $i51;

        $d22 = d52 / $d32;

        $d23 = r0.<org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: double minVariance>;

        $b46 = $d22 cmpg $d23;

        if $b46 >= 0 goto label10;

        $r69 = <org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: org.slf4j.Logger log>;

        $r70 = newarray (java.lang.Object)[3];

        $i47 = virtualinvoke r2.<org.apache.mahout.classifier.df.data.Data: int size()>();

        $d25 = (double) $i47;

        $d24 = d52 / $d25;

        $r71 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d24);

        $r70[0] = $r71;

        $d26 = r0.<org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: double minVariance>;

        $r72 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d26);

        $r70[1] = $r72;

        $i55 = virtualinvoke r2.<org.apache.mahout.classifier.df.data.Data: int size()>();

        $d35 = (double) $i55;

        $d36 = d49 / $d35;

        $r84 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d36);

        $r70[2] = $r84;

        interfaceinvoke $r69.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("variance({}) < minVariance({}) Leaf({})", $r70);

        $r85 = new org.apache.mahout.classifier.df.node.Leaf;

        $i56 = virtualinvoke r2.<org.apache.mahout.classifier.df.data.Data: int size()>();

        $d37 = (double) $i56;

        $d38 = d49 / $d37;

        specialinvoke $r85.<org.apache.mahout.classifier.df.node.Leaf: void <init>(double)>($d38);

        return $r85;

     label08:
        $z2 = specialinvoke r0.<org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: boolean isIdentical(org.apache.mahout.classifier.df.data.Data)>(r2);

        if $z2 == 0 goto label09;

        $r76 = new org.apache.mahout.classifier.df.node.Leaf;

        $i49 = virtualinvoke r2.<org.apache.mahout.classifier.df.data.Data: int majorityLabel(java.util.Random)>(r1);

        $d28 = (double) $i49;

        specialinvoke $r76.<org.apache.mahout.classifier.df.node.Leaf: void <init>(double)>($d28);

        return $r76;

     label09:
        $z1 = virtualinvoke r2.<org.apache.mahout.classifier.df.data.Data: boolean identicalLabel()>();

        if $z1 == 0 goto label10;

        $r74 = new org.apache.mahout.classifier.df.node.Leaf;

        $r75 = virtualinvoke r2.<org.apache.mahout.classifier.df.data.Data: org.apache.mahout.classifier.df.data.Dataset getDataset()>();

        $r73 = virtualinvoke r2.<org.apache.mahout.classifier.df.data.Data: org.apache.mahout.classifier.df.data.Instance get(int)>(0);

        $d27 = virtualinvoke $r75.<org.apache.mahout.classifier.df.data.Dataset: double getLabel(org.apache.mahout.classifier.df.data.Instance)>($r73);

        specialinvoke $r74.<org.apache.mahout.classifier.df.node.Leaf: void <init>(double)>($d27);

        return $r74;

     label10:
        $r6 = r0.<org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: org.apache.mahout.classifier.df.data.Data fullSet>;

        if $r6 != null goto label11;

        r0.<org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: org.apache.mahout.classifier.df.data.Data fullSet> = r2;

     label11:
        $r7 = r0.<org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: boolean[] selected>;

        $i2 = r0.<org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: int m>;

        r91 = staticinvoke <org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: int[] randomAttributes(java.util.Random,boolean[],int)>(r1, $r7, $i2);

        if r91 == null goto label12;

        $i6 = lengthof r91;

        if $i6 != 0 goto label15;

     label12:
        $r9 = virtualinvoke r2.<org.apache.mahout.classifier.df.data.Data: org.apache.mahout.classifier.df.data.Dataset getDataset()>();

        $r8 = virtualinvoke r2.<org.apache.mahout.classifier.df.data.Data: org.apache.mahout.classifier.df.data.Dataset getDataset()>();

        $i4 = virtualinvoke $r8.<org.apache.mahout.classifier.df.data.Dataset: int getLabelId()>();

        $z3 = virtualinvoke $r9.<org.apache.mahout.classifier.df.data.Dataset: boolean isNumerical(int)>($i4);

        if $z3 == 0 goto label13;

        $i5 = virtualinvoke r2.<org.apache.mahout.classifier.df.data.Data: int size()>();

        $d0 = (double) $i5;

        d53 = d49 / $d0;

        goto label14;

     label13:
        $i3 = virtualinvoke r2.<org.apache.mahout.classifier.df.data.Data: int majorityLabel(java.util.Random)>(r1);

        d53 = (double) $i3;

     label14:
        $r10 = <org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: org.slf4j.Logger log>;

        $r12 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d53);

        interfaceinvoke $r10.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object)>("attribute which can be selected is not found Leaf({})", $r12);

        $r11 = new org.apache.mahout.classifier.df.node.Leaf;

        specialinvoke $r11.<org.apache.mahout.classifier.df.node.Leaf: void <init>(double)>(d53);

        return $r11;

     label15:
        $r14 = r0.<org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: org.apache.mahout.classifier.df.split.IgSplit igSplit>;

        if $r14 != null goto label17;

        $r62 = virtualinvoke r2.<org.apache.mahout.classifier.df.data.Data: org.apache.mahout.classifier.df.data.Dataset getDataset()>();

        $r68 = virtualinvoke r2.<org.apache.mahout.classifier.df.data.Data: org.apache.mahout.classifier.df.data.Dataset getDataset()>();

        $i45 = virtualinvoke $r68.<org.apache.mahout.classifier.df.data.Dataset: int getLabelId()>();

        $z17 = virtualinvoke $r62.<org.apache.mahout.classifier.df.data.Dataset: boolean isNumerical(int)>($i45);

        if $z17 == 0 goto label16;

        $r66 = new org.apache.mahout.classifier.df.split.RegressionSplit;

        specialinvoke $r66.<org.apache.mahout.classifier.df.split.RegressionSplit: void <init>()>();

        r0.<org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: org.apache.mahout.classifier.df.split.IgSplit igSplit> = $r66;

        goto label17;

     label16:
        $r67 = new org.apache.mahout.classifier.df.split.OptIgSplit;

        specialinvoke $r67.<org.apache.mahout.classifier.df.split.OptIgSplit: void <init>()>();

        r0.<org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: org.apache.mahout.classifier.df.split.IgSplit igSplit> = $r67;

     label17:
        r92 = null;

        i64 = lengthof r91;

        i65 = 0;

     label18:
        if i65 >= i64 goto label21;

        i66 = r91[i65];

        $r63 = r0.<org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: org.apache.mahout.classifier.df.split.IgSplit igSplit>;

        r94 = virtualinvoke $r63.<org.apache.mahout.classifier.df.split.IgSplit: org.apache.mahout.classifier.df.split.Split computeSplit(org.apache.mahout.classifier.df.data.Data,int)>(r2, i66);

        if r92 == null goto label19;

        $d20 = virtualinvoke r92.<org.apache.mahout.classifier.df.split.Split: double getIg()>();

        $d19 = virtualinvoke r94.<org.apache.mahout.classifier.df.split.Split: double getIg()>();

        $b43 = $d20 cmpg $d19;

        if $b43 >= 0 goto label20;

     label19:
        r92 = r94;

     label20:
        i65 = i65 + 1;

        goto label18;

     label21:
        $d1 = virtualinvoke r92.<org.apache.mahout.classifier.df.split.Split: double getIg()>();

        $b7 = $d1 cmpg 1.0E-6;

        if $b7 >= 0 goto label24;

        $r58 = virtualinvoke r2.<org.apache.mahout.classifier.df.data.Data: org.apache.mahout.classifier.df.data.Dataset getDataset()>();

        $r59 = virtualinvoke r2.<org.apache.mahout.classifier.df.data.Data: org.apache.mahout.classifier.df.data.Dataset getDataset()>();

        $i40 = virtualinvoke $r59.<org.apache.mahout.classifier.df.data.Dataset: int getLabelId()>();

        $z16 = virtualinvoke $r58.<org.apache.mahout.classifier.df.data.Dataset: boolean isNumerical(int)>($i40);

        if $z16 == 0 goto label22;

        $i44 = virtualinvoke r2.<org.apache.mahout.classifier.df.data.Data: int size()>();

        $d21 = (double) $i44;

        d54 = d49 / $d21;

        goto label23;

     label22:
        $i41 = virtualinvoke r2.<org.apache.mahout.classifier.df.data.Data: int majorityLabel(java.util.Random)>(r1);

        d54 = (double) $i41;

     label23:
        $r57 = <org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: org.slf4j.Logger log>;

        $r65 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d54);

        interfaceinvoke $r57.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("ig is near to zero Leaf({})", $r65);

        $r64 = new org.apache.mahout.classifier.df.node.Leaf;

        specialinvoke $r64.<org.apache.mahout.classifier.df.node.Leaf: void <init>(double)>(d54);

        return $r64;

     label24:
        $r15 = <org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: org.slf4j.Logger log>;

        $r13 = newarray (java.lang.Object)[3];

        $i8 = virtualinvoke r92.<org.apache.mahout.classifier.df.split.Split: int getAttr()>();

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);

        $r13[0] = $r17;

        $d2 = virtualinvoke r92.<org.apache.mahout.classifier.df.split.Split: double getSplit()>();

        $r16 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d2);

        $r13[1] = $r16;

        $d3 = virtualinvoke r92.<org.apache.mahout.classifier.df.split.Split: double getIg()>();

        $r19 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d3);

        $r13[2] = $r19;

        interfaceinvoke $r15.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("best split attr:{}, split:{}, ig:{}", $r13);

        $r18 = r0.<org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: boolean[] selected>;

        $i10 = virtualinvoke r92.<org.apache.mahout.classifier.df.split.Split: int getAttr()>();

        z20 = $r18[$i10];

        if z20 == 0 goto label25;

        $r60 = <org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: org.slf4j.Logger log>;

        $i42 = virtualinvoke r92.<org.apache.mahout.classifier.df.split.Split: int getAttr()>();

        $r61 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i42);

        interfaceinvoke $r60.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object)>("attribute {} already selected in a parent node", $r61);

     label25:
        $r20 = virtualinvoke r2.<org.apache.mahout.classifier.df.data.Data: org.apache.mahout.classifier.df.data.Dataset getDataset()>();

        $i9 = virtualinvoke r92.<org.apache.mahout.classifier.df.split.Split: int getAttr()>();

        $z4 = virtualinvoke $r20.<org.apache.mahout.classifier.df.data.Dataset: boolean isNumerical(int)>($i9);

        if $z4 == 0 goto label35;

        r95 = null;

        $i27 = virtualinvoke r92.<org.apache.mahout.classifier.df.split.Split: int getAttr()>();

        $d11 = virtualinvoke r92.<org.apache.mahout.classifier.df.split.Split: double getSplit()>();

        $r42 = staticinvoke <org.apache.mahout.classifier.df.data.conditions.Condition: org.apache.mahout.classifier.df.data.conditions.Condition lesser(int,double)>($i27, $d11);

        r96 = virtualinvoke r2.<org.apache.mahout.classifier.df.data.Data: org.apache.mahout.classifier.df.data.Data subset(org.apache.mahout.classifier.df.data.conditions.Condition)>($r42);

        $i32 = virtualinvoke r92.<org.apache.mahout.classifier.df.split.Split: int getAttr()>();

        $d14 = virtualinvoke r92.<org.apache.mahout.classifier.df.split.Split: double getSplit()>();

        $r47 = staticinvoke <org.apache.mahout.classifier.df.data.conditions.Condition: org.apache.mahout.classifier.df.data.conditions.Condition greaterOrEquals(int,double)>($i32, $d14);

        r97 = virtualinvoke r2.<org.apache.mahout.classifier.df.data.Data: org.apache.mahout.classifier.df.data.Data subset(org.apache.mahout.classifier.df.data.conditions.Condition)>($r47);

        $z14 = virtualinvoke r96.<org.apache.mahout.classifier.df.data.Data: boolean isEmpty()>();

        if $z14 != 0 goto label26;

        $z15 = virtualinvoke r97.<org.apache.mahout.classifier.df.data.Data: boolean isEmpty()>();

        if $z15 == 0 goto label27;

     label26:
        $r48 = r0.<org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: boolean[] selected>;

        $i33 = virtualinvoke r92.<org.apache.mahout.classifier.df.split.Split: int getAttr()>();

        $r48[$i33] = 1;

        goto label28;

     label27:
        r95 = r0.<org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: boolean[] selected>;

        $r54 = virtualinvoke r2.<org.apache.mahout.classifier.df.data.Data: org.apache.mahout.classifier.df.data.Dataset getDataset()>();

        $r53 = r0.<org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: boolean[] selected>;

        $r55 = staticinvoke <org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: boolean[] cloneCategoricalAttributes(org.apache.mahout.classifier.df.data.Dataset,boolean[])>($r54, $r53);

        r0.<org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: boolean[] selected> = $r55;

     label28:
        $i30 = virtualinvoke r96.<org.apache.mahout.classifier.df.data.Data: int size()>();

        $d12 = (double) $i30;

        $d13 = r0.<org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: double minSplitNum>;

        $b29 = $d12 cmpg $d13;

        if $b29 < 0 goto label29;

        $i34 = virtualinvoke r97.<org.apache.mahout.classifier.df.data.Data: int size()>();

        $d16 = (double) $i34;

        $d15 = r0.<org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: double minSplitNum>;

        $b35 = $d16 cmpg $d15;

        if $b35 >= 0 goto label32;

     label29:
        $r46 = virtualinvoke r2.<org.apache.mahout.classifier.df.data.Data: org.apache.mahout.classifier.df.data.Dataset getDataset()>();

        $r45 = virtualinvoke r2.<org.apache.mahout.classifier.df.data.Data: org.apache.mahout.classifier.df.data.Dataset getDataset()>();

        $i31 = virtualinvoke $r45.<org.apache.mahout.classifier.df.data.Dataset: int getLabelId()>();

        $z13 = virtualinvoke $r46.<org.apache.mahout.classifier.df.data.Dataset: boolean isNumerical(int)>($i31);

        if $z13 == 0 goto label30;

        $i37 = virtualinvoke r2.<org.apache.mahout.classifier.df.data.Data: int size()>();

        $d17 = (double) $i37;

        d55 = d49 / $d17;

        goto label31;

     label30:
        $i36 = virtualinvoke r2.<org.apache.mahout.classifier.df.data.Data: int majorityLabel(java.util.Random)>(r1);

        d55 = (double) $i36;

     label31:
        $r51 = <org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: org.slf4j.Logger log>;

        $r50 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d55);

        interfaceinvoke $r51.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("branch is not split Leaf({})", $r50);

        $r52 = new org.apache.mahout.classifier.df.node.Leaf;

        specialinvoke $r52.<org.apache.mahout.classifier.df.node.Leaf: void <init>(double)>(d55);

        return $r52;

     label32:
        r98 = virtualinvoke r0.<org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: org.apache.mahout.classifier.df.node.Node build(java.util.Random,org.apache.mahout.classifier.df.data.Data)>(r1, r96);

        r99 = virtualinvoke r0.<org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: org.apache.mahout.classifier.df.node.Node build(java.util.Random,org.apache.mahout.classifier.df.data.Data)>(r1, r97);

        if r95 == null goto label33;

        r0.<org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: boolean[] selected> = r95;

        goto label34;

     label33:
        $r49 = r0.<org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: boolean[] selected>;

        $i38 = virtualinvoke r92.<org.apache.mahout.classifier.df.split.Split: int getAttr()>();

        $r49[$i38] = z20;

     label34:
        $r56 = new org.apache.mahout.classifier.df.node.NumericalNode;

        $i39 = virtualinvoke r92.<org.apache.mahout.classifier.df.split.Split: int getAttr()>();

        $d18 = virtualinvoke r92.<org.apache.mahout.classifier.df.split.Split: double getSplit()>();

        specialinvoke $r56.<org.apache.mahout.classifier.df.node.NumericalNode: void <init>(int,double,org.apache.mahout.classifier.df.node.Node,org.apache.mahout.classifier.df.node.Node)>($i39, $d18, r98, r99);

        r100 = $r56;

        goto label53;

     label35:
        $i13 = virtualinvoke r92.<org.apache.mahout.classifier.df.split.Split: int getAttr()>();

        r101 = virtualinvoke r2.<org.apache.mahout.classifier.df.data.Data: double[] values(int)>($i13);

        r102 = null;

        $z5 = r0.<org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: boolean complemented>;

        if $z5 == 0 goto label38;

        $r43 = new java.util.HashSet;

        specialinvoke $r43.<java.util.HashSet: void <init>()>();

        r102 = $r43;

        r103 = r101;

        i67 = lengthof r101;

        i68 = 0;

     label36:
        if i68 >= i67 goto label37;

        d56 = r103[i68];

        $r41 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d56);

        interfaceinvoke $r43.<java.util.Collection: boolean add(java.lang.Object)>($r41);

        i68 = i68 + 1;

        goto label36;

     label37:
        $r44 = r0.<org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: org.apache.mahout.classifier.df.data.Data fullSet>;

        $i28 = virtualinvoke r92.<org.apache.mahout.classifier.df.split.Split: int getAttr()>();

        r101 = virtualinvoke $r44.<org.apache.mahout.classifier.df.data.Data: double[] values(int)>($i28);

     label38:
        i69 = 0;

        $i14 = lengthof r101;

        r104 = newarray (org.apache.mahout.classifier.df.data.Data)[$i14];

        i70 = 0;

     label39:
        $i71 = lengthof r101;

        if i70 >= $i71 goto label42;

        $z10 = r0.<org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: boolean complemented>;

        if $z10 == 0 goto label40;

        $d10 = r101[i70];

        $r40 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d10);

        $z11 = interfaceinvoke r102.<java.util.Collection: boolean contains(java.lang.Object)>($r40);

        if $z11 != 0 goto label40;

        goto label41;

     label40:
        $i25 = virtualinvoke r92.<org.apache.mahout.classifier.df.split.Split: int getAttr()>();

        $d7 = r101[i70];

        $r39 = staticinvoke <org.apache.mahout.classifier.df.data.conditions.Condition: org.apache.mahout.classifier.df.data.conditions.Condition equals(int,double)>($i25, $d7);

        $r38 = virtualinvoke r2.<org.apache.mahout.classifier.df.data.Data: org.apache.mahout.classifier.df.data.Data subset(org.apache.mahout.classifier.df.data.conditions.Condition)>($r39);

        r104[i70] = $r38;

        $r37 = r104[i70];

        $i24 = virtualinvoke $r37.<org.apache.mahout.classifier.df.data.Data: int size()>();

        $d8 = (double) $i24;

        $d9 = r0.<org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: double minSplitNum>;

        $b26 = $d8 cmpl $d9;

        if $b26 < 0 goto label41;

        i69 = i69 + 1;

     label41:
        i70 = i70 + 1;

        goto label39;

     label42:
        if i69 >= 2 goto label45;

        $r32 = virtualinvoke r2.<org.apache.mahout.classifier.df.data.Data: org.apache.mahout.classifier.df.data.Dataset getDataset()>();

        $r33 = virtualinvoke r2.<org.apache.mahout.classifier.df.data.Data: org.apache.mahout.classifier.df.data.Dataset getDataset()>();

        $i21 = virtualinvoke $r33.<org.apache.mahout.classifier.df.data.Dataset: int getLabelId()>();

        $z9 = virtualinvoke $r32.<org.apache.mahout.classifier.df.data.Dataset: boolean isNumerical(int)>($i21);

        if $z9 == 0 goto label43;

        $i22 = virtualinvoke r2.<org.apache.mahout.classifier.df.data.Data: int size()>();

        $d6 = (double) $i22;

        d57 = d49 / $d6;

        goto label44;

     label43:
        $i23 = virtualinvoke r2.<org.apache.mahout.classifier.df.data.Data: int majorityLabel(java.util.Random)>(r1);

        d57 = (double) $i23;

     label44:
        $r36 = <org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: org.slf4j.Logger log>;

        $r35 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d57);

        interfaceinvoke $r36.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("branch is not split Leaf({})", $r35);

        $r34 = new org.apache.mahout.classifier.df.node.Leaf;

        specialinvoke $r34.<org.apache.mahout.classifier.df.node.Leaf: void <init>(double)>(d57);

        return $r34;

     label45:
        $r21 = r0.<org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: boolean[] selected>;

        $i11 = virtualinvoke r92.<org.apache.mahout.classifier.df.split.Split: int getAttr()>();

        $r21[$i11] = 1;

        $i12 = lengthof r101;

        r105 = newarray (org.apache.mahout.classifier.df.node.Node)[$i12];

        i72 = 0;

     label46:
        $i16 = lengthof r101;

        if i72 >= $i16 goto label52;

        $z6 = r0.<org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: boolean complemented>;

        if $z6 == 0 goto label50;

        if r102 == null goto label47;

        $d5 = r101[i72];

        $r31 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d5);

        $z8 = interfaceinvoke r102.<java.util.Collection: boolean contains(java.lang.Object)>($r31);

        if $z8 != 0 goto label50;

     label47:
        $r28 = virtualinvoke r2.<org.apache.mahout.classifier.df.data.Data: org.apache.mahout.classifier.df.data.Dataset getDataset()>();

        $r27 = virtualinvoke r2.<org.apache.mahout.classifier.df.data.Data: org.apache.mahout.classifier.df.data.Dataset getDataset()>();

        $i18 = virtualinvoke $r27.<org.apache.mahout.classifier.df.data.Dataset: int getLabelId()>();

        $z7 = virtualinvoke $r28.<org.apache.mahout.classifier.df.data.Dataset: boolean isNumerical(int)>($i18);

        if $z7 == 0 goto label48;

        $i20 = virtualinvoke r2.<org.apache.mahout.classifier.df.data.Data: int size()>();

        $d4 = (double) $i20;

        d58 = d49 / $d4;

        goto label49;

     label48:
        $i19 = virtualinvoke r2.<org.apache.mahout.classifier.df.data.Data: int majorityLabel(java.util.Random)>(r1);

        d58 = (double) $i19;

     label49:
        $r26 = <org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: org.slf4j.Logger log>;

        $r29 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d58);

        interfaceinvoke $r26.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("complemented Leaf({})", $r29);

        $r30 = new org.apache.mahout.classifier.df.node.Leaf;

        specialinvoke $r30.<org.apache.mahout.classifier.df.node.Leaf: void <init>(double)>(d58);

        r105[i72] = $r30;

        goto label51;

     label50:
        $r22 = r104[i72];

        $r23 = virtualinvoke r0.<org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: org.apache.mahout.classifier.df.node.Node build(java.util.Random,org.apache.mahout.classifier.df.data.Data)>(r1, $r22);

        r105[i72] = $r23;

     label51:
        i72 = i72 + 1;

        goto label46;

     label52:
        $r24 = r0.<org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: boolean[] selected>;

        $i17 = virtualinvoke r92.<org.apache.mahout.classifier.df.split.Split: int getAttr()>();

        $r24[$i17] = z20;

        $r25 = new org.apache.mahout.classifier.df.node.CategoricalNode;

        $i15 = virtualinvoke r92.<org.apache.mahout.classifier.df.split.Split: int getAttr()>();

        specialinvoke $r25.<org.apache.mahout.classifier.df.node.CategoricalNode: void <init>(int,double[],org.apache.mahout.classifier.df.node.Node[])>($i15, r101, r105);

        r100 = $r25;

     label53:
        return r100;
    }

    private boolean isIdentical(org.apache.mahout.classifier.df.data.Data)
    {
        org.apache.mahout.classifier.df.builder.DecisionTreeBuilder r0;
        org.apache.mahout.classifier.df.data.Data r1;
        org.apache.mahout.classifier.df.data.Instance r2, $r5;
        boolean $z0, $z1;
        boolean[] $r3, $r4;
        int $i0, $i1, i3, i4;
        double $d0, $d1;
        byte $b2;

        r0 := @this: org.apache.mahout.classifier.df.builder.DecisionTreeBuilder;

        r1 := @parameter0: org.apache.mahout.classifier.df.data.Data;

        $z0 = virtualinvoke r1.<org.apache.mahout.classifier.df.data.Data: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        r2 = virtualinvoke r1.<org.apache.mahout.classifier.df.data.Data: org.apache.mahout.classifier.df.data.Instance get(int)>(0);

        i3 = 0;

     label2:
        $r3 = r0.<org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: boolean[] selected>;

        $i0 = lengthof $r3;

        if i3 >= $i0 goto label7;

        $r4 = r0.<org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: boolean[] selected>;

        $z1 = $r4[i3];

        if $z1 == 0 goto label3;

        goto label6;

     label3:
        i4 = 1;

     label4:
        $i1 = virtualinvoke r1.<org.apache.mahout.classifier.df.data.Data: int size()>();

        if i4 >= $i1 goto label6;

        $r5 = virtualinvoke r1.<org.apache.mahout.classifier.df.data.Data: org.apache.mahout.classifier.df.data.Instance get(int)>(i4);

        $d0 = virtualinvoke $r5.<org.apache.mahout.classifier.df.data.Instance: double get(int)>(i3);

        $d1 = virtualinvoke r2.<org.apache.mahout.classifier.df.data.Instance: double get(int)>(i3);

        $b2 = $d0 cmpl $d1;

        if $b2 == 0 goto label5;

        return 0;

     label5:
        i4 = i4 + 1;

        goto label4;

     label6:
        i3 = i3 + 1;

        goto label2;

     label7:
        return 1;
    }

    private static boolean[] cloneCategoricalAttributes(org.apache.mahout.classifier.df.data.Dataset, boolean[])
    {
        org.apache.mahout.classifier.df.data.Dataset r0;
        boolean[] r1, r2;
        int $i0, $i1, $i2, i3, $i4;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: org.apache.mahout.classifier.df.data.Dataset;

        r1 := @parameter1: boolean[];

        $i0 = lengthof r1;

        r2 = newarray (boolean)[$i0];

        i3 = 0;

     label1:
        $i1 = lengthof r1;

        if i3 >= $i1 goto label4;

        $i4 = i3;

        $z0 = virtualinvoke r0.<org.apache.mahout.classifier.df.data.Dataset: boolean isNumerical(int)>(i3);

        if $z0 != 0 goto label2;

        $z1 = r1[i3];

        if $z1 == 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        r2[$i4] = $z2;

        i3 = i3 + 1;

        goto label1;

     label4:
        $i2 = virtualinvoke r0.<org.apache.mahout.classifier.df.data.Dataset: int getLabelId()>();

        r2[$i2] = 1;

        return r2;
    }

    private static int[] randomAttributes(java.util.Random, boolean[], int)
    {
        java.util.Random r0;
        boolean[] r1;
        int i0, i1, $i2, $i3, $i4, i5, i6, i7, i8, i9, i10, i11, i12, i13;
        boolean $z0, $z1, z2;
        int[] $r2, r5, r6;
        org.slf4j.Logger $r3;

        r0 := @parameter0: java.util.Random;

        r1 := @parameter1: boolean[];

        i0 := @parameter2: int;

        i5 = 0;

        i6 = lengthof r1;

        i7 = 0;

     label01:
        if i7 >= i6 goto label03;

        z2 = r1[i7];

        if z2 != 0 goto label02;

        i5 = i5 + 1;

     label02:
        i7 = i7 + 1;

        goto label01;

     label03:
        if i5 != 0 goto label04;

        $r3 = <org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: org.slf4j.Logger log>;

        interfaceinvoke $r3.<org.slf4j.Logger: void warn(java.lang.String)>("All attributes are selected !");

        $r2 = <org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: int[] NO_ATTRIBUTES>;

        return $r2;

     label04:
        if i5 > i0 goto label07;

        r5 = newarray (int)[i5];

        i8 = 0;

        i9 = 0;

     label05:
        $i3 = lengthof r1;

        if i9 >= $i3 goto label12;

        $z1 = r1[i9];

        if $z1 != 0 goto label06;

        $i4 = i8;

        i8 = i8 + 1;

        r5[$i4] = i9;

     label06:
        i9 = i9 + 1;

        goto label05;

     label07:
        r5 = newarray (int)[i0];

        i10 = 0;

     label08:
        if i10 >= i0 goto label10;

     label09:
        $i2 = lengthof r1;

        i11 = virtualinvoke r0.<java.util.Random: int nextInt(int)>($i2);

        $z0 = r1[i11];

        if $z0 != 0 goto label09;

        r5[i10] = i11;

        r1[i11] = 1;

        i10 = i10 + 1;

        goto label08;

     label10:
        r6 = r5;

        i12 = lengthof r5;

        i13 = 0;

     label11:
        if i13 >= i12 goto label12;

        i1 = r6[i13];

        r1[i1] = 0;

        i13 = i13 + 1;

        goto label11;

     label12:
        return r5;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;
        int[] $r1;

        <org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: double EPSILON> = 1.0E-6;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "org/apache/mahout/classifier/df/builder/DecisionTreeBuilder");

        <org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: org.slf4j.Logger log> = $r0;

        $r1 = newarray (int)[0];

        <org.apache.mahout.classifier.df.builder.DecisionTreeBuilder: int[] NO_ATTRIBUTES> = $r1;

        return;
    }
}
