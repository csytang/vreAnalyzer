public class org.apache.mahout.classifier.evaluation.Auc extends java.lang.Object
{
    private int maxBufferSize;
    private final org.apache.mahout.math.list.DoubleArrayList[] scores;
    private final java.util.Random rand;
    private int samples;
    private final double threshold;
    private final org.apache.mahout.math.Matrix confusion;
    private final org.apache.mahout.math.DenseMatrix entropy;
    private boolean probabilityScore;
    private boolean hasScore;

    public void <init>(double)
    {
        org.apache.mahout.classifier.evaluation.Auc r0;
        double d0;
        org.apache.mahout.math.list.DoubleArrayList[] $r1;
        org.apache.mahout.math.list.DoubleArrayList $r2, $r3;
        org.apache.mahout.math.DenseMatrix $r4, $r5;
        org.apache.mahout.common.RandomWrapper $r6;

        r0 := @this: org.apache.mahout.classifier.evaluation.Auc;

        d0 := @parameter0: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.mahout.classifier.evaluation.Auc: int maxBufferSize> = 10000;

        $r1 = newarray (org.apache.mahout.math.list.DoubleArrayList)[2];

        $r2 = new org.apache.mahout.math.list.DoubleArrayList;

        specialinvoke $r2.<org.apache.mahout.math.list.DoubleArrayList: void <init>()>();

        $r1[0] = $r2;

        $r3 = new org.apache.mahout.math.list.DoubleArrayList;

        specialinvoke $r3.<org.apache.mahout.math.list.DoubleArrayList: void <init>()>();

        $r1[1] = $r3;

        r0.<org.apache.mahout.classifier.evaluation.Auc: org.apache.mahout.math.list.DoubleArrayList[] scores> = $r1;

        r0.<org.apache.mahout.classifier.evaluation.Auc: boolean probabilityScore> = 1;

        $r4 = new org.apache.mahout.math.DenseMatrix;

        specialinvoke $r4.<org.apache.mahout.math.DenseMatrix: void <init>(int,int)>(2, 2);

        r0.<org.apache.mahout.classifier.evaluation.Auc: org.apache.mahout.math.Matrix confusion> = $r4;

        $r5 = new org.apache.mahout.math.DenseMatrix;

        specialinvoke $r5.<org.apache.mahout.math.DenseMatrix: void <init>(int,int)>(2, 2);

        r0.<org.apache.mahout.classifier.evaluation.Auc: org.apache.mahout.math.DenseMatrix entropy> = $r5;

        $r6 = staticinvoke <org.apache.mahout.common.RandomUtils: org.apache.mahout.common.RandomWrapper getRandom()>();

        r0.<org.apache.mahout.classifier.evaluation.Auc: java.util.Random rand> = $r6;

        r0.<org.apache.mahout.classifier.evaluation.Auc: double threshold> = d0;

        return;
    }

    public void <init>()
    {
        org.apache.mahout.classifier.evaluation.Auc r0;

        r0 := @this: org.apache.mahout.classifier.evaluation.Auc;

        specialinvoke r0.<org.apache.mahout.classifier.evaluation.Auc: void <init>(double)>(0.5);

        return;
    }

    public void add(int, double)
    {
        org.apache.mahout.classifier.evaluation.Auc r0;
        int i0, i2, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, d18;
        byte $b3, $b12;
        org.apache.mahout.math.Matrix $r1, $r2;
        boolean $z0, $z1;
        org.apache.mahout.math.list.DoubleArrayList[] $r3;
        java.util.Random $r4;
        org.apache.mahout.math.DenseMatrix $r5, $r6, $r7, $r8;
        org.apache.mahout.math.list.DoubleArrayList r10;

        r0 := @this: org.apache.mahout.classifier.evaluation.Auc;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        if i0 == 0 goto label1;

        if i0 != 1 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "True value must be 0 or 1");

        r0.<org.apache.mahout.classifier.evaluation.Auc: boolean hasScore> = 1;

        $d3 = r0.<org.apache.mahout.classifier.evaluation.Auc: double threshold>;

        $b3 = d0 cmpl $d3;

        if $b3 <= 0 goto label4;

        $b12 = 1;

        goto label5;

     label4:
        $b12 = 0;

     label5:
        $r2 = r0.<org.apache.mahout.classifier.evaluation.Auc: org.apache.mahout.math.Matrix confusion>;

        $r1 = r0.<org.apache.mahout.classifier.evaluation.Auc: org.apache.mahout.math.Matrix confusion>;

        $d4 = interfaceinvoke $r1.<org.apache.mahout.math.Matrix: double get(int,int)>(i0, $b12);

        $d5 = $d4 + 1.0;

        interfaceinvoke $r2.<org.apache.mahout.math.Matrix: void set(int,int,double)>(i0, $b12, $d5);

        $i4 = r0.<org.apache.mahout.classifier.evaluation.Auc: int samples>;

        $i5 = $i4 + 1;

        r0.<org.apache.mahout.classifier.evaluation.Auc: int samples> = $i5;

        $z0 = virtualinvoke r0.<org.apache.mahout.classifier.evaluation.Auc: boolean isProbabilityScore()>();

        if $z0 == 0 goto label6;

        $d6 = staticinvoke <java.lang.Math: double min(double,double)>(d0, 1.0);

        d18 = staticinvoke <java.lang.Math: double max(double,double)>(1.0E-20, $d6);

        $r5 = r0.<org.apache.mahout.classifier.evaluation.Auc: org.apache.mahout.math.DenseMatrix entropy>;

        d1 = virtualinvoke $r5.<org.apache.mahout.math.DenseMatrix: double get(int,int)>(i0, 0);

        $r6 = r0.<org.apache.mahout.classifier.evaluation.Auc: org.apache.mahout.math.DenseMatrix entropy>;

        $d8 = neg d18;

        $d7 = staticinvoke <java.lang.Math: double log1p(double)>($d8);

        $d9 = $d7 - d1;

        $i10 = r0.<org.apache.mahout.classifier.evaluation.Auc: int samples>;

        $d11 = (double) $i10;

        $d10 = $d9 / $d11;

        $d12 = $d10 + d1;

        virtualinvoke $r6.<org.apache.mahout.math.DenseMatrix: void set(int,int,double)>(i0, 0, $d12);

        $r8 = r0.<org.apache.mahout.classifier.evaluation.Auc: org.apache.mahout.math.DenseMatrix entropy>;

        d2 = virtualinvoke $r8.<org.apache.mahout.math.DenseMatrix: double get(int,int)>(i0, 1);

        $r7 = r0.<org.apache.mahout.classifier.evaluation.Auc: org.apache.mahout.math.DenseMatrix entropy>;

        $d14 = staticinvoke <java.lang.Math: double log(double)>(d18);

        $d17 = $d14 - d2;

        $i11 = r0.<org.apache.mahout.classifier.evaluation.Auc: int samples>;

        $d13 = (double) $i11;

        $d16 = $d17 / $d13;

        $d15 = $d16 + d2;

        virtualinvoke $r7.<org.apache.mahout.math.DenseMatrix: void set(int,int,double)>(i0, 1, $d15);

     label6:
        $r3 = r0.<org.apache.mahout.classifier.evaluation.Auc: org.apache.mahout.math.list.DoubleArrayList[] scores>;

        r10 = $r3[i0];

        $i6 = virtualinvoke r10.<org.apache.mahout.math.list.DoubleArrayList: int size()>();

        $i8 = r0.<org.apache.mahout.classifier.evaluation.Auc: int maxBufferSize>;

        if $i6 < $i8 goto label7;

        $r4 = r0.<org.apache.mahout.classifier.evaluation.Auc: java.util.Random rand>;

        $i7 = r0.<org.apache.mahout.classifier.evaluation.Auc: int samples>;

        i2 = virtualinvoke $r4.<java.util.Random: int nextInt(int)>($i7);

        $i9 = virtualinvoke r10.<org.apache.mahout.math.list.DoubleArrayList: int size()>();

        if i2 >= $i9 goto label8;

        virtualinvoke r10.<org.apache.mahout.math.list.DoubleArrayList: void set(int,double)>(i2, d0);

        goto label8;

     label7:
        virtualinvoke r10.<org.apache.mahout.math.list.DoubleArrayList: void add(double)>(d0);

     label8:
        return;
    }

    public void add(int, int)
    {
        org.apache.mahout.classifier.evaluation.Auc r0;
        int i0, i1;
        org.apache.mahout.math.Matrix $r1, $r2;
        double $d0, $d1;
        boolean $z0;

        r0 := @this: org.apache.mahout.classifier.evaluation.Auc;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0.<org.apache.mahout.classifier.evaluation.Auc: boolean hasScore> = 0;

        if i0 == 0 goto label1;

        if i0 != 1 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "True value must be 0 or 1");

        $r2 = r0.<org.apache.mahout.classifier.evaluation.Auc: org.apache.mahout.math.Matrix confusion>;

        $r1 = r0.<org.apache.mahout.classifier.evaluation.Auc: org.apache.mahout.math.Matrix confusion>;

        $d0 = interfaceinvoke $r1.<org.apache.mahout.math.Matrix: double get(int,int)>(i0, i1);

        $d1 = $d0 + 1.0;

        interfaceinvoke $r2.<org.apache.mahout.math.Matrix: void set(int,int,double)>(i0, i1, $d1);

        return;
    }

    public double auc()
    {
        org.apache.mahout.classifier.evaluation.Auc r0;
        double d0, d1, d2, d3, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, d34, $d35;
        org.apache.mahout.math.list.DoubleArrayList[] $r1, $r2, $r4, $r8, $r10, $r11, $r13, $r15;
        boolean $z0;
        org.apache.mahout.math.list.DoubleArrayList $r3, $r5, $r6, $r7, $r9, $r12, $r14, $r16;
        int $i0, $i2, $i6, $i11, $i12, $i13, i16, i17, i18, i19, i20;
        byte $b1, $b3, $b4, $b5, $b7, $b8, $b9, $b10, $b14, $b15, $b21;

        r0 := @this: org.apache.mahout.classifier.evaluation.Auc;

        $z0 = r0.<org.apache.mahout.classifier.evaluation.Auc: boolean hasScore>;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Can\'t compute AUC for classifier without a score");

        $r1 = r0.<org.apache.mahout.classifier.evaluation.Auc: org.apache.mahout.math.list.DoubleArrayList[] scores>;

        $r3 = $r1[0];

        virtualinvoke $r3.<org.apache.mahout.math.list.DoubleArrayList: void sort()>();

        $r2 = r0.<org.apache.mahout.classifier.evaluation.Auc: org.apache.mahout.math.list.DoubleArrayList[] scores>;

        $r5 = $r2[1];

        virtualinvoke $r5.<org.apache.mahout.math.list.DoubleArrayList: void sort()>();

        $r4 = r0.<org.apache.mahout.classifier.evaluation.Auc: org.apache.mahout.math.list.DoubleArrayList[] scores>;

        $r6 = $r4[0];

        $i0 = virtualinvoke $r6.<org.apache.mahout.math.list.DoubleArrayList: int size()>();

        d0 = (double) $i0;

        $r8 = r0.<org.apache.mahout.classifier.evaluation.Auc: org.apache.mahout.math.list.DoubleArrayList[] scores>;

        $r7 = $r8[1];

        $i2 = virtualinvoke $r7.<org.apache.mahout.math.list.DoubleArrayList: int size()>();

        d1 = (double) $i2;

        $b1 = d0 cmpl 0.0;

        if $b1 == 0 goto label01;

        $b3 = d1 cmpl 0.0;

        if $b3 != 0 goto label02;

     label01:
        return 0.5;

     label02:
        i16 = 0;

        i17 = 0;

        i18 = 1;

        d34 = 0.0;

     label03:
        $d5 = (double) i16;

        $b5 = $d5 cmpg d0;

        if $b5 >= 0 goto label10;

        $d23 = (double) i17;

        $b7 = $d23 cmpg d1;

        if $b7 >= 0 goto label10;

        $r10 = r0.<org.apache.mahout.classifier.evaluation.Auc: org.apache.mahout.math.list.DoubleArrayList[] scores>;

        $r9 = $r10[0];

        d2 = virtualinvoke $r9.<org.apache.mahout.math.list.DoubleArrayList: double get(int)>(i16);

        $r11 = r0.<org.apache.mahout.classifier.evaluation.Auc: org.apache.mahout.math.list.DoubleArrayList[] scores>;

        $r12 = $r11[1];

        d3 = virtualinvoke $r12.<org.apache.mahout.math.list.DoubleArrayList: double get(int)>(i17);

        $b8 = d2 cmpg d3;

        if $b8 >= 0 goto label04;

        i16 = i16 + 1;

        i18 = i18 + 1;

        goto label03;

     label04:
        $b9 = d3 cmpg d2;

        if $b9 >= 0 goto label05;

        i17 = i17 + 1;

        $d32 = (double) i18;

        d34 = d34 + $d32;

        i18 = i18 + 1;

        goto label03;

     label05:
        i19 = 0;

     label06:
        $d24 = (double) i16;

        $b10 = $d24 cmpg d0;

        if $b10 >= 0 goto label07;

        $r15 = r0.<org.apache.mahout.classifier.evaluation.Auc: org.apache.mahout.math.list.DoubleArrayList[] scores>;

        $r16 = $r15[0];

        $d33 = virtualinvoke $r16.<org.apache.mahout.math.list.DoubleArrayList: double get(int)>(i16);

        $b15 = $d33 cmpl d2;

        if $b15 != 0 goto label07;

        i19 = i19 + 1;

        i16 = i16 + 1;

        goto label06;

     label07:
        i20 = 0;

     label08:
        $d35 = (double) i17;

        $b21 = $d35 cmpg d1;

        if $b21 >= 0 goto label09;

        $r13 = r0.<org.apache.mahout.classifier.evaluation.Auc: org.apache.mahout.math.list.DoubleArrayList[] scores>;

        $r14 = $r13[1];

        $d29 = virtualinvoke $r14.<org.apache.mahout.math.list.DoubleArrayList: double get(int)>(i17);

        $b14 = $d29 cmpl d2;

        if $b14 != 0 goto label09;

        i20 = i20 + 1;

        i17 = i17 + 1;

        goto label08;

     label09:
        $d27 = (double) i18;

        $i11 = i19 + i20;

        $i12 = $i11 - 1;

        $d25 = (double) $i12;

        $d26 = $d25 / 2.0;

        $d31 = $d27 + $d26;

        $d28 = (double) i20;

        $d30 = $d31 * $d28;

        d34 = d34 + $d30;

        $i13 = i19 + i20;

        i18 = i18 + $i13;

        goto label03;

     label10:
        $d7 = (double) i17;

        $b4 = $d7 cmpg d1;

        if $b4 >= 0 goto label11;

        $d18 = (double) i18;

        $d14 = (double) i17;

        $d15 = d1 - $d14;

        $d12 = $d15 - 1.0;

        $d13 = $d12 / 2.0;

        $d17 = $d18 + $d13;

        $d19 = (double) i17;

        $d16 = d1 - $d19;

        $d22 = $d17 * $d16;

        d34 = d34 + $d22;

        $d21 = (double) i17;

        $d20 = d1 - $d21;

        $i6 = (int) $d20;

     label11:
        $d11 = d34 / d1;

        $d6 = d1 + 1.0;

        $d10 = $d6 / 2.0;

        $d8 = $d11 - $d10;

        $d9 = $d8 / d0;

        return $d9;
    }

    public org.apache.mahout.math.Matrix confusion()
    {
        org.apache.mahout.classifier.evaluation.Auc r0;
        org.apache.mahout.math.Matrix $r1;

        r0 := @this: org.apache.mahout.classifier.evaluation.Auc;

        $r1 = r0.<org.apache.mahout.classifier.evaluation.Auc: org.apache.mahout.math.Matrix confusion>;

        return $r1;
    }

    public org.apache.mahout.math.Matrix entropy()
    {
        org.apache.mahout.classifier.evaluation.Auc r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20;
        boolean $z0;
        org.apache.mahout.math.DenseMatrix $r1, $r5, $r7, $r10, $r12;
        org.apache.mahout.math.Matrix $r2, $r3, $r4, $r6, $r8, $r9, $r11;

        r0 := @this: org.apache.mahout.classifier.evaluation.Auc;

        $z0 = r0.<org.apache.mahout.classifier.evaluation.Auc: boolean hasScore>;

        if $z0 != 0 goto label1;

        $r2 = r0.<org.apache.mahout.classifier.evaluation.Auc: org.apache.mahout.math.Matrix confusion>;

        $d1 = interfaceinvoke $r2.<org.apache.mahout.math.Matrix: double get(int,int)>(1, 1);

        $d2 = 0.5 + $d1;

        $r3 = r0.<org.apache.mahout.classifier.evaluation.Auc: org.apache.mahout.math.Matrix confusion>;

        $d3 = interfaceinvoke $r3.<org.apache.mahout.math.Matrix: double get(int,int)>(0, 0);

        $d4 = 1.0 + $d3;

        $r4 = r0.<org.apache.mahout.classifier.evaluation.Auc: org.apache.mahout.math.Matrix confusion>;

        $d5 = interfaceinvoke $r4.<org.apache.mahout.math.Matrix: double get(int,int)>(1, 1);

        $d6 = $d4 + $d5;

        d0 = $d2 / $d6;

        $r5 = r0.<org.apache.mahout.classifier.evaluation.Auc: org.apache.mahout.math.DenseMatrix entropy>;

        $r6 = r0.<org.apache.mahout.classifier.evaluation.Auc: org.apache.mahout.math.Matrix confusion>;

        $d8 = interfaceinvoke $r6.<org.apache.mahout.math.Matrix: double get(int,int)>(0, 0);

        $d7 = neg d0;

        $d10 = staticinvoke <java.lang.Math: double log1p(double)>($d7);

        $d9 = $d8 * $d10;

        virtualinvoke $r5.<org.apache.mahout.math.DenseMatrix: void set(int,int,double)>(0, 0, $d9);

        $r7 = r0.<org.apache.mahout.classifier.evaluation.Auc: org.apache.mahout.math.DenseMatrix entropy>;

        $r8 = r0.<org.apache.mahout.classifier.evaluation.Auc: org.apache.mahout.math.Matrix confusion>;

        $d12 = interfaceinvoke $r8.<org.apache.mahout.math.Matrix: double get(int,int)>(0, 1);

        $d11 = staticinvoke <java.lang.Math: double log(double)>(d0);

        $d13 = $d12 * $d11;

        virtualinvoke $r7.<org.apache.mahout.math.DenseMatrix: void set(int,int,double)>(0, 1, $d13);

        $r10 = r0.<org.apache.mahout.classifier.evaluation.Auc: org.apache.mahout.math.DenseMatrix entropy>;

        $r9 = r0.<org.apache.mahout.classifier.evaluation.Auc: org.apache.mahout.math.Matrix confusion>;

        $d14 = interfaceinvoke $r9.<org.apache.mahout.math.Matrix: double get(int,int)>(1, 0);

        $d16 = neg d0;

        $d17 = staticinvoke <java.lang.Math: double log1p(double)>($d16);

        $d15 = $d14 * $d17;

        virtualinvoke $r10.<org.apache.mahout.math.DenseMatrix: void set(int,int,double)>(1, 0, $d15);

        $r12 = r0.<org.apache.mahout.classifier.evaluation.Auc: org.apache.mahout.math.DenseMatrix entropy>;

        $r11 = r0.<org.apache.mahout.classifier.evaluation.Auc: org.apache.mahout.math.Matrix confusion>;

        $d18 = interfaceinvoke $r11.<org.apache.mahout.math.Matrix: double get(int,int)>(1, 1);

        $d19 = staticinvoke <java.lang.Math: double log(double)>(d0);

        $d20 = $d18 * $d19;

        virtualinvoke $r12.<org.apache.mahout.math.DenseMatrix: void set(int,int,double)>(1, 1, $d20);

     label1:
        $r1 = r0.<org.apache.mahout.classifier.evaluation.Auc: org.apache.mahout.math.DenseMatrix entropy>;

        return $r1;
    }

    public void setMaxBufferSize(int)
    {
        org.apache.mahout.classifier.evaluation.Auc r0;
        int i0;

        r0 := @this: org.apache.mahout.classifier.evaluation.Auc;

        i0 := @parameter0: int;

        r0.<org.apache.mahout.classifier.evaluation.Auc: int maxBufferSize> = i0;

        return;
    }

    public boolean isProbabilityScore()
    {
        org.apache.mahout.classifier.evaluation.Auc r0;
        boolean $z0;

        r0 := @this: org.apache.mahout.classifier.evaluation.Auc;

        $z0 = r0.<org.apache.mahout.classifier.evaluation.Auc: boolean probabilityScore>;

        return $z0;
    }

    public void setProbabilityScore(boolean)
    {
        org.apache.mahout.classifier.evaluation.Auc r0;
        boolean z0;

        r0 := @this: org.apache.mahout.classifier.evaluation.Auc;

        z0 := @parameter0: boolean;

        r0.<org.apache.mahout.classifier.evaluation.Auc: boolean probabilityScore> = z0;

        return;
    }
}
