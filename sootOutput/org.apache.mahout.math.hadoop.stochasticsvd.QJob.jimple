public final class org.apache.mahout.math.hadoop.stochasticsvd.QJob extends java.lang.Object
{
    public static final java.lang.String PROP_OMEGA_SEED;
    public static final java.lang.String PROP_K;
    public static final java.lang.String PROP_P;
    public static final java.lang.String PROP_SB_PATH;
    public static final java.lang.String PROP_AROWBLOCK_SIZE;
    public static final java.lang.String OUTPUT_RHAT;
    public static final java.lang.String OUTPUT_QHAT;

    private void <init>()
    {
        org.apache.mahout.math.hadoop.stochasticsvd.QJob r0;

        r0 := @this: org.apache.mahout.math.hadoop.stochasticsvd.QJob;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void run(org.apache.hadoop.conf.Configuration, org.apache.hadoop.fs.Path[], org.apache.hadoop.fs.Path, org.apache.hadoop.fs.Path, int, int, int, int, long, int) throws java.lang.ClassNotFoundException, java.lang.InterruptedException, java.io.IOException
    {
        org.apache.hadoop.conf.Configuration r0, $r9, $r10, $r11, $r12, $r13;
        org.apache.hadoop.fs.Path[] r1;
        org.apache.hadoop.fs.Path r2, r3;
        int i0, i1, i2, i3, i5;
        long l4, $l6;
        org.apache.hadoop.mapred.JobConf $r6;
        org.apache.hadoop.mapreduce.Job $r7;
        org.apache.hadoop.io.SequenceFile$CompressionType $r8;
        boolean $z0;
        java.io.IOException $r14;
        java.lang.String $r15;

        r0 := @parameter0: org.apache.hadoop.conf.Configuration;

        r1 := @parameter1: org.apache.hadoop.fs.Path[];

        r2 := @parameter2: org.apache.hadoop.fs.Path;

        r3 := @parameter3: org.apache.hadoop.fs.Path;

        i0 := @parameter4: int;

        i1 := @parameter5: int;

        i2 := @parameter6: int;

        i3 := @parameter7: int;

        l4 := @parameter8: long;

        i5 := @parameter9: int;

        $r6 = new org.apache.hadoop.mapred.JobConf;

        specialinvoke $r6.<org.apache.hadoop.mapred.JobConf: void <init>(org.apache.hadoop.conf.Configuration)>(r0);

        staticinvoke <org.apache.hadoop.mapred.lib.MultipleOutputs: void addNamedOutput(org.apache.hadoop.mapred.JobConf,java.lang.String,java.lang.Class,java.lang.Class,java.lang.Class)>($r6, "QHat", class "org/apache/hadoop/mapred/SequenceFileOutputFormat", class "org/apache/mahout/math/hadoop/stochasticsvd/SplitPartitionedWritable", class "org/apache/mahout/math/hadoop/stochasticsvd/DenseBlockWritable");

        staticinvoke <org.apache.hadoop.mapred.lib.MultipleOutputs: void addNamedOutput(org.apache.hadoop.mapred.JobConf,java.lang.String,java.lang.Class,java.lang.Class,java.lang.Class)>($r6, "R", class "org/apache/hadoop/mapred/SequenceFileOutputFormat", class "org/apache/mahout/math/hadoop/stochasticsvd/SplitPartitionedWritable", class "org/apache/mahout/math/VectorWritable");

        $r7 = new org.apache.hadoop.mapreduce.Job;

        specialinvoke $r7.<org.apache.hadoop.mapreduce.Job: void <init>(org.apache.hadoop.conf.Configuration)>($r6);

        virtualinvoke $r7.<org.apache.hadoop.mapreduce.Job: void setJobName(java.lang.String)>("Q-job");

        virtualinvoke $r7.<org.apache.hadoop.mapreduce.Job: void setJarByClass(java.lang.Class)>(class "org/apache/mahout/math/hadoop/stochasticsvd/QJob");

        virtualinvoke $r7.<org.apache.hadoop.mapreduce.Job: void setInputFormatClass(java.lang.Class)>(class "org/apache/hadoop/mapreduce/lib/input/SequenceFileInputFormat");

        staticinvoke <org.apache.hadoop.mapreduce.lib.input.FileInputFormat: void setInputPaths(org.apache.hadoop.mapreduce.Job,org.apache.hadoop.fs.Path[])>($r7, r1);

        if i1 <= 0 goto label1;

        $l6 = (long) i1;

        staticinvoke <org.apache.hadoop.mapreduce.lib.input.FileInputFormat: void setMinInputSplitSize(org.apache.hadoop.mapreduce.Job,long)>($r7, $l6);

     label1:
        staticinvoke <org.apache.hadoop.mapreduce.lib.output.FileOutputFormat: void setOutputPath(org.apache.hadoop.mapreduce.Job,org.apache.hadoop.fs.Path)>($r7, r3);

        staticinvoke <org.apache.hadoop.mapreduce.lib.output.FileOutputFormat: void setCompressOutput(org.apache.hadoop.mapreduce.Job,boolean)>($r7, 1);

        staticinvoke <org.apache.hadoop.mapreduce.lib.output.FileOutputFormat: void setOutputCompressorClass(org.apache.hadoop.mapreduce.Job,java.lang.Class)>($r7, class "org/apache/hadoop/io/compress/DefaultCodec");

        $r8 = <org.apache.hadoop.io.SequenceFile$CompressionType: org.apache.hadoop.io.SequenceFile$CompressionType BLOCK>;

        staticinvoke <org.apache.hadoop.mapreduce.lib.output.SequenceFileOutputFormat: void setOutputCompressionType(org.apache.hadoop.mapreduce.Job,org.apache.hadoop.io.SequenceFile$CompressionType)>($r7, $r8);

        virtualinvoke $r7.<org.apache.hadoop.mapreduce.Job: void setMapOutputKeyClass(java.lang.Class)>(class "org/apache/mahout/math/hadoop/stochasticsvd/SplitPartitionedWritable");

        virtualinvoke $r7.<org.apache.hadoop.mapreduce.Job: void setMapOutputValueClass(java.lang.Class)>(class "org/apache/mahout/math/VectorWritable");

        virtualinvoke $r7.<org.apache.hadoop.mapreduce.Job: void setOutputKeyClass(java.lang.Class)>(class "org/apache/mahout/math/hadoop/stochasticsvd/SplitPartitionedWritable");

        virtualinvoke $r7.<org.apache.hadoop.mapreduce.Job: void setOutputValueClass(java.lang.Class)>(class "org/apache/mahout/math/VectorWritable");

        virtualinvoke $r7.<org.apache.hadoop.mapreduce.Job: void setMapperClass(java.lang.Class)>(class "org/apache/mahout/math/hadoop/stochasticsvd/QJob$QMapper");

        $r10 = virtualinvoke $r7.<org.apache.hadoop.mapreduce.Job: org.apache.hadoop.conf.Configuration getConfiguration()>();

        virtualinvoke $r10.<org.apache.hadoop.conf.Configuration: void setInt(java.lang.String,int)>("ssvd.arowblock.size", i0);

        $r9 = virtualinvoke $r7.<org.apache.hadoop.mapreduce.Job: org.apache.hadoop.conf.Configuration getConfiguration()>();

        virtualinvoke $r9.<org.apache.hadoop.conf.Configuration: void setLong(java.lang.String,long)>("ssvd.omegaseed", l4);

        $r12 = virtualinvoke $r7.<org.apache.hadoop.mapreduce.Job: org.apache.hadoop.conf.Configuration getConfiguration()>();

        virtualinvoke $r12.<org.apache.hadoop.conf.Configuration: void setInt(java.lang.String,int)>("ssvd.k", i2);

        $r11 = virtualinvoke $r7.<org.apache.hadoop.mapreduce.Job: org.apache.hadoop.conf.Configuration getConfiguration()>();

        virtualinvoke $r11.<org.apache.hadoop.conf.Configuration: void setInt(java.lang.String,int)>("ssvd.p", i3);

        if r2 == null goto label2;

        $r13 = virtualinvoke $r7.<org.apache.hadoop.mapreduce.Job: org.apache.hadoop.conf.Configuration getConfiguration()>();

        $r15 = virtualinvoke r2.<org.apache.hadoop.fs.Path: java.lang.String toString()>();

        virtualinvoke $r13.<org.apache.hadoop.conf.Configuration: void set(java.lang.String,java.lang.String)>("ssvdpca.sb.path", $r15);

     label2:
        virtualinvoke $r7.<org.apache.hadoop.mapreduce.Job: void setNumReduceTasks(int)>(0);

        virtualinvoke $r7.<org.apache.hadoop.mapreduce.Job: void submit()>();

        virtualinvoke $r7.<org.apache.hadoop.mapreduce.Job: boolean waitForCompletion(boolean)>(0);

        $z0 = virtualinvoke $r7.<org.apache.hadoop.mapreduce.Job: boolean isSuccessful()>();

        if $z0 != 0 goto label3;

        $r14 = new java.io.IOException;

        specialinvoke $r14.<java.io.IOException: void <init>(java.lang.String)>("Q job unsuccessful.");

        throw $r14;

     label3:
        return;
    }

    public static void <clinit>()
    {
        <org.apache.mahout.math.hadoop.stochasticsvd.QJob: java.lang.String OUTPUT_QHAT> = "QHat";

        <org.apache.mahout.math.hadoop.stochasticsvd.QJob: java.lang.String OUTPUT_RHAT> = "R";

        <org.apache.mahout.math.hadoop.stochasticsvd.QJob: java.lang.String PROP_AROWBLOCK_SIZE> = "ssvd.arowblock.size";

        <org.apache.mahout.math.hadoop.stochasticsvd.QJob: java.lang.String PROP_SB_PATH> = "ssvdpca.sb.path";

        <org.apache.mahout.math.hadoop.stochasticsvd.QJob: java.lang.String PROP_P> = "ssvd.p";

        <org.apache.mahout.math.hadoop.stochasticsvd.QJob: java.lang.String PROP_K> = "ssvd.k";

        <org.apache.mahout.math.hadoop.stochasticsvd.QJob: java.lang.String PROP_OMEGA_SEED> = "ssvd.omegaseed";

        return;
    }
}
