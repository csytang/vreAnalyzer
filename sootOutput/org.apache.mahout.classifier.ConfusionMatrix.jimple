public class org.apache.mahout.classifier.ConfusionMatrix extends java.lang.Object
{
    private static final org.slf4j.Logger LOG;
    private final java.util.Map labelMap;
    private final int[][] confusionMatrix;
    private int samples;
    private java.lang.String defaultLabel;

    public void <init>(java.util.Collection, java.lang.String)
    {
        org.apache.mahout.classifier.ConfusionMatrix r0;
        java.util.Collection r1;
        java.lang.String r2, r4;
        java.util.Iterator r3;
        java.util.LinkedHashMap $r5;
        int $i0, $i1, $i2, $i3, $i4, i5;
        int[][] $r6;
        boolean $z0;
        java.util.Map $r7, $r11;
        java.lang.Integer $r8, $r13;
        java.lang.Object $r9;

        r0 := @this: org.apache.mahout.classifier.ConfusionMatrix;

        r1 := @parameter0: java.util.Collection;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r5 = new java.util.LinkedHashMap;

        specialinvoke $r5.<java.util.LinkedHashMap: void <init>()>();

        r0.<org.apache.mahout.classifier.ConfusionMatrix: java.util.Map labelMap> = $r5;

        r0.<org.apache.mahout.classifier.ConfusionMatrix: int samples> = 0;

        r0.<org.apache.mahout.classifier.ConfusionMatrix: java.lang.String defaultLabel> = "unknown";

        $i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

        $i1 = $i0 + 1;

        $i2 = interfaceinvoke r1.<java.util.Collection: int size()>();

        $i3 = $i2 + 1;

        $r6 = newmultiarray (int)[$i1][$i3];

        r0.<org.apache.mahout.classifier.ConfusionMatrix: int[][] confusionMatrix> = $r6;

        r0.<org.apache.mahout.classifier.ConfusionMatrix: java.lang.String defaultLabel> = r2;

        i5 = 0;

        r3 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r9;

        $r11 = r0.<org.apache.mahout.classifier.ConfusionMatrix: java.util.Map labelMap>;

        $i4 = i5;

        i5 = i5 + 1;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, $r13);

        goto label1;

     label2:
        $r7 = r0.<org.apache.mahout.classifier.ConfusionMatrix: java.util.Map labelMap>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i5);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r8);

        return;
    }

    public void <init>(org.apache.mahout.math.Matrix)
    {
        org.apache.mahout.classifier.ConfusionMatrix r0;
        org.apache.mahout.math.Matrix r1;
        java.util.LinkedHashMap $r2;
        int $i0, $i1;
        int[][] $r3;

        r0 := @this: org.apache.mahout.classifier.ConfusionMatrix;

        r1 := @parameter0: org.apache.mahout.math.Matrix;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.LinkedHashMap;

        specialinvoke $r2.<java.util.LinkedHashMap: void <init>()>();

        r0.<org.apache.mahout.classifier.ConfusionMatrix: java.util.Map labelMap> = $r2;

        r0.<org.apache.mahout.classifier.ConfusionMatrix: int samples> = 0;

        r0.<org.apache.mahout.classifier.ConfusionMatrix: java.lang.String defaultLabel> = "unknown";

        $i0 = interfaceinvoke r1.<org.apache.mahout.math.Matrix: int numRows()>();

        $i1 = interfaceinvoke r1.<org.apache.mahout.math.Matrix: int numRows()>();

        $r3 = newmultiarray (int)[$i0][$i1];

        r0.<org.apache.mahout.classifier.ConfusionMatrix: int[][] confusionMatrix> = $r3;

        virtualinvoke r0.<org.apache.mahout.classifier.ConfusionMatrix: void setMatrix(org.apache.mahout.math.Matrix)>(r1);

        return;
    }

    public int[][] getConfusionMatrix()
    {
        org.apache.mahout.classifier.ConfusionMatrix r0;
        int[][] $r1;

        r0 := @this: org.apache.mahout.classifier.ConfusionMatrix;

        $r1 = r0.<org.apache.mahout.classifier.ConfusionMatrix: int[][] confusionMatrix>;

        return $r1;
    }

    public java.util.Collection getLabels()
    {
        org.apache.mahout.classifier.ConfusionMatrix r0;
        java.util.Map $r1;
        java.util.Set $r2;
        java.util.Collection $r3;

        r0 := @this: org.apache.mahout.classifier.ConfusionMatrix;

        $r1 = r0.<org.apache.mahout.classifier.ConfusionMatrix: java.util.Map labelMap>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r2);

        return $r3;
    }

    private int numLabels()
    {
        org.apache.mahout.classifier.ConfusionMatrix r0;
        java.util.Map $r1;
        int $i0;

        r0 := @this: org.apache.mahout.classifier.ConfusionMatrix;

        $r1 = r0.<org.apache.mahout.classifier.ConfusionMatrix: java.util.Map labelMap>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        return $i0;
    }

    public double getAccuracy(java.lang.String)
    {
        org.apache.mahout.classifier.ConfusionMatrix r0;
        java.lang.String r1;
        int i0, $i1, $i2, $i3, i4, i5, i6;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.Integer $r4;
        double $d0, $d1, $d2, $d3;
        int[][] $r5, $r8;
        int[] $r6, $r7;

        r0 := @this: org.apache.mahout.classifier.ConfusionMatrix;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.mahout.classifier.ConfusionMatrix: java.util.Map labelMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.lang.Integer) $r3;

        i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        i4 = 0;

        i5 = 0;

        i6 = 0;

     label1:
        $i1 = specialinvoke r0.<org.apache.mahout.classifier.ConfusionMatrix: int numLabels()>();

        if i6 >= $i1 goto label3;

        $r5 = r0.<org.apache.mahout.classifier.ConfusionMatrix: int[][] confusionMatrix>;

        $r6 = $r5[i0];

        $i2 = $r6[i6];

        i4 = i4 + $i2;

        if i6 != i0 goto label2;

        $r8 = r0.<org.apache.mahout.classifier.ConfusionMatrix: int[][] confusionMatrix>;

        $r7 = $r8[i0];

        $i3 = $r7[i6];

        i5 = i5 + $i3;

     label2:
        i6 = i6 + 1;

        goto label1;

     label3:
        $d0 = (double) i5;

        $d2 = 100.0 * $d0;

        $d1 = (double) i4;

        $d3 = $d2 / $d1;

        return $d3;
    }

    public double getAccuracy()
    {
        org.apache.mahout.classifier.ConfusionMatrix r0;
        int $i0, $i1, $i2, $i3, i4, i5, i6, i7;
        double $d0, $d1, $d2, $d3;
        int[][] $r1, $r4;
        int[] $r2, $r3;

        r0 := @this: org.apache.mahout.classifier.ConfusionMatrix;

        i4 = 0;

        i5 = 0;

        i6 = 0;

     label1:
        $i0 = specialinvoke r0.<org.apache.mahout.classifier.ConfusionMatrix: int numLabels()>();

        if i6 >= $i0 goto label5;

        i7 = 0;

     label2:
        $i1 = specialinvoke r0.<org.apache.mahout.classifier.ConfusionMatrix: int numLabels()>();

        if i7 >= $i1 goto label4;

        $r1 = r0.<org.apache.mahout.classifier.ConfusionMatrix: int[][] confusionMatrix>;

        $r2 = $r1[i6];

        $i2 = $r2[i7];

        i4 = i4 + $i2;

        if i6 != i7 goto label3;

        $r4 = r0.<org.apache.mahout.classifier.ConfusionMatrix: int[][] confusionMatrix>;

        $r3 = $r4[i6];

        $i3 = $r3[i7];

        i5 = i5 + $i3;

     label3:
        i7 = i7 + 1;

        goto label2;

     label4:
        i6 = i6 + 1;

        goto label1;

     label5:
        $d0 = (double) i5;

        $d2 = 100.0 * $d0;

        $d1 = (double) i4;

        $d3 = $d2 / $d1;

        return $d3;
    }

    private int getActualNumberOfTestExamplesForClass(java.lang.String)
    {
        org.apache.mahout.classifier.ConfusionMatrix r0;
        java.lang.String r1;
        int i0, $i1, $i2, i3, i4;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.Integer $r4;
        int[][] $r5;
        int[] $r6;

        r0 := @this: org.apache.mahout.classifier.ConfusionMatrix;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.mahout.classifier.ConfusionMatrix: java.util.Map labelMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.lang.Integer) $r3;

        i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        i3 = 0;

        i4 = 0;

     label1:
        $i1 = specialinvoke r0.<org.apache.mahout.classifier.ConfusionMatrix: int numLabels()>();

        if i4 >= $i1 goto label2;

        $r5 = r0.<org.apache.mahout.classifier.ConfusionMatrix: int[][] confusionMatrix>;

        $r6 = $r5[i0];

        $i2 = $r6[i4];

        i3 = i3 + $i2;

        i4 = i4 + 1;

        goto label1;

     label2:
        return i3;
    }

    public double getPrecision(java.lang.String)
    {
        org.apache.mahout.classifier.ConfusionMatrix r0;
        java.lang.String r1;
        int i0, i1, $i2, $i3, $i4, $i5, i6, i7;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.Integer $r4;
        int[][] $r5, $r8;
        int[] $r6, $r7;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.mahout.classifier.ConfusionMatrix;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.mahout.classifier.ConfusionMatrix: java.util.Map labelMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.lang.Integer) $r3;

        i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $r5 = r0.<org.apache.mahout.classifier.ConfusionMatrix: int[][] confusionMatrix>;

        $r6 = $r5[i0];

        i1 = $r6[i0];

        i6 = 0;

        i7 = 0;

     label1:
        $i2 = specialinvoke r0.<org.apache.mahout.classifier.ConfusionMatrix: int numLabels()>();

        if i7 >= $i2 goto label4;

        if i7 != i0 goto label2;

        goto label3;

     label2:
        $r8 = r0.<org.apache.mahout.classifier.ConfusionMatrix: int[][] confusionMatrix>;

        $r7 = $r8[i7];

        $i5 = $r7[i0];

        i6 = i6 + $i5;

     label3:
        i7 = i7 + 1;

        goto label1;

     label4:
        $i3 = i1 + i6;

        if $i3 != 0 goto label5;

        return 0.0;

     label5:
        $d2 = (double) i1;

        $i4 = i1 + i6;

        $d0 = (double) $i4;

        $d1 = $d2 / $d0;

        return $d1;
    }

    public double getWeightedPrecision()
    {
        org.apache.mahout.classifier.ConfusionMatrix r0;
        double[] r1, r2;
        java.util.Iterator r3;
        java.lang.String r4;
        int $i0, $i1, $i2, i3;
        java.util.Map $r5;
        java.util.Set $r6;
        boolean $z0;
        org.apache.commons.math3.stat.descriptive.moment.Mean $r7;
        double $d0, $d1, $d2;
        java.lang.Object $r8;

        r0 := @this: org.apache.mahout.classifier.ConfusionMatrix;

        $i0 = specialinvoke r0.<org.apache.mahout.classifier.ConfusionMatrix: int numLabels()>();

        r1 = newarray (double)[$i0];

        $i1 = specialinvoke r0.<org.apache.mahout.classifier.ConfusionMatrix: int numLabels()>();

        r2 = newarray (double)[$i1];

        i3 = 0;

        $r5 = r0.<org.apache.mahout.classifier.ConfusionMatrix: java.util.Map labelMap>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set keySet()>();

        r3 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r8;

        $d1 = virtualinvoke r0.<org.apache.mahout.classifier.ConfusionMatrix: double getPrecision(java.lang.String)>(r4);

        r1[i3] = $d1;

        $i2 = specialinvoke r0.<org.apache.mahout.classifier.ConfusionMatrix: int getActualNumberOfTestExamplesForClass(java.lang.String)>(r4);

        $d2 = (double) $i2;

        r2[i3] = $d2;

        i3 = i3 + 1;

        goto label1;

     label2:
        $r7 = new org.apache.commons.math3.stat.descriptive.moment.Mean;

        specialinvoke $r7.<org.apache.commons.math3.stat.descriptive.moment.Mean: void <init>()>();

        $d0 = virtualinvoke $r7.<org.apache.commons.math3.stat.descriptive.moment.Mean: double evaluate(double[],double[])>(r1, r2);

        return $d0;
    }

    public double getRecall(java.lang.String)
    {
        org.apache.mahout.classifier.ConfusionMatrix r0;
        java.lang.String r1;
        int i0, i1, $i2, $i3, $i4, $i5, i6, i7;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.Integer $r4;
        int[][] $r5, $r8;
        int[] $r6, $r7;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.mahout.classifier.ConfusionMatrix;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.mahout.classifier.ConfusionMatrix: java.util.Map labelMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.lang.Integer) $r3;

        i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $r5 = r0.<org.apache.mahout.classifier.ConfusionMatrix: int[][] confusionMatrix>;

        $r6 = $r5[i0];

        i1 = $r6[i0];

        i6 = 0;

        i7 = 0;

     label1:
        $i2 = specialinvoke r0.<org.apache.mahout.classifier.ConfusionMatrix: int numLabels()>();

        if i7 >= $i2 goto label4;

        if i7 != i0 goto label2;

        goto label3;

     label2:
        $r8 = r0.<org.apache.mahout.classifier.ConfusionMatrix: int[][] confusionMatrix>;

        $r7 = $r8[i0];

        $i5 = $r7[i7];

        i6 = i6 + $i5;

     label3:
        i7 = i7 + 1;

        goto label1;

     label4:
        $i3 = i1 + i6;

        if $i3 != 0 goto label5;

        return 0.0;

     label5:
        $d2 = (double) i1;

        $i4 = i1 + i6;

        $d0 = (double) $i4;

        $d1 = $d2 / $d0;

        return $d1;
    }

    public double getWeightedRecall()
    {
        org.apache.mahout.classifier.ConfusionMatrix r0;
        double[] r1, r2;
        java.util.Iterator r3;
        java.lang.String r4;
        int $i0, $i1, $i2, i3;
        java.util.Map $r5;
        java.util.Set $r6;
        boolean $z0;
        org.apache.commons.math3.stat.descriptive.moment.Mean $r7;
        double $d0, $d1, $d2;
        java.lang.Object $r8;

        r0 := @this: org.apache.mahout.classifier.ConfusionMatrix;

        $i0 = specialinvoke r0.<org.apache.mahout.classifier.ConfusionMatrix: int numLabels()>();

        r1 = newarray (double)[$i0];

        $i1 = specialinvoke r0.<org.apache.mahout.classifier.ConfusionMatrix: int numLabels()>();

        r2 = newarray (double)[$i1];

        i3 = 0;

        $r5 = r0.<org.apache.mahout.classifier.ConfusionMatrix: java.util.Map labelMap>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set keySet()>();

        r3 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r8;

        $d1 = virtualinvoke r0.<org.apache.mahout.classifier.ConfusionMatrix: double getRecall(java.lang.String)>(r4);

        r1[i3] = $d1;

        $i2 = specialinvoke r0.<org.apache.mahout.classifier.ConfusionMatrix: int getActualNumberOfTestExamplesForClass(java.lang.String)>(r4);

        $d2 = (double) $i2;

        r2[i3] = $d2;

        i3 = i3 + 1;

        goto label1;

     label2:
        $r7 = new org.apache.commons.math3.stat.descriptive.moment.Mean;

        specialinvoke $r7.<org.apache.commons.math3.stat.descriptive.moment.Mean: void <init>()>();

        $d0 = virtualinvoke $r7.<org.apache.commons.math3.stat.descriptive.moment.Mean: double evaluate(double[],double[])>(r1, r2);

        return $d0;
    }

    public double getF1score(java.lang.String)
    {
        org.apache.mahout.classifier.ConfusionMatrix r0;
        java.lang.String r1;
        double d0, d1, $d2, $d3, $d4, $d5, $d6;
        byte $b0;

        r0 := @this: org.apache.mahout.classifier.ConfusionMatrix;

        r1 := @parameter0: java.lang.String;

        d0 = virtualinvoke r0.<org.apache.mahout.classifier.ConfusionMatrix: double getPrecision(java.lang.String)>(r1);

        d1 = virtualinvoke r0.<org.apache.mahout.classifier.ConfusionMatrix: double getRecall(java.lang.String)>(r1);

        $d2 = d0 + d1;

        $b0 = $d2 cmpl 0.0;

        if $b0 != 0 goto label1;

        return 0.0;

     label1:
        $d3 = 2.0 * d0;

        $d5 = $d3 * d1;

        $d4 = d0 + d1;

        $d6 = $d5 / $d4;

        return $d6;
    }

    public double getWeightedF1score()
    {
        org.apache.mahout.classifier.ConfusionMatrix r0;
        double[] r1, r2;
        java.util.Iterator r3;
        java.lang.String r4;
        int $i0, $i1, $i2, i3;
        java.util.Map $r5;
        java.util.Set $r6;
        boolean $z0;
        org.apache.commons.math3.stat.descriptive.moment.Mean $r7;
        double $d0, $d1, $d2;
        java.lang.Object $r8;

        r0 := @this: org.apache.mahout.classifier.ConfusionMatrix;

        $i0 = specialinvoke r0.<org.apache.mahout.classifier.ConfusionMatrix: int numLabels()>();

        r1 = newarray (double)[$i0];

        $i1 = specialinvoke r0.<org.apache.mahout.classifier.ConfusionMatrix: int numLabels()>();

        r2 = newarray (double)[$i1];

        i3 = 0;

        $r5 = r0.<org.apache.mahout.classifier.ConfusionMatrix: java.util.Map labelMap>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set keySet()>();

        r3 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r8;

        $d1 = virtualinvoke r0.<org.apache.mahout.classifier.ConfusionMatrix: double getF1score(java.lang.String)>(r4);

        r1[i3] = $d1;

        $i2 = specialinvoke r0.<org.apache.mahout.classifier.ConfusionMatrix: int getActualNumberOfTestExamplesForClass(java.lang.String)>(r4);

        $d2 = (double) $i2;

        r2[i3] = $d2;

        i3 = i3 + 1;

        goto label1;

     label2:
        $r7 = new org.apache.commons.math3.stat.descriptive.moment.Mean;

        specialinvoke $r7.<org.apache.commons.math3.stat.descriptive.moment.Mean: void <init>()>();

        $d0 = virtualinvoke $r7.<org.apache.commons.math3.stat.descriptive.moment.Mean: double evaluate(double[],double[])>(r1, r2);

        return $d0;
    }

    public double getReliability()
    {
        org.apache.mahout.classifier.ConfusionMatrix r0;
        java.util.Iterator r1;
        java.lang.String r2, $r6;
        java.util.Map $r3;
        java.util.Set $r4;
        boolean $z0, $z1;
        double $d0, $d1, $d2, d3;
        java.lang.Object $r5;
        int i0;

        r0 := @this: org.apache.mahout.classifier.ConfusionMatrix;

        i0 = 0;

        d3 = 0.0;

        $r3 = r0.<org.apache.mahout.classifier.ConfusionMatrix: java.util.Map labelMap>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set keySet()>();

        r1 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.lang.String) $r5;

        $r6 = r0.<org.apache.mahout.classifier.ConfusionMatrix: java.lang.String defaultLabel>;

        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z1 != 0 goto label2;

        $d2 = virtualinvoke r0.<org.apache.mahout.classifier.ConfusionMatrix: double getAccuracy(java.lang.String)>(r2);

        d3 = d3 + $d2;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        $d0 = (double) i0;

        $d1 = d3 / $d0;

        return $d1;
    }

    public double getKappa()
    {
        org.apache.mahout.classifier.ConfusionMatrix r0;
        int[][] r1, $r3, $r5, $r6, $r7;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12;
        int[] r2, $r4, $r8;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, d10, d11, d12, d13;

        r0 := @this: org.apache.mahout.classifier.ConfusionMatrix;

        d10 = 0.0;

        d11 = 0.0;

        i10 = 0;

     label1:
        $r3 = r0.<org.apache.mahout.classifier.ConfusionMatrix: int[][] confusionMatrix>;

        $i1 = lengthof $r3;

        if i10 >= $i1 goto label6;

        $r5 = r0.<org.apache.mahout.classifier.ConfusionMatrix: int[][] confusionMatrix>;

        $r4 = $r5[i10];

        $i6 = $r4[i10];

        $d6 = (double) $i6;

        d10 = d10 + $d6;

        d12 = 0.0;

        i11 = 0;

     label2:
        $r6 = r0.<org.apache.mahout.classifier.ConfusionMatrix: int[][] confusionMatrix>;

        $i7 = lengthof $r6;

        if i11 >= $i7 goto label3;

        $r7 = r0.<org.apache.mahout.classifier.ConfusionMatrix: int[][] confusionMatrix>;

        $r8 = $r7[i10];

        $i9 = $r8[i11];

        $d9 = (double) $i9;

        d12 = d12 + $d9;

        i11 = i11 + 1;

        goto label2;

     label3:
        d13 = 0.0;

        r1 = r0.<org.apache.mahout.classifier.ConfusionMatrix: int[][] confusionMatrix>;

        i0 = lengthof r1;

        i12 = 0;

     label4:
        if i12 >= i0 goto label5;

        r2 = r1[i12];

        $i8 = r2[i10];

        $d8 = (double) $i8;

        d13 = d13 + $d8;

        i12 = i12 + 1;

        goto label4;

     label5:
        $d7 = d12 * d13;

        d11 = d11 + $d7;

        i10 = i10 + 1;

        goto label1;

     label6:
        $i2 = r0.<org.apache.mahout.classifier.ConfusionMatrix: int samples>;

        $d0 = (double) $i2;

        $d1 = $d0 * d10;

        $d5 = $d1 - d11;

        $i5 = r0.<org.apache.mahout.classifier.ConfusionMatrix: int samples>;

        $i3 = r0.<org.apache.mahout.classifier.ConfusionMatrix: int samples>;

        $i4 = $i5 * $i3;

        $d3 = (double) $i4;

        $d2 = $d3 - d11;

        $d4 = $d5 / $d2;

        return $d4;
    }

    public org.apache.mahout.cf.taste.impl.common.RunningAverageAndStdDev getNormalizedStats()
    {
        org.apache.mahout.classifier.ConfusionMatrix r0;
        org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev $r2;
        int[][] $r3, $r4, $r5, $r7;
        int $i0, $i1, $i2, $i3, i4, i5;
        int[] $r6, $r8;
        double $d0, $d1, $d2, $d3, d4;

        r0 := @this: org.apache.mahout.classifier.ConfusionMatrix;

        $r2 = new org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev;

        specialinvoke $r2.<org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev: void <init>()>();

        i4 = 0;

     label1:
        $r3 = r0.<org.apache.mahout.classifier.ConfusionMatrix: int[][] confusionMatrix>;

        $i0 = lengthof $r3;

        if i4 >= $i0 goto label4;

        d4 = 0.0;

        i5 = 0;

     label2:
        $r4 = r0.<org.apache.mahout.classifier.ConfusionMatrix: int[][] confusionMatrix>;

        $i1 = lengthof $r4;

        if i5 >= $i1 goto label3;

        $r7 = r0.<org.apache.mahout.classifier.ConfusionMatrix: int[][] confusionMatrix>;

        $r8 = $r7[i4];

        $i3 = $r8[i5];

        $d3 = (double) $i3;

        d4 = d4 + $d3;

        i5 = i5 + 1;

        goto label2;

     label3:
        $r5 = r0.<org.apache.mahout.classifier.ConfusionMatrix: int[][] confusionMatrix>;

        $r6 = $r5[i4];

        $i2 = $r6[i4];

        $d1 = (double) $i2;

        $d0 = d4 + 1.0E-6;

        $d2 = $d1 / $d0;

        interfaceinvoke $r2.<org.apache.mahout.cf.taste.impl.common.RunningAverageAndStdDev: void addDatum(double)>($d2);

        i4 = i4 + 1;

        goto label1;

     label4:
        return $r2;
    }

    public int getCorrect(java.lang.String)
    {
        org.apache.mahout.classifier.ConfusionMatrix r0;
        java.lang.String r1;
        int i0, $i1;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.Integer $r4;
        int[][] $r5;
        int[] $r6;

        r0 := @this: org.apache.mahout.classifier.ConfusionMatrix;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.mahout.classifier.ConfusionMatrix: java.util.Map labelMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.lang.Integer) $r3;

        i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $r5 = r0.<org.apache.mahout.classifier.ConfusionMatrix: int[][] confusionMatrix>;

        $r6 = $r5[i0];

        $i1 = $r6[i0];

        return $i1;
    }

    public int getTotal(java.lang.String)
    {
        org.apache.mahout.classifier.ConfusionMatrix r0;
        java.lang.String r1;
        int i0, $i1, $i2, i3, i4;
        java.util.Map $r2, $r5;
        java.lang.Object $r3;
        java.lang.Integer $r4;
        int[][] $r6;
        int[] $r7;

        r0 := @this: org.apache.mahout.classifier.ConfusionMatrix;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.mahout.classifier.ConfusionMatrix: java.util.Map labelMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.lang.Integer) $r3;

        i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        i3 = 0;

        i4 = 0;

     label1:
        $r5 = r0.<org.apache.mahout.classifier.ConfusionMatrix: java.util.Map labelMap>;

        $i1 = interfaceinvoke $r5.<java.util.Map: int size()>();

        if i4 >= $i1 goto label2;

        $r6 = r0.<org.apache.mahout.classifier.ConfusionMatrix: int[][] confusionMatrix>;

        $r7 = $r6[i0];

        $i2 = $r7[i4];

        i3 = i3 + $i2;

        i4 = i4 + 1;

        goto label1;

     label2:
        return i3;
    }

    public void addInstance(java.lang.String, org.apache.mahout.classifier.ClassifierResult)
    {
        org.apache.mahout.classifier.ConfusionMatrix r0;
        java.lang.String r1, $r3;
        org.apache.mahout.classifier.ClassifierResult r2;
        int $i0, $i1;

        r0 := @this: org.apache.mahout.classifier.ConfusionMatrix;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.mahout.classifier.ClassifierResult;

        $i0 = r0.<org.apache.mahout.classifier.ConfusionMatrix: int samples>;

        $i1 = $i0 + 1;

        r0.<org.apache.mahout.classifier.ConfusionMatrix: int samples> = $i1;

        $r3 = virtualinvoke r2.<org.apache.mahout.classifier.ClassifierResult: java.lang.String getLabel()>();

        virtualinvoke r0.<org.apache.mahout.classifier.ConfusionMatrix: void incrementCount(java.lang.String,java.lang.String)>(r1, $r3);

        return;
    }

    public void addInstance(java.lang.String, java.lang.String)
    {
        int $i0, $i1;
        org.apache.mahout.classifier.ConfusionMatrix r0;
        java.lang.String r1, r2;

        r0 := @this: org.apache.mahout.classifier.ConfusionMatrix;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $i1 = r0.<org.apache.mahout.classifier.ConfusionMatrix: int samples>;

        $i0 = $i1 + 1;

        r0.<org.apache.mahout.classifier.ConfusionMatrix: int samples> = $i0;

        virtualinvoke r0.<org.apache.mahout.classifier.ConfusionMatrix: void incrementCount(java.lang.String,java.lang.String)>(r1, r2);

        return;
    }

    public int getCount(java.lang.String, java.lang.String)
    {
        org.apache.mahout.classifier.ConfusionMatrix r0;
        java.lang.String r1, r2, $r8;
        int i0, i1, $i2;
        java.util.Map $r3, $r4, $r9, $r12;
        boolean $z0, $z1;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.Object $r10, $r14;
        java.lang.Integer $r11, $r13;
        int[][] $r15;
        int[] $r16;
        org.slf4j.Logger $r17;

        r0 := @this: org.apache.mahout.classifier.ConfusionMatrix;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.apache.mahout.classifier.ConfusionMatrix: java.util.Map labelMap>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r17 = <org.apache.mahout.classifier.ConfusionMatrix: org.slf4j.Logger LOG>;

        interfaceinvoke $r17.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object)>("Label {} did not appear in the training examples", r1);

        return 0;

     label1:
        $r4 = r0.<org.apache.mahout.classifier.ConfusionMatrix: java.util.Map labelMap>;

        $z1 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>(r2);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Label not found: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, $r8);

        $r9 = r0.<org.apache.mahout.classifier.ConfusionMatrix: java.util.Map labelMap>;

        $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r11 = (java.lang.Integer) $r10;

        i0 = virtualinvoke $r11.<java.lang.Integer: int intValue()>();

        $r12 = r0.<org.apache.mahout.classifier.ConfusionMatrix: java.util.Map labelMap>;

        $r14 = interfaceinvoke $r12.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        $r13 = (java.lang.Integer) $r14;

        i1 = virtualinvoke $r13.<java.lang.Integer: int intValue()>();

        $r15 = r0.<org.apache.mahout.classifier.ConfusionMatrix: int[][] confusionMatrix>;

        $r16 = $r15[i0];

        $i2 = $r16[i1];

        return $i2;
    }

    public void putCount(java.lang.String, java.lang.String, int)
    {
        org.apache.mahout.classifier.ConfusionMatrix r0;
        java.lang.String r1, r2, $r8;
        int i0, i1, i2, $i3, $i5, $i6;
        java.util.Map $r3, $r4, $r9, $r13;
        boolean $z0, $z1;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.Object $r10, $r12;
        java.lang.Integer $r11, $r14;
        int[] $r15, $r19;
        int[][] $r16, $r18;
        double $d0;
        byte $b4;
        org.slf4j.Logger $r17;

        r0 := @this: org.apache.mahout.classifier.ConfusionMatrix;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r3 = r0.<org.apache.mahout.classifier.ConfusionMatrix: java.util.Map labelMap>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r17 = <org.apache.mahout.classifier.ConfusionMatrix: org.slf4j.Logger LOG>;

        interfaceinvoke $r17.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object)>("Label {} did not appear in the training examples", r1);

        return;

     label1:
        $r4 = r0.<org.apache.mahout.classifier.ConfusionMatrix: java.util.Map labelMap>;

        $z1 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>(r2);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Label not found: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, $r8);

        $r9 = r0.<org.apache.mahout.classifier.ConfusionMatrix: java.util.Map labelMap>;

        $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r11 = (java.lang.Integer) $r10;

        i1 = virtualinvoke $r11.<java.lang.Integer: int intValue()>();

        $r13 = r0.<org.apache.mahout.classifier.ConfusionMatrix: java.util.Map labelMap>;

        $r12 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        $r14 = (java.lang.Integer) $r12;

        i2 = virtualinvoke $r14.<java.lang.Integer: int intValue()>();

        $r16 = r0.<org.apache.mahout.classifier.ConfusionMatrix: int[][] confusionMatrix>;

        $r15 = $r16[i1];

        $i3 = $r15[i2];

        $d0 = (double) $i3;

        $b4 = $d0 cmpl 0.0;

        if $b4 != 0 goto label2;

        if i0 == 0 goto label2;

        $i6 = r0.<org.apache.mahout.classifier.ConfusionMatrix: int samples>;

        $i5 = $i6 + 1;

        r0.<org.apache.mahout.classifier.ConfusionMatrix: int samples> = $i5;

     label2:
        $r18 = r0.<org.apache.mahout.classifier.ConfusionMatrix: int[][] confusionMatrix>;

        $r19 = $r18[i1];

        $r19[i2] = i0;

        return;
    }

    public java.lang.String getDefaultLabel()
    {
        org.apache.mahout.classifier.ConfusionMatrix r0;
        java.lang.String $r1;

        r0 := @this: org.apache.mahout.classifier.ConfusionMatrix;

        $r1 = r0.<org.apache.mahout.classifier.ConfusionMatrix: java.lang.String defaultLabel>;

        return $r1;
    }

    public void incrementCount(java.lang.String, java.lang.String, int)
    {
        org.apache.mahout.classifier.ConfusionMatrix r0;
        java.lang.String r1, r2;
        int i0, $i1, $i2;

        r0 := @this: org.apache.mahout.classifier.ConfusionMatrix;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $i1 = virtualinvoke r0.<org.apache.mahout.classifier.ConfusionMatrix: int getCount(java.lang.String,java.lang.String)>(r1, r2);

        $i2 = i0 + $i1;

        virtualinvoke r0.<org.apache.mahout.classifier.ConfusionMatrix: void putCount(java.lang.String,java.lang.String,int)>(r1, r2, $i2);

        return;
    }

    public void incrementCount(java.lang.String, java.lang.String)
    {
        org.apache.mahout.classifier.ConfusionMatrix r0;
        java.lang.String r1, r2;

        r0 := @this: org.apache.mahout.classifier.ConfusionMatrix;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        virtualinvoke r0.<org.apache.mahout.classifier.ConfusionMatrix: void incrementCount(java.lang.String,java.lang.String,int)>(r1, r2, 1);

        return;
    }

    public org.apache.mahout.classifier.ConfusionMatrix merge(org.apache.mahout.classifier.ConfusionMatrix)
    {
        org.apache.mahout.classifier.ConfusionMatrix r0, r1;
        java.util.Iterator r2, r4;
        java.lang.String r3, r5;
        java.util.Map $r6, $r8, $r11;
        int $i0, $i1, $i2;
        java.util.Collection $r7;
        java.util.Set $r9, $r12;
        java.lang.Object $r10, $r13;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.mahout.classifier.ConfusionMatrix;

        r1 := @parameter0: org.apache.mahout.classifier.ConfusionMatrix;

        $r6 = r0.<org.apache.mahout.classifier.ConfusionMatrix: java.util.Map labelMap>;

        $i0 = interfaceinvoke $r6.<java.util.Map: int size()>();

        $r7 = virtualinvoke r1.<org.apache.mahout.classifier.ConfusionMatrix: java.util.Collection getLabels()>();

        $i1 = interfaceinvoke $r7.<java.util.Collection: int size()>();

        if $i0 != $i1 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "The label sizes do not match");

        $r8 = r0.<org.apache.mahout.classifier.ConfusionMatrix: java.util.Map labelMap>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Set keySet()>();

        r2 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r10 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r10;

        $r11 = r0.<org.apache.mahout.classifier.ConfusionMatrix: java.util.Map labelMap>;

        $r12 = interfaceinvoke $r11.<java.util.Map: java.util.Set keySet()>();

        r4 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r13 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r13;

        $i2 = virtualinvoke r1.<org.apache.mahout.classifier.ConfusionMatrix: int getCount(java.lang.String,java.lang.String)>(r3, r5);

        virtualinvoke r0.<org.apache.mahout.classifier.ConfusionMatrix: void incrementCount(java.lang.String,java.lang.String,int)>(r3, r5, $i2);

        goto label4;

     label5:
        return r0;
    }

    public org.apache.mahout.math.Matrix getMatrix()
    {
        org.apache.mahout.classifier.ConfusionMatrix r0;
        int i0, $i1, i2, i3;
        java.util.Map$Entry r2;
        int[][] $r3, $r13;
        org.apache.mahout.math.DenseMatrix $r4;
        java.util.HashMap $r5;
        java.util.Map $r6;
        java.util.Set $r7;
        boolean $z0;
        java.lang.Object $r8, $r9, $r10;
        int[] $r12;
        double $d0;
        java.util.Iterator r15;

        r0 := @this: org.apache.mahout.classifier.ConfusionMatrix;

        $r3 = r0.<org.apache.mahout.classifier.ConfusionMatrix: int[][] confusionMatrix>;

        i0 = lengthof $r3;

        $r4 = new org.apache.mahout.math.DenseMatrix;

        specialinvoke $r4.<org.apache.mahout.math.DenseMatrix: void <init>(int,int)>(i0, i0);

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        i3 = 0;

     label2:
        if i3 >= i0 goto label3;

        $r13 = r0.<org.apache.mahout.classifier.ConfusionMatrix: int[][] confusionMatrix>;

        $r12 = $r13[i2];

        $i1 = $r12[i3];

        $d0 = (double) $i1;

        interfaceinvoke $r4.<org.apache.mahout.math.Matrix: void set(int,int,double)>(i2, i3, $d0);

        i3 = i3 + 1;

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        $r6 = r0.<org.apache.mahout.classifier.ConfusionMatrix: java.util.Map labelMap>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Set entrySet()>();

        r15 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r8 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.util.Map$Entry) $r8;

        $r9 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r10 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r10);

        goto label5;

     label6:
        interfaceinvoke $r4.<org.apache.mahout.math.Matrix: void setRowLabelBindings(java.util.Map)>($r5);

        interfaceinvoke $r4.<org.apache.mahout.math.Matrix: void setColumnLabelBindings(java.util.Map)>($r5);

        return $r4;
    }

    public void setMatrix(org.apache.mahout.math.Matrix)
    {
        org.apache.mahout.classifier.ConfusionMatrix r0;
        org.apache.mahout.math.Matrix r1;
        int i0, $i1, $i2, $i4, $i5, $i6, i7, i8, i9;
        int[][] $r2, $r9;
        java.util.Map $r3, $r4, r18;
        java.lang.String $r5, $r15;
        java.lang.Integer $r6;
        int[] $r8;
        long $l3;
        double $d0;
        java.lang.IllegalArgumentException $r10;
        java.lang.StringBuilder $r11, $r12, $r13, $r14, $r16, $r17;
        java.lang.String[] r19;

        r0 := @this: org.apache.mahout.classifier.ConfusionMatrix;

        r1 := @parameter0: org.apache.mahout.math.Matrix;

        $r2 = r0.<org.apache.mahout.classifier.ConfusionMatrix: int[][] confusionMatrix>;

        i0 = lengthof $r2;

        $i1 = interfaceinvoke r1.<org.apache.mahout.math.Matrix: int numRows()>();

        $i2 = interfaceinvoke r1.<org.apache.mahout.math.Matrix: int numCols()>();

        if $i1 == $i2 goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ConfusionMatrix: matrix(");

        $i6 = interfaceinvoke r1.<org.apache.mahout.math.Matrix: int numRows()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        $i5 = interfaceinvoke r1.<org.apache.mahout.math.Matrix: int numCols()>();

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") must be square");

        $r15 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r10;

     label1:
        i7 = 0;

     label2:
        if i7 >= i0 goto label5;

        i8 = 0;

     label3:
        if i8 >= i0 goto label4;

        $r9 = r0.<org.apache.mahout.classifier.ConfusionMatrix: int[][] confusionMatrix>;

        $r8 = $r9[i7];

        $d0 = interfaceinvoke r1.<org.apache.mahout.math.Matrix: double get(int,int)>(i7, i8);

        $l3 = staticinvoke <java.lang.Math: long round(double)>($d0);

        $i4 = (int) $l3;

        $r8[i8] = $i4;

        i8 = i8 + 1;

        goto label3;

     label4:
        i7 = i7 + 1;

        goto label2;

     label5:
        r18 = interfaceinvoke r1.<org.apache.mahout.math.Matrix: java.util.Map getRowLabelBindings()>();

        if r18 != null goto label6;

        r18 = interfaceinvoke r1.<org.apache.mahout.math.Matrix: java.util.Map getColumnLabelBindings()>();

     label6:
        if r18 == null goto label8;

        r19 = staticinvoke <org.apache.mahout.classifier.ConfusionMatrix: java.lang.String[] sortLabels(java.util.Map)>(r18);

        staticinvoke <org.apache.mahout.classifier.ConfusionMatrix: void verifyLabels(int,java.lang.String[])>(i0, r19);

        $r3 = r0.<org.apache.mahout.classifier.ConfusionMatrix: java.util.Map labelMap>;

        interfaceinvoke $r3.<java.util.Map: void clear()>();

        i9 = 0;

     label7:
        if i9 >= i0 goto label8;

        $r4 = r0.<org.apache.mahout.classifier.ConfusionMatrix: java.util.Map labelMap>;

        $r5 = r19[i9];

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i9);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r6);

        i9 = i9 + 1;

        goto label7;

     label8:
        return;
    }

    private static java.lang.String[] sortLabels(java.util.Map)
    {
        java.util.Map r0;
        java.lang.String[] r1;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        int $i0, $i1;
        java.util.Set $r4;
        boolean $z0;
        java.lang.Object $r5, $r6, $r8;
        java.lang.Integer $r7;
        java.lang.String $r9;

        r0 := @parameter0: java.util.Map;

        $i0 = interfaceinvoke r0.<java.util.Map: int size()>();

        r1 = newarray (java.lang.String)[$i0];

        $r4 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r5;

        $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r7 = (java.lang.Integer) $r6;

        $i1 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = (java.lang.String) $r8;

        r1[$i1] = $r9;

        goto label1;

     label2:
        return r1;
    }

    private static void verifyLabels(int, java.lang.String[])
    {
        int i0, $i1, i2;
        java.lang.String[] r0;
        java.lang.String $r1;
        boolean $z0;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.String[];

        $i1 = lengthof r0;

        if $i1 != i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "One label, one row");

        i2 = 0;

     label3:
        if i2 >= i0 goto label5;

        $r1 = r0[i2];

        if $r1 != null goto label4;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>(0, "One label, one row");

     label4:
        i2 = i2 + 1;

        goto label3;

     label5:
        return;
    }

    public java.lang.String toString()
    {
        org.apache.mahout.classifier.ConfusionMatrix r0;
        int i0, $i1, $i2, $i3, $i4, i5;
        java.lang.String r2, r4, $r11, $r20, $r22, $r29, $r30, $r34, $r35, $r42, $r43, $r47, $r50, $r51, $r56, $r57, $r60, $r61;
        java.util.Iterator r3, r62, r64;
        java.lang.StringBuilder $r5, $r6, $r9, $r14, $r19, $r21, $r24, $r25, $r33, $r36, $r39, $r40, $r41, $r46, $r48, $r58;
        java.util.Map $r12, $r15, $r31;
        java.util.Set $r13, $r17, $r32;
        java.lang.Object $r26, $r27, $r28, $r38, $r44, $r52, $r54, $r55;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Integer $r37, $r53;
        java.util.Map$Entry r63, r65;

        r0 := @this: org.apache.mahout.classifier.ConfusionMatrix;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(int)>(200);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=======================================================");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Confusion Matrix\n");

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-------------------------------------------------------");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $r11 = r0.<org.apache.mahout.classifier.ConfusionMatrix: java.lang.String defaultLabel>;

        i0 = virtualinvoke r0.<org.apache.mahout.classifier.ConfusionMatrix: int getTotal(java.lang.String)>($r11);

        $r12 = r0.<org.apache.mahout.classifier.ConfusionMatrix: java.util.Map labelMap>;

        $r13 = interfaceinvoke $r12.<java.util.Map: java.util.Set entrySet()>();

        r62 = interfaceinvoke $r13.<java.util.Set: java.util.Iterator iterator()>();

     label01:
        $z3 = interfaceinvoke r62.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label03;

        $r55 = interfaceinvoke r62.<java.util.Iterator: java.lang.Object next()>();

        r63 = (java.util.Map$Entry) $r55;

        $r54 = interfaceinvoke r63.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r56 = (java.lang.String) $r54;

        $r57 = r0.<org.apache.mahout.classifier.ConfusionMatrix: java.lang.String defaultLabel>;

        $z2 = virtualinvoke $r56.<java.lang.String: boolean equals(java.lang.Object)>($r57);

        if $z2 == 0 goto label02;

        if i0 != 0 goto label02;

        goto label01;

     label02:
        $r52 = interfaceinvoke r63.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r53 = (java.lang.Integer) $r52;

        $i4 = virtualinvoke $r53.<java.lang.Integer: int intValue()>();

        $r60 = staticinvoke <org.apache.mahout.classifier.ConfusionMatrix: java.lang.String getSmallLabel(int)>($i4);

        $r61 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String rightPad(java.lang.String,int)>($r60, 5);

        $r58 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r61);

        virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(9);

        goto label01;

     label03:
        $r14 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<--Classified as");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $r15 = r0.<org.apache.mahout.classifier.ConfusionMatrix: java.util.Map labelMap>;

        $r17 = interfaceinvoke $r15.<java.util.Map: java.util.Set entrySet()>();

        r64 = interfaceinvoke $r17.<java.util.Set: java.util.Iterator iterator()>();

     label04:
        $z4 = interfaceinvoke r64.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label09;

        $r26 = interfaceinvoke r64.<java.util.Iterator: java.lang.Object next()>();

        r65 = (java.util.Map$Entry) $r26;

        $r27 = interfaceinvoke r65.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r30 = (java.lang.String) $r27;

        $r29 = r0.<org.apache.mahout.classifier.ConfusionMatrix: java.lang.String defaultLabel>;

        $z0 = virtualinvoke $r30.<java.lang.String: boolean equals(java.lang.Object)>($r29);

        if $z0 == 0 goto label05;

        if i0 != 0 goto label05;

        goto label04;

     label05:
        $r28 = interfaceinvoke r65.<java.util.Map$Entry: java.lang.Object getKey()>();

        r2 = (java.lang.String) $r28;

        i5 = 0;

        $r31 = r0.<org.apache.mahout.classifier.ConfusionMatrix: java.util.Map labelMap>;

        $r32 = interfaceinvoke $r31.<java.util.Map: java.util.Set keySet()>();

        r3 = interfaceinvoke $r32.<java.util.Set: java.util.Iterator iterator()>();

     label06:
        $z5 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label08;

        $r44 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r44;

        $r50 = r0.<org.apache.mahout.classifier.ConfusionMatrix: java.lang.String defaultLabel>;

        $z1 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>($r50);

        if $z1 == 0 goto label07;

        if i0 != 0 goto label07;

        goto label06;

     label07:
        $i3 = virtualinvoke r0.<org.apache.mahout.classifier.ConfusionMatrix: int getCount(java.lang.String,java.lang.String)>(r2, r4);

        $r51 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i3);

        $r47 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String rightPad(java.lang.String,int)>($r51, 5);

        $r48 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r47);

        virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(9);

        $i2 = virtualinvoke r0.<org.apache.mahout.classifier.ConfusionMatrix: int getCount(java.lang.String,java.lang.String)>(r2, r4);

        i5 = i5 + $i2;

        goto label06;

     label08:
        $r36 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" |  ");

        $r35 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i5);

        $r34 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String rightPad(java.lang.String,int)>($r35, 6);

        $r33 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        $r39 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(9);

        $r38 = interfaceinvoke r65.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r37 = (java.lang.Integer) $r38;

        $i1 = virtualinvoke $r37.<java.lang.Integer: int intValue()>();

        $r43 = staticinvoke <org.apache.mahout.classifier.ConfusionMatrix: java.lang.String getSmallLabel(int)>($i1);

        $r42 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String rightPad(java.lang.String,int)>($r43, 5);

        $r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42);

        $r40 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = ");

        $r46 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        goto label04;

     label09:
        if i0 <= 0 goto label10;

        $r19 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Default Category: ");

        $r22 = r0.<org.apache.mahout.classifier.ConfusionMatrix: java.lang.String defaultLabel>;

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

     label10:
        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $r20 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r20;
    }

    static java.lang.String getSmallLabel(int)
    {
        int i0, i1, $i2, i4;
        java.lang.StringBuilder $r1;
        char $c3;
        java.lang.String $r3;

        i0 := @parameter0: int;

        i4 = i0;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

     label1:
        i1 = i4 % 26;

        $i2 = 97 + i1;

        $c3 = (char) $i2;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char)>(0, $c3);

        i4 = i4 / 26;

        if i4 > 0 goto label1;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "org/apache/mahout/classifier/ConfusionMatrix");

        <org.apache.mahout.classifier.ConfusionMatrix: org.slf4j.Logger LOG> = $r0;

        return;
    }
}
