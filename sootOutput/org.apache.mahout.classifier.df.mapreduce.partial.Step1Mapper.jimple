public class org.apache.mahout.classifier.df.mapreduce.partial.Step1Mapper extends org.apache.mahout.classifier.df.mapreduce.MapredMapper
{
    private static final org.slf4j.Logger log;
    private org.apache.mahout.classifier.df.data.DataConverter converter;
    private java.util.Random rng;
    private int nbTrees;
    private int firstTreeId;
    private int partition;
    private final java.util.List instances;

    public void <init>()
    {
        org.apache.mahout.classifier.df.mapreduce.partial.Step1Mapper r0;
        java.util.ArrayList $r1;

        r0 := @this: org.apache.mahout.classifier.df.mapreduce.partial.Step1Mapper;

        specialinvoke r0.<org.apache.mahout.classifier.df.mapreduce.MapredMapper: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.mahout.classifier.df.mapreduce.partial.Step1Mapper: java.util.List instances> = $r1;

        return;
    }

    public int getFirstTreeId()
    {
        org.apache.mahout.classifier.df.mapreduce.partial.Step1Mapper r0;
        int $i0;

        r0 := @this: org.apache.mahout.classifier.df.mapreduce.partial.Step1Mapper;

        $i0 = r0.<org.apache.mahout.classifier.df.mapreduce.partial.Step1Mapper: int firstTreeId>;

        return $i0;
    }

    protected void setup(org.apache.hadoop.mapreduce.Mapper$Context) throws java.io.IOException, java.lang.InterruptedException
    {
        org.apache.mahout.classifier.df.mapreduce.partial.Step1Mapper r0;
        org.apache.hadoop.mapreduce.Mapper$Context r1;
        org.apache.hadoop.conf.Configuration r2;
        java.lang.Long $r3;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.mahout.classifier.df.mapreduce.partial.Step1Mapper;

        r1 := @parameter0: org.apache.hadoop.mapreduce.Mapper$Context;

        specialinvoke r0.<org.apache.mahout.classifier.df.mapreduce.MapredMapper: void setup(org.apache.hadoop.mapreduce.Mapper$Context)>(r1);

        r2 = virtualinvoke r1.<org.apache.hadoop.mapreduce.Mapper$Context: org.apache.hadoop.conf.Configuration getConfiguration()>();

        $r3 = staticinvoke <org.apache.mahout.classifier.df.mapreduce.Builder: java.lang.Long getRandomSeed(org.apache.hadoop.conf.Configuration)>(r2);

        $i0 = virtualinvoke r2.<org.apache.hadoop.conf.Configuration: int getInt(java.lang.String,int)>("mapred.task.partition", -1);

        $i1 = staticinvoke <org.apache.mahout.classifier.df.mapreduce.Builder: int getNumMaps(org.apache.hadoop.conf.Configuration)>(r2);

        $i2 = staticinvoke <org.apache.mahout.classifier.df.mapreduce.Builder: int getNbTrees(org.apache.hadoop.conf.Configuration)>(r2);

        virtualinvoke r0.<org.apache.mahout.classifier.df.mapreduce.partial.Step1Mapper: void configure(java.lang.Long,int,int,int)>($r3, $i0, $i1, $i2);

        return;
    }

    protected void configure(java.lang.Long, int, int, int)
    {
        org.apache.mahout.classifier.df.mapreduce.partial.Step1Mapper r0;
        java.lang.Long r1;
        int i0, i1, i2, $i4, $i5, $i6, $i7, $i8, $i9, i10;
        org.apache.mahout.classifier.df.data.DataConverter $r2;
        org.apache.mahout.classifier.df.data.Dataset $r3;
        org.slf4j.Logger $r4, $r11, $r13, $r15;
        long $l3;
        java.util.Random $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.lang.String $r10;
        java.lang.Integer $r12, $r14, $r16;
        org.apache.mahout.common.RandomWrapper $r17;
        boolean $z0;

        r0 := @this: org.apache.mahout.classifier.df.mapreduce.partial.Step1Mapper;

        r1 := @parameter0: java.lang.Long;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r2 = new org.apache.mahout.classifier.df.data.DataConverter;

        $r3 = virtualinvoke r0.<org.apache.mahout.classifier.df.mapreduce.partial.Step1Mapper: org.apache.mahout.classifier.df.data.Dataset getDataset()>();

        specialinvoke $r2.<org.apache.mahout.classifier.df.data.DataConverter: void <init>(org.apache.mahout.classifier.df.data.Dataset)>($r3);

        r0.<org.apache.mahout.classifier.df.mapreduce.partial.Step1Mapper: org.apache.mahout.classifier.df.data.DataConverter converter> = $r2;

        $r4 = <org.apache.mahout.classifier.df.mapreduce.partial.Step1Mapper: org.slf4j.Logger log>;

        interfaceinvoke $r4.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("seed : {}", r1);

        if r1 != null goto label1;

        $r17 = staticinvoke <org.apache.mahout.common.RandomUtils: org.apache.mahout.common.RandomWrapper getRandom()>();

        r0.<org.apache.mahout.classifier.df.mapreduce.partial.Step1Mapper: java.util.Random rng> = $r17;

        goto label2;

     label1:
        $l3 = virtualinvoke r1.<java.lang.Long: long longValue()>();

        $r5 = staticinvoke <org.apache.mahout.common.RandomUtils: java.util.Random getRandom(long)>($l3);

        r0.<org.apache.mahout.classifier.df.mapreduce.partial.Step1Mapper: java.util.Random rng> = $r5;

     label2:
        if i0 < 0 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wrong partition ID: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Partition must be >= 0!");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, $r10);

        r0.<org.apache.mahout.classifier.df.mapreduce.partial.Step1Mapper: int partition> = i0;

        $i4 = staticinvoke <org.apache.mahout.classifier.df.mapreduce.partial.Step1Mapper: int nbTrees(int,int,int)>(i1, i2, i0);

        r0.<org.apache.mahout.classifier.df.mapreduce.partial.Step1Mapper: int nbTrees> = $i4;

        r0.<org.apache.mahout.classifier.df.mapreduce.partial.Step1Mapper: int firstTreeId> = 0;

        i10 = 0;

     label5:
        if i10 >= i0 goto label6;

        $i7 = r0.<org.apache.mahout.classifier.df.mapreduce.partial.Step1Mapper: int firstTreeId>;

        $i9 = staticinvoke <org.apache.mahout.classifier.df.mapreduce.partial.Step1Mapper: int nbTrees(int,int,int)>(i1, i2, i10);

        $i8 = $i7 + $i9;

        r0.<org.apache.mahout.classifier.df.mapreduce.partial.Step1Mapper: int firstTreeId> = $i8;

        i10 = i10 + 1;

        goto label5;

     label6:
        $r11 = <org.apache.mahout.classifier.df.mapreduce.partial.Step1Mapper: org.slf4j.Logger log>;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r11.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("partition : {}", $r12);

        $r13 = <org.apache.mahout.classifier.df.mapreduce.partial.Step1Mapper: org.slf4j.Logger log>;

        $i5 = r0.<org.apache.mahout.classifier.df.mapreduce.partial.Step1Mapper: int nbTrees>;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        interfaceinvoke $r13.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("nbTrees : {}", $r14);

        $r15 = <org.apache.mahout.classifier.df.mapreduce.partial.Step1Mapper: org.slf4j.Logger log>;

        $i6 = r0.<org.apache.mahout.classifier.df.mapreduce.partial.Step1Mapper: int firstTreeId>;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        interfaceinvoke $r15.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("firstTreeId : {}", $r16);

        return;
    }

    public static int nbTrees(int, int, int)
    {
        int i0, i1, i2, i3, i4, $i5, $i6;
        byte $b8;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 = i1 / i0;

        $i5 = i0 * i3;

        i4 = i1 - $i5;

        if i2 >= i4 goto label1;

        $b8 = 1;

        goto label2;

     label1:
        $b8 = 0;

     label2:
        $i6 = i3 + $b8;

        return $i6;
    }

    protected void map(org.apache.hadoop.io.LongWritable, org.apache.hadoop.io.Text, org.apache.hadoop.mapreduce.Mapper$Context) throws java.io.IOException, java.lang.InterruptedException
    {
        org.apache.mahout.classifier.df.mapreduce.partial.Step1Mapper r0;
        org.apache.hadoop.io.LongWritable r1;
        org.apache.hadoop.io.Text r2;
        org.apache.hadoop.mapreduce.Mapper$Context r3;
        java.util.List $r4;
        org.apache.mahout.classifier.df.data.DataConverter $r5;
        java.lang.String $r6;
        org.apache.mahout.classifier.df.data.Instance $r7;

        r0 := @this: org.apache.mahout.classifier.df.mapreduce.partial.Step1Mapper;

        r1 := @parameter0: org.apache.hadoop.io.LongWritable;

        r2 := @parameter1: org.apache.hadoop.io.Text;

        r3 := @parameter2: org.apache.hadoop.mapreduce.Mapper$Context;

        $r4 = r0.<org.apache.mahout.classifier.df.mapreduce.partial.Step1Mapper: java.util.List instances>;

        $r5 = r0.<org.apache.mahout.classifier.df.mapreduce.partial.Step1Mapper: org.apache.mahout.classifier.df.data.DataConverter converter>;

        $r6 = virtualinvoke r2.<org.apache.hadoop.io.Text: java.lang.String toString()>();

        $r7 = virtualinvoke $r5.<org.apache.mahout.classifier.df.data.DataConverter: org.apache.mahout.classifier.df.data.Instance convert(java.lang.CharSequence)>($r6);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r7);

        return;
    }

    protected void cleanup(org.apache.hadoop.mapreduce.Mapper$Context) throws java.io.IOException, java.lang.InterruptedException
    {
        org.apache.mahout.classifier.df.mapreduce.partial.Step1Mapper r0;
        org.apache.hadoop.mapreduce.Mapper$Context r1;
        org.apache.mahout.classifier.df.node.Node r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        org.slf4j.Logger $r7, $r17, $r19;
        java.lang.Integer $r8, $r10, $r18, $r21;
        java.util.List $r9, $r12;
        org.apache.mahout.classifier.df.data.Data $r11;
        org.apache.mahout.classifier.df.data.Dataset $r13;
        org.apache.mahout.classifier.df.builder.TreeBuilder $r14;
        org.apache.mahout.classifier.df.Bagging $r15;
        org.apache.mahout.classifier.df.mapreduce.partial.TreeID $r16;
        java.util.Random $r20;
        boolean $z0;
        org.apache.mahout.classifier.df.mapreduce.MapredOutput $r22;

        r0 := @this: org.apache.mahout.classifier.df.mapreduce.partial.Step1Mapper;

        r1 := @parameter0: org.apache.hadoop.mapreduce.Mapper$Context;

        $r7 = <org.apache.mahout.classifier.df.mapreduce.partial.Step1Mapper: org.slf4j.Logger log>;

        $i0 = r0.<org.apache.mahout.classifier.df.mapreduce.partial.Step1Mapper: int partition>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r9 = r0.<org.apache.mahout.classifier.df.mapreduce.partial.Step1Mapper: java.util.List instances>;

        $i1 = interfaceinvoke $r9.<java.util.List: int size()>();

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        interfaceinvoke $r7.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("partition: {} numInstances: {}", $r8, $r10);

        $r11 = new org.apache.mahout.classifier.df.data.Data;

        $r13 = virtualinvoke r0.<org.apache.mahout.classifier.df.mapreduce.partial.Step1Mapper: org.apache.mahout.classifier.df.data.Dataset getDataset()>();

        $r12 = r0.<org.apache.mahout.classifier.df.mapreduce.partial.Step1Mapper: java.util.List instances>;

        specialinvoke $r11.<org.apache.mahout.classifier.df.data.Data: void <init>(org.apache.mahout.classifier.df.data.Dataset,java.util.List)>($r13, $r12);

        $r15 = new org.apache.mahout.classifier.df.Bagging;

        $r14 = virtualinvoke r0.<org.apache.mahout.classifier.df.mapreduce.partial.Step1Mapper: org.apache.mahout.classifier.df.builder.TreeBuilder getTreeBuilder()>();

        specialinvoke $r15.<org.apache.mahout.classifier.df.Bagging: void <init>(org.apache.mahout.classifier.df.builder.TreeBuilder,org.apache.mahout.classifier.df.data.Data)>($r14, $r11);

        $r16 = new org.apache.mahout.classifier.df.mapreduce.partial.TreeID;

        specialinvoke $r16.<org.apache.mahout.classifier.df.mapreduce.partial.TreeID: void <init>()>();

        $r17 = <org.apache.mahout.classifier.df.mapreduce.partial.Step1Mapper: org.slf4j.Logger log>;

        $i2 = r0.<org.apache.mahout.classifier.df.mapreduce.partial.Step1Mapper: int nbTrees>;

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        interfaceinvoke $r17.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Building {} trees", $r18);

        i7 = 0;

     label1:
        $i3 = r0.<org.apache.mahout.classifier.df.mapreduce.partial.Step1Mapper: int nbTrees>;

        if i7 >= $i3 goto label3;

        $r19 = <org.apache.mahout.classifier.df.mapreduce.partial.Step1Mapper: org.slf4j.Logger log>;

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i7);

        interfaceinvoke $r19.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Building tree number : {}", $r21);

        $r20 = r0.<org.apache.mahout.classifier.df.mapreduce.partial.Step1Mapper: java.util.Random rng>;

        r5 = virtualinvoke $r15.<org.apache.mahout.classifier.df.Bagging: org.apache.mahout.classifier.df.node.Node build(java.util.Random)>($r20);

        $i6 = r0.<org.apache.mahout.classifier.df.mapreduce.partial.Step1Mapper: int partition>;

        $i4 = r0.<org.apache.mahout.classifier.df.mapreduce.partial.Step1Mapper: int firstTreeId>;

        $i5 = $i4 + i7;

        virtualinvoke $r16.<org.apache.mahout.classifier.df.mapreduce.partial.TreeID: void set(int,int)>($i6, $i5);

        $z0 = virtualinvoke r0.<org.apache.mahout.classifier.df.mapreduce.partial.Step1Mapper: boolean isOutput()>();

        if $z0 == 0 goto label2;

        $r22 = new org.apache.mahout.classifier.df.mapreduce.MapredOutput;

        specialinvoke $r22.<org.apache.mahout.classifier.df.mapreduce.MapredOutput: void <init>(org.apache.mahout.classifier.df.node.Node)>(r5);

        virtualinvoke r1.<org.apache.hadoop.mapreduce.Mapper$Context: void write(java.lang.Object,java.lang.Object)>($r16, $r22);

     label2:
        virtualinvoke r1.<org.apache.hadoop.mapreduce.Mapper$Context: void progress()>();

        i7 = i7 + 1;

        goto label1;

     label3:
        return;
    }

    protected volatile void map(java.lang.Object, java.lang.Object, org.apache.hadoop.mapreduce.Mapper$Context) throws java.io.IOException, java.lang.InterruptedException
    {
        org.apache.mahout.classifier.df.mapreduce.partial.Step1Mapper r0;
        java.lang.Object r1, r2;
        org.apache.hadoop.mapreduce.Mapper$Context r3;
        org.apache.hadoop.io.Text $r4;
        org.apache.hadoop.io.LongWritable $r5;

        r0 := @this: org.apache.mahout.classifier.df.mapreduce.partial.Step1Mapper;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: org.apache.hadoop.mapreduce.Mapper$Context;

        $r5 = (org.apache.hadoop.io.LongWritable) r1;

        $r4 = (org.apache.hadoop.io.Text) r2;

        virtualinvoke r0.<org.apache.mahout.classifier.df.mapreduce.partial.Step1Mapper: void map(org.apache.hadoop.io.LongWritable,org.apache.hadoop.io.Text,org.apache.hadoop.mapreduce.Mapper$Context)>($r5, $r4, r3);

        return;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "org/apache/mahout/classifier/df/mapreduce/partial/Step1Mapper");

        <org.apache.mahout.classifier.df.mapreduce.partial.Step1Mapper: org.slf4j.Logger log> = $r0;

        return;
    }
}
