public class org.apache.mahout.math.neighborhood.ProjectionSearch extends org.apache.mahout.math.neighborhood.UpdatableSearcher
{
    private java.util.List scalarProjections;
    private org.apache.mahout.math.Matrix basisMatrix;
    private final int searchSize;
    private final int numProjections;
    private boolean initialized;

    private void initialize(int)
    {
        org.apache.mahout.math.neighborhood.ProjectionSearch r0;
        int i0, $i1, $i2, i3;
        boolean $z0;
        org.apache.mahout.math.Matrix $r1;
        java.util.ArrayList $r2;
        java.util.List $r3;
        com.google.common.collect.TreeMultiset $r4;

        r0 := @this: org.apache.mahout.math.neighborhood.ProjectionSearch;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.mahout.math.neighborhood.ProjectionSearch: boolean initialized>;

        if $z0 == 0 goto label1;

        return;

     label1:
        r0.<org.apache.mahout.math.neighborhood.ProjectionSearch: boolean initialized> = 1;

        $i1 = r0.<org.apache.mahout.math.neighborhood.ProjectionSearch: int numProjections>;

        $r1 = staticinvoke <org.apache.mahout.math.random.RandomProjector: org.apache.mahout.math.Matrix generateBasisNormal(int,int)>($i1, i0);

        r0.<org.apache.mahout.math.neighborhood.ProjectionSearch: org.apache.mahout.math.Matrix basisMatrix> = $r1;

        $r2 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

        r0.<org.apache.mahout.math.neighborhood.ProjectionSearch: java.util.List scalarProjections> = $r2;

        i3 = 0;

     label2:
        $i2 = r0.<org.apache.mahout.math.neighborhood.ProjectionSearch: int numProjections>;

        if i3 >= $i2 goto label3;

        $r3 = r0.<org.apache.mahout.math.neighborhood.ProjectionSearch: java.util.List scalarProjections>;

        $r4 = staticinvoke <com.google.common.collect.TreeMultiset: com.google.common.collect.TreeMultiset create()>();

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r4);

        i3 = i3 + 1;

        goto label2;

     label3:
        return;
    }

    public void <init>(org.apache.mahout.common.distance.DistanceMeasure, int, int)
    {
        org.apache.mahout.math.neighborhood.ProjectionSearch r0;
        org.apache.mahout.common.distance.DistanceMeasure r1;
        int i0, i1;
        boolean $z0;

        r0 := @this: org.apache.mahout.math.neighborhood.ProjectionSearch;

        r1 := @parameter0: org.apache.mahout.common.distance.DistanceMeasure;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<org.apache.mahout.math.neighborhood.UpdatableSearcher: void <init>(org.apache.mahout.common.distance.DistanceMeasure)>(r1);

        r0.<org.apache.mahout.math.neighborhood.ProjectionSearch: boolean initialized> = 0;

        if i0 <= 0 goto label1;

        if i0 >= 100 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Unreasonable value for number of projections. Must be: 0 < numProjections < 100");

        r0.<org.apache.mahout.math.neighborhood.ProjectionSearch: int searchSize> = i1;

        r0.<org.apache.mahout.math.neighborhood.ProjectionSearch: int numProjections> = i0;

        return;
    }

    public void add(org.apache.mahout.math.Vector)
    {
        org.apache.mahout.math.neighborhood.ProjectionSearch r0;
        org.apache.mahout.math.Vector r1, r2;
        com.google.common.collect.TreeMultiset r3, $r9, r20;
        java.util.Iterator r4, r19, r21;
        org.apache.mahout.math.random.WeightedThing r5, $r15, $r17;
        int $i0, $i1, $i3, i4, i5;
        org.apache.mahout.math.Matrix $r6;
        java.util.List $r7, $r8, $r11;
        boolean $z0, $z1, $z3, $z4, $z5;
        java.lang.Object $r10, $r12, $r13, $r16, $r18;
        com.google.common.collect.Multiset$Entry $r14;
        double $d0, $d1, d2;
        byte $b2;

        r0 := @this: org.apache.mahout.math.neighborhood.ProjectionSearch;

        r1 := @parameter0: org.apache.mahout.math.Vector;

        $i0 = interfaceinvoke r1.<org.apache.mahout.math.Vector: int size()>();

        specialinvoke r0.<org.apache.mahout.math.neighborhood.ProjectionSearch: void initialize(int)>($i0);

        $r6 = r0.<org.apache.mahout.math.neighborhood.ProjectionSearch: org.apache.mahout.math.Matrix basisMatrix>;

        r2 = interfaceinvoke $r6.<org.apache.mahout.math.Matrix: org.apache.mahout.math.Vector times(org.apache.mahout.math.Vector)>(r1);

        i4 = 0;

        $r7 = r0.<org.apache.mahout.math.neighborhood.ProjectionSearch: java.util.List scalarProjections>;

        r19 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r19.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r18 = interfaceinvoke r19.<java.util.Iterator: java.lang.Object next()>();

        r20 = (com.google.common.collect.TreeMultiset) $r18;

        $r17 = new org.apache.mahout.math.random.WeightedThing;

        $i3 = i4;

        i4 = i4 + 1;

        $d1 = interfaceinvoke r2.<org.apache.mahout.math.Vector: double get(int)>($i3);

        specialinvoke $r17.<org.apache.mahout.math.random.WeightedThing: void <init>(java.lang.Object,double)>(r1, $d1);

        virtualinvoke r20.<com.google.common.collect.TreeMultiset: boolean add(java.lang.Object)>($r17);

        goto label1;

     label2:
        $r8 = r0.<org.apache.mahout.math.neighborhood.ProjectionSearch: java.util.List scalarProjections>;

        $r10 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(0);

        $r9 = (com.google.common.collect.TreeMultiset) $r10;

        i5 = virtualinvoke $r9.<com.google.common.collect.TreeMultiset: int size()>();

        $r11 = r0.<org.apache.mahout.math.neighborhood.ProjectionSearch: java.util.List scalarProjections>;

        r21 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label9;

        $r12 = interfaceinvoke r21.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.google.common.collect.TreeMultiset) $r12;

        $i1 = virtualinvoke r3.<com.google.common.collect.TreeMultiset: int size()>();

        if $i1 != i5 goto label4;

        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z3, "Number of vectors in projection sets differ");

        $r14 = virtualinvoke r3.<com.google.common.collect.TreeMultiset: com.google.common.collect.Multiset$Entry firstEntry()>();

        $r13 = interfaceinvoke $r14.<com.google.common.collect.Multiset$Entry: java.lang.Object getElement()>();

        $r15 = (org.apache.mahout.math.random.WeightedThing) $r13;

        d2 = virtualinvoke $r15.<org.apache.mahout.math.random.WeightedThing: double getWeight()>();

        r4 = virtualinvoke r3.<com.google.common.collect.TreeMultiset: java.util.Iterator iterator()>();

     label6:
        $z4 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label3;

        $r16 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.mahout.math.random.WeightedThing) $r16;

        $d0 = virtualinvoke r5.<org.apache.mahout.math.random.WeightedThing: double getWeight()>();

        $b2 = d2 cmpg $d0;

        if $b2 > 0 goto label7;

        $z5 = 1;

        goto label8;

     label7:
        $z5 = 0;

     label8:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z5, "Weights not in non-decreasing order");

        d2 = virtualinvoke r5.<org.apache.mahout.math.random.WeightedThing: double getWeight()>();

        goto label6;

     label9:
        return;
    }

    public int size()
    {
        org.apache.mahout.math.neighborhood.ProjectionSearch r0;
        java.util.List $r1, $r2;
        java.lang.Object $r3;
        com.google.common.collect.TreeMultiset $r4;
        int $i0;

        r0 := @this: org.apache.mahout.math.neighborhood.ProjectionSearch;

        $r1 = r0.<org.apache.mahout.math.neighborhood.ProjectionSearch: java.util.List scalarProjections>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r2 = r0.<org.apache.mahout.math.neighborhood.ProjectionSearch: java.util.List scalarProjections>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(0);

        $r4 = (com.google.common.collect.TreeMultiset) $r3;

        $i0 = virtualinvoke $r4.<com.google.common.collect.TreeMultiset: int size()>();

        return $i0;
    }

    public java.util.List search(org.apache.mahout.math.Vector, int)
    {
        org.apache.mahout.math.neighborhood.ProjectionSearch r0;
        org.apache.mahout.math.Vector r1, r28, r31;
        int i0, $i1, $i2, $i3, $i4;
        java.util.HashSet r2;
        java.util.Iterator r3, r5, r26, r30;
        org.apache.mahout.math.random.WeightedThing r6, $r10, $r17;
        org.apache.mahout.math.Matrix $r7;
        java.util.List $r8, $r9;
        boolean $z0, $z1, $z3;
        java.lang.Object $r11, $r13, $r14, $r24, $r25;
        double $d0, $d1;
        org.apache.mahout.common.distance.DistanceMeasure $r12;
        com.google.common.collect.BoundType $r15, $r18;
        com.google.common.collect.SortedMultiset $r16, $r19, $r23;
        java.lang.Iterable $r20, $r21, $r22;
        com.google.common.collect.TreeMultiset r27;
        java.util.ArrayList r29;

        r0 := @this: org.apache.mahout.math.neighborhood.ProjectionSearch;

        r1 := @parameter0: org.apache.mahout.math.Vector;

        i0 := @parameter1: int;

        r2 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet()>();

        $r7 = r0.<org.apache.mahout.math.neighborhood.ProjectionSearch: org.apache.mahout.math.Matrix basisMatrix>;

        r3 = interfaceinvoke $r7.<org.apache.mahout.math.Matrix: java.util.Iterator iterator()>();

        $r8 = r0.<org.apache.mahout.math.neighborhood.ProjectionSearch: java.util.List scalarProjections>;

        r26 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r26.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r14 = interfaceinvoke r26.<java.util.Iterator: java.lang.Object next()>();

        r27 = (com.google.common.collect.TreeMultiset) $r14;

        $r13 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r28 = (org.apache.mahout.math.Vector) $r13;

        $r17 = new org.apache.mahout.math.random.WeightedThing;

        $d1 = interfaceinvoke r1.<org.apache.mahout.math.Vector: double dot(org.apache.mahout.math.Vector)>(r28);

        specialinvoke $r17.<org.apache.mahout.math.random.WeightedThing: void <init>(java.lang.Object,double)>(r1, $d1);

        $r15 = <com.google.common.collect.BoundType: com.google.common.collect.BoundType CLOSED>;

        $r16 = virtualinvoke r27.<com.google.common.collect.TreeMultiset: com.google.common.collect.SortedMultiset tailMultiset(java.lang.Object,com.google.common.collect.BoundType)>($r17, $r15);

        $i3 = r0.<org.apache.mahout.math.neighborhood.ProjectionSearch: int searchSize>;

        $r20 = staticinvoke <com.google.common.collect.Iterables: java.lang.Iterable limit(java.lang.Iterable,int)>($r16, $i3);

        $r18 = <com.google.common.collect.BoundType: com.google.common.collect.BoundType OPEN>;

        $r19 = virtualinvoke r27.<com.google.common.collect.TreeMultiset: com.google.common.collect.SortedMultiset headMultiset(java.lang.Object,com.google.common.collect.BoundType)>($r17, $r18);

        $r23 = interfaceinvoke $r19.<com.google.common.collect.SortedMultiset: com.google.common.collect.SortedMultiset descendingMultiset()>();

        $i4 = r0.<org.apache.mahout.math.neighborhood.ProjectionSearch: int searchSize>;

        $r21 = staticinvoke <com.google.common.collect.Iterables: java.lang.Iterable limit(java.lang.Iterable,int)>($r23, $i4);

        $r22 = staticinvoke <com.google.common.collect.Iterables: java.lang.Iterable concat(java.lang.Iterable,java.lang.Iterable)>($r20, $r21);

        r5 = interfaceinvoke $r22.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z3 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label1;

        $r24 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.mahout.math.random.WeightedThing) $r24;

        $r25 = virtualinvoke r6.<org.apache.mahout.math.random.WeightedThing: java.lang.Object getValue()>();

        interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>($r25);

        goto label2;

     label3:
        r29 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

        r30 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r30.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r11 = interfaceinvoke r30.<java.util.Iterator: java.lang.Object next()>();

        r31 = (org.apache.mahout.math.Vector) $r11;

        $r10 = new org.apache.mahout.math.random.WeightedThing;

        $r12 = r0.<org.apache.mahout.math.neighborhood.ProjectionSearch: org.apache.mahout.common.distance.DistanceMeasure distanceMeasure>;

        $d0 = interfaceinvoke $r12.<org.apache.mahout.common.distance.DistanceMeasure: double distance(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector)>(r1, r31);

        specialinvoke $r10.<org.apache.mahout.math.random.WeightedThing: void <init>(java.lang.Object,double)>(r31, $d0);

        interfaceinvoke r29.<java.util.List: boolean add(java.lang.Object)>($r10);

        goto label4;

     label5:
        staticinvoke <java.util.Collections: void sort(java.util.List)>(r29);

        $i1 = interfaceinvoke r29.<java.util.List: int size()>();

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>(i0, $i1);

        $r9 = interfaceinvoke r29.<java.util.List: java.util.List subList(int,int)>(0, $i2);

        return $r9;
    }

    public org.apache.mahout.math.random.WeightedThing searchFirst(org.apache.mahout.math.Vector, boolean)
    {
        org.apache.mahout.math.neighborhood.ProjectionSearch r0;
        org.apache.mahout.math.Vector r1, r5, $r26, $r28, r30;
        boolean z0, $z1, $z2, $z3;
        java.util.Iterator r2, r3, r7;
        com.google.common.collect.TreeMultiset r4;
        org.apache.mahout.math.random.WeightedThing r8, $r12, $r13;
        double d0, $d1, d2;
        org.apache.mahout.math.Matrix $r9;
        java.util.List $r10;
        java.lang.Object $r11, $r14, $r23, $r25, $r27, $r29;
        com.google.common.collect.BoundType $r15, $r17;
        int $i0, $i1;
        com.google.common.collect.SortedMultiset $r16, $r19, $r20;
        java.lang.Iterable $r18, $r21, $r22;
        org.apache.mahout.common.distance.DistanceMeasure $r24;
        byte $b2;

        r0 := @this: org.apache.mahout.math.neighborhood.ProjectionSearch;

        r1 := @parameter0: org.apache.mahout.math.Vector;

        z0 := @parameter1: boolean;

        d2 = #Infinity;

        r30 = null;

        $r9 = r0.<org.apache.mahout.math.neighborhood.ProjectionSearch: org.apache.mahout.math.Matrix basisMatrix>;

        r2 = interfaceinvoke $r9.<org.apache.mahout.math.Matrix: java.util.Iterator iterator()>();

        $r10 = r0.<org.apache.mahout.math.neighborhood.ProjectionSearch: java.util.List scalarProjections>;

        r3 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r11 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.google.common.collect.TreeMultiset) $r11;

        $r14 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.mahout.math.Vector) $r14;

        $r13 = new org.apache.mahout.math.random.WeightedThing;

        $d1 = interfaceinvoke r1.<org.apache.mahout.math.Vector: double dot(org.apache.mahout.math.Vector)>(r5);

        specialinvoke $r13.<org.apache.mahout.math.random.WeightedThing: void <init>(java.lang.Object,double)>(r1, $d1);

        $r15 = <com.google.common.collect.BoundType: com.google.common.collect.BoundType CLOSED>;

        $r16 = virtualinvoke r4.<com.google.common.collect.TreeMultiset: com.google.common.collect.SortedMultiset tailMultiset(java.lang.Object,com.google.common.collect.BoundType)>($r13, $r15);

        $i0 = r0.<org.apache.mahout.math.neighborhood.ProjectionSearch: int searchSize>;

        $r18 = staticinvoke <com.google.common.collect.Iterables: java.lang.Iterable limit(java.lang.Iterable,int)>($r16, $i0);

        $r17 = <com.google.common.collect.BoundType: com.google.common.collect.BoundType OPEN>;

        $r20 = virtualinvoke r4.<com.google.common.collect.TreeMultiset: com.google.common.collect.SortedMultiset headMultiset(java.lang.Object,com.google.common.collect.BoundType)>($r13, $r17);

        $r19 = interfaceinvoke $r20.<com.google.common.collect.SortedMultiset: com.google.common.collect.SortedMultiset descendingMultiset()>();

        $i1 = r0.<org.apache.mahout.math.neighborhood.ProjectionSearch: int searchSize>;

        $r22 = staticinvoke <com.google.common.collect.Iterables: java.lang.Iterable limit(java.lang.Iterable,int)>($r19, $i1);

        $r21 = staticinvoke <com.google.common.collect.Iterables: java.lang.Iterable concat(java.lang.Iterable,java.lang.Iterable)>($r18, $r22);

        r7 = interfaceinvoke $r21.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label1;

        $r23 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.apache.mahout.math.random.WeightedThing) $r23;

        $r24 = r0.<org.apache.mahout.math.neighborhood.ProjectionSearch: org.apache.mahout.common.distance.DistanceMeasure distanceMeasure>;

        $r25 = virtualinvoke r8.<org.apache.mahout.math.random.WeightedThing: java.lang.Object getValue()>();

        $r26 = (org.apache.mahout.math.Vector) $r25;

        d0 = interfaceinvoke $r24.<org.apache.mahout.common.distance.DistanceMeasure: double distance(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector)>(r1, $r26);

        $b2 = d0 cmpg d2;

        if $b2 >= 0 goto label2;

        if z0 == 0 goto label3;

        $r27 = virtualinvoke r8.<org.apache.mahout.math.random.WeightedThing: java.lang.Object getValue()>();

        $r28 = (org.apache.mahout.math.Vector) $r27;

        $z3 = virtualinvoke $r28.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z3 != 0 goto label2;

     label3:
        d2 = d0;

        $r29 = virtualinvoke r8.<org.apache.mahout.math.random.WeightedThing: java.lang.Object getValue()>();

        r30 = (org.apache.mahout.math.Vector) $r29;

        goto label2;

     label4:
        $r12 = new org.apache.mahout.math.random.WeightedThing;

        specialinvoke $r12.<org.apache.mahout.math.random.WeightedThing: void <init>(java.lang.Object,double)>(r30, d2);

        return $r12;
    }

    public java.util.Iterator iterator()
    {
        org.apache.mahout.math.neighborhood.ProjectionSearch r0;
        org.apache.mahout.math.neighborhood.ProjectionSearch$1 $r1;

        r0 := @this: org.apache.mahout.math.neighborhood.ProjectionSearch;

        $r1 = new org.apache.mahout.math.neighborhood.ProjectionSearch$1;

        specialinvoke $r1.<org.apache.mahout.math.neighborhood.ProjectionSearch$1: void <init>(org.apache.mahout.math.neighborhood.ProjectionSearch)>(r0);

        return $r1;
    }

    public boolean remove(org.apache.mahout.math.Vector, double)
    {
        org.apache.mahout.math.neighborhood.ProjectionSearch r0;
        org.apache.mahout.math.Vector r1, $r10;
        double d0, $d1, $d2;
        org.apache.mahout.math.random.WeightedThing r2, $r8;
        java.util.Iterator r3, r4;
        com.google.common.collect.TreeMultiset r5;
        byte $b0;
        org.apache.mahout.math.Matrix $r6;
        java.util.List $r7;
        boolean $z0, $z1;
        java.lang.Object $r9, $r11;
        java.lang.RuntimeException $r12;

        r0 := @this: org.apache.mahout.math.neighborhood.ProjectionSearch;

        r1 := @parameter0: org.apache.mahout.math.Vector;

        d0 := @parameter1: double;

        r2 = virtualinvoke r0.<org.apache.mahout.math.neighborhood.ProjectionSearch: org.apache.mahout.math.random.WeightedThing searchFirst(org.apache.mahout.math.Vector,boolean)>(r1, 0);

        $d1 = virtualinvoke r2.<org.apache.mahout.math.random.WeightedThing: double getWeight()>();

        $b0 = $d1 cmpg d0;

        if $b0 >= 0 goto label3;

        $r6 = r0.<org.apache.mahout.math.neighborhood.ProjectionSearch: org.apache.mahout.math.Matrix basisMatrix>;

        r3 = interfaceinvoke $r6.<org.apache.mahout.math.Matrix: java.util.Iterator iterator()>();

        $r7 = r0.<org.apache.mahout.math.neighborhood.ProjectionSearch: java.util.List scalarProjections>;

        r4 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.google.common.collect.TreeMultiset) $r9;

        $r8 = new org.apache.mahout.math.random.WeightedThing;

        $r11 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (org.apache.mahout.math.Vector) $r11;

        $d2 = interfaceinvoke r1.<org.apache.mahout.math.Vector: double dot(org.apache.mahout.math.Vector)>($r10);

        specialinvoke $r8.<org.apache.mahout.math.random.WeightedThing: void <init>(java.lang.Object,double)>(r1, $d2);

        $z1 = virtualinvoke r5.<com.google.common.collect.TreeMultiset: boolean remove(java.lang.Object)>($r8);

        if $z1 != 0 goto label1;

        $r12 = new java.lang.RuntimeException;

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.String)>("Internal inconsistency in ProjectionSearch");

        throw $r12;

     label2:
        return 1;

     label3:
        return 0;
    }

    public void clear()
    {
        org.apache.mahout.math.neighborhood.ProjectionSearch r0;
        java.util.Iterator r1;
        com.google.common.collect.TreeMultiset r2;
        java.util.List $r3, $r4;
        boolean $z0;
        java.lang.Object $r5;

        r0 := @this: org.apache.mahout.math.neighborhood.ProjectionSearch;

        $r3 = r0.<org.apache.mahout.math.neighborhood.ProjectionSearch: java.util.List scalarProjections>;

        if $r3 != null goto label1;

        return;

     label1:
        $r4 = r0.<org.apache.mahout.math.neighborhood.ProjectionSearch: java.util.List scalarProjections>;

        r1 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (com.google.common.collect.TreeMultiset) $r5;

        virtualinvoke r2.<com.google.common.collect.TreeMultiset: void clear()>();

        goto label2;

     label3:
        return;
    }

    static java.util.List access$000(org.apache.mahout.math.neighborhood.ProjectionSearch)
    {
        org.apache.mahout.math.neighborhood.ProjectionSearch r0;
        java.util.List $r1;

        r0 := @parameter0: org.apache.mahout.math.neighborhood.ProjectionSearch;

        $r1 = r0.<org.apache.mahout.math.neighborhood.ProjectionSearch: java.util.List scalarProjections>;

        return $r1;
    }
}
