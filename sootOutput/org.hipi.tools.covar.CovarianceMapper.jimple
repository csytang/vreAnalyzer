public class org.hipi.tools.covar.CovarianceMapper extends org.apache.hadoop.mapreduce.Mapper
{
    org.bytedeco.javacpp.opencv_core$Mat mean;
    org.bytedeco.javacpp.opencv_core$Mat gaussian;

    public void <init>()
    {
        org.hipi.tools.covar.CovarianceMapper r0;

        r0 := @this: org.hipi.tools.covar.CovarianceMapper;

        specialinvoke r0.<org.apache.hadoop.mapreduce.Mapper: void <init>()>();

        return;
    }

    public void setup(org.apache.hadoop.mapreduce.Mapper$Context)
    {
        org.hipi.tools.covar.CovarianceMapper r0;
        org.apache.hadoop.mapreduce.Mapper$Context r1;
        org.apache.hadoop.conf.Configuration $r3, $r5;
        org.apache.hadoop.fs.Path $r4;
        org.apache.hadoop.fs.FileSystem $r6;
        org.bytedeco.javacpp.opencv_core$Mat $r7, $r10, $r11, $r14, $r15;
        org.hipi.opencv.OpenCVMatWritable $r8;
        org.bytedeco.javacpp.opencv_core$Scalar $r9;
        int $i1, $i4, $i5, i7, i8, i9;
        java.nio.Buffer $r12;
        byte $b3;
        org.bytedeco.javacpp.opencv_core$MatExpr $r13;
        java.io.PrintStream $r16, $r18;
        float $f3, $f4, $f5, $f6;
        double $d0, d1, d2, d3;
        java.io.IOException $r19;
        java.lang.String r20;
        org.apache.hadoop.fs.FSDataInputStream r22;
        java.nio.FloatBuffer r24;

        r0 := @this: org.hipi.tools.covar.CovarianceMapper;

        r1 := @parameter0: org.apache.hadoop.mapreduce.Mapper$Context;

     label01:
        $r3 = virtualinvoke r1.<org.apache.hadoop.mapreduce.Mapper$Context: org.apache.hadoop.conf.Configuration getConfiguration()>();

        r20 = virtualinvoke $r3.<org.apache.hadoop.conf.Configuration: java.lang.String get(java.lang.String)>("hipi.covar.mean.path");

        if r20 != null goto label02;

        $r18 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r18.<java.io.PrintStream: void println(java.lang.String)>("Mean path not set in configuration - cannot continue. Exiting.");

        staticinvoke <java.lang.System: void exit(int)>(1);

     label02:
        $r4 = new org.apache.hadoop.fs.Path;

        specialinvoke $r4.<org.apache.hadoop.fs.Path: void <init>(java.lang.String)>(r20);

        $r5 = virtualinvoke r1.<org.apache.hadoop.mapreduce.Mapper$Context: org.apache.hadoop.conf.Configuration getConfiguration()>();

        $r6 = staticinvoke <org.apache.hadoop.fs.FileSystem: org.apache.hadoop.fs.FileSystem get(org.apache.hadoop.conf.Configuration)>($r5);

        r22 = virtualinvoke $r6.<org.apache.hadoop.fs.FileSystem: org.apache.hadoop.fs.FSDataInputStream open(org.apache.hadoop.fs.Path)>($r4);

        $r8 = new org.hipi.opencv.OpenCVMatWritable;

        specialinvoke $r8.<org.hipi.opencv.OpenCVMatWritable: void <init>()>();

        virtualinvoke $r8.<org.hipi.opencv.OpenCVMatWritable: void readFields(java.io.DataInput)>(r22);

        $r7 = virtualinvoke $r8.<org.hipi.opencv.OpenCVMatWritable: org.bytedeco.javacpp.opencv_core$Mat getMat()>();

        r0.<org.hipi.tools.covar.CovarianceMapper: org.bytedeco.javacpp.opencv_core$Mat mean> = $r7;

     label03:
        goto label05;

     label04:
        $r19 := @caughtexception;

        virtualinvoke $r19.<java.io.IOException: void printStackTrace()>();

        staticinvoke <java.lang.System: void exit(int)>(1);

     label05:
        $r10 = new org.bytedeco.javacpp.opencv_core$Mat;

        $i1 = <org.bytedeco.javacpp.opencv_core: int CV_32FC1>;

        $r9 = new org.bytedeco.javacpp.opencv_core$Scalar;

        specialinvoke $r9.<org.bytedeco.javacpp.opencv_core$Scalar: void <init>(double)>(0.0);

        specialinvoke $r10.<org.bytedeco.javacpp.opencv_core$Mat: void <init>(int,int,int,org.bytedeco.javacpp.opencv_core$Scalar)>(64, 64, $i1, $r9);

        r0.<org.hipi.tools.covar.CovarianceMapper: org.bytedeco.javacpp.opencv_core$Mat gaussian> = $r10;

        $r11 = r0.<org.hipi.tools.covar.CovarianceMapper: org.bytedeco.javacpp.opencv_core$Mat gaussian>;

        $r12 = virtualinvoke $r11.<org.bytedeco.javacpp.opencv_core$Mat: java.nio.Buffer createBuffer()>();

        r24 = (java.nio.FloatBuffer) $r12;

        d1 = (double) 200.0F;

        i7 = 0;

     label06:
        if i7 >= 64 goto label09;

        i8 = 0;

     label07:
        if i8 >= 64 goto label08;

        $i4 = i7 * 64;

        $i5 = $i4 + i8;

        $f6 = specialinvoke r0.<org.hipi.tools.covar.CovarianceMapper: float generate2DGaussianValue(int,int,int,double)>(i7, i8, 32, d1);

        virtualinvoke r24.<java.nio.FloatBuffer: java.nio.FloatBuffer put(int,float)>($i5, $f6);

        i8 = i8 + 1;

        goto label07;

     label08:
        i7 = i7 + 1;

        goto label06;

     label09:
        d2 = 0.0;

        i9 = 0;

     label10:
        if i9 >= 4096 goto label11;

        $f5 = virtualinvoke r24.<java.nio.FloatBuffer: float get(int)>(i9);

        $f3 = virtualinvoke r24.<java.nio.FloatBuffer: float get(int)>(i9);

        $f4 = $f5 * $f3;

        $d0 = (double) $f4;

        d2 = d2 + $d0;

        i9 = i9 + 1;

        goto label10;

     label11:
        d3 = staticinvoke <java.lang.Math: double sqrt(double)>(d2);

        $b3 = d3 cmpl 0.0;

        if $b3 != 0 goto label12;

        $r16 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r16.<java.io.PrintStream: void println(java.lang.String)>("Invalid euclidean distance of gaussian vector [0]. Cannot continue.");

        staticinvoke <java.lang.System: void exit(int)>(1);

     label12:
        $r14 = r0.<org.hipi.tools.covar.CovarianceMapper: org.bytedeco.javacpp.opencv_core$Mat gaussian>;

        $r13 = staticinvoke <org.bytedeco.javacpp.opencv_core: org.bytedeco.javacpp.opencv_core$MatExpr divide(org.bytedeco.javacpp.opencv_core$Mat,double)>($r14, d3);

        $r15 = virtualinvoke $r13.<org.bytedeco.javacpp.opencv_core$MatExpr: org.bytedeco.javacpp.opencv_core$Mat asMat()>();

        r0.<org.hipi.tools.covar.CovarianceMapper: org.bytedeco.javacpp.opencv_core$Mat gaussian> = $r15;

        return;

        catch java.io.IOException from label01 to label03 with label04;
    }

    private float generate2DGaussianValue(int, int, int, double)
    {
        org.hipi.tools.covar.CovarianceMapper r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7;
        float $f0;

        r0 := @this: org.hipi.tools.covar.CovarianceMapper;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        d0 := @parameter3: double;

        $i4 = i0 - i2;

        $i3 = i0 - i2;

        $i5 = $i4 * $i3;

        $d3 = (double) $i5;

        d1 = $d3 / d0;

        $i7 = i1 - i2;

        $i6 = i1 - i2;

        $i8 = $i7 * $i6;

        $d4 = (double) $i8;

        d2 = $d4 / d0;

        $d6 = d1 + d2;

        $d5 = neg $d6;

        $d7 = staticinvoke <java.lang.Math: double exp(double)>($d5);

        $f0 = (float) $d7;

        return $f0;
    }

    public void map(org.hipi.image.HipiImageHeader, org.hipi.image.FloatImage, org.apache.hadoop.mapreduce.Mapper$Context) throws java.io.IOException, java.lang.InterruptedException
    {
        org.hipi.tools.covar.CovarianceMapper r0;
        org.hipi.image.HipiImageHeader r1;
        org.hipi.image.FloatImage r2;
        org.apache.hadoop.mapreduce.Mapper$Context r3;
        org.bytedeco.javacpp.opencv_core$Mat[] r5;
        int i3, $i4, $i5, $i6, $i10, $i12, $i13, $i14, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, i24, i25, i26, i27;
        org.bytedeco.javacpp.opencv_core$Mat r6, $r7, $r9, $r10, $r14, $r16, $r17, $r19, $r21, $r22, $r23, r27;
        boolean $z0;
        org.bytedeco.javacpp.opencv_core$Scalar $r8, $r11;
        org.bytedeco.javacpp.opencv_core$MatExpr $r12, $r15;
        org.apache.hadoop.io.IntWritable $r13;
        org.hipi.opencv.OpenCVMatWritable $r18;
        org.bytedeco.javacpp.opencv_core$Rect $r20;
        java.io.PrintStream $r24;

        r0 := @this: org.hipi.tools.covar.CovarianceMapper;

        r1 := @parameter0: org.hipi.image.HipiImageHeader;

        r2 := @parameter1: org.hipi.image.FloatImage;

        r3 := @parameter2: org.apache.hadoop.mapreduce.Mapper$Context;

        $r7 = new org.bytedeco.javacpp.opencv_core$Mat;

        $i4 = virtualinvoke r2.<org.hipi.image.FloatImage: int getHeight()>();

        $i6 = virtualinvoke r2.<org.hipi.image.FloatImage: int getWidth()>();

        $i5 = <org.bytedeco.javacpp.opencv_core: int CV_32FC1>;

        specialinvoke $r7.<org.bytedeco.javacpp.opencv_core$Mat: void <init>(int,int,int)>($i4, $i6, $i5);

        $z0 = staticinvoke <org.hipi.tools.covar.Covariance: boolean convertFloatImageToGrayscaleMat(org.hipi.image.FloatImage,org.bytedeco.javacpp.opencv_core$Mat)>(r2, $r7);

        if $z0 != 0 goto label1;

        $r24 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r24.<java.io.PrintStream: void println(java.lang.String)>("CovarianceMapper is skipping image with invalid color space.");

        return;

     label1:
        r5 = newarray (org.bytedeco.javacpp.opencv_core$Mat)[100];

        i24 = 0;

     label2:
        if i24 >= 10 goto label5;

        $i16 = virtualinvoke $r7.<org.bytedeco.javacpp.opencv_core$Mat: int cols()>();

        $i17 = $i16 - 64;

        $i18 = $i17 * i24;

        i25 = $i18 / 10;

        i26 = 0;

     label3:
        if i26 >= 10 goto label4;

        $i21 = virtualinvoke $r7.<org.bytedeco.javacpp.opencv_core$Mat: int rows()>();

        $i20 = $i21 - 64;

        $i19 = $i20 * i26;

        i3 = $i19 / 10;

        $r20 = new org.bytedeco.javacpp.opencv_core$Rect;

        specialinvoke $r20.<org.bytedeco.javacpp.opencv_core$Rect: void <init>(int,int,int,int)>(i25, i3, 64, 64);

        $r23 = virtualinvoke $r7.<org.bytedeco.javacpp.opencv_core$Mat: org.bytedeco.javacpp.opencv_core$Mat apply(org.bytedeco.javacpp.opencv_core$Rect)>($r20);

        r6 = virtualinvoke $r23.<org.bytedeco.javacpp.opencv_core$Mat: org.bytedeco.javacpp.opencv_core$Mat clone()>();

        $r22 = r0.<org.hipi.tools.covar.CovarianceMapper: org.bytedeco.javacpp.opencv_core$Mat mean>;

        staticinvoke <org.bytedeco.javacpp.opencv_core: void subtract(org.bytedeco.javacpp.opencv_core$Mat,org.bytedeco.javacpp.opencv_core$Mat,org.bytedeco.javacpp.opencv_core$Mat)>(r6, $r22, r6);

        $r21 = r0.<org.hipi.tools.covar.CovarianceMapper: org.bytedeco.javacpp.opencv_core$Mat gaussian>;

        staticinvoke <org.bytedeco.javacpp.opencv_core: void multiply(org.bytedeco.javacpp.opencv_core$Mat,org.bytedeco.javacpp.opencv_core$Mat,org.bytedeco.javacpp.opencv_core$Mat)>(r6, $r21, r6);

        $i23 = 10 * i24;

        $i22 = $i23 + i26;

        r5[$i22] = r6;

        i26 = i26 + 1;

        goto label3;

     label4:
        i24 = i24 + 1;

        goto label2;

     label5:
        $r9 = new org.bytedeco.javacpp.opencv_core$Mat;

        $i10 = <org.bytedeco.javacpp.opencv_core: int CV_32FC1>;

        $r8 = new org.bytedeco.javacpp.opencv_core$Scalar;

        specialinvoke $r8.<org.bytedeco.javacpp.opencv_core$Scalar: void <init>(double)>(0.0);

        specialinvoke $r9.<org.bytedeco.javacpp.opencv_core$Mat: void <init>(int,int,int,org.bytedeco.javacpp.opencv_core$Scalar)>(4096, 4096, $i10, $r8);

        $r10 = new org.bytedeco.javacpp.opencv_core$Mat;

        $i13 = lengthof r5;

        $i12 = <org.bytedeco.javacpp.opencv_core: int CV_32FC1>;

        $r11 = new org.bytedeco.javacpp.opencv_core$Scalar;

        specialinvoke $r11.<org.bytedeco.javacpp.opencv_core$Scalar: void <init>(double)>(0.0);

        specialinvoke $r10.<org.bytedeco.javacpp.opencv_core$Mat: void <init>(int,int,int,org.bytedeco.javacpp.opencv_core$Scalar)>(4096, $i13, $i12, $r11);

        i27 = 0;

     label6:
        $i14 = lengthof r5;

        if i27 >= $i14 goto label7;

        $r16 = r5[i27];

        $r17 = virtualinvoke $r16.<org.bytedeco.javacpp.opencv_core$Mat: org.bytedeco.javacpp.opencv_core$Mat reshape(int,int)>(0, 4096);

        $r19 = virtualinvoke $r10.<org.bytedeco.javacpp.opencv_core$Mat: org.bytedeco.javacpp.opencv_core$Mat col(int)>(i27);

        virtualinvoke $r17.<org.bytedeco.javacpp.opencv_core$Mat: void copyTo(org.bytedeco.javacpp.opencv_core$Mat)>($r19);

        i27 = i27 + 1;

        goto label6;

     label7:
        $r12 = virtualinvoke $r10.<org.bytedeco.javacpp.opencv_core$Mat: org.bytedeco.javacpp.opencv_core$MatExpr t()>();

        $r14 = virtualinvoke $r12.<org.bytedeco.javacpp.opencv_core$MatExpr: org.bytedeco.javacpp.opencv_core$Mat asMat()>();

        $r15 = staticinvoke <org.bytedeco.javacpp.opencv_core: org.bytedeco.javacpp.opencv_core$MatExpr multiply(org.bytedeco.javacpp.opencv_core$Mat,org.bytedeco.javacpp.opencv_core$Mat)>($r10, $r14);

        r27 = virtualinvoke $r15.<org.bytedeco.javacpp.opencv_core$MatExpr: org.bytedeco.javacpp.opencv_core$Mat asMat()>();

        $r13 = new org.apache.hadoop.io.IntWritable;

        specialinvoke $r13.<org.apache.hadoop.io.IntWritable: void <init>(int)>(0);

        $r18 = new org.hipi.opencv.OpenCVMatWritable;

        specialinvoke $r18.<org.hipi.opencv.OpenCVMatWritable: void <init>(org.bytedeco.javacpp.opencv_core$Mat)>(r27);

        virtualinvoke r3.<org.apache.hadoop.mapreduce.Mapper$Context: void write(java.lang.Object,java.lang.Object)>($r13, $r18);

        return;
    }

    public volatile void map(java.lang.Object, java.lang.Object, org.apache.hadoop.mapreduce.Mapper$Context) throws java.io.IOException, java.lang.InterruptedException
    {
        org.hipi.tools.covar.CovarianceMapper r0;
        java.lang.Object r1, r2;
        org.apache.hadoop.mapreduce.Mapper$Context r3;
        org.hipi.image.FloatImage $r4;
        org.hipi.image.HipiImageHeader $r5;

        r0 := @this: org.hipi.tools.covar.CovarianceMapper;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: org.apache.hadoop.mapreduce.Mapper$Context;

        $r5 = (org.hipi.image.HipiImageHeader) r1;

        $r4 = (org.hipi.image.FloatImage) r2;

        virtualinvoke r0.<org.hipi.tools.covar.CovarianceMapper: void map(org.hipi.image.HipiImageHeader,org.hipi.image.FloatImage,org.apache.hadoop.mapreduce.Mapper$Context)>($r5, $r4, r3);

        return;
    }
}
