public class org.apache.mahout.classifier.naivebayes.test.TestNaiveBayesDriver extends org.apache.mahout.common.AbstractJob
{
    private static final org.slf4j.Logger log;
    public static final java.lang.String COMPLEMENTARY;
    private static final java.util.regex.Pattern SLASH;

    public void <init>()
    {
        org.apache.mahout.classifier.naivebayes.test.TestNaiveBayesDriver r0;

        r0 := @this: org.apache.mahout.classifier.naivebayes.test.TestNaiveBayesDriver;

        specialinvoke r0.<org.apache.mahout.common.AbstractJob: void <init>()>();

        return;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        java.lang.String[] r0;
        org.apache.hadoop.conf.Configuration $r1;
        org.apache.mahout.classifier.naivebayes.test.TestNaiveBayesDriver $r2;

        r0 := @parameter0: java.lang.String[];

        $r1 = new org.apache.hadoop.conf.Configuration;

        specialinvoke $r1.<org.apache.hadoop.conf.Configuration: void <init>()>();

        $r2 = new org.apache.mahout.classifier.naivebayes.test.TestNaiveBayesDriver;

        specialinvoke $r2.<org.apache.mahout.classifier.naivebayes.test.TestNaiveBayesDriver: void <init>()>();

        staticinvoke <org.apache.hadoop.util.ToolRunner: int run(org.apache.hadoop.conf.Configuration,org.apache.hadoop.util.Tool,java.lang.String[])>($r1, $r2, r0);

        return;
    }

    public int run(java.lang.String[]) throws java.lang.Exception
    {
        org.apache.mahout.classifier.naivebayes.test.TestNaiveBayesDriver r0;
        java.lang.String[] r1;
        java.util.Map r2, r3;
        boolean z0, z1, $z2, $z3;
        org.apache.commons.cli2.builder.DefaultOptionBuilder $r6;
        org.apache.commons.cli2.option.DefaultOption $r7;
        org.apache.commons.cli2.Option $r8, $r12, $r15;
        java.lang.String $r10, $r13, $r16, $r31;
        org.apache.hadoop.conf.Configuration $r17, $r25, $r29;
        org.apache.hadoop.fs.Path $r18, $r22, $r30;
        org.apache.mahout.common.iterator.sequencefile.PathType $r19;
        org.apache.hadoop.fs.PathFilter $r20;
        org.apache.mahout.common.iterator.sequencefile.SequenceFileDirIterable $r21;
        java.util.Collection $r23;
        org.slf4j.Logger $r24;
        org.apache.mahout.classifier.ResultAnalyzer $r26;
        org.apache.hadoop.fs.Path[] $r28;

        r0 := @this: org.apache.mahout.classifier.naivebayes.test.TestNaiveBayesDriver;

        r1 := @parameter0: java.lang.String[];

        virtualinvoke r0.<org.apache.mahout.classifier.naivebayes.test.TestNaiveBayesDriver: void addInputOption()>();

        virtualinvoke r0.<org.apache.mahout.classifier.naivebayes.test.TestNaiveBayesDriver: void addOutputOption()>();

        $r6 = staticinvoke <org.apache.mahout.common.commandline.DefaultOptionCreator: org.apache.commons.cli2.builder.DefaultOptionBuilder overwriteOption()>();

        $r7 = virtualinvoke $r6.<org.apache.commons.cli2.builder.DefaultOptionBuilder: org.apache.commons.cli2.option.DefaultOption create()>();

        $r8 = virtualinvoke r0.<org.apache.mahout.classifier.naivebayes.test.TestNaiveBayesDriver: org.apache.commons.cli2.Option addOption(org.apache.commons.cli2.Option)>($r7);

        virtualinvoke r0.<org.apache.mahout.classifier.naivebayes.test.TestNaiveBayesDriver: org.apache.commons.cli2.Option addOption(org.apache.commons.cli2.Option)>($r8);

        virtualinvoke r0.<org.apache.mahout.classifier.naivebayes.test.TestNaiveBayesDriver: void addOption(java.lang.String,java.lang.String,java.lang.String,boolean)>("model", "m", "The path to the model built during training", 1);

        $r10 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>(0);

        $r12 = staticinvoke <org.apache.mahout.classifier.naivebayes.test.TestNaiveBayesDriver: org.apache.commons.cli2.Option buildOption(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,java.lang.String)>("testComplementary", "c", "test complementary?", 0, 0, $r10);

        virtualinvoke r0.<org.apache.mahout.classifier.naivebayes.test.TestNaiveBayesDriver: org.apache.commons.cli2.Option addOption(org.apache.commons.cli2.Option)>($r12);

        $r13 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>(0);

        $r15 = staticinvoke <org.apache.mahout.classifier.naivebayes.test.TestNaiveBayesDriver: org.apache.commons.cli2.Option buildOption(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,java.lang.String)>("runSequential", "seq", "run sequential?", 0, 0, $r13);

        virtualinvoke r0.<org.apache.mahout.classifier.naivebayes.test.TestNaiveBayesDriver: org.apache.commons.cli2.Option addOption(org.apache.commons.cli2.Option)>($r15);

        virtualinvoke r0.<org.apache.mahout.classifier.naivebayes.test.TestNaiveBayesDriver: void addOption(java.lang.String,java.lang.String,java.lang.String,boolean)>("labelIndex", "l", "The path to the location of the label index", 1);

        r2 = virtualinvoke r0.<org.apache.mahout.classifier.naivebayes.test.TestNaiveBayesDriver: java.util.Map parseArguments(java.lang.String[])>(r1);

        if r2 != null goto label1;

        return -1;

     label1:
        $z2 = virtualinvoke r0.<org.apache.mahout.classifier.naivebayes.test.TestNaiveBayesDriver: boolean hasOption(java.lang.String)>("overwrite");

        if $z2 == 0 goto label2;

        $r29 = virtualinvoke r0.<org.apache.mahout.classifier.naivebayes.test.TestNaiveBayesDriver: org.apache.hadoop.conf.Configuration getConf()>();

        $r28 = newarray (org.apache.hadoop.fs.Path)[1];

        $r30 = virtualinvoke r0.<org.apache.mahout.classifier.naivebayes.test.TestNaiveBayesDriver: org.apache.hadoop.fs.Path getOutputPath()>();

        $r28[0] = $r30;

        staticinvoke <org.apache.mahout.common.HadoopUtil: void delete(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.Path[])>($r29, $r28);

     label2:
        z0 = virtualinvoke r0.<org.apache.mahout.classifier.naivebayes.test.TestNaiveBayesDriver: boolean hasOption(java.lang.String)>("runSequential");

        if z0 == 0 goto label3;

        specialinvoke r0.<org.apache.mahout.classifier.naivebayes.test.TestNaiveBayesDriver: void runSequential()>();

        goto label4;

     label3:
        z1 = specialinvoke r0.<org.apache.mahout.classifier.naivebayes.test.TestNaiveBayesDriver: boolean runMapReduce()>();

        if z1 != 0 goto label4;

        return -1;

     label4:
        $r17 = virtualinvoke r0.<org.apache.mahout.classifier.naivebayes.test.TestNaiveBayesDriver: org.apache.hadoop.conf.Configuration getConf()>();

        $r18 = new org.apache.hadoop.fs.Path;

        $r16 = virtualinvoke r0.<org.apache.mahout.classifier.naivebayes.test.TestNaiveBayesDriver: java.lang.String getOption(java.lang.String)>("labelIndex");

        specialinvoke $r18.<org.apache.hadoop.fs.Path: void <init>(java.lang.String)>($r16);

        r3 = staticinvoke <org.apache.mahout.classifier.naivebayes.BayesUtils: java.util.Map readLabelIndex(org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.Path)>($r17, $r18);

        $r21 = new org.apache.mahout.common.iterator.sequencefile.SequenceFileDirIterable;

        $r22 = virtualinvoke r0.<org.apache.mahout.classifier.naivebayes.test.TestNaiveBayesDriver: org.apache.hadoop.fs.Path getOutputPath()>();

        $r19 = <org.apache.mahout.common.iterator.sequencefile.PathType: org.apache.mahout.common.iterator.sequencefile.PathType LIST>;

        $r20 = staticinvoke <org.apache.mahout.common.iterator.sequencefile.PathFilters: org.apache.hadoop.fs.PathFilter partFilter()>();

        $r25 = virtualinvoke r0.<org.apache.mahout.classifier.naivebayes.test.TestNaiveBayesDriver: org.apache.hadoop.conf.Configuration getConf()>();

        specialinvoke $r21.<org.apache.mahout.common.iterator.sequencefile.SequenceFileDirIterable: void <init>(org.apache.hadoop.fs.Path,org.apache.mahout.common.iterator.sequencefile.PathType,org.apache.hadoop.fs.PathFilter,org.apache.hadoop.conf.Configuration)>($r22, $r19, $r20, $r25);

        $r26 = new org.apache.mahout.classifier.ResultAnalyzer;

        $r23 = interfaceinvoke r3.<java.util.Map: java.util.Collection values()>();

        specialinvoke $r26.<org.apache.mahout.classifier.ResultAnalyzer: void <init>(java.util.Collection,java.lang.String)>($r23, "DEFAULT");

        staticinvoke <org.apache.mahout.classifier.naivebayes.test.TestNaiveBayesDriver: void analyzeResults(java.util.Map,org.apache.mahout.common.iterator.sequencefile.SequenceFileDirIterable,org.apache.mahout.classifier.ResultAnalyzer)>(r3, $r21, $r26);

        $r24 = <org.apache.mahout.classifier.naivebayes.test.TestNaiveBayesDriver: org.slf4j.Logger log>;

        $z3 = virtualinvoke r0.<org.apache.mahout.classifier.naivebayes.test.TestNaiveBayesDriver: boolean hasOption(java.lang.String)>("testComplementary");

        if $z3 == 0 goto label5;

        $r31 = "Complementary";

        goto label6;

     label5:
        $r31 = "Standard NB";

     label6:
        interfaceinvoke $r24.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("{} Results: {}", $r31, $r26);

        return 0;
    }

    private void runSequential() throws java.io.IOException
    {
        org.apache.mahout.classifier.naivebayes.test.TestNaiveBayesDriver r0;
        boolean z0, $z1, $z2;
        org.apache.hadoop.fs.FileSystem r1;
        org.apache.mahout.classifier.naivebayes.NaiveBayesModel r2;
        org.apache.hadoop.io.SequenceFile$Writer r3;
        java.util.Iterator r4;
        org.apache.mahout.common.Pair r5;
        org.apache.hadoop.conf.Configuration $r8, $r10, $r14, $r20;
        org.apache.hadoop.fs.Path $r9, $r13, $r15, $r16;
        java.lang.String $r11, $r26, $r28;
        org.apache.mahout.classifier.naivebayes.StandardNaiveBayesClassifier $r12;
        org.apache.mahout.common.iterator.sequencefile.SequenceFileDirIterable $r17;
        org.apache.hadoop.fs.PathFilter $r18;
        org.apache.mahout.common.iterator.sequencefile.PathType $r19;
        java.lang.Object $r21, $r22, $r32;
        org.apache.hadoop.io.Text $r23, $r24;
        java.util.regex.Pattern $r25;
        org.apache.mahout.math.VectorWritable $r27, $r33;
        java.lang.String[] $r29;
        org.apache.mahout.math.Vector $r30, $r31;
        org.apache.mahout.classifier.naivebayes.ComplementaryNaiveBayesClassifier $r34;
        java.lang.Throwable $r35, $r37, $r38, r40;
        org.apache.mahout.classifier.naivebayes.AbstractNaiveBayesClassifier r39;

        r0 := @this: org.apache.mahout.classifier.naivebayes.test.TestNaiveBayesDriver;

        z0 = virtualinvoke r0.<org.apache.mahout.classifier.naivebayes.test.TestNaiveBayesDriver: boolean hasOption(java.lang.String)>("testComplementary");

        $r8 = virtualinvoke r0.<org.apache.mahout.classifier.naivebayes.test.TestNaiveBayesDriver: org.apache.hadoop.conf.Configuration getConf()>();

        r1 = staticinvoke <org.apache.hadoop.fs.FileSystem: org.apache.hadoop.fs.FileSystem get(org.apache.hadoop.conf.Configuration)>($r8);

        $r9 = new org.apache.hadoop.fs.Path;

        $r11 = virtualinvoke r0.<org.apache.mahout.classifier.naivebayes.test.TestNaiveBayesDriver: java.lang.String getOption(java.lang.String)>("model");

        specialinvoke $r9.<org.apache.hadoop.fs.Path: void <init>(java.lang.String)>($r11);

        $r10 = virtualinvoke r0.<org.apache.mahout.classifier.naivebayes.test.TestNaiveBayesDriver: org.apache.hadoop.conf.Configuration getConf()>();

        r2 = staticinvoke <org.apache.mahout.classifier.naivebayes.NaiveBayesModel: org.apache.mahout.classifier.naivebayes.NaiveBayesModel materialize(org.apache.hadoop.fs.Path,org.apache.hadoop.conf.Configuration)>($r9, $r10);

        if z0 == 0 goto label01;

        $z1 = virtualinvoke r2.<org.apache.mahout.classifier.naivebayes.NaiveBayesModel: boolean isComplemtary()>();

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "Complementary mode in model is different from test mode");

     label01:
        if z0 == 0 goto label02;

        $r34 = new org.apache.mahout.classifier.naivebayes.ComplementaryNaiveBayesClassifier;

        specialinvoke $r34.<org.apache.mahout.classifier.naivebayes.ComplementaryNaiveBayesClassifier: void <init>(org.apache.mahout.classifier.naivebayes.NaiveBayesModel)>(r2);

        r39 = $r34;

        goto label03;

     label02:
        $r12 = new org.apache.mahout.classifier.naivebayes.StandardNaiveBayesClassifier;

        specialinvoke $r12.<org.apache.mahout.classifier.naivebayes.StandardNaiveBayesClassifier: void <init>(org.apache.mahout.classifier.naivebayes.NaiveBayesModel)>(r2);

        r39 = $r12;

     label03:
        $r14 = virtualinvoke r0.<org.apache.mahout.classifier.naivebayes.test.TestNaiveBayesDriver: org.apache.hadoop.conf.Configuration getConf()>();

        $r13 = new org.apache.hadoop.fs.Path;

        $r15 = virtualinvoke r0.<org.apache.mahout.classifier.naivebayes.test.TestNaiveBayesDriver: org.apache.hadoop.fs.Path getOutputPath()>();

        specialinvoke $r13.<org.apache.hadoop.fs.Path: void <init>(org.apache.hadoop.fs.Path,java.lang.String)>($r15, "part-r-00000");

        r3 = staticinvoke <org.apache.hadoop.io.SequenceFile: org.apache.hadoop.io.SequenceFile$Writer createWriter(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.conf.Configuration,org.apache.hadoop.fs.Path,java.lang.Class,java.lang.Class)>(r1, $r14, $r13, class "org/apache/hadoop/io/Text", class "org/apache/mahout/math/VectorWritable");

        r40 = null;

     label04:
        $r17 = new org.apache.mahout.common.iterator.sequencefile.SequenceFileDirIterable;

        $r16 = virtualinvoke r0.<org.apache.mahout.classifier.naivebayes.test.TestNaiveBayesDriver: org.apache.hadoop.fs.Path getInputPath()>();

        $r19 = <org.apache.mahout.common.iterator.sequencefile.PathType: org.apache.mahout.common.iterator.sequencefile.PathType LIST>;

        $r18 = staticinvoke <org.apache.mahout.common.iterator.sequencefile.PathFilters: org.apache.hadoop.fs.PathFilter partFilter()>();

        $r20 = virtualinvoke r0.<org.apache.mahout.classifier.naivebayes.test.TestNaiveBayesDriver: org.apache.hadoop.conf.Configuration getConf()>();

        specialinvoke $r17.<org.apache.mahout.common.iterator.sequencefile.SequenceFileDirIterable: void <init>(org.apache.hadoop.fs.Path,org.apache.mahout.common.iterator.sequencefile.PathType,org.apache.hadoop.fs.PathFilter,org.apache.hadoop.conf.Configuration)>($r16, $r19, $r18, $r20);

        r4 = virtualinvoke $r17.<org.apache.mahout.common.iterator.sequencefile.SequenceFileDirIterable: java.util.Iterator iterator()>();

     label05:
        $z2 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label06;

        $r21 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.mahout.common.Pair) $r21;

        $r24 = new org.apache.hadoop.io.Text;

        $r25 = <org.apache.mahout.classifier.naivebayes.test.TestNaiveBayesDriver: java.util.regex.Pattern SLASH>;

        $r22 = virtualinvoke r5.<org.apache.mahout.common.Pair: java.lang.Object getFirst()>();

        $r23 = (org.apache.hadoop.io.Text) $r22;

        $r28 = virtualinvoke $r23.<org.apache.hadoop.io.Text: java.lang.String toString()>();

        $r29 = virtualinvoke $r25.<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence)>($r28);

        $r26 = $r29[1];

        specialinvoke $r24.<org.apache.hadoop.io.Text: void <init>(java.lang.String)>($r26);

        $r27 = new org.apache.mahout.math.VectorWritable;

        $r32 = virtualinvoke r5.<org.apache.mahout.common.Pair: java.lang.Object getSecond()>();

        $r33 = (org.apache.mahout.math.VectorWritable) $r32;

        $r30 = virtualinvoke $r33.<org.apache.mahout.math.VectorWritable: org.apache.mahout.math.Vector get()>();

        $r31 = virtualinvoke r39.<org.apache.mahout.classifier.naivebayes.AbstractNaiveBayesClassifier: org.apache.mahout.math.Vector classifyFull(org.apache.mahout.math.Vector)>($r30);

        specialinvoke $r27.<org.apache.mahout.math.VectorWritable: void <init>(org.apache.mahout.math.Vector)>($r31);

        virtualinvoke r3.<org.apache.hadoop.io.SequenceFile$Writer: void append(org.apache.hadoop.io.Writable,org.apache.hadoop.io.Writable)>($r24, $r27);

        goto label05;

     label06:
        if r3 == null goto label15;

        virtualinvoke r3.<org.apache.hadoop.io.SequenceFile$Writer: void close()>();

        goto label15;

     label07:
        $r37 := @caughtexception;

        r40 = $r37;

        throw $r37;

     label08:
        $r35 := @caughtexception;

     label09:
        if r3 == null goto label14;

        if r40 == null goto label13;

     label10:
        virtualinvoke r3.<org.apache.hadoop.io.SequenceFile$Writer: void close()>();

     label11:
        goto label14;

     label12:
        $r38 := @caughtexception;

        virtualinvoke r40.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r38);

        goto label14;

     label13:
        virtualinvoke r3.<org.apache.hadoop.io.SequenceFile$Writer: void close()>();

     label14:
        throw $r35;

     label15:
        return;

        catch java.lang.Throwable from label04 to label06 with label07;
        catch java.lang.Throwable from label04 to label06 with label08;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label07 to label09 with label08;
    }

    private boolean runMapReduce() throws java.io.IOException, java.lang.InterruptedException, java.lang.ClassNotFoundException
    {
        org.apache.mahout.classifier.naivebayes.test.TestNaiveBayesDriver r0;
        org.apache.hadoop.mapreduce.Job r2;
        boolean z0, $z1;
        org.apache.hadoop.fs.Path $r3, $r6, $r7;
        java.lang.String $r4, $r9;
        org.apache.hadoop.conf.Configuration $r5, $r8;

        r0 := @this: org.apache.mahout.classifier.naivebayes.test.TestNaiveBayesDriver;

        $r3 = new org.apache.hadoop.fs.Path;

        $r4 = virtualinvoke r0.<org.apache.mahout.classifier.naivebayes.test.TestNaiveBayesDriver: java.lang.String getOption(java.lang.String)>("model");

        specialinvoke $r3.<org.apache.hadoop.fs.Path: void <init>(java.lang.String)>($r4);

        $r5 = virtualinvoke r0.<org.apache.mahout.classifier.naivebayes.test.TestNaiveBayesDriver: org.apache.hadoop.conf.Configuration getConf()>();

        staticinvoke <org.apache.mahout.common.HadoopUtil: void cacheFiles(org.apache.hadoop.fs.Path,org.apache.hadoop.conf.Configuration)>($r3, $r5);

        $r6 = virtualinvoke r0.<org.apache.mahout.classifier.naivebayes.test.TestNaiveBayesDriver: org.apache.hadoop.fs.Path getInputPath()>();

        $r7 = virtualinvoke r0.<org.apache.mahout.classifier.naivebayes.test.TestNaiveBayesDriver: org.apache.hadoop.fs.Path getOutputPath()>();

        r2 = virtualinvoke r0.<org.apache.mahout.classifier.naivebayes.test.TestNaiveBayesDriver: org.apache.hadoop.mapreduce.Job prepareJob(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path,java.lang.Class,java.lang.Class,java.lang.Class,java.lang.Class,java.lang.Class)>($r6, $r7, class "org/apache/hadoop/mapreduce/lib/input/SequenceFileInputFormat", class "org/apache/mahout/classifier/naivebayes/test/BayesTestMapper", class "org/apache/hadoop/io/Text", class "org/apache/mahout/math/VectorWritable", class "org/apache/hadoop/mapreduce/lib/output/SequenceFileOutputFormat");

        z0 = virtualinvoke r0.<org.apache.mahout.classifier.naivebayes.test.TestNaiveBayesDriver: boolean hasOption(java.lang.String)>("testComplementary");

        $r8 = virtualinvoke r2.<org.apache.hadoop.mapreduce.Job: org.apache.hadoop.conf.Configuration getConfiguration()>();

        $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>(z0);

        virtualinvoke $r8.<org.apache.hadoop.conf.Configuration: void set(java.lang.String,java.lang.String)>("class", $r9);

        $z1 = virtualinvoke r2.<org.apache.hadoop.mapreduce.Job: boolean waitForCompletion(boolean)>(1);

        return $z1;
    }

    private static void analyzeResults(java.util.Map, org.apache.mahout.common.iterator.sequencefile.SequenceFileDirIterable, org.apache.mahout.classifier.ResultAnalyzer)
    {
        java.util.Map r0;
        org.apache.mahout.common.iterator.sequencefile.SequenceFileDirIterable r1;
        org.apache.mahout.classifier.ResultAnalyzer r2;
        java.util.Iterator r3, r19;
        org.apache.mahout.common.Pair r4;
        org.apache.mahout.math.Vector$Element r5;
        boolean $z0, $z1;
        java.lang.Object $r6, $r7, $r14, $r16, $r18;
        org.apache.mahout.math.VectorWritable $r8;
        org.apache.mahout.math.Vector $r9;
        java.lang.Iterable $r10;
        java.lang.Integer $r11;
        org.apache.mahout.classifier.ClassifierResult $r12;
        java.lang.String $r13, $r17;
        org.apache.hadoop.io.Text $r15;
        double $d0, d1;
        byte $b0;
        int i1;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: org.apache.mahout.common.iterator.sequencefile.SequenceFileDirIterable;

        r2 := @parameter2: org.apache.mahout.classifier.ResultAnalyzer;

        r3 = virtualinvoke r1.<org.apache.mahout.common.iterator.sequencefile.SequenceFileDirIterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.mahout.common.Pair) $r6;

        i1 = -2147483648;

        d1 = -9.223372036854776E18;

        $r7 = virtualinvoke r4.<org.apache.mahout.common.Pair: java.lang.Object getSecond()>();

        $r8 = (org.apache.mahout.math.VectorWritable) $r7;

        $r9 = virtualinvoke $r8.<org.apache.mahout.math.VectorWritable: org.apache.mahout.math.Vector get()>();

        $r10 = interfaceinvoke $r9.<org.apache.mahout.math.Vector: java.lang.Iterable all()>();

        r19 = interfaceinvoke $r10.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r19.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r18 = interfaceinvoke r19.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.mahout.math.Vector$Element) $r18;

        $d0 = interfaceinvoke r5.<org.apache.mahout.math.Vector$Element: double get()>();

        $b0 = $d0 cmpl d1;

        if $b0 <= 0 goto label2;

        d1 = interfaceinvoke r5.<org.apache.mahout.math.Vector$Element: double get()>();

        i1 = interfaceinvoke r5.<org.apache.mahout.math.Vector$Element: int index()>();

        goto label2;

     label3:
        if i1 == -2147483648 goto label1;

        $r12 = new org.apache.mahout.classifier.ClassifierResult;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r14 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r11);

        $r13 = (java.lang.String) $r14;

        specialinvoke $r12.<org.apache.mahout.classifier.ClassifierResult: void <init>(java.lang.String,double)>($r13, d1);

        $r16 = virtualinvoke r4.<org.apache.mahout.common.Pair: java.lang.Object getFirst()>();

        $r15 = (org.apache.hadoop.io.Text) $r16;

        $r17 = virtualinvoke $r15.<org.apache.hadoop.io.Text: java.lang.String toString()>();

        virtualinvoke r2.<org.apache.mahout.classifier.ResultAnalyzer: boolean addInstance(java.lang.String,org.apache.mahout.classifier.ClassifierResult)>($r17, $r12);

        goto label1;

     label4:
        return;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;
        java.util.regex.Pattern $r1;

        <org.apache.mahout.classifier.naivebayes.test.TestNaiveBayesDriver: java.lang.String COMPLEMENTARY> = "class";

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "org/apache/mahout/classifier/naivebayes/test/TestNaiveBayesDriver");

        <org.apache.mahout.classifier.naivebayes.test.TestNaiveBayesDriver: org.slf4j.Logger log> = $r0;

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("/");

        <org.apache.mahout.classifier.naivebayes.test.TestNaiveBayesDriver: java.util.regex.Pattern SLASH> = $r1;

        return;
    }
}
