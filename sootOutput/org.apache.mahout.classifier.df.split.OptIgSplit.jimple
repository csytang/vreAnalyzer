public class org.apache.mahout.classifier.df.split.OptIgSplit extends org.apache.mahout.classifier.df.split.IgSplit
{
    private static final int MAX_NUMERIC_SPLITS;

    public void <init>()
    {
        org.apache.mahout.classifier.df.split.OptIgSplit r0;

        r0 := @this: org.apache.mahout.classifier.df.split.OptIgSplit;

        specialinvoke r0.<org.apache.mahout.classifier.df.split.IgSplit: void <init>()>();

        return;
    }

    public org.apache.mahout.classifier.df.split.Split computeSplit(org.apache.mahout.classifier.df.data.Data, int)
    {
        org.apache.mahout.classifier.df.split.OptIgSplit r0;
        org.apache.mahout.classifier.df.data.Data r1;
        int i0;
        org.apache.mahout.classifier.df.data.Dataset $r2;
        boolean $z0;
        org.apache.mahout.classifier.df.split.Split $r3, $r4;

        r0 := @this: org.apache.mahout.classifier.df.split.OptIgSplit;

        r1 := @parameter0: org.apache.mahout.classifier.df.data.Data;

        i0 := @parameter1: int;

        $r2 = virtualinvoke r1.<org.apache.mahout.classifier.df.data.Data: org.apache.mahout.classifier.df.data.Dataset getDataset()>();

        $z0 = virtualinvoke $r2.<org.apache.mahout.classifier.df.data.Dataset: boolean isNumerical(int)>(i0);

        if $z0 == 0 goto label1;

        $r4 = staticinvoke <org.apache.mahout.classifier.df.split.OptIgSplit: org.apache.mahout.classifier.df.split.Split numericalSplit(org.apache.mahout.classifier.df.data.Data,int)>(r1, i0);

        return $r4;

     label1:
        $r3 = staticinvoke <org.apache.mahout.classifier.df.split.OptIgSplit: org.apache.mahout.classifier.df.split.Split categoricalSplit(org.apache.mahout.classifier.df.data.Data,int)>(r1, i0);

        return $r3;
    }

    private static org.apache.mahout.classifier.df.split.Split categoricalSplit(org.apache.mahout.classifier.df.data.Data, int)
    {
        org.apache.mahout.classifier.df.data.Data r0;
        int i0, i1, $i2, $i3, i4, i5, i6;
        double[] r1, r2, $r6;
        int[][] r3;
        int[] r4, $r8, $r10;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, d7, d8;
        java.lang.Object $r5;
        org.apache.mahout.classifier.df.data.Dataset $r7;
        org.apache.mahout.classifier.df.split.Split $r9;

        r0 := @parameter0: org.apache.mahout.classifier.df.data.Data;

        i0 := @parameter1: int;

        $r6 = virtualinvoke r0.<org.apache.mahout.classifier.df.data.Data: double[] values(int)>(i0);

        $r5 = virtualinvoke $r6.<java.lang.Object: java.lang.Object clone()>();

        r1 = (double[]) $r5;

        r2 = staticinvoke <org.apache.mahout.classifier.df.split.OptIgSplit: double[] chooseCategoricalSplitPoints(double[])>(r1);

        $r7 = virtualinvoke r0.<org.apache.mahout.classifier.df.data.Data: org.apache.mahout.classifier.df.data.Dataset getDataset()>();

        i1 = virtualinvoke $r7.<org.apache.mahout.classifier.df.data.Dataset: int nblabels()>();

        $i2 = lengthof r2;

        r3 = newmultiarray (int)[$i2][i1];

        r4 = newarray (int)[i1];

        staticinvoke <org.apache.mahout.classifier.df.split.OptIgSplit: void computeFrequencies(org.apache.mahout.classifier.df.data.Data,int,double[],int[][],int[])>(r0, i0, r2, r3, r4);

        i4 = virtualinvoke r0.<org.apache.mahout.classifier.df.data.Data: int size()>();

        d0 = staticinvoke <org.apache.mahout.classifier.df.split.OptIgSplit: double entropy(int[],int)>(r4, i4);

        d7 = 0.0;

        $d2 = (double) i4;

        d1 = 1.0 / $d2;

        i5 = 0;

     label1:
        $i3 = lengthof r2;

        if i5 >= $i3 goto label2;

        $r8 = r3[i5];

        i6 = staticinvoke <org.apache.mahout.classifier.df.data.DataUtils: int sum(int[])>($r8);

        $d3 = (double) i6;

        $d4 = $d3 * d1;

        $r10 = r3[i5];

        $d5 = staticinvoke <org.apache.mahout.classifier.df.split.OptIgSplit: double entropy(int[],int)>($r10, i6);

        $d6 = $d4 * $d5;

        d7 = d7 + $d6;

        i5 = i5 + 1;

        goto label1;

     label2:
        d8 = d0 - d7;

        $r9 = new org.apache.mahout.classifier.df.split.Split;

        specialinvoke $r9.<org.apache.mahout.classifier.df.split.Split: void <init>(int,double)>(i0, d8);

        return $r9;
    }

    static void computeFrequencies(org.apache.mahout.classifier.df.data.Data, int, double[], int[][], int[])
    {
        org.apache.mahout.classifier.df.data.Data r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i11, i12;
        double[] r1;
        int[][] r2;
        int[] r3, $r6;
        org.apache.mahout.classifier.df.data.Dataset r4;
        org.apache.mahout.classifier.df.data.Instance r5;
        double d0, $d1, $d2;
        byte $b10;

        r0 := @parameter0: org.apache.mahout.classifier.df.data.Data;

        i0 := @parameter1: int;

        r1 := @parameter2: double[];

        r2 := @parameter3: int[][];

        r3 := @parameter4: int[];

        r4 = virtualinvoke r0.<org.apache.mahout.classifier.df.data.Data: org.apache.mahout.classifier.df.data.Dataset getDataset()>();

        i11 = 0;

     label1:
        $i2 = virtualinvoke r0.<org.apache.mahout.classifier.df.data.Data: int size()>();

        if i11 >= $i2 goto label5;

        r5 = virtualinvoke r0.<org.apache.mahout.classifier.df.data.Data: org.apache.mahout.classifier.df.data.Instance get(int)>(i11);

        $d1 = virtualinvoke r4.<org.apache.mahout.classifier.df.data.Dataset: double getLabel(org.apache.mahout.classifier.df.data.Instance)>(r5);

        i1 = (int) $d1;

        d0 = virtualinvoke r5.<org.apache.mahout.classifier.df.data.Instance: double get(int)>(i0);

        i12 = 0;

     label2:
        $i3 = lengthof r1;

        if i12 >= $i3 goto label3;

        $d2 = r1[i12];

        $b10 = d0 cmpl $d2;

        if $b10 <= 0 goto label3;

        i12 = i12 + 1;

        goto label2;

     label3:
        $i5 = lengthof r1;

        if i12 >= $i5 goto label4;

        $r6 = r2[i12];

        $i8 = $r6[i1];

        $i7 = $i8 + 1;

        $r6[i1] = $i7;

     label4:
        $i4 = r3[i1];

        $i6 = $i4 + 1;

        r3[i1] = $i6;

        i11 = i11 + 1;

        goto label1;

     label5:
        return;
    }

    static org.apache.mahout.classifier.df.split.Split numericalSplit(org.apache.mahout.classifier.df.data.Data, int)
    {
        org.apache.mahout.classifier.df.data.Data r0;
        int i0, i1, $i2, $i3, i5, i6, i7, i8, i9;
        double[] r1, r2, $r6;
        int[][] r3;
        int[] r4, r5, $r11, $r12;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, d12, d14, d15;
        java.lang.Object $r7;
        org.apache.mahout.classifier.df.data.Dataset $r8;
        org.apache.mahout.classifier.df.split.Split $r9;
        java.lang.IllegalStateException $r10;
        byte $b4;

        r0 := @parameter0: org.apache.mahout.classifier.df.data.Data;

        i0 := @parameter1: int;

        $r6 = virtualinvoke r0.<org.apache.mahout.classifier.df.data.Data: double[] values(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.Object clone()>();

        r1 = (double[]) $r7;

        staticinvoke <java.util.Arrays: void sort(double[])>(r1);

        r2 = staticinvoke <org.apache.mahout.classifier.df.split.OptIgSplit: double[] chooseNumericSplitPoints(double[])>(r1);

        $r8 = virtualinvoke r0.<org.apache.mahout.classifier.df.data.Data: org.apache.mahout.classifier.df.data.Dataset getDataset()>();

        i1 = virtualinvoke $r8.<org.apache.mahout.classifier.df.data.Dataset: int nblabels()>();

        $i2 = lengthof r2;

        r3 = newmultiarray (int)[$i2][i1];

        r4 = newarray (int)[i1];

        r5 = newarray (int)[i1];

        staticinvoke <org.apache.mahout.classifier.df.split.OptIgSplit: void computeFrequencies(org.apache.mahout.classifier.df.data.Data,int,double[],int[][],int[])>(r0, i0, r2, r3, r4);

        i5 = virtualinvoke r0.<org.apache.mahout.classifier.df.data.Data: int size()>();

        d0 = staticinvoke <org.apache.mahout.classifier.df.split.OptIgSplit: double entropy(int[],int)>(r4, i5);

        $d2 = (double) i5;

        d1 = 1.0 / $d2;

        i6 = -1;

        d12 = -1.0;

        i7 = 0;

     label1:
        $i3 = lengthof r2;

        if i7 >= $i3 goto label3;

        $r11 = r3[i7];

        staticinvoke <org.apache.mahout.classifier.df.data.DataUtils: void add(int[],int[])>(r5, $r11);

        $r12 = r3[i7];

        staticinvoke <org.apache.mahout.classifier.df.data.DataUtils: void dec(int[],int[])>(r4, $r12);

        i8 = staticinvoke <org.apache.mahout.classifier.df.data.DataUtils: int sum(int[])>(r5);

        $d4 = (double) i8;

        $d6 = $d4 * d1;

        $d7 = staticinvoke <org.apache.mahout.classifier.df.split.OptIgSplit: double entropy(int[],int)>(r5, i8);

        $d5 = $d6 * $d7;

        d14 = d0 - $d5;

        i9 = staticinvoke <org.apache.mahout.classifier.df.data.DataUtils: int sum(int[])>(r4);

        $d10 = (double) i9;

        $d11 = $d10 * d1;

        $d8 = staticinvoke <org.apache.mahout.classifier.df.split.OptIgSplit: double entropy(int[],int)>(r4, i9);

        $d9 = $d11 * $d8;

        d15 = d14 - $d9;

        $b4 = d15 cmpl d12;

        if $b4 <= 0 goto label2;

        d12 = d15;

        i6 = i7;

     label2:
        i7 = i7 + 1;

        goto label1;

     label3:
        if i6 != -1 goto label4;

        $r10 = new java.lang.IllegalStateException;

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("no best split found !");

        throw $r10;

     label4:
        $r9 = new org.apache.mahout.classifier.df.split.Split;

        $d3 = r2[i6];

        specialinvoke $r9.<org.apache.mahout.classifier.df.split.Split: void <init>(int,double,double)>(i0, d12, $d3);

        return $r9;
    }

    private static double[] chooseNumericSplitPoints(double[])
    {
        double[] r0, r2, r4;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9;
        org.apache.commons.math3.stat.descriptive.rank.Percentile $r1;

        r0 := @parameter0: double[];

        $i0 = lengthof r0;

        if $i0 > 1 goto label1;

        return r0;

     label1:
        $i1 = lengthof r0;

        if $i1 > 17 goto label4;

        $i4 = lengthof r0;

        $i3 = $i4 - 1;

        r2 = newarray (double)[$i3];

        i8 = 1;

     label2:
        $i6 = lengthof r0;

        if i8 >= $i6 goto label3;

        $i7 = i8 - 1;

        $d5 = r0[i8];

        $i5 = i8 - 1;

        $d6 = r0[$i5];

        $d8 = $d5 + $d6;

        $d7 = $d8 / 2.0;

        r2[$i7] = $d7;

        i8 = i8 + 1;

        goto label2;

     label3:
        return r2;

     label4:
        $r1 = new org.apache.commons.math3.stat.descriptive.rank.Percentile;

        specialinvoke $r1.<org.apache.commons.math3.stat.descriptive.rank.Percentile: void <init>()>();

        virtualinvoke $r1.<org.apache.commons.math3.stat.descriptive.rank.Percentile: void setData(double[])>(r0);

        r4 = newarray (double)[16];

        i9 = 0;

     label5:
        $i2 = lengthof r4;

        if i9 >= $i2 goto label6;

        $d1 = (double) i9;

        $d2 = $d1 + 1.0;

        $d3 = $d2 / 17.0;

        d0 = 100.0 * $d3;

        $d4 = virtualinvoke $r1.<org.apache.commons.math3.stat.descriptive.rank.Percentile: double evaluate(double)>(d0);

        r4[i9] = $d4;

        i9 = i9 + 1;

        goto label5;

     label6:
        return r4;
    }

    private static double[] chooseCategoricalSplitPoints(double[])
    {
        double[] r0, r7;
        double d0, $d1;
        java.util.TreeSet $r2;
        int $i0, $i1, i2, i3, i4;
        java.lang.Object $r3;
        java.lang.Double $r4, $r5;
        java.util.Iterator r8;

        r0 := @parameter0: double[];

        $r2 = new java.util.TreeSet;

        specialinvoke $r2.<java.util.TreeSet: void <init>()>();

        i2 = lengthof r0;

        i3 = 0;

     label1:
        if i3 >= i2 goto label2;

        d0 = r0[i3];

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        interfaceinvoke $r2.<java.util.Collection: boolean add(java.lang.Object)>($r5);

        i3 = i3 + 1;

        goto label1;

     label2:
        $i0 = interfaceinvoke $r2.<java.util.Collection: int size()>();

        r7 = newarray (double)[$i0];

        r8 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

        i4 = 0;

     label3:
        $i1 = lengthof r7;

        if i4 >= $i1 goto label4;

        $r3 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.lang.Double) $r3;

        $d1 = virtualinvoke $r4.<java.lang.Double: double doubleValue()>();

        r7[i4] = $d1;

        i4 = i4 + 1;

        goto label3;

     label4:
        return r7;
    }

    private static double entropy(int[], int)
    {
        int[] r0;
        int i0, i1, i2, i3;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, d7;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        if i0 != 0 goto label1;

        return 0.0;

     label1:
        d7 = 0.0;

        i1 = lengthof r0;

        i3 = 0;

     label2:
        if i3 >= i1 goto label4;

        i2 = r0[i3];

        if i2 <= 0 goto label3;

        $d4 = (double) i2;

        $d3 = (double) i0;

        d0 = $d4 / $d3;

        $d6 = staticinvoke <java.lang.Math: double log(double)>(d0);

        $d5 = d0 * $d6;

        d7 = d7 - $d5;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        $d1 = <org.apache.mahout.classifier.df.split.OptIgSplit: double LOG2>;

        $d2 = d7 / $d1;

        return $d2;
    }

    public static void <clinit>()
    {
        <org.apache.mahout.classifier.df.split.OptIgSplit: int MAX_NUMERIC_SPLITS> = 16;

        return;
    }
}
