public final class org.apache.mahout.cf.taste.hadoop.item.AggregateAndRecommendReducer extends org.apache.hadoop.mapreduce.Reducer
{
    private static final org.slf4j.Logger log;
    static final java.lang.String ITEMID_INDEX_PATH;
    static final java.lang.String NUM_RECOMMENDATIONS;
    static final int DEFAULT_NUM_RECOMMENDATIONS;
    static final java.lang.String ITEMS_FILE;
    private boolean booleanData;
    private int recommendationsPerUser;
    private org.apache.mahout.cf.taste.hadoop.item.IDReader idReader;
    private org.apache.mahout.cf.taste.impl.common.FastIDSet itemsToRecommendFor;
    private org.apache.mahout.math.map.OpenIntLongHashMap indexItemIDMap;
    private final org.apache.mahout.cf.taste.hadoop.RecommendedItemsWritable recommendedItems;
    private static final float BOOLEAN_PREF_VALUE;

    public void <init>()
    {
        org.apache.mahout.cf.taste.hadoop.item.AggregateAndRecommendReducer r0;
        org.apache.mahout.cf.taste.hadoop.RecommendedItemsWritable $r1;

        r0 := @this: org.apache.mahout.cf.taste.hadoop.item.AggregateAndRecommendReducer;

        specialinvoke r0.<org.apache.hadoop.mapreduce.Reducer: void <init>()>();

        $r1 = new org.apache.mahout.cf.taste.hadoop.RecommendedItemsWritable;

        specialinvoke $r1.<org.apache.mahout.cf.taste.hadoop.RecommendedItemsWritable: void <init>()>();

        r0.<org.apache.mahout.cf.taste.hadoop.item.AggregateAndRecommendReducer: org.apache.mahout.cf.taste.hadoop.RecommendedItemsWritable recommendedItems> = $r1;

        return;
    }

    protected void setup(org.apache.hadoop.mapreduce.Reducer$Context) throws java.io.IOException
    {
        org.apache.mahout.cf.taste.hadoop.item.AggregateAndRecommendReducer r0;
        org.apache.hadoop.mapreduce.Reducer$Context r1;
        org.apache.hadoop.conf.Configuration r2;
        int $i0;
        boolean $z0;
        java.lang.String $r3;
        org.apache.mahout.math.map.OpenIntLongHashMap $r4;
        org.apache.mahout.cf.taste.hadoop.item.IDReader $r5, $r6, $r7;
        org.apache.mahout.cf.taste.impl.common.FastIDSet $r8;

        r0 := @this: org.apache.mahout.cf.taste.hadoop.item.AggregateAndRecommendReducer;

        r1 := @parameter0: org.apache.hadoop.mapreduce.Reducer$Context;

        r2 = virtualinvoke r1.<org.apache.hadoop.mapreduce.Reducer$Context: org.apache.hadoop.conf.Configuration getConfiguration()>();

        $i0 = virtualinvoke r2.<org.apache.hadoop.conf.Configuration: int getInt(java.lang.String,int)>("numRecommendations", 10);

        r0.<org.apache.mahout.cf.taste.hadoop.item.AggregateAndRecommendReducer: int recommendationsPerUser> = $i0;

        $z0 = virtualinvoke r2.<org.apache.hadoop.conf.Configuration: boolean getBoolean(java.lang.String,boolean)>("booleanData", 0);

        r0.<org.apache.mahout.cf.taste.hadoop.item.AggregateAndRecommendReducer: boolean booleanData> = $z0;

        $r3 = virtualinvoke r2.<org.apache.hadoop.conf.Configuration: java.lang.String get(java.lang.String)>("itemIDIndexPath");

        $r4 = staticinvoke <org.apache.mahout.cf.taste.hadoop.TasteHadoopUtils: org.apache.mahout.math.map.OpenIntLongHashMap readIDIndexMap(java.lang.String,org.apache.hadoop.conf.Configuration)>($r3, r2);

        r0.<org.apache.mahout.cf.taste.hadoop.item.AggregateAndRecommendReducer: org.apache.mahout.math.map.OpenIntLongHashMap indexItemIDMap> = $r4;

        $r5 = new org.apache.mahout.cf.taste.hadoop.item.IDReader;

        specialinvoke $r5.<org.apache.mahout.cf.taste.hadoop.item.IDReader: void <init>(org.apache.hadoop.conf.Configuration)>(r2);

        r0.<org.apache.mahout.cf.taste.hadoop.item.AggregateAndRecommendReducer: org.apache.mahout.cf.taste.hadoop.item.IDReader idReader> = $r5;

        $r6 = r0.<org.apache.mahout.cf.taste.hadoop.item.AggregateAndRecommendReducer: org.apache.mahout.cf.taste.hadoop.item.IDReader idReader>;

        virtualinvoke $r6.<org.apache.mahout.cf.taste.hadoop.item.IDReader: void readIDs()>();

        $r7 = r0.<org.apache.mahout.cf.taste.hadoop.item.AggregateAndRecommendReducer: org.apache.mahout.cf.taste.hadoop.item.IDReader idReader>;

        $r8 = virtualinvoke $r7.<org.apache.mahout.cf.taste.hadoop.item.IDReader: org.apache.mahout.cf.taste.impl.common.FastIDSet getItemIds()>();

        r0.<org.apache.mahout.cf.taste.hadoop.item.AggregateAndRecommendReducer: org.apache.mahout.cf.taste.impl.common.FastIDSet itemsToRecommendFor> = $r8;

        return;
    }

    protected void reduce(org.apache.mahout.math.VarLongWritable, java.lang.Iterable, org.apache.hadoop.mapreduce.Reducer$Context) throws java.io.IOException, java.lang.InterruptedException
    {
        org.apache.mahout.cf.taste.hadoop.item.AggregateAndRecommendReducer r0;
        org.apache.mahout.math.VarLongWritable r1;
        java.lang.Iterable r2;
        org.apache.hadoop.mapreduce.Reducer$Context r3;
        boolean $z0;

        r0 := @this: org.apache.mahout.cf.taste.hadoop.item.AggregateAndRecommendReducer;

        r1 := @parameter0: org.apache.mahout.math.VarLongWritable;

        r2 := @parameter1: java.lang.Iterable;

        r3 := @parameter2: org.apache.hadoop.mapreduce.Reducer$Context;

        $z0 = r0.<org.apache.mahout.cf.taste.hadoop.item.AggregateAndRecommendReducer: boolean booleanData>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.apache.mahout.cf.taste.hadoop.item.AggregateAndRecommendReducer: void reduceBooleanData(org.apache.mahout.math.VarLongWritable,java.lang.Iterable,org.apache.hadoop.mapreduce.Reducer$Context)>(r1, r2, r3);

        goto label2;

     label1:
        specialinvoke r0.<org.apache.mahout.cf.taste.hadoop.item.AggregateAndRecommendReducer: void reduceNonBooleanData(org.apache.mahout.math.VarLongWritable,java.lang.Iterable,org.apache.hadoop.mapreduce.Reducer$Context)>(r1, r2, r3);

     label2:
        return;
    }

    private void reduceBooleanData(org.apache.mahout.math.VarLongWritable, java.lang.Iterable, org.apache.hadoop.mapreduce.Reducer$Context) throws java.io.IOException, java.lang.InterruptedException
    {
        org.apache.mahout.cf.taste.hadoop.item.AggregateAndRecommendReducer r0;
        org.apache.mahout.math.VarLongWritable r1;
        java.lang.Iterable r2;
        org.apache.hadoop.mapreduce.Reducer$Context r3;
        java.util.Iterator r4;
        org.apache.mahout.math.Vector r5, $r10;
        java.lang.Object $r6, $r8;
        org.apache.mahout.cf.taste.hadoop.item.PrefAndSimilarityColumnWritable $r7, $r9;
        boolean $z0;
        org.apache.mahout.math.function.DoubleDoubleFunction $r11;

        r0 := @this: org.apache.mahout.cf.taste.hadoop.item.AggregateAndRecommendReducer;

        r1 := @parameter0: org.apache.mahout.math.VarLongWritable;

        r2 := @parameter1: java.lang.Iterable;

        r3 := @parameter2: org.apache.hadoop.mapreduce.Reducer$Context;

        r4 = interfaceinvoke r2.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r6 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (org.apache.mahout.cf.taste.hadoop.item.PrefAndSimilarityColumnWritable) $r6;

        r5 = virtualinvoke $r7.<org.apache.mahout.cf.taste.hadoop.item.PrefAndSimilarityColumnWritable: org.apache.mahout.math.Vector getSimilarityColumn()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (org.apache.mahout.cf.taste.hadoop.item.PrefAndSimilarityColumnWritable) $r8;

        $r10 = virtualinvoke $r9.<org.apache.mahout.cf.taste.hadoop.item.PrefAndSimilarityColumnWritable: org.apache.mahout.math.Vector getSimilarityColumn()>();

        $r11 = <org.apache.mahout.math.function.Functions: org.apache.mahout.math.function.DoubleDoubleFunction PLUS>;

        interfaceinvoke r5.<org.apache.mahout.math.Vector: org.apache.mahout.math.Vector assign(org.apache.mahout.math.Vector,org.apache.mahout.math.function.DoubleDoubleFunction)>($r10, $r11);

        goto label1;

     label2:
        specialinvoke r0.<org.apache.mahout.cf.taste.hadoop.item.AggregateAndRecommendReducer: void writeRecommendedItems(org.apache.mahout.math.VarLongWritable,org.apache.mahout.math.Vector,org.apache.hadoop.mapreduce.Reducer$Context)>(r1, r5, r3);

        return;
    }

    private void reduceNonBooleanData(org.apache.mahout.math.VarLongWritable, java.lang.Iterable, org.apache.hadoop.mapreduce.Reducer$Context) throws java.io.IOException, java.lang.InterruptedException
    {
        org.apache.mahout.cf.taste.hadoop.item.AggregateAndRecommendReducer r0;
        org.apache.mahout.math.VarLongWritable r1;
        java.lang.Iterable r2, $r8, $r11;
        org.apache.hadoop.mapreduce.Reducer$Context r3;
        org.apache.mahout.math.Vector$Element r5, r29;
        int i0, i4;
        org.apache.mahout.math.RandomAccessSparseVector $r6, $r7;
        boolean $z0, $z1, $z2;
        java.lang.Object $r9, $r10, $r20;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, d7;
        byte $b1, $b2, $b3;
        org.apache.mahout.math.function.DoubleDoubleFunction $r12, $r15, $r17, $r19;
        org.apache.mahout.math.Vector r21, r22, r25;
        java.util.Iterator r23, r26, r28;
        org.apache.mahout.cf.taste.hadoop.item.PrefAndSimilarityColumnWritable r24;
        float f0;

        r0 := @this: org.apache.mahout.cf.taste.hadoop.item.AggregateAndRecommendReducer;

        r1 := @parameter0: org.apache.mahout.math.VarLongWritable;

        r2 := @parameter1: java.lang.Iterable;

        r3 := @parameter2: org.apache.hadoop.mapreduce.Reducer$Context;

        r21 = null;

        r22 = null;

        $r6 = new org.apache.mahout.math.RandomAccessSparseVector;

        specialinvoke $r6.<org.apache.mahout.math.RandomAccessSparseVector: void <init>(int,int)>(2147483647, 100);

        r23 = interfaceinvoke r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r23.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r10 = interfaceinvoke r23.<java.util.Iterator: java.lang.Object next()>();

        r24 = (org.apache.mahout.cf.taste.hadoop.item.PrefAndSimilarityColumnWritable) $r10;

        r25 = virtualinvoke r24.<org.apache.mahout.cf.taste.hadoop.item.PrefAndSimilarityColumnWritable: org.apache.mahout.math.Vector getSimilarityColumn()>();

        f0 = virtualinvoke r24.<org.apache.mahout.cf.taste.hadoop.item.PrefAndSimilarityColumnWritable: float getPrefValue()>();

        $r11 = interfaceinvoke r25.<org.apache.mahout.math.Vector: java.lang.Iterable nonZeroes()>();

        r26 = interfaceinvoke $r11.<java.lang.Iterable: java.util.Iterator iterator()>();

     label02:
        $z2 = interfaceinvoke r26.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label03;

        $r20 = interfaceinvoke r26.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.mahout.math.Vector$Element) $r20;

        i0 = interfaceinvoke r5.<org.apache.mahout.math.Vector$Element: int index()>();

        $d6 = interfaceinvoke $r6.<org.apache.mahout.math.Vector: double getQuick(int)>(i0);

        $d5 = $d6 + 1.0;

        interfaceinvoke $r6.<org.apache.mahout.math.Vector: void setQuick(int,double)>(i0, $d5);

        goto label02;

     label03:
        if r22 != null goto label04;

        r22 = interfaceinvoke r25.<org.apache.mahout.math.Vector: org.apache.mahout.math.Vector clone()>();

        goto label05;

     label04:
        $r12 = <org.apache.mahout.math.function.Functions: org.apache.mahout.math.function.DoubleDoubleFunction PLUS_ABS>;

        interfaceinvoke r22.<org.apache.mahout.math.Vector: org.apache.mahout.math.Vector assign(org.apache.mahout.math.Vector,org.apache.mahout.math.function.DoubleDoubleFunction)>(r25, $r12);

     label05:
        if r21 != null goto label06;

        r21 = interfaceinvoke r25.<org.apache.mahout.math.Vector: org.apache.mahout.math.Vector clone()>();

        $b3 = f0 cmpl 1.0F;

        if $b3 == 0 goto label01;

        $r19 = <org.apache.mahout.math.function.Functions: org.apache.mahout.math.function.DoubleDoubleFunction MULT>;

        $d4 = (double) f0;

        interfaceinvoke r21.<org.apache.mahout.math.Vector: org.apache.mahout.math.Vector assign(org.apache.mahout.math.function.DoubleDoubleFunction,double)>($r19, $d4);

        goto label01;

     label06:
        $b2 = f0 cmpl 1.0F;

        if $b2 == 0 goto label07;

        $r17 = <org.apache.mahout.math.function.Functions: org.apache.mahout.math.function.DoubleDoubleFunction MULT>;

        $d3 = (double) f0;

        interfaceinvoke r25.<org.apache.mahout.math.Vector: org.apache.mahout.math.Vector assign(org.apache.mahout.math.function.DoubleDoubleFunction,double)>($r17, $d3);

     label07:
        $r15 = <org.apache.mahout.math.function.Functions: org.apache.mahout.math.function.DoubleDoubleFunction PLUS>;

        interfaceinvoke r21.<org.apache.mahout.math.Vector: org.apache.mahout.math.Vector assign(org.apache.mahout.math.Vector,org.apache.mahout.math.function.DoubleDoubleFunction)>(r25, $r15);

        goto label01;

     label08:
        if r21 != null goto label09;

        return;

     label09:
        $r7 = new org.apache.mahout.math.RandomAccessSparseVector;

        specialinvoke $r7.<org.apache.mahout.math.RandomAccessSparseVector: void <init>(int,int)>(2147483647, 100);

        $r8 = interfaceinvoke r21.<org.apache.mahout.math.Vector: java.lang.Iterable nonZeroes()>();

        r28 = interfaceinvoke $r8.<java.lang.Iterable: java.util.Iterator iterator()>();

     label10:
        $z1 = interfaceinvoke r28.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label11;

        $r9 = interfaceinvoke r28.<java.util.Iterator: java.lang.Object next()>();

        r29 = (org.apache.mahout.math.Vector$Element) $r9;

        i4 = interfaceinvoke r29.<org.apache.mahout.math.Vector$Element: int index()>();

        $d0 = interfaceinvoke $r6.<org.apache.mahout.math.Vector: double getQuick(int)>(i4);

        $b1 = $d0 cmpl 1.0;

        if $b1 <= 0 goto label10;

        $d2 = interfaceinvoke r29.<org.apache.mahout.math.Vector$Element: double get()>();

        $d1 = interfaceinvoke r22.<org.apache.mahout.math.Vector: double getQuick(int)>(i4);

        d7 = $d2 / $d1;

        interfaceinvoke $r7.<org.apache.mahout.math.Vector: void setQuick(int,double)>(i4, d7);

        goto label10;

     label11:
        specialinvoke r0.<org.apache.mahout.cf.taste.hadoop.item.AggregateAndRecommendReducer: void writeRecommendedItems(org.apache.mahout.math.VarLongWritable,org.apache.mahout.math.Vector,org.apache.hadoop.mapreduce.Reducer$Context)>(r1, $r7, r3);

        return;
    }

    private void writeRecommendedItems(org.apache.mahout.math.VarLongWritable, org.apache.mahout.math.Vector, org.apache.hadoop.mapreduce.Reducer$Context) throws java.io.IOException, java.lang.InterruptedException
    {
        org.apache.mahout.cf.taste.hadoop.item.AggregateAndRecommendReducer r0;
        org.apache.mahout.math.VarLongWritable r1;
        org.apache.mahout.math.Vector r2;
        org.apache.hadoop.mapreduce.Reducer$Context r3;
        org.apache.mahout.math.Vector$Element r5;
        int i0, $i1;
        float f0, $f1;
        org.apache.mahout.cf.taste.hadoop.MutableRecommendedItem r6;
        org.apache.mahout.cf.taste.hadoop.TopItemsQueue $r7;
        org.apache.mahout.cf.taste.hadoop.item.IDReader $r8, $r17, $r19;
        org.apache.mahout.cf.taste.hadoop.RecommendedItemsWritable $r9, $r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Object $r10, $r13;
        org.apache.mahout.math.map.OpenIntLongHashMap $r12, $r15, $r16;
        double $d0;
        byte $b2;
        java.lang.Long $r18;
        long $l3, l4;
        org.apache.mahout.cf.taste.impl.common.FastIDSet r20, $r23;
        java.lang.Iterable $r21;
        java.util.Iterator r22;
        java.util.List r24;

        r0 := @this: org.apache.mahout.cf.taste.hadoop.item.AggregateAndRecommendReducer;

        r1 := @parameter0: org.apache.mahout.math.VarLongWritable;

        r2 := @parameter1: org.apache.mahout.math.Vector;

        r3 := @parameter2: org.apache.hadoop.mapreduce.Reducer$Context;

        $r7 = new org.apache.mahout.cf.taste.hadoop.TopItemsQueue;

        $i1 = r0.<org.apache.mahout.cf.taste.hadoop.item.AggregateAndRecommendReducer: int recommendationsPerUser>;

        specialinvoke $r7.<org.apache.mahout.cf.taste.hadoop.TopItemsQueue: void <init>(int)>($i1);

        r20 = null;

        $r8 = r0.<org.apache.mahout.cf.taste.hadoop.item.AggregateAndRecommendReducer: org.apache.mahout.cf.taste.hadoop.item.IDReader idReader>;

        if $r8 == null goto label1;

        $r17 = r0.<org.apache.mahout.cf.taste.hadoop.item.AggregateAndRecommendReducer: org.apache.mahout.cf.taste.hadoop.item.IDReader idReader>;

        $z3 = virtualinvoke $r17.<org.apache.mahout.cf.taste.hadoop.item.IDReader: boolean isUserItemFilterSpecified()>();

        if $z3 == 0 goto label1;

        $r19 = r0.<org.apache.mahout.cf.taste.hadoop.item.AggregateAndRecommendReducer: org.apache.mahout.cf.taste.hadoop.item.IDReader idReader>;

        $l3 = virtualinvoke r1.<org.apache.mahout.math.VarLongWritable: long get()>();

        $r18 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        r20 = virtualinvoke $r19.<org.apache.mahout.cf.taste.hadoop.item.IDReader: org.apache.mahout.cf.taste.impl.common.FastIDSet getItemsToRecommendForUser(java.lang.Long)>($r18);

     label1:
        $r21 = interfaceinvoke r2.<org.apache.mahout.math.Vector: java.lang.Iterable nonZeroes()>();

        r22 = interfaceinvoke $r21.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z4 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label5;

        $r10 = interfaceinvoke r22.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.mahout.math.Vector$Element) $r10;

        i0 = interfaceinvoke r5.<org.apache.mahout.math.Vector$Element: int index()>();

        $r12 = r0.<org.apache.mahout.cf.taste.hadoop.item.AggregateAndRecommendReducer: org.apache.mahout.math.map.OpenIntLongHashMap indexItemIDMap>;

        if $r12 == null goto label3;

        $r15 = r0.<org.apache.mahout.cf.taste.hadoop.item.AggregateAndRecommendReducer: org.apache.mahout.math.map.OpenIntLongHashMap indexItemIDMap>;

        $z2 = virtualinvoke $r15.<org.apache.mahout.math.map.OpenIntLongHashMap: boolean isEmpty()>();

        if $z2 != 0 goto label3;

        $r16 = r0.<org.apache.mahout.cf.taste.hadoop.item.AggregateAndRecommendReducer: org.apache.mahout.math.map.OpenIntLongHashMap indexItemIDMap>;

        l4 = virtualinvoke $r16.<org.apache.mahout.math.map.OpenIntLongHashMap: long get(int)>(i0);

        goto label4;

     label3:
        l4 = (long) i0;

     label4:
        $r23 = r0.<org.apache.mahout.cf.taste.hadoop.item.AggregateAndRecommendReducer: org.apache.mahout.cf.taste.impl.common.FastIDSet itemsToRecommendFor>;

        $z5 = specialinvoke r0.<org.apache.mahout.cf.taste.hadoop.item.AggregateAndRecommendReducer: boolean shouldIncludeItemIntoRecommendations(long,org.apache.mahout.cf.taste.impl.common.FastIDSet,org.apache.mahout.cf.taste.impl.common.FastIDSet)>(l4, $r23, r20);

        if $z5 == 0 goto label2;

        $d0 = interfaceinvoke r5.<org.apache.mahout.math.Vector$Element: double get()>();

        f0 = (float) $d0;

        $z1 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f0);

        if $z1 != 0 goto label2;

        $r13 = virtualinvoke $r7.<org.apache.mahout.cf.taste.hadoop.TopItemsQueue: java.lang.Object top()>();

        r6 = (org.apache.mahout.cf.taste.hadoop.MutableRecommendedItem) $r13;

        $f1 = virtualinvoke r6.<org.apache.mahout.cf.taste.hadoop.MutableRecommendedItem: float getValue()>();

        $b2 = f0 cmpl $f1;

        if $b2 <= 0 goto label2;

        virtualinvoke r6.<org.apache.mahout.cf.taste.hadoop.MutableRecommendedItem: void set(long,float)>(l4, f0);

        virtualinvoke $r7.<org.apache.mahout.cf.taste.hadoop.TopItemsQueue: java.lang.Object updateTop()>();

        goto label2;

     label5:
        r24 = virtualinvoke $r7.<org.apache.mahout.cf.taste.hadoop.TopItemsQueue: java.util.List getTopItems()>();

        $z0 = interfaceinvoke r24.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label6;

        $r9 = r0.<org.apache.mahout.cf.taste.hadoop.item.AggregateAndRecommendReducer: org.apache.mahout.cf.taste.hadoop.RecommendedItemsWritable recommendedItems>;

        virtualinvoke $r9.<org.apache.mahout.cf.taste.hadoop.RecommendedItemsWritable: void set(java.util.List)>(r24);

        $r11 = r0.<org.apache.mahout.cf.taste.hadoop.item.AggregateAndRecommendReducer: org.apache.mahout.cf.taste.hadoop.RecommendedItemsWritable recommendedItems>;

        virtualinvoke r3.<org.apache.hadoop.mapreduce.Reducer$Context: void write(java.lang.Object,java.lang.Object)>(r1, $r11);

     label6:
        return;
    }

    private boolean shouldIncludeItemIntoRecommendations(long, org.apache.mahout.cf.taste.impl.common.FastIDSet, org.apache.mahout.cf.taste.impl.common.FastIDSet)
    {
        org.apache.mahout.cf.taste.hadoop.item.AggregateAndRecommendReducer r0;
        long l0;
        org.apache.mahout.cf.taste.impl.common.FastIDSet r1, r2;
        boolean $z0, $z1;

        r0 := @this: org.apache.mahout.cf.taste.hadoop.item.AggregateAndRecommendReducer;

        l0 := @parameter0: long;

        r1 := @parameter1: org.apache.mahout.cf.taste.impl.common.FastIDSet;

        r2 := @parameter2: org.apache.mahout.cf.taste.impl.common.FastIDSet;

        if r1 != null goto label1;

        if r2 != null goto label1;

        return 1;

     label1:
        if r2 == null goto label2;

        $z1 = virtualinvoke r2.<org.apache.mahout.cf.taste.impl.common.FastIDSet: boolean contains(long)>(l0);

        return $z1;

     label2:
        $z0 = virtualinvoke r1.<org.apache.mahout.cf.taste.impl.common.FastIDSet: boolean contains(long)>(l0);

        return $z0;
    }

    protected volatile void reduce(java.lang.Object, java.lang.Iterable, org.apache.hadoop.mapreduce.Reducer$Context) throws java.io.IOException, java.lang.InterruptedException
    {
        org.apache.mahout.cf.taste.hadoop.item.AggregateAndRecommendReducer r0;
        java.lang.Object r1;
        java.lang.Iterable r2;
        org.apache.hadoop.mapreduce.Reducer$Context r3;
        org.apache.mahout.math.VarLongWritable $r4;

        r0 := @this: org.apache.mahout.cf.taste.hadoop.item.AggregateAndRecommendReducer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Iterable;

        r3 := @parameter2: org.apache.hadoop.mapreduce.Reducer$Context;

        $r4 = (org.apache.mahout.math.VarLongWritable) r1;

        virtualinvoke r0.<org.apache.mahout.cf.taste.hadoop.item.AggregateAndRecommendReducer: void reduce(org.apache.mahout.math.VarLongWritable,java.lang.Iterable,org.apache.hadoop.mapreduce.Reducer$Context)>($r4, r2, r3);

        return;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        <org.apache.mahout.cf.taste.hadoop.item.AggregateAndRecommendReducer: float BOOLEAN_PREF_VALUE> = 1.0F;

        <org.apache.mahout.cf.taste.hadoop.item.AggregateAndRecommendReducer: java.lang.String ITEMS_FILE> = "itemsFile";

        <org.apache.mahout.cf.taste.hadoop.item.AggregateAndRecommendReducer: int DEFAULT_NUM_RECOMMENDATIONS> = 10;

        <org.apache.mahout.cf.taste.hadoop.item.AggregateAndRecommendReducer: java.lang.String NUM_RECOMMENDATIONS> = "numRecommendations";

        <org.apache.mahout.cf.taste.hadoop.item.AggregateAndRecommendReducer: java.lang.String ITEMID_INDEX_PATH> = "itemIDIndexPath";

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "org/apache/mahout/cf/taste/hadoop/item/AggregateAndRecommendReducer");

        <org.apache.mahout.cf.taste.hadoop.item.AggregateAndRecommendReducer: org.slf4j.Logger log> = $r0;

        return;
    }
}
