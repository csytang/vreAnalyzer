public class org.hipi.tools.downloader.Downloader extends org.apache.hadoop.conf.Configured implements org.apache.hadoop.util.Tool
{
    private static final org.apache.commons.cli.Options options;
    private static final org.apache.commons.cli.Parser parser;
    private static long uniqueMapperKey;
    private static long numDownloads;
    private final java.lang.String FLICKR_PREFIX;

    public void <init>()
    {
        org.hipi.tools.downloader.Downloader r0;

        r0 := @this: org.hipi.tools.downloader.Downloader;

        specialinvoke r0.<org.apache.hadoop.conf.Configured: void <init>()>();

        r0.<org.hipi.tools.downloader.Downloader: java.lang.String FLICKR_PREFIX> = "yfcc100m_dataset";

        return;
    }

    private static void usage()
    {
        org.apache.commons.cli.HelpFormatter $r1;
        org.apache.commons.cli.Options $r2;

        $r1 = new org.apache.commons.cli.HelpFormatter;

        specialinvoke $r1.<org.apache.commons.cli.HelpFormatter: void <init>()>();

        virtualinvoke $r1.<org.apache.commons.cli.HelpFormatter: void setWidth(int)>(148);

        $r2 = <org.hipi.tools.downloader.Downloader: org.apache.commons.cli.Options options>;

        virtualinvoke $r1.<org.apache.commons.cli.HelpFormatter: void printHelp(java.lang.String,org.apache.commons.cli.Options)>("hibDownload.jar <directory containing source files> <output HIB> [-f] [--yfcc100m] [--num-nodes #count]", $r2);

        staticinvoke <java.lang.System: void exit(int)>(0);

        return;
    }

    public int run(java.lang.String[]) throws java.lang.Exception
    {
        org.hipi.tools.downloader.Downloader r0;
        java.lang.String[] r1, $r52, $r53, r122, r137, $r156;
        java.lang.String r2, r3, r13, $r22, $r23, $r28, $r38, $r40, $r47, $r58, $r60, $r64, $r80, $r82, $r84, $r89, $r98, $r100, $r107, $r111, $r121, $r128, $r133, r139, $r153, $r154;
        boolean z0, z1, $z2, $z3, $z4, $z5;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, $i12, i13;
        org.apache.hadoop.fs.FileSystem r5;
        org.apache.hadoop.fs.FileStatus[] r6;
        org.apache.hadoop.fs.Path r8, $r42, $r49, $r65, $r71, $r75, $r94, $r96, $r106, $r119, $r123, $r124, $r129, $r134;
        org.apache.hadoop.fs.FileStatus r9;
        org.apache.hadoop.io.compress.CompressionCodec r10;
        org.apache.hadoop.fs.FSDataInputStream r11;
        org.apache.commons.cli.Options $r14, $r145, $r148, $r151;
        org.apache.commons.cli.Parser $r15;
        java.io.PrintStream $r16, $r20, $r29, $r33, $r36, $r44, $r54, $r67, $r73, $r77, $r83, $r85, $r92, $r99, $r103, $r108, $r117;
        java.lang.StringBuilder $r17, $r18, $r19, $r21, $r24, $r25, $r26, $r27, $r30, $r31, $r32, $r34, $r35, $r37, $r41, $r43, $r45, $r46, $r48, $r50, $r51, $r55, $r56, $r59, $r66, $r68, $r69, $r70, $r72, $r74, $r76, $r78, $r79, $r81, $r86, $r91, $r93, $r95, $r97, $r101, $r102, $r104, $r105, $r109, $r110, $r112, $r113, $r116, $r118, $r120, $r125, $r126, $r127, $r130, $r131, $r132;
        org.apache.hadoop.conf.Configuration $r39;
        java.lang.Object[] $r57;
        org.apache.hadoop.io.compress.CompressionCodecFactory $r61;
        java.io.BufferedReader $r62, $r90, r155;
        java.io.InputStreamReader $r63, $r88;
        org.apache.hadoop.io.compress.CompressionInputStream $r87;
        org.apache.commons.cli.ParseException $r114;
        java.lang.Exception $r115;
        java.util.ArrayList $r135;
        org.apache.hadoop.mapreduce.Job r140;
        org.apache.hadoop.fs.Path[] r141, r142;
        org.apache.commons.cli.HelpFormatter $r144, $r147, $r150;
        org.apache.commons.cli.CommandLine r152;
        byte $b14;

        r0 := @this: org.hipi.tools.downloader.Downloader;

        r1 := @parameter0: java.lang.String[];

        r152 = null;

     label01:
        $r15 = <org.hipi.tools.downloader.Downloader: org.apache.commons.cli.Parser parser>;

        $r14 = <org.hipi.tools.downloader.Downloader: org.apache.commons.cli.Options options>;

        r152 = virtualinvoke $r15.<org.apache.commons.cli.Parser: org.apache.commons.cli.CommandLine parse(org.apache.commons.cli.Options,java.lang.String[])>($r14, r1);

     label02:
        goto label04;

     label03:
        $r114 := @caughtexception;

        $r144 = new org.apache.commons.cli.HelpFormatter;

        specialinvoke $r144.<org.apache.commons.cli.HelpFormatter: void <init>()>();

        virtualinvoke $r144.<org.apache.commons.cli.HelpFormatter: void setWidth(int)>(148);

        $r145 = <org.hipi.tools.downloader.Downloader: org.apache.commons.cli.Options options>;

        virtualinvoke $r144.<org.apache.commons.cli.HelpFormatter: void printHelp(java.lang.String,org.apache.commons.cli.Options)>("hibDownload.jar <directory containing source files> <output HIB> [-f] [--yfcc100m] [--num-nodes #count]", $r145);

        staticinvoke <java.lang.System: void exit(int)>(0);

     label04:
        if r152 != null goto label05;

        $r147 = new org.apache.commons.cli.HelpFormatter;

        specialinvoke $r147.<org.apache.commons.cli.HelpFormatter: void <init>()>();

        virtualinvoke $r147.<org.apache.commons.cli.HelpFormatter: void setWidth(int)>(148);

        $r148 = <org.hipi.tools.downloader.Downloader: org.apache.commons.cli.Options options>;

        virtualinvoke $r147.<org.apache.commons.cli.HelpFormatter: void printHelp(java.lang.String,org.apache.commons.cli.Options)>("hibDownload.jar <directory containing source files> <output HIB> [-f] [--yfcc100m] [--num-nodes #count]", $r148);

        staticinvoke <java.lang.System: void exit(int)>(0);

     label05:
        r122 = virtualinvoke r152.<org.apache.commons.cli.CommandLine: java.lang.String[] getArgs()>();

        $i1 = lengthof r122;

        if $i1 == 2 goto label06;

        $r150 = new org.apache.commons.cli.HelpFormatter;

        specialinvoke $r150.<org.apache.commons.cli.HelpFormatter: void <init>()>();

        virtualinvoke $r150.<org.apache.commons.cli.HelpFormatter: void setWidth(int)>(148);

        $r151 = <org.hipi.tools.downloader.Downloader: org.apache.commons.cli.Options options>;

        virtualinvoke $r150.<org.apache.commons.cli.HelpFormatter: void printHelp(java.lang.String,org.apache.commons.cli.Options)>("hibDownload.jar <directory containing source files> <output HIB> [-f] [--yfcc100m] [--num-nodes #count]", $r151);

        staticinvoke <java.lang.System: void exit(int)>(0);

     label06:
        r2 = r122[0];

        r3 = r122[1];

        z0 = virtualinvoke r152.<org.apache.commons.cli.CommandLine: boolean hasOption(java.lang.String)>("yfcc100m");

        if z0 == 0 goto label07;

        $i12 = 1;

        goto label09;

     label07:
        $z2 = virtualinvoke r152.<org.apache.commons.cli.CommandLine: boolean hasOption(java.lang.String)>("num-nodes");

        if $z2 == 0 goto label08;

        $r107 = virtualinvoke r152.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(java.lang.String)>("num-nodes");

        $i12 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r107);

        goto label09;

     label08:
        $i12 = 1;

     label09:
        i0 = $i12;

        if $i12 >= 1 goto label10;

        $r108 = <java.lang.System: java.io.PrintStream err>;

        $r110 = new java.lang.StringBuilder;

        specialinvoke $r110.<java.lang.StringBuilder: void <init>()>();

        $r109 = virtualinvoke $r110.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid number of download nodes specified [");

        $r112 = virtualinvoke $r109.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12);

        $r113 = virtualinvoke $r112.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r111 = virtualinvoke $r113.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r108.<java.io.PrintStream: void println(java.lang.String)>($r111);

        staticinvoke <java.lang.System: void exit(int)>(1);

     label10:
        z1 = virtualinvoke r152.<org.apache.commons.cli.CommandLine: boolean hasOption(java.lang.String)>("force");

        $r16 = <java.lang.System: java.io.PrintStream out>;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Source directory: ");

        $r21 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r16.<java.io.PrintStream: void println(java.lang.String)>($r22);

        $r20 = <java.lang.System: java.io.PrintStream out>;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Output HIB: ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r23 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r20.<java.io.PrintStream: void println(java.lang.String)>($r23);

        $r29 = <java.lang.System: java.io.PrintStream out>;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Overwrite output HIB if it exists: ");

        if z1 == 0 goto label11;

        $r153 = "true";

        goto label12;

     label11:
        $r153 = "false";

     label12:
        $r27 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r153);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r29.<java.io.PrintStream: void println(java.lang.String)>($r28);

        $r33 = <java.lang.System: java.io.PrintStream out>;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("YFCC100M format: ");

        if z0 == 0 goto label13;

        $r154 = "true";

        goto label14;

     label13:
        $r154 = "false";

     label14:
        $r31 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r154);

        $r38 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r33.<java.io.PrintStream: void println(java.lang.String)>($r38);

        $r36 = <java.lang.System: java.io.PrintStream out>;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Number of download nodes: ");

        $r41 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r40 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r36.<java.io.PrintStream: void println(java.lang.String)>($r40);

        $r39 = new org.apache.hadoop.conf.Configuration;

        specialinvoke $r39.<org.apache.hadoop.conf.Configuration: void <init>()>();

        r5 = staticinvoke <org.apache.hadoop.fs.FileSystem: org.apache.hadoop.fs.FileSystem get(org.apache.hadoop.conf.Configuration)>($r39);

        if z1 != 0 goto label15;

        $r106 = new org.apache.hadoop.fs.Path;

        specialinvoke $r106.<org.apache.hadoop.fs.Path: void <init>(java.lang.String)>(r3);

        $z5 = virtualinvoke r5.<org.apache.hadoop.fs.FileSystem: boolean exists(org.apache.hadoop.fs.Path)>($r106);

        if $z5 == 0 goto label16;

        $r103 = <java.lang.System: java.io.PrintStream err>;

        $r105 = new java.lang.StringBuilder;

        specialinvoke $r105.<java.lang.StringBuilder: void <init>()>();

        $r104 = virtualinvoke $r105.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HIB [");

        $r101 = virtualinvoke $r104.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r102 = virtualinvoke $r101.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] already exists. Use the \"--force\" argument to overwrite.");

        $r100 = virtualinvoke $r102.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r103.<java.io.PrintStream: void println(java.lang.String)>($r100);

        staticinvoke <java.lang.System: void exit(int)>(1);

        goto label16;

     label15:
        $r42 = new org.apache.hadoop.fs.Path;

        specialinvoke $r42.<org.apache.hadoop.fs.Path: void <init>(java.lang.String)>(r3);

        $z3 = virtualinvoke r5.<org.apache.hadoop.fs.FileSystem: boolean exists(org.apache.hadoop.fs.Path)>($r42);

        if $z3 == 0 goto label16;

        $r99 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r99.<java.io.PrintStream: void println(java.lang.String)>("Found that output HIB already exists, deleting.");

     label16:
        $r123 = new org.apache.hadoop.fs.Path;

        specialinvoke $r123.<org.apache.hadoop.fs.Path: void <init>(java.lang.String)>(r3);

        virtualinvoke r5.<org.apache.hadoop.fs.FileSystem: boolean delete(org.apache.hadoop.fs.Path,boolean)>($r123, 1);

        $r124 = new org.apache.hadoop.fs.Path;

        $r125 = new java.lang.StringBuilder;

        specialinvoke $r125.<java.lang.StringBuilder: void <init>()>();

        $r126 = virtualinvoke $r125.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r127 = virtualinvoke $r126.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".dat");

        $r128 = virtualinvoke $r127.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r124.<org.apache.hadoop.fs.Path: void <init>(java.lang.String)>($r128);

        virtualinvoke r5.<org.apache.hadoop.fs.FileSystem: boolean delete(org.apache.hadoop.fs.Path,boolean)>($r124, 1);

        $r129 = new org.apache.hadoop.fs.Path;

        $r130 = new java.lang.StringBuilder;

        specialinvoke $r130.<java.lang.StringBuilder: void <init>()>();

        $r131 = virtualinvoke $r130.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r132 = virtualinvoke $r131.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_output");

        $r133 = virtualinvoke $r132.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r129.<org.apache.hadoop.fs.Path: void <init>(java.lang.String)>($r133);

        virtualinvoke r5.<org.apache.hadoop.fs.FileSystem: boolean delete(org.apache.hadoop.fs.Path,boolean)>($r129, 1);

        $r134 = new org.apache.hadoop.fs.Path;

        specialinvoke $r134.<org.apache.hadoop.fs.Path: void <init>(java.lang.String)>(r2);

        r6 = virtualinvoke r5.<org.apache.hadoop.fs.FileSystem: org.apache.hadoop.fs.FileStatus[] listStatus(org.apache.hadoop.fs.Path)>($r134);

        if r6 == null goto label17;

        $i9 = lengthof r6;

        if $i9 != 0 goto label18;

     label17:
        $r44 = <java.lang.System: java.io.PrintStream err>;

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r46 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to find any files in source directory: ");

        $r45 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r47 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r44.<java.io.PrintStream: void println(java.lang.String)>($r47);

        staticinvoke <java.lang.System: void exit(int)>(1);

     label18:
        $r135 = new java.util.ArrayList;

        specialinvoke $r135.<java.util.ArrayList: void <init>()>();

        i11 = lengthof r6;

        i13 = 0;

     label19:
        if i13 >= i11 goto label33;

        r9 = r6[i13];

        r8 = virtualinvoke r9.<org.apache.hadoop.fs.FileStatus: org.apache.hadoop.fs.Path getPath()>();

        if z0 == 0 goto label21;

        $r84 = virtualinvoke r8.<org.apache.hadoop.fs.Path: java.lang.String getName()>();

        r137 = virtualinvoke $r84.<java.lang.String: java.lang.String[] split(java.lang.String)>("-");

        if r137 == null goto label20;

        $i10 = lengthof r137;

        if $i10 != 0 goto label21;

     label20:
        $r85 = <java.lang.System: java.io.PrintStream out>;

        $r86 = new java.lang.StringBuilder;

        specialinvoke $r86.<java.lang.StringBuilder: void <init>()>();

        $r95 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Skipping source file (does not follow YFCC100M file name convention): ");

        $r96 = virtualinvoke r9.<org.apache.hadoop.fs.FileStatus: org.apache.hadoop.fs.Path getPath()>();

        $r97 = virtualinvoke $r95.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r96);

        $r98 = virtualinvoke $r97.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r85.<java.io.PrintStream: void println(java.lang.String)>($r98);

        goto label32;

     label21:
        $r61 = new org.apache.hadoop.io.compress.CompressionCodecFactory;

        specialinvoke $r61.<org.apache.hadoop.io.compress.CompressionCodecFactory: void <init>(org.apache.hadoop.conf.Configuration)>($r39);

        r10 = virtualinvoke $r61.<org.apache.hadoop.io.compress.CompressionCodecFactory: org.apache.hadoop.io.compress.CompressionCodec getCodec(org.apache.hadoop.fs.Path)>(r8);

        r11 = virtualinvoke r5.<org.apache.hadoop.fs.FileSystem: org.apache.hadoop.fs.FSDataInputStream open(org.apache.hadoop.fs.Path)>(r8);

        if r10 == null goto label22;

        $r90 = new java.io.BufferedReader;

        $r88 = new java.io.InputStreamReader;

        $r87 = interfaceinvoke r10.<org.apache.hadoop.io.compress.CompressionCodec: org.apache.hadoop.io.compress.CompressionInputStream createInputStream(java.io.InputStream)>(r11);

        specialinvoke $r88.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r87);

        specialinvoke $r90.<java.io.BufferedReader: void <init>(java.io.Reader)>($r88);

        r155 = $r90;

        goto label23;

     label22:
        $r62 = new java.io.BufferedReader;

        $r63 = new java.io.InputStreamReader;

        specialinvoke $r63.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r11);

        specialinvoke $r62.<java.io.BufferedReader: void <init>(java.io.Reader)>($r63);

        r155 = $r62;

     label23:
        r13 = virtualinvoke r155.<java.io.BufferedReader: java.lang.String readLine()>();

        if z0 == 0 goto label24;

        $r156 = virtualinvoke r13.<java.lang.String: java.lang.String[] split(java.lang.String)>("\t");

        goto label25;

     label24:
        $r156 = virtualinvoke r13.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\s+");

     label25:
        if z0 == 0 goto label27;

        $i8 = lengthof $r156;

        if $i8 == 23 goto label26;

        $r92 = <java.lang.System: java.io.PrintStream out>;

        $r78 = new java.lang.StringBuilder;

        specialinvoke $r78.<java.lang.StringBuilder: void <init>()>();

        $r91 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Skipping source file (does not follow YFCC100M source file format): ");

        $r94 = virtualinvoke r9.<org.apache.hadoop.fs.FileStatus: org.apache.hadoop.fs.Path getPath()>();

        $r93 = virtualinvoke $r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r94);

        $r89 = virtualinvoke $r93.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r92.<java.io.PrintStream: void println(java.lang.String)>($r89);

        goto label29;

     label26:
        $r77 = <java.lang.System: java.io.PrintStream out>;

        $r76 = new java.lang.StringBuilder;

        specialinvoke $r76.<java.lang.StringBuilder: void <init>()>();

        $r74 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Adding source file: ");

        $r75 = virtualinvoke r9.<org.apache.hadoop.fs.FileStatus: org.apache.hadoop.fs.Path getPath()>();

        $r79 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r75);

        $r80 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r77.<java.io.PrintStream: void println(java.lang.String)>($r80);

        virtualinvoke $r135.<java.util.ArrayList: boolean add(java.lang.Object)>(r8);

        goto label29;

     label27:
        $i6 = lengthof $r156;

        if $i6 == 1 goto label28;

        $r67 = <java.lang.System: java.io.PrintStream out>;

        $r68 = new java.lang.StringBuilder;

        specialinvoke $r68.<java.lang.StringBuilder: void <init>()>();

        $r66 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Skipping source file (contains multiple fields per line where only one is expected): ");

        $r65 = virtualinvoke r9.<org.apache.hadoop.fs.FileStatus: org.apache.hadoop.fs.Path getPath()>();

        $r81 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r65);

        $r82 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r67.<java.io.PrintStream: void println(java.lang.String)>($r82);

        $i7 = lengthof $r156;

        if $i7 != 23 goto label29;

        $r83 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r83.<java.io.PrintStream: void println(java.lang.String)>("  Did you mean to use \"--yfcc100m\"?");

        goto label29;

     label28:
        $r73 = <java.lang.System: java.io.PrintStream out>;

        $r69 = new java.lang.StringBuilder;

        specialinvoke $r69.<java.lang.StringBuilder: void <init>()>();

        $r72 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Adding source file: ");

        $r71 = virtualinvoke r9.<org.apache.hadoop.fs.FileStatus: org.apache.hadoop.fs.Path getPath()>();

        $r70 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r71);

        $r64 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r73.<java.io.PrintStream: void println(java.lang.String)>($r64);

        virtualinvoke $r135.<java.util.ArrayList: boolean add(java.lang.Object)>(r8);

     label29:
        virtualinvoke r11.<org.apache.hadoop.fs.FSDataInputStream: void close()>();

     label30:
        goto label32;

     label31:
        $r115 := @caughtexception;

        $r117 = <java.lang.System: java.io.PrintStream err>;

        $r116 = new java.lang.StringBuilder;

        specialinvoke $r116.<java.lang.StringBuilder: void <init>()>();

        $r118 = virtualinvoke $r116.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Skipping source file (unable to open and parse first line: ");

        $r119 = virtualinvoke r9.<org.apache.hadoop.fs.FileStatus: org.apache.hadoop.fs.Path getPath()>();

        $r120 = virtualinvoke $r118.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r119);

        $r121 = virtualinvoke $r120.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r117.<java.io.PrintStream: void println(java.lang.String)>($r121);

     label32:
        i13 = i13 + 1;

        goto label19;

     label33:
        $i2 = virtualinvoke $r135.<java.util.ArrayList: int size()>();

        if $i2 != 0 goto label34;

        $r54 = <java.lang.System: java.io.PrintStream err>;

        $r56 = new java.lang.StringBuilder;

        specialinvoke $r56.<java.lang.StringBuilder: void <init>()>();

        $r55 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to find any valid files in source directory: ");

        $r59 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r54.<java.io.PrintStream: void println(java.lang.String)>($r60);

        staticinvoke <java.lang.System: void exit(int)>(1);

     label34:
        $i4 = virtualinvoke r3.<java.lang.String: int lastIndexOf(int)>(47);

        $i3 = $i4 + 1;

        r139 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int,int)>(0, $i3);

        virtualinvoke $r39.<org.apache.hadoop.conf.Configuration: void setInt(java.lang.String,int)>("downloader.nodes", i0);

        $r52 = newarray (java.lang.String)[1];

        $r52[0] = r3;

        virtualinvoke $r39.<org.apache.hadoop.conf.Configuration: void setStrings(java.lang.String,java.lang.String[])>("downloader.outfile", $r52);

        $r53 = newarray (java.lang.String)[1];

        $r53[0] = r139;

        virtualinvoke $r39.<org.apache.hadoop.conf.Configuration: void setStrings(java.lang.String,java.lang.String[])>("downloader.outpath", $r53);

        virtualinvoke $r39.<org.apache.hadoop.conf.Configuration: void setBoolean(java.lang.String,boolean)>("downloader.yfcc100m", z0);

        r140 = staticinvoke <org.apache.hadoop.mapreduce.Job: org.apache.hadoop.mapreduce.Job getInstance(org.apache.hadoop.conf.Configuration,java.lang.String)>($r39, "hibDownload");

        virtualinvoke r140.<org.apache.hadoop.mapreduce.Job: void setJarByClass(java.lang.Class)>(class "org/hipi/tools/downloader/Downloader");

        virtualinvoke r140.<org.apache.hadoop.mapreduce.Job: void setMapperClass(java.lang.Class)>(class "org/hipi/tools/downloader/Downloader$DownloaderMapper");

        virtualinvoke r140.<org.apache.hadoop.mapreduce.Job: void setReducerClass(java.lang.Class)>(class "org/hipi/tools/downloader/DownloaderReducer");

        virtualinvoke r140.<org.apache.hadoop.mapreduce.Job: void setInputFormatClass(java.lang.Class)>(class "org/hipi/tools/downloader/DownloaderInputFormat");

        virtualinvoke r140.<org.apache.hadoop.mapreduce.Job: void setOutputKeyClass(java.lang.Class)>(class "org/apache/hadoop/io/BooleanWritable");

        virtualinvoke r140.<org.apache.hadoop.mapreduce.Job: void setOutputValueClass(java.lang.Class)>(class "org/apache/hadoop/io/Text");

        virtualinvoke r140.<org.apache.hadoop.mapreduce.Job: void setNumReduceTasks(int)>(1);

        $r49 = new org.apache.hadoop.fs.Path;

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        $r51 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r50 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_output");

        $r58 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r49.<org.apache.hadoop.fs.Path: void <init>(java.lang.String)>($r58);

        staticinvoke <org.apache.hadoop.mapreduce.lib.output.FileOutputFormat: void setOutputPath(org.apache.hadoop.mapreduce.Job,org.apache.hadoop.fs.Path)>(r140, $r49);

        $i5 = virtualinvoke $r135.<java.util.ArrayList: int size()>();

        r141 = newarray (org.apache.hadoop.fs.Path)[$i5];

        $r57 = virtualinvoke $r135.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>(r141);

        r142 = (org.apache.hadoop.fs.Path[]) $r57;

        staticinvoke <org.hipi.tools.downloader.DownloaderInputFormat: void setInputPaths(org.apache.hadoop.mapreduce.Job,org.apache.hadoop.fs.Path[])>(r140, r142);

        $z4 = virtualinvoke r140.<org.apache.hadoop.mapreduce.Job: boolean waitForCompletion(boolean)>(1);

        if $z4 == 0 goto label35;

        $b14 = 0;

        goto label36;

     label35:
        $b14 = 1;

     label36:
        return $b14;

        catch org.apache.commons.cli.ParseException from label01 to label02 with label03;
        catch java.lang.Exception from label21 to label30 with label31;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        java.lang.String[] r0;
        int i0;
        org.hipi.tools.downloader.Downloader $r1;

        r0 := @parameter0: java.lang.String[];

        $r1 = new org.hipi.tools.downloader.Downloader;

        specialinvoke $r1.<org.hipi.tools.downloader.Downloader: void <init>()>();

        i0 = staticinvoke <org.apache.hadoop.util.ToolRunner: int run(org.apache.hadoop.util.Tool,java.lang.String[])>($r1, r0);

        staticinvoke <java.lang.System: void exit(int)>(i0);

        return;
    }

    static long access$000()
    {
        long $l0;

        $l0 = <org.hipi.tools.downloader.Downloader: long uniqueMapperKey>;

        return $l0;
    }

    static long access$108()
    {
        long $l0, $l1;

        $l0 = <org.hipi.tools.downloader.Downloader: long numDownloads>;

        $l1 = $l0 + 1L;

        <org.hipi.tools.downloader.Downloader: long numDownloads> = $l1;

        return $l0;
    }

    static long access$100()
    {
        long $l0;

        $l0 = <org.hipi.tools.downloader.Downloader: long numDownloads>;

        return $l0;
    }

    static long access$008()
    {
        long $l0, $l1;

        $l0 = <org.hipi.tools.downloader.Downloader: long uniqueMapperKey>;

        $l1 = $l0 + 1L;

        <org.hipi.tools.downloader.Downloader: long uniqueMapperKey> = $l1;

        return $l0;
    }

    static void <clinit>()
    {
        org.apache.commons.cli.Options $r0, $r2, $r4, $r6;
        org.apache.commons.cli.BasicParser $r1;

        $r0 = new org.apache.commons.cli.Options;

        specialinvoke $r0.<org.apache.commons.cli.Options: void <init>()>();

        <org.hipi.tools.downloader.Downloader: org.apache.commons.cli.Options options> = $r0;

        $r1 = new org.apache.commons.cli.BasicParser;

        specialinvoke $r1.<org.apache.commons.cli.BasicParser: void <init>()>();

        <org.hipi.tools.downloader.Downloader: org.apache.commons.cli.Parser parser> = $r1;

        $r2 = <org.hipi.tools.downloader.Downloader: org.apache.commons.cli.Options options>;

        virtualinvoke $r2.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(java.lang.String,java.lang.String,boolean,java.lang.String)>("f", "force", 0, "force overwrite if output HIB already exists");

        $r4 = <org.hipi.tools.downloader.Downloader: org.apache.commons.cli.Options options>;

        virtualinvoke $r4.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(java.lang.String,java.lang.String,boolean,java.lang.String)>("y", "yfcc100m", 0, "assume input files are in Yahoo/Flickr CC 100M format");

        $r6 = <org.hipi.tools.downloader.Downloader: org.apache.commons.cli.Options options>;

        virtualinvoke $r6.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(java.lang.String,java.lang.String,boolean,java.lang.String)>("n", "num-nodes", 1, "number of download nodes (default=1) (ignored if --yfcc100m is specified)");

        <org.hipi.tools.downloader.Downloader: long uniqueMapperKey> = 0L;

        <org.hipi.tools.downloader.Downloader: long numDownloads> = 0L;

        return;
    }
}
