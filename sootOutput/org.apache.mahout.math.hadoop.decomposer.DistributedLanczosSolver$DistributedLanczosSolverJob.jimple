public class org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver$DistributedLanczosSolverJob extends org.apache.mahout.common.AbstractJob
{
    final org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver this$0;

    public void <init>(org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver)
    {
        org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver$DistributedLanczosSolverJob r0;
        org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver r1;

        r0 := @this: org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver$DistributedLanczosSolverJob;

        r1 := @parameter0: org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver;

        r0.<org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver$DistributedLanczosSolverJob: org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver this$0> = r1;

        specialinvoke r0.<org.apache.mahout.common.AbstractJob: void <init>()>();

        return;
    }

    public void setConf(org.apache.hadoop.conf.Configuration)
    {
        org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver$DistributedLanczosSolverJob r0;
        org.apache.hadoop.conf.Configuration r1;
        org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver $r2;

        r0 := @this: org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver$DistributedLanczosSolverJob;

        r1 := @parameter0: org.apache.hadoop.conf.Configuration;

        $r2 = r0.<org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver$DistributedLanczosSolverJob: org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver this$0>;

        virtualinvoke $r2.<org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver: void setConf(org.apache.hadoop.conf.Configuration)>(r1);

        return;
    }

    public org.apache.hadoop.conf.Configuration getConf()
    {
        org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver$DistributedLanczosSolverJob r0;
        org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver $r1;
        org.apache.hadoop.conf.Configuration $r2;

        r0 := @this: org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver$DistributedLanczosSolverJob;

        $r1 = r0.<org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver$DistributedLanczosSolverJob: org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver this$0>;

        $r2 = virtualinvoke $r1.<org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver: org.apache.hadoop.conf.Configuration getConf()>();

        return $r2;
    }

    public int run(java.lang.String[]) throws java.lang.Exception
    {
        org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver$DistributedLanczosSolverJob r0;
        java.lang.String[] r1;
        org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver $r2, $r5, $r7;
        java.util.Map $r3, $r6;
        int $i0;

        r0 := @this: org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver$DistributedLanczosSolverJob;

        r1 := @parameter0: java.lang.String[];

        virtualinvoke r0.<org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver$DistributedLanczosSolverJob: void addInputOption()>();

        virtualinvoke r0.<org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver$DistributedLanczosSolverJob: void addOutputOption()>();

        virtualinvoke r0.<org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver$DistributedLanczosSolverJob: void addOption(java.lang.String,java.lang.String,java.lang.String)>("numRows", "nr", "Number of rows of the input matrix");

        virtualinvoke r0.<org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver$DistributedLanczosSolverJob: void addOption(java.lang.String,java.lang.String,java.lang.String)>("numCols", "nc", "Number of columns of the input matrix");

        virtualinvoke r0.<org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver$DistributedLanczosSolverJob: void addOption(java.lang.String,java.lang.String,java.lang.String)>("rank", "r", "Desired decomposition rank (note: only roughly 1/4 to 1/3 of these will have the top portion of the spectrum)");

        virtualinvoke r0.<org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver$DistributedLanczosSolverJob: void addOption(java.lang.String,java.lang.String,java.lang.String)>("symmetric", "sym", "Is the input matrix square and symmetric?");

        virtualinvoke r0.<org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver$DistributedLanczosSolverJob: void addOption(java.lang.String,java.lang.String,java.lang.String)>("workingDir", "wd", "Working directory path to store Lanczos basis vectors (to be used on restarts, and to avoid too much RAM usage)");

        virtualinvoke r0.<org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver$DistributedLanczosSolverJob: void addOption(java.lang.String,java.lang.String,java.lang.String,boolean)>("cleansvd", "cl", "Run the EigenVerificationJob to clean the eigenvectors after SVD", 0);

        virtualinvoke r0.<org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver$DistributedLanczosSolverJob: void addOption(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("maxError", "err", "Maximum acceptable error", "0.05");

        virtualinvoke r0.<org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver$DistributedLanczosSolverJob: void addOption(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("minEigenvalue", "mev", "Minimum eigenvalue to keep the vector for", "0.0");

        virtualinvoke r0.<org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver$DistributedLanczosSolverJob: void addOption(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("inMemory", "mem", "Buffer eigen matrix into memory (if you have enough!)", "false");

        $r2 = r0.<org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver$DistributedLanczosSolverJob: org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver this$0>;

        $r3 = virtualinvoke r0.<org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver$DistributedLanczosSolverJob: java.util.Map parseArguments(java.lang.String[])>(r1);

        staticinvoke <org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver: java.util.Map access$002(org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver,java.util.Map)>($r2, $r3);

        $r5 = r0.<org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver$DistributedLanczosSolverJob: org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver this$0>;

        $r6 = staticinvoke <org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver: java.util.Map access$000(org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver)>($r5);

        if $r6 != null goto label1;

        return -1;

     label1:
        $r7 = r0.<org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver$DistributedLanczosSolverJob: org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver this$0>;

        $i0 = virtualinvoke $r7.<org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver: int run(java.lang.String[])>(r1);

        return $i0;
    }
}
