public final class org.apache.mahout.cf.taste.hadoop.item.VectorAndPrefsWritable extends java.lang.Object implements org.apache.hadoop.io.Writable
{
    private org.apache.mahout.math.Vector vector;
    private java.util.List userIDs;
    private java.util.List values;

    public void <init>()
    {
        org.apache.mahout.cf.taste.hadoop.item.VectorAndPrefsWritable r0;

        r0 := @this: org.apache.mahout.cf.taste.hadoop.item.VectorAndPrefsWritable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(org.apache.mahout.math.Vector, java.util.List, java.util.List)
    {
        org.apache.mahout.cf.taste.hadoop.item.VectorAndPrefsWritable r0;
        org.apache.mahout.math.Vector r1;
        java.util.List r2, r3;

        r0 := @this: org.apache.mahout.cf.taste.hadoop.item.VectorAndPrefsWritable;

        r1 := @parameter0: org.apache.mahout.math.Vector;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        virtualinvoke r0.<org.apache.mahout.cf.taste.hadoop.item.VectorAndPrefsWritable: void set(org.apache.mahout.math.Vector,java.util.List,java.util.List)>(r1, r2, r3);

        return;
    }

    public void set(org.apache.mahout.math.Vector, java.util.List, java.util.List)
    {
        org.apache.mahout.cf.taste.hadoop.item.VectorAndPrefsWritable r0;
        org.apache.mahout.math.Vector r1;
        java.util.List r2, r3;

        r0 := @this: org.apache.mahout.cf.taste.hadoop.item.VectorAndPrefsWritable;

        r1 := @parameter0: org.apache.mahout.math.Vector;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: java.util.List;

        r0.<org.apache.mahout.cf.taste.hadoop.item.VectorAndPrefsWritable: org.apache.mahout.math.Vector vector> = r1;

        r0.<org.apache.mahout.cf.taste.hadoop.item.VectorAndPrefsWritable: java.util.List userIDs> = r2;

        r0.<org.apache.mahout.cf.taste.hadoop.item.VectorAndPrefsWritable: java.util.List values> = r3;

        return;
    }

    public org.apache.mahout.math.Vector getVector()
    {
        org.apache.mahout.cf.taste.hadoop.item.VectorAndPrefsWritable r0;
        org.apache.mahout.math.Vector $r1;

        r0 := @this: org.apache.mahout.cf.taste.hadoop.item.VectorAndPrefsWritable;

        $r1 = r0.<org.apache.mahout.cf.taste.hadoop.item.VectorAndPrefsWritable: org.apache.mahout.math.Vector vector>;

        return $r1;
    }

    public java.util.List getUserIDs()
    {
        org.apache.mahout.cf.taste.hadoop.item.VectorAndPrefsWritable r0;
        java.util.List $r1;

        r0 := @this: org.apache.mahout.cf.taste.hadoop.item.VectorAndPrefsWritable;

        $r1 = r0.<org.apache.mahout.cf.taste.hadoop.item.VectorAndPrefsWritable: java.util.List userIDs>;

        return $r1;
    }

    public java.util.List getValues()
    {
        org.apache.mahout.cf.taste.hadoop.item.VectorAndPrefsWritable r0;
        java.util.List $r1;

        r0 := @this: org.apache.mahout.cf.taste.hadoop.item.VectorAndPrefsWritable;

        $r1 = r0.<org.apache.mahout.cf.taste.hadoop.item.VectorAndPrefsWritable: java.util.List values>;

        return $r1;
    }

    public void write(java.io.DataOutput) throws java.io.IOException
    {
        org.apache.mahout.cf.taste.hadoop.item.VectorAndPrefsWritable r0;
        java.io.DataOutput r1;
        org.apache.mahout.math.VectorWritable $r3;
        org.apache.mahout.math.Vector $r4;
        java.util.List $r5, $r6, $r7, $r10;
        int $i0, $i1, i3;
        java.lang.Object $r8, $r11;
        java.lang.Long $r9;
        long $l2;
        float $f0;
        java.lang.Float $r12;

        r0 := @this: org.apache.mahout.cf.taste.hadoop.item.VectorAndPrefsWritable;

        r1 := @parameter0: java.io.DataOutput;

        $r3 = new org.apache.mahout.math.VectorWritable;

        $r4 = r0.<org.apache.mahout.cf.taste.hadoop.item.VectorAndPrefsWritable: org.apache.mahout.math.Vector vector>;

        specialinvoke $r3.<org.apache.mahout.math.VectorWritable: void <init>(org.apache.mahout.math.Vector)>($r4);

        virtualinvoke $r3.<org.apache.mahout.math.VectorWritable: void setWritesLaxPrecision(boolean)>(1);

        virtualinvoke $r3.<org.apache.mahout.math.VectorWritable: void write(java.io.DataOutput)>(r1);

        $r5 = r0.<org.apache.mahout.cf.taste.hadoop.item.VectorAndPrefsWritable: java.util.List userIDs>;

        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        staticinvoke <org.apache.mahout.math.Varint: void writeUnsignedVarInt(int,java.io.DataOutput)>($i0, r1);

        i3 = 0;

     label1:
        $r6 = r0.<org.apache.mahout.cf.taste.hadoop.item.VectorAndPrefsWritable: java.util.List userIDs>;

        $i1 = interfaceinvoke $r6.<java.util.List: int size()>();

        if i3 >= $i1 goto label2;

        $r7 = r0.<org.apache.mahout.cf.taste.hadoop.item.VectorAndPrefsWritable: java.util.List userIDs>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(i3);

        $r9 = (java.lang.Long) $r8;

        $l2 = virtualinvoke $r9.<java.lang.Long: long longValue()>();

        staticinvoke <org.apache.mahout.math.Varint: void writeSignedVarLong(long,java.io.DataOutput)>($l2, r1);

        $r10 = r0.<org.apache.mahout.cf.taste.hadoop.item.VectorAndPrefsWritable: java.util.List values>;

        $r11 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>(i3);

        $r12 = (java.lang.Float) $r11;

        $f0 = virtualinvoke $r12.<java.lang.Float: float floatValue()>();

        interfaceinvoke r1.<java.io.DataOutput: void writeFloat(float)>($f0);

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    public void readFields(java.io.DataInput) throws java.io.IOException
    {
        org.apache.mahout.cf.taste.hadoop.item.VectorAndPrefsWritable r0;
        java.io.DataInput r1;
        int i0, i2;
        org.apache.mahout.math.VectorWritable $r3;
        org.apache.mahout.math.Vector $r4;
        java.util.ArrayList $r5, $r6;
        java.util.List $r7, $r9;
        long $l1;
        java.lang.Long $r8;
        float $f0;
        java.lang.Float $r10;

        r0 := @this: org.apache.mahout.cf.taste.hadoop.item.VectorAndPrefsWritable;

        r1 := @parameter0: java.io.DataInput;

        $r3 = new org.apache.mahout.math.VectorWritable;

        specialinvoke $r3.<org.apache.mahout.math.VectorWritable: void <init>()>();

        virtualinvoke $r3.<org.apache.mahout.math.VectorWritable: void readFields(java.io.DataInput)>(r1);

        $r4 = virtualinvoke $r3.<org.apache.mahout.math.VectorWritable: org.apache.mahout.math.Vector get()>();

        r0.<org.apache.mahout.cf.taste.hadoop.item.VectorAndPrefsWritable: org.apache.mahout.math.Vector vector> = $r4;

        i0 = staticinvoke <org.apache.mahout.math.Varint: int readUnsignedVarInt(java.io.DataInput)>(r1);

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>(i0);

        r0.<org.apache.mahout.cf.taste.hadoop.item.VectorAndPrefsWritable: java.util.List userIDs> = $r5;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>(int)>(i0);

        r0.<org.apache.mahout.cf.taste.hadoop.item.VectorAndPrefsWritable: java.util.List values> = $r6;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $r7 = r0.<org.apache.mahout.cf.taste.hadoop.item.VectorAndPrefsWritable: java.util.List userIDs>;

        $l1 = staticinvoke <org.apache.mahout.math.Varint: long readSignedVarLong(java.io.DataInput)>(r1);

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r8);

        $r9 = r0.<org.apache.mahout.cf.taste.hadoop.item.VectorAndPrefsWritable: java.util.List values>;

        $f0 = interfaceinvoke r1.<java.io.DataInput: float readFloat()>();

        $r10 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r10);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public java.lang.String toString()
    {
        org.apache.mahout.cf.taste.hadoop.item.VectorAndPrefsWritable r0;
        java.lang.StringBuilder $r1, $r3, $r4, $r6, $r7, $r9;
        org.apache.mahout.math.Vector $r2;
        java.util.List $r5, $r8;
        java.lang.String $r10;

        r0 := @this: org.apache.mahout.cf.taste.hadoop.item.VectorAndPrefsWritable;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.mahout.cf.taste.hadoop.item.VectorAndPrefsWritable: org.apache.mahout.math.Vector vector>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t");

        $r5 = r0.<org.apache.mahout.cf.taste.hadoop.item.VectorAndPrefsWritable: java.util.List userIDs>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(9);

        $r8 = r0.<org.apache.mahout.cf.taste.hadoop.item.VectorAndPrefsWritable: java.util.List values>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }
}
