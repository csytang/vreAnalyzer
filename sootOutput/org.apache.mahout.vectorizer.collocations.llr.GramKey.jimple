public final class org.apache.mahout.vectorizer.collocations.llr.GramKey extends org.apache.hadoop.io.BinaryComparable implements org.apache.hadoop.io.WritableComparable
{
    private int primaryLength;
    private int length;
    private byte[] bytes;

    public void <init>()
    {
        org.apache.mahout.vectorizer.collocations.llr.GramKey r0;

        r0 := @this: org.apache.mahout.vectorizer.collocations.llr.GramKey;

        specialinvoke r0.<org.apache.hadoop.io.BinaryComparable: void <init>()>();

        return;
    }

    public void <init>(org.apache.mahout.vectorizer.collocations.llr.Gram, byte[])
    {
        org.apache.mahout.vectorizer.collocations.llr.GramKey r0;
        org.apache.mahout.vectorizer.collocations.llr.Gram r1;
        byte[] r2;

        r0 := @this: org.apache.mahout.vectorizer.collocations.llr.GramKey;

        r1 := @parameter0: org.apache.mahout.vectorizer.collocations.llr.Gram;

        r2 := @parameter1: byte[];

        specialinvoke r0.<org.apache.hadoop.io.BinaryComparable: void <init>()>();

        virtualinvoke r0.<org.apache.mahout.vectorizer.collocations.llr.GramKey: void set(org.apache.mahout.vectorizer.collocations.llr.Gram,byte[])>(r1, r2);

        return;
    }

    public void set(org.apache.mahout.vectorizer.collocations.llr.Gram, byte[])
    {
        org.apache.mahout.vectorizer.collocations.llr.GramKey r0;
        org.apache.mahout.vectorizer.collocations.llr.Gram r1;
        byte[] r2, $r3, $r4, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;

        r0 := @this: org.apache.mahout.vectorizer.collocations.llr.GramKey;

        r1 := @parameter0: org.apache.mahout.vectorizer.collocations.llr.Gram;

        r2 := @parameter1: byte[];

        $i0 = virtualinvoke r1.<org.apache.mahout.vectorizer.collocations.llr.Gram: int getLength()>();

        r0.<org.apache.mahout.vectorizer.collocations.llr.GramKey: int primaryLength> = $i0;

        $i2 = r0.<org.apache.mahout.vectorizer.collocations.llr.GramKey: int primaryLength>;

        $i1 = lengthof r2;

        $i3 = $i2 + $i1;

        r0.<org.apache.mahout.vectorizer.collocations.llr.GramKey: int length> = $i3;

        $i4 = r0.<org.apache.mahout.vectorizer.collocations.llr.GramKey: int length>;

        specialinvoke r0.<org.apache.mahout.vectorizer.collocations.llr.GramKey: void setCapacity(int,boolean)>($i4, 0);

        $r3 = virtualinvoke r1.<org.apache.mahout.vectorizer.collocations.llr.Gram: byte[] getBytes()>();

        $r4 = r0.<org.apache.mahout.vectorizer.collocations.llr.GramKey: byte[] bytes>;

        $i5 = r0.<org.apache.mahout.vectorizer.collocations.llr.GramKey: int primaryLength>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r4, 0, $i5);

        $i6 = lengthof r2;

        if $i6 <= 0 goto label1;

        $r5 = r0.<org.apache.mahout.vectorizer.collocations.llr.GramKey: byte[] bytes>;

        $i8 = r0.<org.apache.mahout.vectorizer.collocations.llr.GramKey: int primaryLength>;

        $i7 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r5, $i8, $i7);

     label1:
        return;
    }

    public byte[] getBytes()
    {
        org.apache.mahout.vectorizer.collocations.llr.GramKey r0;
        byte[] $r1;

        r0 := @this: org.apache.mahout.vectorizer.collocations.llr.GramKey;

        $r1 = r0.<org.apache.mahout.vectorizer.collocations.llr.GramKey: byte[] bytes>;

        return $r1;
    }

    public int getLength()
    {
        org.apache.mahout.vectorizer.collocations.llr.GramKey r0;
        int $i0;

        r0 := @this: org.apache.mahout.vectorizer.collocations.llr.GramKey;

        $i0 = r0.<org.apache.mahout.vectorizer.collocations.llr.GramKey: int length>;

        return $i0;
    }

    public int getPrimaryLength()
    {
        org.apache.mahout.vectorizer.collocations.llr.GramKey r0;
        int $i0;

        r0 := @this: org.apache.mahout.vectorizer.collocations.llr.GramKey;

        $i0 = r0.<org.apache.mahout.vectorizer.collocations.llr.GramKey: int primaryLength>;

        return $i0;
    }

    public void readFields(java.io.DataInput) throws java.io.IOException
    {
        org.apache.mahout.vectorizer.collocations.llr.GramKey r0;
        java.io.DataInput r1;
        int i0, i1;
        byte[] $r2;

        r0 := @this: org.apache.mahout.vectorizer.collocations.llr.GramKey;

        r1 := @parameter0: java.io.DataInput;

        i0 = staticinvoke <org.apache.mahout.math.Varint: int readUnsignedVarInt(java.io.DataInput)>(r1);

        i1 = staticinvoke <org.apache.mahout.math.Varint: int readUnsignedVarInt(java.io.DataInput)>(r1);

        specialinvoke r0.<org.apache.mahout.vectorizer.collocations.llr.GramKey: void setCapacity(int,boolean)>(i0, 0);

        $r2 = r0.<org.apache.mahout.vectorizer.collocations.llr.GramKey: byte[] bytes>;

        interfaceinvoke r1.<java.io.DataInput: void readFully(byte[],int,int)>($r2, 0, i0);

        r0.<org.apache.mahout.vectorizer.collocations.llr.GramKey: int length> = i0;

        r0.<org.apache.mahout.vectorizer.collocations.llr.GramKey: int primaryLength> = i1;

        return;
    }

    public void write(java.io.DataOutput) throws java.io.IOException
    {
        org.apache.mahout.vectorizer.collocations.llr.GramKey r0;
        java.io.DataOutput r1;
        int $i0, $i1, $i2;
        byte[] $r2;

        r0 := @this: org.apache.mahout.vectorizer.collocations.llr.GramKey;

        r1 := @parameter0: java.io.DataOutput;

        $i0 = r0.<org.apache.mahout.vectorizer.collocations.llr.GramKey: int length>;

        staticinvoke <org.apache.mahout.math.Varint: void writeUnsignedVarInt(int,java.io.DataOutput)>($i0, r1);

        $i1 = r0.<org.apache.mahout.vectorizer.collocations.llr.GramKey: int primaryLength>;

        staticinvoke <org.apache.mahout.math.Varint: void writeUnsignedVarInt(int,java.io.DataOutput)>($i1, r1);

        $r2 = r0.<org.apache.mahout.vectorizer.collocations.llr.GramKey: byte[] bytes>;

        $i2 = r0.<org.apache.mahout.vectorizer.collocations.llr.GramKey: int length>;

        interfaceinvoke r1.<java.io.DataOutput: void write(byte[],int,int)>($r2, 0, $i2);

        return;
    }

    private void setCapacity(int, boolean)
    {
        org.apache.mahout.vectorizer.collocations.llr.GramKey r0;
        int i0, $i1, $i2;
        boolean z0;
        byte[] r1, $r2, $r3, $r4, $r5;

        r0 := @this: org.apache.mahout.vectorizer.collocations.llr.GramKey;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r2 = r0.<org.apache.mahout.vectorizer.collocations.llr.GramKey: byte[] bytes>;

        if $r2 == null goto label1;

        $r5 = r0.<org.apache.mahout.vectorizer.collocations.llr.GramKey: byte[] bytes>;

        $i2 = lengthof $r5;

        if $i2 >= i0 goto label3;

     label1:
        r1 = newarray (byte)[i0];

        $r3 = r0.<org.apache.mahout.vectorizer.collocations.llr.GramKey: byte[] bytes>;

        if $r3 == null goto label2;

        if z0 == 0 goto label2;

        $r4 = r0.<org.apache.mahout.vectorizer.collocations.llr.GramKey: byte[] bytes>;

        $i1 = r0.<org.apache.mahout.vectorizer.collocations.llr.GramKey: int length>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r1, 0, $i1);

     label2:
        r0.<org.apache.mahout.vectorizer.collocations.llr.GramKey: byte[] bytes> = r1;

     label3:
        return;
    }

    public org.apache.mahout.vectorizer.collocations.llr.Gram$Type getType()
    {
        org.apache.mahout.vectorizer.collocations.llr.GramKey r0;
        byte[] $r1;
        org.apache.mahout.vectorizer.collocations.llr.Gram$Type $r2;

        r0 := @this: org.apache.mahout.vectorizer.collocations.llr.GramKey;

        $r1 = r0.<org.apache.mahout.vectorizer.collocations.llr.GramKey: byte[] bytes>;

        $r2 = staticinvoke <org.apache.mahout.vectorizer.collocations.llr.Gram: org.apache.mahout.vectorizer.collocations.llr.Gram$Type decodeType(byte[],int)>($r1, 0);

        return $r2;
    }

    public java.lang.String getPrimaryString()
    {
        org.apache.mahout.vectorizer.collocations.llr.GramKey r0;
        int $i0, $i1;
        byte[] $r2;
        java.lang.String $r3;
        java.nio.charset.CharacterCodingException $r4;
        java.lang.IllegalStateException $r5;

        r0 := @this: org.apache.mahout.vectorizer.collocations.llr.GramKey;

     label1:
        $r2 = r0.<org.apache.mahout.vectorizer.collocations.llr.GramKey: byte[] bytes>;

        $i0 = r0.<org.apache.mahout.vectorizer.collocations.llr.GramKey: int primaryLength>;

        $i1 = $i0 - 1;

        $r3 = staticinvoke <org.apache.hadoop.io.Text: java.lang.String decode(byte[],int,int)>($r2, 1, $i1);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch java.nio.charset.CharacterCodingException from label1 to label2 with label3;
    }

    public java.lang.String toString()
    {
        org.apache.mahout.vectorizer.collocations.llr.GramKey r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r7, $r8;
        java.lang.String $r3, $r9;
        org.apache.mahout.vectorizer.collocations.llr.Gram$Type $r6;

        r0 := @this: org.apache.mahout.vectorizer.collocations.llr.GramKey;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39);

        $r3 = virtualinvoke r0.<org.apache.mahout.vectorizer.collocations.llr.GramKey: java.lang.String getPrimaryString()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'[");

        $r6 = virtualinvoke r0.<org.apache.mahout.vectorizer.collocations.llr.GramKey: org.apache.mahout.vectorizer.collocations.llr.Gram$Type getType()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }
}
