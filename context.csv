ContextID,SootMethod,SootClass
1,"<org.hipi.image.ByteImage: boolean equals(java.lang.Object)>","org.hipi.image.ByteImage"
2,"<org.hipi.image.ByteImage: boolean equalsWithTolerance(org.hipi.image.RasterImage,float)>","org.hipi.image.ByteImage"
3,"<org.hipi.image.ByteImage: byte[] getData()>","org.hipi.image.ByteImage"
4,"<org.hipi.image.ByteImage: java.lang.String hex()>","org.hipi.image.ByteImage"
5,"<org.hipi.image.ByteImage: org.hipi.image.HipiImage$HipiImageType getType()>","org.hipi.image.ByteImage"
6,"<org.hipi.image.ByteImage: void <init>()>","org.hipi.image.ByteImage"
7,"<org.hipi.image.FloatImage: boolean equals(java.lang.Object)>","org.hipi.image.FloatImage"
8,"<org.hipi.image.FloatImage: boolean equalsWithTolerance(org.hipi.image.RasterImage,float)>","org.hipi.image.FloatImage"
9,"<org.hipi.image.FloatImage: float[] getData()>","org.hipi.image.FloatImage"
10,"<org.hipi.image.FloatImage: java.lang.String hex()>","org.hipi.image.FloatImage"
11,"<org.hipi.image.FloatImage: org.hipi.image.HipiImage$HipiImageType getType()>","org.hipi.image.FloatImage"
12,"<org.hipi.image.FloatImage: void <init>()>","org.hipi.image.FloatImage"
13,"<org.hipi.image.FloatImage: void <init>(int,int,int)>","org.hipi.image.FloatImage"
14,"<org.hipi.image.FloatImage: void <init>(int,int,int,float[])>","org.hipi.image.FloatImage"
15,"<org.hipi.image.FloatImage: void <init>(int,int,int,org.hipi.image.HipiImageHeader$HipiImageFormat,org.hipi.image.HipiImageHeader$HipiColorSpace)>","org.hipi.image.FloatImage"
16,"<org.hipi.image.FloatImage: void add(float)>","org.hipi.image.FloatImage"
17,"<org.hipi.image.FloatImage: void add(org.hipi.image.FloatImage)>","org.hipi.image.FloatImage"
18,"<org.hipi.image.FloatImage: void checkCompatibleInputImage(org.hipi.image.FloatImage)>","org.hipi.image.FloatImage"
19,"<org.hipi.image.FloatImage: void multiply(org.hipi.image.FloatImage)>","org.hipi.image.FloatImage"
20,"<org.hipi.image.FloatImage: void scale(float)>","org.hipi.image.FloatImage"
21,"<org.hipi.image.HipiImage$HipiImageType: int toInteger()>","org.hipi.image.HipiImage$HipiImageType"
22,"<org.hipi.image.HipiImage$HipiImageType: org.hipi.image.HipiImage$HipiImageType fromInteger(int)>","org.hipi.image.HipiImage$HipiImageType"
23,"<org.hipi.image.HipiImage$HipiImageType: org.hipi.image.HipiImage$HipiImageType getDefault()>","org.hipi.image.HipiImage$HipiImageType"
24,"<org.hipi.image.HipiImage$HipiImageType: org.hipi.image.HipiImage$HipiImageType valueOf(java.lang.String)>","org.hipi.image.HipiImage$HipiImageType"
25,"<org.hipi.image.HipiImage$HipiImageType: org.hipi.image.HipiImage$HipiImageType[] values()>","org.hipi.image.HipiImage$HipiImageType"
26,"<org.hipi.image.HipiImage$HipiImageType: void <clinit>()>","org.hipi.image.HipiImage$HipiImageType"
27,"<org.hipi.image.HipiImage$HipiImageType: void <init>(java.lang.String,int,int)>","org.hipi.image.HipiImage$HipiImageType"
28,"<org.hipi.image.HipiImage: int getHeight()>","org.hipi.image.HipiImage"
29,"<org.hipi.image.HipiImage: int getNumBands()>","org.hipi.image.HipiImage"
30,"<org.hipi.image.HipiImage: int getWidth()>","org.hipi.image.HipiImage"
31,"<org.hipi.image.HipiImage: java.lang.String getExifData(java.lang.String)>","org.hipi.image.HipiImage"
32,"<org.hipi.image.HipiImage: java.lang.String getMetaData(java.lang.String)>","org.hipi.image.HipiImage"
33,"<org.hipi.image.HipiImage: java.util.HashMap getAllExifData()>","org.hipi.image.HipiImage"
34,"<org.hipi.image.HipiImage: java.util.HashMap getAllMetaData()>","org.hipi.image.HipiImage"
35,"<org.hipi.image.HipiImage: org.hipi.image.HipiImage$HipiImageType getType()>","org.hipi.image.HipiImage"
36,"<org.hipi.image.HipiImage: org.hipi.image.HipiImageHeader$HipiColorSpace getColorSpace()>","org.hipi.image.HipiImage"
37,"<org.hipi.image.HipiImage: org.hipi.image.HipiImageHeader$HipiImageFormat getStorageFormat()>","org.hipi.image.HipiImage"
38,"<org.hipi.image.HipiImage: void <init>()>","org.hipi.image.HipiImage"
39,"<org.hipi.image.HipiImage: void setHeader(org.hipi.image.HipiImageHeader)>","org.hipi.image.HipiImage"
40,"<org.hipi.image.HipiImageFactory$1: void <clinit>()>","org.hipi.image.HipiImageFactory$1"
41,"<org.hipi.image.HipiImageFactory: org.hipi.image.HipiImage createImage(org.hipi.image.HipiImageHeader)>","org.hipi.image.HipiImageFactory"
42,"<org.hipi.image.HipiImageFactory: org.hipi.image.HipiImage$HipiImageType getType()>","org.hipi.image.HipiImageFactory"
43,"<org.hipi.image.HipiImageFactory: org.hipi.image.HipiImageFactory getByteImageFactory()>","org.hipi.image.HipiImageFactory"
44,"<org.hipi.image.HipiImageFactory: org.hipi.image.HipiImageFactory getFloatImageFactory()>","org.hipi.image.HipiImageFactory"
45,"<org.hipi.image.HipiImageFactory: void <clinit>()>","org.hipi.image.HipiImageFactory"
46,"<org.hipi.image.HipiImageFactory: void <init>(java.lang.Class)>","org.hipi.image.HipiImageFactory"
47,"<org.hipi.image.HipiImageFactory: void <init>(org.hipi.image.HipiImage$HipiImageType)>","org.hipi.image.HipiImageFactory"
48,"<org.hipi.image.HipiImageFactory: void findImageClass(java.lang.Class)>","org.hipi.image.HipiImageFactory"
49,"<org.hipi.image.HipiImageHeader$HipiColorSpace: int toInteger()>","org.hipi.image.HipiImageHeader$HipiColorSpace"
50,"<org.hipi.image.HipiImageHeader$HipiColorSpace: org.hipi.image.HipiImageHeader$HipiColorSpace fromInteger(int)>","org.hipi.image.HipiImageHeader$HipiColorSpace"
51,"<org.hipi.image.HipiImageHeader$HipiColorSpace: org.hipi.image.HipiImageHeader$HipiColorSpace getDefault()>","org.hipi.image.HipiImageHeader$HipiColorSpace"
52,"<org.hipi.image.HipiImageHeader$HipiColorSpace: org.hipi.image.HipiImageHeader$HipiColorSpace valueOf(java.lang.String)>","org.hipi.image.HipiImageHeader$HipiColorSpace"
53,"<org.hipi.image.HipiImageHeader$HipiColorSpace: org.hipi.image.HipiImageHeader$HipiColorSpace[] values()>","org.hipi.image.HipiImageHeader$HipiColorSpace"
54,"<org.hipi.image.HipiImageHeader$HipiColorSpace: void <clinit>()>","org.hipi.image.HipiImageHeader$HipiColorSpace"
55,"<org.hipi.image.HipiImageHeader$HipiColorSpace: void <init>(java.lang.String,int,int)>","org.hipi.image.HipiImageHeader$HipiColorSpace"
56,"<org.hipi.image.HipiImageHeader$HipiImageFormat: int toInteger()>","org.hipi.image.HipiImageHeader$HipiImageFormat"
57,"<org.hipi.image.HipiImageHeader$HipiImageFormat: org.hipi.image.HipiImageHeader$HipiImageFormat fromInteger(int)>","org.hipi.image.HipiImageHeader$HipiImageFormat"
58,"<org.hipi.image.HipiImageHeader$HipiImageFormat: org.hipi.image.HipiImageHeader$HipiImageFormat getDefault()>","org.hipi.image.HipiImageHeader$HipiImageFormat"
59,"<org.hipi.image.HipiImageHeader$HipiImageFormat: org.hipi.image.HipiImageHeader$HipiImageFormat valueOf(java.lang.String)>","org.hipi.image.HipiImageHeader$HipiImageFormat"
60,"<org.hipi.image.HipiImageHeader$HipiImageFormat: org.hipi.image.HipiImageHeader$HipiImageFormat[] values()>","org.hipi.image.HipiImageHeader$HipiImageFormat"
61,"<org.hipi.image.HipiImageHeader$HipiImageFormat: void <clinit>()>","org.hipi.image.HipiImageHeader$HipiImageFormat"
62,"<org.hipi.image.HipiImageHeader$HipiImageFormat: void <init>(java.lang.String,int,int)>","org.hipi.image.HipiImageHeader$HipiImageFormat"
63,"<org.hipi.image.HipiImageHeader: byte[] getMetaDataAsBytes()>","org.hipi.image.HipiImageHeader"
64,"<org.hipi.image.HipiImageHeader: int compareTo(java.lang.Object)>","org.hipi.image.HipiImageHeader"
65,"<org.hipi.image.HipiImageHeader: int compareTo(org.hipi.image.HipiImageHeader)>","org.hipi.image.HipiImageHeader"
66,"<org.hipi.image.HipiImageHeader: int getHeight()>","org.hipi.image.HipiImageHeader"
67,"<org.hipi.image.HipiImageHeader: int getNumBands()>","org.hipi.image.HipiImageHeader"
68,"<org.hipi.image.HipiImageHeader: int getWidth()>","org.hipi.image.HipiImageHeader"
69,"<org.hipi.image.HipiImageHeader: int hashCode()>","org.hipi.image.HipiImageHeader"
70,"<org.hipi.image.HipiImageHeader: java.lang.String getExifData(java.lang.String)>","org.hipi.image.HipiImageHeader"
71,"<org.hipi.image.HipiImageHeader: java.lang.String getMetaData(java.lang.String)>","org.hipi.image.HipiImageHeader"
72,"<org.hipi.image.HipiImageHeader: java.lang.String toString()>","org.hipi.image.HipiImageHeader"
73,"<org.hipi.image.HipiImageHeader: java.util.HashMap getAllExifData()>","org.hipi.image.HipiImageHeader"
74,"<org.hipi.image.HipiImageHeader: java.util.HashMap getAllMetaData()>","org.hipi.image.HipiImageHeader"
75,"<org.hipi.image.HipiImageHeader: org.hipi.image.HipiImageHeader$HipiColorSpace getColorSpace()>","org.hipi.image.HipiImageHeader"
76,"<org.hipi.image.HipiImageHeader: org.hipi.image.HipiImageHeader$HipiImageFormat getStorageFormat()>","org.hipi.image.HipiImageHeader"
77,"<org.hipi.image.HipiImageHeader: void <init>(java.io.DataInput)>","org.hipi.image.HipiImageHeader"
78,"<org.hipi.image.HipiImageHeader: void <init>(org.hipi.image.HipiImageHeader$HipiImageFormat,org.hipi.image.HipiImageHeader$HipiColorSpace,int,int,int,byte[],java.util.Map)>","org.hipi.image.HipiImageHeader"
79,"<org.hipi.image.HipiImageHeader: void addMetaData(java.lang.String,java.lang.String)>","org.hipi.image.HipiImageHeader"
80,"<org.hipi.image.HipiImageHeader: void readFields(java.io.DataInput)>","org.hipi.image.HipiImageHeader"
81,"<org.hipi.image.HipiImageHeader: void set(org.hipi.image.HipiImageHeader)>","org.hipi.image.HipiImageHeader"
82,"<org.hipi.image.HipiImageHeader: void setExifData(java.util.HashMap)>","org.hipi.image.HipiImageHeader"
83,"<org.hipi.image.HipiImageHeader: void setMetaData(java.util.HashMap)>","org.hipi.image.HipiImageHeader"
84,"<org.hipi.image.HipiImageHeader: void setMetaDataFromBytes(byte[])>","org.hipi.image.HipiImageHeader"
85,"<org.hipi.image.HipiImageHeader: void write(java.io.DataOutput)>","org.hipi.image.HipiImageHeader"
86,"<org.hipi.image.PixelArray: double getElemDouble(int)>","org.hipi.image.PixelArray"
87,"<org.hipi.image.PixelArray: float getElemFloat(int)>","org.hipi.image.PixelArray"
88,"<org.hipi.image.PixelArray: int getDataType()>","org.hipi.image.PixelArray"
89,"<org.hipi.image.PixelArray: int getDataTypeSize(int)>","org.hipi.image.PixelArray"
90,"<org.hipi.image.PixelArray: int getSize()>","org.hipi.image.PixelArray"
91,"<org.hipi.image.PixelArray: void <clinit>()>","org.hipi.image.PixelArray"
92,"<org.hipi.image.PixelArray: void <init>()>","org.hipi.image.PixelArray"
93,"<org.hipi.image.PixelArray: void <init>(int,int)>","org.hipi.image.PixelArray"
94,"<org.hipi.image.PixelArray: void setElemDouble(int,double)>","org.hipi.image.PixelArray"
95,"<org.hipi.image.PixelArray: void setElemFloat(int,float)>","org.hipi.image.PixelArray"
96,"<org.hipi.image.PixelArrayByte: byte[] getByteArray()>","org.hipi.image.PixelArrayByte"
97,"<org.hipi.image.PixelArrayByte: byte[] getData()>","org.hipi.image.PixelArrayByte"
98,"<org.hipi.image.PixelArrayByte: double getElemDouble(int)>","org.hipi.image.PixelArrayByte"
99,"<org.hipi.image.PixelArrayByte: float getElemFloat(int)>","org.hipi.image.PixelArrayByte"
100,"<org.hipi.image.PixelArrayByte: int getElem(int)>","org.hipi.image.PixelArrayByte"
101,"<org.hipi.image.PixelArrayByte: int getElemNonLinSRGB(int)>","org.hipi.image.PixelArrayByte"
102,"<org.hipi.image.PixelArrayByte: void <init>()>","org.hipi.image.PixelArrayByte"
103,"<org.hipi.image.PixelArrayByte: void <init>(int)>","org.hipi.image.PixelArrayByte"
104,"<org.hipi.image.PixelArrayByte: void setElem(int,int)>","org.hipi.image.PixelArrayByte"
105,"<org.hipi.image.PixelArrayByte: void setElemDouble(int,double)>","org.hipi.image.PixelArrayByte"
106,"<org.hipi.image.PixelArrayByte: void setElemFloat(int,float)>","org.hipi.image.PixelArrayByte"
107,"<org.hipi.image.PixelArrayByte: void setElemNonLinSRGB(int,int)>","org.hipi.image.PixelArrayByte"
108,"<org.hipi.image.PixelArrayByte: void setFromByteArray(byte[])>","org.hipi.image.PixelArrayByte"
109,"<org.hipi.image.PixelArrayByte: void setSize(int)>","org.hipi.image.PixelArrayByte"
110,"<org.hipi.image.PixelArrayFloat: byte[] getByteArray()>","org.hipi.image.PixelArrayFloat"
111,"<org.hipi.image.PixelArrayFloat: double getElemDouble(int)>","org.hipi.image.PixelArrayFloat"
112,"<org.hipi.image.PixelArrayFloat: float getElemFloat(int)>","org.hipi.image.PixelArrayFloat"
113,"<org.hipi.image.PixelArrayFloat: float[] getData()>","org.hipi.image.PixelArrayFloat"
114,"<org.hipi.image.PixelArrayFloat: int getElem(int)>","org.hipi.image.PixelArrayFloat"
115,"<org.hipi.image.PixelArrayFloat: int getElemNonLinSRGB(int)>","org.hipi.image.PixelArrayFloat"
116,"<org.hipi.image.PixelArrayFloat: void <clinit>()>","org.hipi.image.PixelArrayFloat"
117,"<org.hipi.image.PixelArrayFloat: void <init>()>","org.hipi.image.PixelArrayFloat"
118,"<org.hipi.image.PixelArrayFloat: void <init>(int)>","org.hipi.image.PixelArrayFloat"
119,"<org.hipi.image.PixelArrayFloat: void setElem(int,int)>","org.hipi.image.PixelArrayFloat"
120,"<org.hipi.image.PixelArrayFloat: void setElemDouble(int,double)>","org.hipi.image.PixelArrayFloat"
121,"<org.hipi.image.PixelArrayFloat: void setElemFloat(int,float)>","org.hipi.image.PixelArrayFloat"
122,"<org.hipi.image.PixelArrayFloat: void setElemNonLinSRGB(int,int)>","org.hipi.image.PixelArrayFloat"
123,"<org.hipi.image.PixelArrayFloat: void setFromByteArray(byte[])>","org.hipi.image.PixelArrayFloat"
124,"<org.hipi.image.PixelArrayFloat: void setSize(int)>","org.hipi.image.PixelArrayFloat"
125,"<org.hipi.image.RasterImage$1: void <clinit>()>","org.hipi.image.RasterImage$1"
126,"<org.hipi.image.RasterImage: java.lang.String toString()>","org.hipi.image.RasterImage"
127,"<org.hipi.image.RasterImage: org.hipi.image.PixelArray getPixelArray()>","org.hipi.image.RasterImage"
128,"<org.hipi.image.RasterImage: void <clinit>()>","org.hipi.image.RasterImage"
129,"<org.hipi.image.RasterImage: void <init>(org.hipi.image.PixelArray)>","org.hipi.image.RasterImage"
130,"<org.hipi.image.RasterImage: void convertToColorSpace(org.hipi.image.HipiImageHeader$HipiColorSpace,org.hipi.image.RasterImage)>","org.hipi.image.RasterImage"
131,"<org.hipi.image.RasterImage: void crop(int,int,int,int,org.hipi.image.RasterImage)>","org.hipi.image.RasterImage"
132,"<org.hipi.image.RasterImage: void readFields(java.io.DataInput)>","org.hipi.image.RasterImage"
133,"<org.hipi.image.RasterImage: void set(org.hipi.image.RasterImage)>","org.hipi.image.RasterImage"
134,"<org.hipi.image.RasterImage: void setHeader(org.hipi.image.HipiImageHeader)>","org.hipi.image.RasterImage"
135,"<org.hipi.image.RasterImage: void write(java.io.DataOutput)>","org.hipi.image.RasterImage"
136,"<org.hipi.image.RawImage: byte[] getRawBytes()>","org.hipi.image.RawImage"
137,"<org.hipi.image.RawImage: java.lang.String hex()>","org.hipi.image.RawImage"
138,"<org.hipi.image.RawImage: java.lang.String toString()>","org.hipi.image.RawImage"
139,"<org.hipi.image.RawImage: org.hipi.image.HipiImage$HipiImageType getType()>","org.hipi.image.RawImage"
140,"<org.hipi.image.RawImage: void <init>()>","org.hipi.image.RawImage"
141,"<org.hipi.image.RawImage: void readFields(java.io.DataInput)>","org.hipi.image.RawImage"
142,"<org.hipi.image.RawImage: void set(org.hipi.image.RawImage)>","org.hipi.image.RawImage"
143,"<org.hipi.image.RawImage: void setRawBytes(byte[])>","org.hipi.image.RawImage"
144,"<org.hipi.image.RawImage: void write(java.io.DataOutput)>","org.hipi.image.RawImage"
145,"<org.hipi.image.io.CodecManager$1: void <clinit>()>","org.hipi.image.io.CodecManager$1"
146,"<org.hipi.image.io.CodecManager: org.hipi.image.io.ImageDecoder getDecoder(org.hipi.image.HipiImageHeader$HipiImageFormat)>","org.hipi.image.io.CodecManager"
147,"<org.hipi.image.io.CodecManager: org.hipi.image.io.ImageEncoder getEncoder(org.hipi.image.HipiImageHeader$HipiImageFormat)>","org.hipi.image.io.CodecManager"
148,"<org.hipi.image.io.CodecManager: void <init>()>","org.hipi.image.io.CodecManager"
149,"<org.hipi.image.io.ExifDataReader$UnclosableBufferedInputStream: void <init>(org.hipi.image.io.ExifDataReader,java.io.InputStream)>","org.hipi.image.io.ExifDataReader$UnclosableBufferedInputStream"
150,"<org.hipi.image.io.ExifDataReader$UnclosableBufferedInputStream: void close()>","org.hipi.image.io.ExifDataReader$UnclosableBufferedInputStream"
151,"<org.hipi.image.io.ExifDataReader: com.drew.metadata.Metadata extract()>","org.hipi.image.io.ExifDataReader"
152,"<org.hipi.image.io.ExifDataReader: java.util.HashMap extractAndFlatten(java.io.InputStream)>","org.hipi.image.io.ExifDataReader"
153,"<org.hipi.image.io.ExifDataReader: void <init>(java.io.InputStream)>","org.hipi.image.io.ExifDataReader"
154,"<org.hipi.image.io.ImageCodec: org.hipi.image.HipiImage decodeHeaderAndImage(java.io.InputStream,org.hipi.image.HipiImageFactory,boolean)>","org.hipi.image.io.ImageCodec"
155,"<org.hipi.image.io.ImageCodec: org.hipi.image.HipiImage decodeImage(java.io.InputStream,org.hipi.image.HipiImageHeader,org.hipi.image.HipiImageFactory,boolean)>","org.hipi.image.io.ImageCodec"
156,"<org.hipi.image.io.ImageCodec: org.hipi.image.HipiImageHeader decodeHeader(java.io.InputStream)>","org.hipi.image.io.ImageCodec"
157,"<org.hipi.image.io.ImageCodec: void <init>()>","org.hipi.image.io.ImageCodec"
158,"<org.hipi.image.io.ImageCodec: void encodeRasterImage(org.hipi.image.RasterImage,javax.imageio.ImageWriter,javax.imageio.ImageWriteParam)>","org.hipi.image.io.ImageCodec"
159,"<org.hipi.image.io.JpegCodec: org.hipi.image.HipiImageHeader decodeHeader(java.io.InputStream,boolean)>","org.hipi.image.io.JpegCodec"
160,"<org.hipi.image.io.JpegCodec: org.hipi.image.io.JpegCodec getInstance()>","org.hipi.image.io.JpegCodec"
161,"<org.hipi.image.io.JpegCodec: void <clinit>()>","org.hipi.image.io.JpegCodec"
162,"<org.hipi.image.io.JpegCodec: void <init>()>","org.hipi.image.io.JpegCodec"
163,"<org.hipi.image.io.JpegCodec: void encodeImage(org.hipi.image.HipiImage,java.io.OutputStream)>","org.hipi.image.io.JpegCodec"
164,"<org.hipi.image.io.PngCodec$PNGChunk: byte[] getData()>","org.hipi.image.io.PngCodec$PNGChunk"
165,"<org.hipi.image.io.PngCodec$PNGChunk: java.lang.String getDataString()>","org.hipi.image.io.PngCodec$PNGChunk"
166,"<org.hipi.image.io.PngCodec$PNGChunk: java.lang.String getTypeString()>","org.hipi.image.io.PngCodec$PNGChunk"
167,"<org.hipi.image.io.PngCodec$PNGChunk: long getUnsignedInt(int)>","org.hipi.image.io.PngCodec$PNGChunk"
168,"<org.hipi.image.io.PngCodec$PNGChunk: short getUnsignedByte(int)>","org.hipi.image.io.PngCodec$PNGChunk"
169,"<org.hipi.image.io.PngCodec$PNGChunk: void <init>(org.hipi.image.io.PngCodec,byte[],byte[])>","org.hipi.image.io.PngCodec$PNGChunk"
170,"<org.hipi.image.io.PngCodec$PNGData: byte[] getImageData()>","org.hipi.image.io.PngCodec$PNGData"
171,"<org.hipi.image.io.PngCodec$PNGData: long getHeight()>","org.hipi.image.io.PngCodec$PNGData"
172,"<org.hipi.image.io.PngCodec$PNGData: long getWidth()>","org.hipi.image.io.PngCodec$PNGData"
173,"<org.hipi.image.io.PngCodec$PNGData: org.hipi.image.io.PngCodec$PNGChunk getChunk(java.lang.String)>","org.hipi.image.io.PngCodec$PNGData"
174,"<org.hipi.image.io.PngCodec$PNGData: short getBitsPerPixel()>","org.hipi.image.io.PngCodec$PNGData"
175,"<org.hipi.image.io.PngCodec$PNGData: short getColorType()>","org.hipi.image.io.PngCodec$PNGData"
176,"<org.hipi.image.io.PngCodec$PNGData: short getCompression()>","org.hipi.image.io.PngCodec$PNGData"
177,"<org.hipi.image.io.PngCodec$PNGData: short getFilter()>","org.hipi.image.io.PngCodec$PNGData"
178,"<org.hipi.image.io.PngCodec$PNGData: short getInterlace()>","org.hipi.image.io.PngCodec$PNGData"
179,"<org.hipi.image.io.PngCodec$PNGData: void <init>(org.hipi.image.io.PngCodec)>","org.hipi.image.io.PngCodec$PNGData"
180,"<org.hipi.image.io.PngCodec$PNGData: void add(org.hipi.image.io.PngCodec$PNGChunk)>","org.hipi.image.io.PngCodec$PNGData"
181,"<org.hipi.image.io.PngCodec$PNGData: void printAll()>","org.hipi.image.io.PngCodec$PNGData"
182,"<org.hipi.image.io.PngCodec: boolean verifyCRC(byte[],byte[],long)>","org.hipi.image.io.PngCodec"
183,"<org.hipi.image.io.PngCodec: org.hipi.image.HipiImageHeader decodeHeader(java.io.InputStream,boolean)>","org.hipi.image.io.PngCodec"
184,"<org.hipi.image.io.PngCodec: org.hipi.image.io.PngCodec getInstance()>","org.hipi.image.io.PngCodec"
185,"<org.hipi.image.io.PngCodec: org.hipi.image.io.PngCodec$PNGData readChunks(java.io.DataInputStream)>","org.hipi.image.io.PngCodec"
186,"<org.hipi.image.io.PngCodec: void <clinit>()>","org.hipi.image.io.PngCodec"
187,"<org.hipi.image.io.PngCodec: void <init>()>","org.hipi.image.io.PngCodec"
188,"<org.hipi.image.io.PngCodec: void encodeImage(org.hipi.image.HipiImage,java.io.OutputStream)>","org.hipi.image.io.PngCodec"
189,"<org.hipi.image.io.PngCodec: void readSignature(java.io.DataInputStream)>","org.hipi.image.io.PngCodec"
190,"<org.hipi.image.io.PngCodec: void write(java.io.OutputStream,byte[])>","org.hipi.image.io.PngCodec"
191,"<org.hipi.image.io.PngCodec: void write(java.io.OutputStream,int)>","org.hipi.image.io.PngCodec"
192,"<org.hipi.image.io.PpmCodec$PpmHeader: void <init>(org.hipi.image.io.PpmCodec)>","org.hipi.image.io.PpmCodec$PpmHeader"
193,"<org.hipi.image.io.PpmCodec$PpmHeader: void <init>(org.hipi.image.io.PpmCodec,org.hipi.image.io.PpmCodec$1)>","org.hipi.image.io.PpmCodec$PpmHeader"
194,"<org.hipi.image.io.PpmCodec: org.hipi.image.HipiImageHeader decodeHeader(java.io.InputStream,boolean)>","org.hipi.image.io.PpmCodec"
195,"<org.hipi.image.io.PpmCodec: org.hipi.image.io.PpmCodec getInstance()>","org.hipi.image.io.PpmCodec"
196,"<org.hipi.image.io.PpmCodec: org.hipi.image.io.PpmCodec$PpmHeader internalDecodeHeader(java.io.InputStream)>","org.hipi.image.io.PpmCodec"
197,"<org.hipi.image.io.PpmCodec: void <clinit>()>","org.hipi.image.io.PpmCodec"
198,"<org.hipi.image.io.PpmCodec: void <init>()>","org.hipi.image.io.PpmCodec"
199,"<org.hipi.image.io.PpmCodec: void encodeImage(org.hipi.image.HipiImage,java.io.OutputStream)>","org.hipi.image.io.PpmCodec"
200,"<org.hipi.imagebundle.HipiImageBundle$1: void <clinit>()>","org.hipi.imagebundle.HipiImageBundle$1"
201,"<org.hipi.imagebundle.HipiImageBundle$HibReader: boolean nextKeyValue()>","org.hipi.imagebundle.HipiImageBundle$HibReader"
202,"<org.hipi.imagebundle.HipiImageBundle$HibReader: byte[] getImageBytes()>","org.hipi.imagebundle.HipiImageBundle$HibReader"
203,"<org.hipi.imagebundle.HipiImageBundle$HibReader: float getProgress()>","org.hipi.imagebundle.HipiImageBundle$HibReader"
204,"<org.hipi.imagebundle.HipiImageBundle$HibReader: org.hipi.image.HipiImage getCurrentValue()>","org.hipi.imagebundle.HipiImageBundle$HibReader"
205,"<org.hipi.imagebundle.HipiImageBundle$HibReader: org.hipi.image.HipiImageHeader getCurrentKey()>","org.hipi.imagebundle.HipiImageBundle$HibReader"
206,"<org.hipi.imagebundle.HipiImageBundle$HibReader: org.hipi.image.HipiImageHeader$HipiImageFormat getImageStorageFormat()>","org.hipi.imagebundle.HipiImageBundle$HibReader"
207,"<org.hipi.imagebundle.HipiImageBundle$HibReader: void <init>(org.hipi.image.HipiImageFactory,java.lang.Class,org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path)>","org.hipi.imagebundle.HipiImageBundle$HibReader"
208,"<org.hipi.imagebundle.HipiImageBundle$HibReader: void <init>(org.hipi.image.HipiImageFactory,java.lang.Class,org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,long,long)>","org.hipi.imagebundle.HipiImageBundle$HibReader"
209,"<org.hipi.imagebundle.HipiImageBundle$HibReader: void close()>","org.hipi.imagebundle.HipiImageBundle$HibReader"
210,"<org.hipi.imagebundle.HipiImageBundle: boolean next()>","org.hipi.imagebundle.HipiImageBundle"
211,"<org.hipi.imagebundle.HipiImageBundle: java.util.List readAllOffsets()>","org.hipi.imagebundle.HipiImageBundle"
212,"<org.hipi.imagebundle.HipiImageBundle: java.util.List readOffsets(int)>","org.hipi.imagebundle.HipiImageBundle"
213,"<org.hipi.imagebundle.HipiImageBundle: org.apache.hadoop.fs.FileStatus getDataFileStatus()>","org.hipi.imagebundle.HipiImageBundle"
214,"<org.hipi.imagebundle.HipiImageBundle: org.apache.hadoop.fs.Path getPath()>","org.hipi.imagebundle.HipiImageBundle"
215,"<org.hipi.imagebundle.HipiImageBundle: org.hipi.image.HipiImage currentImage()>","org.hipi.imagebundle.HipiImageBundle"
216,"<org.hipi.imagebundle.HipiImageBundle: org.hipi.image.HipiImageHeader currentHeader()>","org.hipi.imagebundle.HipiImageBundle"
217,"<org.hipi.imagebundle.HipiImageBundle: void <clinit>()>","org.hipi.imagebundle.HipiImageBundle"
218,"<org.hipi.imagebundle.HipiImageBundle: void <init>(org.apache.hadoop.fs.Path,org.apache.hadoop.conf.Configuration)>","org.hipi.imagebundle.HipiImageBundle"
219,"<org.hipi.imagebundle.HipiImageBundle: void <init>(org.apache.hadoop.fs.Path,org.apache.hadoop.conf.Configuration,org.hipi.image.HipiImageFactory)>","org.hipi.imagebundle.HipiImageBundle"
220,"<org.hipi.imagebundle.HipiImageBundle: void <init>(org.apache.hadoop.fs.Path,org.apache.hadoop.conf.Configuration,org.hipi.image.HipiImageFactory,long)>","org.hipi.imagebundle.HipiImageBundle"
221,"<org.hipi.imagebundle.HipiImageBundle: void <init>(org.apache.hadoop.fs.Path,org.apache.hadoop.conf.Configuration,org.hipi.image.HipiImageFactory,short)>","org.hipi.imagebundle.HipiImageBundle"
222,"<org.hipi.imagebundle.HipiImageBundle: void <init>(org.apache.hadoop.fs.Path,org.apache.hadoop.conf.Configuration,org.hipi.image.HipiImageFactory,short,long)>","org.hipi.imagebundle.HipiImageBundle"
223,"<org.hipi.imagebundle.HipiImageBundle: void addImage(java.io.InputStream,org.hipi.image.HipiImageHeader$HipiImageFormat)>","org.hipi.imagebundle.HipiImageBundle"
224,"<org.hipi.imagebundle.HipiImageBundle: void addImage(java.io.InputStream,org.hipi.image.HipiImageHeader$HipiImageFormat,java.util.HashMap)>","org.hipi.imagebundle.HipiImageBundle"
225,"<org.hipi.imagebundle.HipiImageBundle: void addImage(org.hipi.image.HipiImageHeader,java.io.InputStream)>","org.hipi.imagebundle.HipiImageBundle"
226,"<org.hipi.imagebundle.HipiImageBundle: void append(org.hipi.imagebundle.HipiImageBundle)>","org.hipi.imagebundle.HipiImageBundle"
227,"<org.hipi.imagebundle.HipiImageBundle: void close()>","org.hipi.imagebundle.HipiImageBundle"
228,"<org.hipi.imagebundle.HipiImageBundle: void openForRead()>","org.hipi.imagebundle.HipiImageBundle"
229,"<org.hipi.imagebundle.HipiImageBundle: void openForRead(int)>","org.hipi.imagebundle.HipiImageBundle"
230,"<org.hipi.imagebundle.HipiImageBundle: void openForWrite(boolean)>","org.hipi.imagebundle.HipiImageBundle"
231,"<org.hipi.imagebundle.HipiImageBundle: void readBundleHeader()>","org.hipi.imagebundle.HipiImageBundle"
232,"<org.hipi.imagebundle.HipiImageBundle: void writeBundleHeader()>","org.hipi.imagebundle.HipiImageBundle"
233,"<org.hipi.imagebundle.mapreduce.HibInputFormat: int staticGetBlockIndex(org.apache.hadoop.fs.BlockLocation[],long)>","org.hipi.imagebundle.mapreduce.HibInputFormat"
234,"<org.hipi.imagebundle.mapreduce.HibInputFormat: java.util.List computeSplits(org.apache.hadoop.mapreduce.JobContext,java.util.List)>","org.hipi.imagebundle.mapreduce.HibInputFormat"
235,"<org.hipi.imagebundle.mapreduce.HibInputFormat: java.util.List getSplits(org.apache.hadoop.mapreduce.JobContext)>","org.hipi.imagebundle.mapreduce.HibInputFormat"
236,"<org.hipi.imagebundle.mapreduce.HibInputFormat: org.apache.hadoop.mapreduce.RecordReader createRecordReader(org.apache.hadoop.mapreduce.InputSplit,org.apache.hadoop.mapreduce.TaskAttemptContext)>","org.hipi.imagebundle.mapreduce.HibInputFormat"
237,"<org.hipi.imagebundle.mapreduce.HibInputFormat: void <init>()>","org.hipi.imagebundle.mapreduce.HibInputFormat"
238,"<org.hipi.imagebundle.mapreduce.HibRecordReader: boolean nextKeyValue()>","org.hipi.imagebundle.mapreduce.HibRecordReader"
239,"<org.hipi.imagebundle.mapreduce.HibRecordReader: float getProgress()>","org.hipi.imagebundle.mapreduce.HibRecordReader"
240,"<org.hipi.imagebundle.mapreduce.HibRecordReader: java.lang.Object getCurrentKey()>","org.hipi.imagebundle.mapreduce.HibRecordReader"
241,"<org.hipi.imagebundle.mapreduce.HibRecordReader: java.lang.Object getCurrentValue()>","org.hipi.imagebundle.mapreduce.HibRecordReader"
242,"<org.hipi.imagebundle.mapreduce.HibRecordReader: org.hipi.image.HipiImage getCurrentValue()>","org.hipi.imagebundle.mapreduce.HibRecordReader"
243,"<org.hipi.imagebundle.mapreduce.HibRecordReader: org.hipi.image.HipiImageHeader getCurrentKey()>","org.hipi.imagebundle.mapreduce.HibRecordReader"
244,"<org.hipi.imagebundle.mapreduce.HibRecordReader: void <init>()>","org.hipi.imagebundle.mapreduce.HibRecordReader"
245,"<org.hipi.imagebundle.mapreduce.HibRecordReader: void close()>","org.hipi.imagebundle.mapreduce.HibRecordReader"
246,"<org.hipi.imagebundle.mapreduce.HibRecordReader: void initialize(org.apache.hadoop.mapreduce.InputSplit,org.apache.hadoop.mapreduce.TaskAttemptContext)>","org.hipi.imagebundle.mapreduce.HibRecordReader"
247,"<org.hipi.mapreduce.BinaryOutputFormat$BinaryRecordWriter: void <init>(java.io.DataOutputStream)>","org.hipi.mapreduce.BinaryOutputFormat$BinaryRecordWriter"
248,"<org.hipi.mapreduce.BinaryOutputFormat$BinaryRecordWriter: void close(org.apache.hadoop.mapreduce.TaskAttemptContext)>","org.hipi.mapreduce.BinaryOutputFormat$BinaryRecordWriter"
249,"<org.hipi.mapreduce.BinaryOutputFormat$BinaryRecordWriter: void write(java.lang.Object,java.lang.Object)>","org.hipi.mapreduce.BinaryOutputFormat$BinaryRecordWriter"
250,"<org.hipi.mapreduce.BinaryOutputFormat$BinaryRecordWriter: void writeObject(org.apache.hadoop.io.Writable)>","org.hipi.mapreduce.BinaryOutputFormat$BinaryRecordWriter"
251,"<org.hipi.mapreduce.BinaryOutputFormat: org.apache.hadoop.mapreduce.RecordWriter getRecordWriter(org.apache.hadoop.mapreduce.TaskAttemptContext)>","org.hipi.mapreduce.BinaryOutputFormat"
252,"<org.hipi.mapreduce.BinaryOutputFormat: void <init>()>","org.hipi.mapreduce.BinaryOutputFormat"
253,"<org.hipi.mapreduce.Culler: boolean cull(org.hipi.image.HipiImageHeader)>","org.hipi.mapreduce.Culler"
254,"<org.hipi.mapreduce.Culler: boolean includeExifDataInHeader()>","org.hipi.mapreduce.Culler"
255,"<org.hipi.mapreduce.Culler: void <init>()>","org.hipi.mapreduce.Culler"
256,"<org.hipi.opencv.OpenCVMatWritable: org.bytedeco.javacpp.opencv_core$Mat getMat()>","org.hipi.opencv.OpenCVMatWritable"
257,"<org.hipi.opencv.OpenCVMatWritable: void <clinit>()>","org.hipi.opencv.OpenCVMatWritable"
258,"<org.hipi.opencv.OpenCVMatWritable: void <init>()>","org.hipi.opencv.OpenCVMatWritable"
259,"<org.hipi.opencv.OpenCVMatWritable: void <init>(org.bytedeco.javacpp.opencv_core$Mat)>","org.hipi.opencv.OpenCVMatWritable"
260,"<org.hipi.opencv.OpenCVMatWritable: void readFields(java.io.DataInput)>","org.hipi.opencv.OpenCVMatWritable"
261,"<org.hipi.opencv.OpenCVMatWritable: void setMat(org.bytedeco.javacpp.opencv_core$Mat)>","org.hipi.opencv.OpenCVMatWritable"
262,"<org.hipi.opencv.OpenCVMatWritable: void write(java.io.DataOutput)>","org.hipi.opencv.OpenCVMatWritable"
263,"<org.hipi.opencv.OpenCVUtils: int generateOpenCVType(int,int)>","org.hipi.opencv.OpenCVUtils"
264,"<org.hipi.opencv.OpenCVUtils: org.bytedeco.javacpp.opencv_core$Mat convertRasterImageToMat(org.hipi.image.RasterImage)>","org.hipi.opencv.OpenCVUtils"
265,"<org.hipi.opencv.OpenCVUtils: void <clinit>()>","org.hipi.opencv.OpenCVUtils"
266,"<org.hipi.opencv.OpenCVUtils: void <init>()>","org.hipi.opencv.OpenCVUtils"
267,"<org.hipi.util.ByteUtils: byte[] doubleArrayToByteArray(double[])>","org.hipi.util.ByteUtils"
268,"<org.hipi.util.ByteUtils: byte[] floatArrayToByteArray(float[])>","org.hipi.util.ByteUtils"
269,"<org.hipi.util.ByteUtils: byte[] inputStreamToByteArray(java.io.InputStream)>","org.hipi.util.ByteUtils"
270,"<org.hipi.util.ByteUtils: byte[] intArrayToByteArray(int[])>","org.hipi.util.ByteUtils"
271,"<org.hipi.util.ByteUtils: byte[] intToByteArray(int)>","org.hipi.util.ByteUtils"
272,"<org.hipi.util.ByteUtils: byte[] shortArrayToByteArray(short[])>","org.hipi.util.ByteUtils"
273,"<org.hipi.util.ByteUtils: double[] byteArrayToDoubleArray(byte[])>","org.hipi.util.ByteUtils"
274,"<org.hipi.util.ByteUtils: float[] byteArrayToFloatArray(byte[])>","org.hipi.util.ByteUtils"
275,"<org.hipi.util.ByteUtils: int byteArrayToInt(byte[])>","org.hipi.util.ByteUtils"
276,"<org.hipi.util.ByteUtils: int byteArrayToInt(byte[],int)>","org.hipi.util.ByteUtils"
277,"<org.hipi.util.ByteUtils: int[] byteArrayToIntArray(byte[])>","org.hipi.util.ByteUtils"
278,"<org.hipi.util.ByteUtils: java.lang.String asHex(byte[])>","org.hipi.util.ByteUtils"
279,"<org.hipi.util.ByteUtils: java.lang.String makeString(byte[],int)>","org.hipi.util.ByteUtils"
280,"<org.hipi.util.ByteUtils: short[] byteArrayToShortArray(byte[])>","org.hipi.util.ByteUtils"
281,"<org.hipi.util.ByteUtils: void <init>()>","org.hipi.util.ByteUtils"
282,"<org.hipi.util.ByteUtils: int byteArrayToInt(byte[],int)>","org.hipi.util.ByteUtils"
283,"<org.hipi.image.HipiImage: int getWidth()>","org.hipi.image.HipiImage"
284,"<org.hipi.image.HipiImage: int getHeight()>","org.hipi.image.HipiImage"
285,"<org.hipi.image.HipiImage: int getWidth()>","org.hipi.image.HipiImage"
286,"<org.hipi.image.HipiImage: int getHeight()>","org.hipi.image.HipiImage"
287,"<org.hipi.image.HipiImage: int getNumBands()>","org.hipi.image.HipiImage"
288,"<org.hipi.image.HipiImage: int getNumBands()>","org.hipi.image.HipiImage"
289,"<org.hipi.image.HipiImage: int getNumBands()>","org.hipi.image.HipiImage"
290,"<org.hipi.image.RasterImage: org.hipi.image.PixelArray getPixelArray()>","org.hipi.image.RasterImage"
291,"<org.hipi.image.HipiImage: int getNumBands()>","org.hipi.image.HipiImage"
292,"<org.hipi.opencv.OpenCVUtils: int generateOpenCVType(int,int)>","org.hipi.opencv.OpenCVUtils"
293,"<org.hipi.image.HipiImage: int getHeight()>","org.hipi.image.HipiImage"
294,"<org.hipi.image.HipiImage: int getWidth()>","org.hipi.image.HipiImage"
295,"<org.hipi.image.RasterImage: org.hipi.image.PixelArray getPixelArray()>","org.hipi.image.RasterImage"
296,"<org.hipi.util.ByteUtils: short[] byteArrayToShortArray(byte[])>","org.hipi.util.ByteUtils"
297,"<org.hipi.util.ByteUtils: int[] byteArrayToIntArray(byte[])>","org.hipi.util.ByteUtils"
298,"<org.hipi.util.ByteUtils: float[] byteArrayToFloatArray(byte[])>","org.hipi.util.ByteUtils"
299,"<org.hipi.util.ByteUtils: double[] byteArrayToDoubleArray(byte[])>","org.hipi.util.ByteUtils"
300,"<org.hipi.util.ByteUtils: byte[] shortArrayToByteArray(short[])>","org.hipi.util.ByteUtils"
301,"<org.hipi.util.ByteUtils: byte[] intArrayToByteArray(int[])>","org.hipi.util.ByteUtils"
302,"<org.hipi.util.ByteUtils: byte[] floatArrayToByteArray(float[])>","org.hipi.util.ByteUtils"
303,"<org.hipi.util.ByteUtils: byte[] doubleArrayToByteArray(double[])>","org.hipi.util.ByteUtils"
304,"<org.hipi.util.ByteUtils: short[] byteArrayToShortArray(byte[])>","org.hipi.util.ByteUtils"
305,"<org.hipi.util.ByteUtils: int[] byteArrayToIntArray(byte[])>","org.hipi.util.ByteUtils"
306,"<org.hipi.util.ByteUtils: float[] byteArrayToFloatArray(byte[])>","org.hipi.util.ByteUtils"
307,"<org.hipi.util.ByteUtils: double[] byteArrayToDoubleArray(byte[])>","org.hipi.util.ByteUtils"
308,"<org.hipi.mapreduce.BinaryOutputFormat$BinaryRecordWriter: void <init>(java.io.DataOutputStream)>","org.hipi.mapreduce.BinaryOutputFormat$BinaryRecordWriter"
309,"<org.hipi.mapreduce.BinaryOutputFormat$BinaryRecordWriter: void <init>(java.io.DataOutputStream)>","org.hipi.mapreduce.BinaryOutputFormat$BinaryRecordWriter"
310,"<org.hipi.mapreduce.BinaryOutputFormat$BinaryRecordWriter: void writeObject(org.apache.hadoop.io.Writable)>","org.hipi.mapreduce.BinaryOutputFormat$BinaryRecordWriter"
311,"<org.hipi.mapreduce.BinaryOutputFormat$BinaryRecordWriter: void writeObject(org.apache.hadoop.io.Writable)>","org.hipi.mapreduce.BinaryOutputFormat$BinaryRecordWriter"
312,"<org.hipi.image.HipiImageFactory: void <init>(java.lang.Class)>","org.hipi.image.HipiImageFactory"
313,"<org.hipi.imagebundle.HipiImageBundle$HibReader: void <init>(org.hipi.image.HipiImageFactory,java.lang.Class,org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,long,long)>","org.hipi.imagebundle.HipiImageBundle$HibReader"
314,"<org.hipi.imagebundle.mapreduce.HibRecordReader: void <init>()>","org.hipi.imagebundle.mapreduce.HibRecordReader"
315,"<org.hipi.imagebundle.mapreduce.HibInputFormat: java.util.List computeSplits(org.apache.hadoop.mapreduce.JobContext,java.util.List)>","org.hipi.imagebundle.mapreduce.HibInputFormat"
316,"<org.hipi.imagebundle.HipiImageBundle: void <init>(org.apache.hadoop.fs.Path,org.apache.hadoop.conf.Configuration)>","org.hipi.imagebundle.HipiImageBundle"
317,"<org.hipi.imagebundle.HipiImageBundle: void openForRead()>","org.hipi.imagebundle.HipiImageBundle"
318,"<org.hipi.imagebundle.HipiImageBundle: java.util.List readAllOffsets()>","org.hipi.imagebundle.HipiImageBundle"
319,"<org.hipi.imagebundle.HipiImageBundle: org.apache.hadoop.fs.FileStatus getDataFileStatus()>","org.hipi.imagebundle.HipiImageBundle"
320,"<org.hipi.imagebundle.mapreduce.HibInputFormat: int staticGetBlockIndex(org.apache.hadoop.fs.BlockLocation[],long)>","org.hipi.imagebundle.mapreduce.HibInputFormat"
321,"<org.hipi.imagebundle.HipiImageBundle: org.apache.hadoop.fs.FileStatus getDataFileStatus()>","org.hipi.imagebundle.HipiImageBundle"
322,"<org.hipi.imagebundle.mapreduce.HibInputFormat: int staticGetBlockIndex(org.apache.hadoop.fs.BlockLocation[],long)>","org.hipi.imagebundle.mapreduce.HibInputFormat"
323,"<org.hipi.imagebundle.mapreduce.HibInputFormat: int staticGetBlockIndex(org.apache.hadoop.fs.BlockLocation[],long)>","org.hipi.imagebundle.mapreduce.HibInputFormat"
324,"<org.hipi.imagebundle.HipiImageBundle: org.apache.hadoop.fs.FileStatus getDataFileStatus()>","org.hipi.imagebundle.HipiImageBundle"
325,"<org.hipi.imagebundle.HipiImageBundle: void close()>","org.hipi.imagebundle.HipiImageBundle"
326,"<org.hipi.imagebundle.HipiImageBundle: void writeBundleHeader()>","org.hipi.imagebundle.HipiImageBundle"
327,"<org.hipi.imagebundle.HipiImageBundle: void readBundleHeader()>","org.hipi.imagebundle.HipiImageBundle"
328,"<org.hipi.imagebundle.HipiImageBundle$HibReader: void <init>(org.hipi.image.HipiImageFactory,java.lang.Class,org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path)>","org.hipi.imagebundle.HipiImageBundle$HibReader"
329,"<org.hipi.imagebundle.HipiImageBundle: void readBundleHeader()>","org.hipi.imagebundle.HipiImageBundle"
330,"<org.hipi.imagebundle.HipiImageBundle$HibReader: void <init>(org.hipi.image.HipiImageFactory,java.lang.Class,org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,long,long)>","org.hipi.imagebundle.HipiImageBundle$HibReader"
331,"<org.hipi.imagebundle.HipiImageBundle: void openForRead()>","org.hipi.imagebundle.HipiImageBundle"
332,"<org.hipi.imagebundle.HipiImageBundle: org.apache.hadoop.fs.FileStatus getDataFileStatus()>","org.hipi.imagebundle.HipiImageBundle"
333,"<org.hipi.imagebundle.HipiImageBundle: java.util.List readAllOffsets()>","org.hipi.imagebundle.HipiImageBundle"
334,"<org.hipi.imagebundle.HipiImageBundle: void close()>","org.hipi.imagebundle.HipiImageBundle"
335,"<org.hipi.image.HipiImageHeader: void write(java.io.DataOutput)>","org.hipi.image.HipiImageHeader"
336,"<org.hipi.util.ByteUtils: byte[] inputStreamToByteArray(java.io.InputStream)>","org.hipi.util.ByteUtils"
337,"<org.hipi.image.HipiImageHeader: org.hipi.image.HipiImageHeader$HipiImageFormat getStorageFormat()>","org.hipi.image.HipiImageHeader"
338,"<org.hipi.image.io.JpegCodec: org.hipi.image.io.JpegCodec getInstance()>","org.hipi.image.io.JpegCodec"
339,"<org.hipi.image.io.PngCodec: org.hipi.image.io.PngCodec getInstance()>","org.hipi.image.io.PngCodec"
340,"<org.hipi.imagebundle.HipiImageBundle: void <init>(org.apache.hadoop.fs.Path,org.apache.hadoop.conf.Configuration,org.hipi.image.HipiImageFactory)>","org.hipi.imagebundle.HipiImageBundle"
341,"<org.hipi.imagebundle.HipiImageBundle: void <init>(org.apache.hadoop.fs.Path,org.apache.hadoop.conf.Configuration,org.hipi.image.HipiImageFactory)>","org.hipi.imagebundle.HipiImageBundle"
342,"<org.hipi.imagebundle.HipiImageBundle: void <init>(org.apache.hadoop.fs.Path,org.apache.hadoop.conf.Configuration,org.hipi.image.HipiImageFactory)>","org.hipi.imagebundle.HipiImageBundle"
343,"<org.hipi.imagebundle.HipiImageBundle: void <init>(org.apache.hadoop.fs.Path,org.apache.hadoop.conf.Configuration,org.hipi.image.HipiImageFactory)>","org.hipi.imagebundle.HipiImageBundle"
344,"<org.hipi.imagebundle.HipiImageBundle$HibReader: void <init>(org.hipi.image.HipiImageFactory,java.lang.Class,org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,long,long)>","org.hipi.imagebundle.HipiImageBundle$HibReader"
345,"<org.hipi.image.HipiImageHeader$HipiImageFormat: org.hipi.image.HipiImageHeader$HipiImageFormat fromInteger(int)>","org.hipi.image.HipiImageHeader$HipiImageFormat"
346,"<org.hipi.image.HipiImageHeader: void <init>(java.io.DataInput)>","org.hipi.image.HipiImageHeader"
347,"<org.hipi.image.io.CodecManager: org.hipi.image.io.ImageDecoder getDecoder(org.hipi.image.HipiImageHeader$HipiImageFormat)>","org.hipi.image.io.CodecManager"
348,"<org.hipi.image.RawImage: void <init>()>","org.hipi.image.RawImage"
349,"<org.hipi.image.HipiImage: void setHeader(org.hipi.image.HipiImageHeader)>","org.hipi.image.HipiImage"
350,"<org.hipi.image.RawImage: void setRawBytes(byte[])>","org.hipi.image.RawImage"
351,"<org.hipi.image.HipiImageHeader$HipiImageFormat: org.hipi.image.HipiImageHeader$HipiImageFormat[] values()>","org.hipi.image.HipiImageHeader$HipiImageFormat"
352,"<org.hipi.image.HipiImage$HipiImageType: org.hipi.image.HipiImage$HipiImageType[] values()>","org.hipi.image.HipiImage$HipiImageType"
353,"<org.hipi.image.HipiImage: int getWidth()>","org.hipi.image.HipiImage"
354,"<org.hipi.image.HipiImage: int getHeight()>","org.hipi.image.HipiImage"
355,"<org.hipi.image.HipiImage: org.hipi.image.HipiImageHeader$HipiColorSpace getColorSpace()>","org.hipi.image.HipiImage"
356,"<org.hipi.image.HipiImage: int getNumBands()>","org.hipi.image.HipiImage"
357,"<org.hipi.image.HipiImage: int getWidth()>","org.hipi.image.HipiImage"
358,"<org.hipi.image.HipiImage: int getHeight()>","org.hipi.image.HipiImage"
359,"<org.hipi.image.io.ImageCodec: void <init>()>","org.hipi.image.io.ImageCodec"
360,"<org.hipi.image.io.PpmCodec: void <init>()>","org.hipi.image.io.PpmCodec"
361,"<org.hipi.image.io.PpmCodec$PpmHeader: void <init>(org.hipi.image.io.PpmCodec,org.hipi.image.io.PpmCodec$1)>","org.hipi.image.io.PpmCodec$PpmHeader"
362,"<org.hipi.image.io.PpmCodec: org.hipi.image.io.PpmCodec$PpmHeader internalDecodeHeader(java.io.InputStream)>","org.hipi.image.io.PpmCodec"
363,"<org.hipi.image.HipiImageHeader: void <init>(org.hipi.image.HipiImageHeader$HipiImageFormat,org.hipi.image.HipiImageHeader$HipiColorSpace,int,int,int,byte[],java.util.Map)>","org.hipi.image.HipiImageHeader"
364,"<org.hipi.image.io.PpmCodec$PpmHeader: void <init>(org.hipi.image.io.PpmCodec)>","org.hipi.image.io.PpmCodec$PpmHeader"
365,"<org.hipi.image.io.PngCodec: void write(java.io.OutputStream,byte[])>","org.hipi.image.io.PngCodec"
366,"<org.hipi.image.HipiImage: int getWidth()>","org.hipi.image.HipiImage"
367,"<org.hipi.image.HipiImage: int getHeight()>","org.hipi.image.HipiImage"
368,"<org.hipi.image.HipiImage: org.hipi.image.HipiImageHeader$HipiColorSpace getColorSpace()>","org.hipi.image.HipiImage"
369,"<org.hipi.image.HipiImage: int getNumBands()>","org.hipi.image.HipiImage"
370,"<org.hipi.image.HipiImage: int getWidth()>","org.hipi.image.HipiImage"
371,"<org.hipi.image.HipiImage: int getHeight()>","org.hipi.image.HipiImage"
372,"<org.hipi.image.io.PngCodec: void write(java.io.OutputStream,byte[])>","org.hipi.image.io.PngCodec"
373,"<org.hipi.image.io.PngCodec: void write(java.io.OutputStream,byte[])>","org.hipi.image.io.PngCodec"
374,"<org.hipi.image.io.PngCodec: void write(java.io.OutputStream,int)>","org.hipi.image.io.PngCodec"
375,"<org.hipi.image.io.PngCodec: void write(java.io.OutputStream,int)>","org.hipi.image.io.PngCodec"
376,"<org.hipi.image.io.PngCodec: void write(java.io.OutputStream,byte[])>","org.hipi.image.io.PngCodec"
377,"<org.hipi.image.io.PngCodec: void write(java.io.OutputStream,int)>","org.hipi.image.io.PngCodec"
378,"<org.hipi.image.io.PngCodec: void write(java.io.OutputStream,int)>","org.hipi.image.io.PngCodec"
379,"<org.hipi.image.io.PngCodec: void write(java.io.OutputStream,byte[])>","org.hipi.image.io.PngCodec"
380,"<org.hipi.image.io.PngCodec: void write(java.io.OutputStream,byte[])>","org.hipi.image.io.PngCodec"
381,"<org.hipi.image.io.PngCodec: void write(java.io.OutputStream,int)>","org.hipi.image.io.PngCodec"
382,"<org.hipi.image.io.PngCodec: void write(java.io.OutputStream,int)>","org.hipi.image.io.PngCodec"
383,"<org.hipi.image.io.PngCodec: void write(java.io.OutputStream,byte[])>","org.hipi.image.io.PngCodec"
384,"<org.hipi.image.io.PngCodec: void write(java.io.OutputStream,int)>","org.hipi.image.io.PngCodec"
385,"<org.hipi.image.io.ImageCodec: void <init>()>","org.hipi.image.io.ImageCodec"
386,"<org.hipi.image.io.PngCodec: void <init>()>","org.hipi.image.io.PngCodec"
387,"<org.hipi.image.io.PngCodec$PNGData: void <init>(org.hipi.image.io.PngCodec)>","org.hipi.image.io.PngCodec$PNGData"
388,"<org.hipi.image.io.PngCodec: boolean verifyCRC(byte[],byte[],long)>","org.hipi.image.io.PngCodec"
389,"<org.hipi.image.io.PngCodec$PNGChunk: void <init>(org.hipi.image.io.PngCodec,byte[],byte[])>","org.hipi.image.io.PngCodec$PNGChunk"
390,"<org.hipi.image.io.PngCodec$PNGData: void add(org.hipi.image.io.PngCodec$PNGChunk)>","org.hipi.image.io.PngCodec$PNGData"
391,"<org.hipi.image.io.PngCodec: void readSignature(java.io.DataInputStream)>","org.hipi.image.io.PngCodec"
392,"<org.hipi.image.io.PngCodec: boolean verifyCRC(byte[],byte[],long)>","org.hipi.image.io.PngCodec"
393,"<org.hipi.image.io.PngCodec$PNGChunk: void <init>(org.hipi.image.io.PngCodec,byte[],byte[])>","org.hipi.image.io.PngCodec$PNGChunk"
394,"<org.hipi.image.io.PngCodec$PNGChunk: long getUnsignedInt(int)>","org.hipi.image.io.PngCodec$PNGChunk"
395,"<org.hipi.image.io.PngCodec$PNGChunk: long getUnsignedInt(int)>","org.hipi.image.io.PngCodec$PNGChunk"
396,"<org.hipi.image.io.ExifDataReader: java.util.HashMap extractAndFlatten(java.io.InputStream)>","org.hipi.image.io.ExifDataReader"
397,"<org.hipi.image.HipiImageHeader: void <init>(org.hipi.image.HipiImageHeader$HipiImageFormat,org.hipi.image.HipiImageHeader$HipiColorSpace,int,int,int,byte[],java.util.Map)>","org.hipi.image.HipiImageHeader"
398,"<org.hipi.image.HipiImage: int getWidth()>","org.hipi.image.HipiImage"
399,"<org.hipi.image.HipiImage: int getHeight()>","org.hipi.image.HipiImage"
400,"<org.hipi.image.HipiImage: org.hipi.image.HipiImageHeader$HipiColorSpace getColorSpace()>","org.hipi.image.HipiImage"
401,"<org.hipi.image.HipiImage: int getNumBands()>","org.hipi.image.HipiImage"
402,"<org.hipi.image.io.ImageCodec: void <init>()>","org.hipi.image.io.ImageCodec"
403,"<org.hipi.image.io.JpegCodec: void <init>()>","org.hipi.image.io.JpegCodec"
404,"<org.hipi.image.io.ExifDataReader: java.util.HashMap extractAndFlatten(java.io.InputStream)>","org.hipi.image.io.ExifDataReader"
405,"<org.hipi.image.HipiImageHeader: void <init>(org.hipi.image.HipiImageHeader$HipiImageFormat,org.hipi.image.HipiImageHeader$HipiColorSpace,int,int,int,byte[],java.util.Map)>","org.hipi.image.HipiImageHeader"
406,"<org.hipi.image.HipiImage: int getWidth()>","org.hipi.image.HipiImage"
407,"<org.hipi.image.HipiImage: int getHeight()>","org.hipi.image.HipiImage"
408,"<org.hipi.image.RasterImage: org.hipi.image.PixelArray getPixelArray()>","org.hipi.image.RasterImage"
409,"<org.hipi.image.HipiImageFactory: org.hipi.image.HipiImage$HipiImageType getType()>","org.hipi.image.HipiImageFactory"
410,"<org.hipi.image.HipiImageFactory: org.hipi.image.HipiImage$HipiImageType getType()>","org.hipi.image.HipiImageFactory"
411,"<org.hipi.image.HipiImageHeader: int getWidth()>","org.hipi.image.HipiImageHeader"
412,"<org.hipi.image.HipiImageHeader: int getHeight()>","org.hipi.image.HipiImageHeader"
413,"<org.hipi.image.HipiImageFactory: org.hipi.image.HipiImage createImage(org.hipi.image.HipiImageHeader)>","org.hipi.image.HipiImageFactory"
414,"<org.hipi.image.io.ExifDataReader: java.util.HashMap extractAndFlatten(java.io.InputStream)>","org.hipi.image.io.ExifDataReader"
415,"<org.hipi.image.HipiImageHeader: void setExifData(java.util.HashMap)>","org.hipi.image.HipiImageHeader"
416,"<org.hipi.image.io.ExifDataReader$UnclosableBufferedInputStream: void <init>(org.hipi.image.io.ExifDataReader,java.io.InputStream)>","org.hipi.image.io.ExifDataReader$UnclosableBufferedInputStream"
417,"<org.hipi.image.io.ExifDataReader: void <init>(java.io.InputStream)>","org.hipi.image.io.ExifDataReader"
418,"<org.hipi.image.io.ExifDataReader: com.drew.metadata.Metadata extract()>","org.hipi.image.io.ExifDataReader"
419,"<org.hipi.image.io.JpegCodec: org.hipi.image.io.JpegCodec getInstance()>","org.hipi.image.io.JpegCodec"
420,"<org.hipi.image.io.PngCodec: org.hipi.image.io.PngCodec getInstance()>","org.hipi.image.io.PngCodec"
421,"<org.hipi.image.io.PpmCodec: org.hipi.image.io.PpmCodec getInstance()>","org.hipi.image.io.PpmCodec"
422,"<org.hipi.image.io.JpegCodec: org.hipi.image.io.JpegCodec getInstance()>","org.hipi.image.io.JpegCodec"
423,"<org.hipi.image.io.PngCodec: org.hipi.image.io.PngCodec getInstance()>","org.hipi.image.io.PngCodec"
424,"<org.hipi.image.io.PpmCodec: org.hipi.image.io.PpmCodec getInstance()>","org.hipi.image.io.PpmCodec"
425,"<org.hipi.image.HipiImageHeader$HipiImageFormat: org.hipi.image.HipiImageHeader$HipiImageFormat[] values()>","org.hipi.image.HipiImageHeader$HipiImageFormat"
426,"<org.hipi.image.HipiImageHeader: void <init>(java.io.DataInput)>","org.hipi.image.HipiImageHeader"
427,"<org.hipi.image.HipiImage: void <init>()>","org.hipi.image.HipiImage"
428,"<org.hipi.util.ByteUtils: java.lang.String asHex(byte[])>","org.hipi.util.ByteUtils"
429,"<org.hipi.image.HipiImage: void setHeader(org.hipi.image.HipiImageHeader)>","org.hipi.image.HipiImage"
430,"<org.hipi.image.HipiImageHeader: int getWidth()>","org.hipi.image.HipiImageHeader"
431,"<org.hipi.image.HipiImageHeader: int getHeight()>","org.hipi.image.HipiImageHeader"
432,"<org.hipi.image.HipiImageHeader: int getNumBands()>","org.hipi.image.HipiImageHeader"
433,"<org.hipi.image.HipiImageHeader: void <init>(java.io.DataInput)>","org.hipi.image.HipiImageHeader"
434,"<org.hipi.image.PixelArray: int getDataTypeSize(int)>","org.hipi.image.PixelArray"
435,"<org.hipi.image.HipiImage: int getWidth()>","org.hipi.image.HipiImage"
436,"<org.hipi.image.HipiImage: int getHeight()>","org.hipi.image.HipiImage"
437,"<org.hipi.image.HipiImage: int getNumBands()>","org.hipi.image.HipiImage"
438,"<org.hipi.image.RasterImage: org.hipi.image.PixelArray getPixelArray()>","org.hipi.image.RasterImage"
439,"<org.hipi.image.HipiImage: org.hipi.image.HipiImageHeader$HipiColorSpace getColorSpace()>","org.hipi.image.HipiImage"
440,"<org.hipi.image.HipiImage: int getWidth()>","org.hipi.image.HipiImage"
441,"<org.hipi.image.HipiImage: int getHeight()>","org.hipi.image.HipiImage"
442,"<org.hipi.image.HipiImage: int getNumBands()>","org.hipi.image.HipiImage"
443,"<org.hipi.image.RasterImage: org.hipi.image.PixelArray getPixelArray()>","org.hipi.image.RasterImage"
444,"<org.hipi.image.HipiImage: void <init>()>","org.hipi.image.HipiImage"
445,"<org.hipi.image.HipiImage$HipiImageType: org.hipi.image.HipiImage$HipiImageType[] values()>","org.hipi.image.HipiImage$HipiImageType"
446,"<org.hipi.util.ByteUtils: float[] byteArrayToFloatArray(byte[])>","org.hipi.util.ByteUtils"
447,"<org.hipi.image.PixelArray: void <init>(int,int)>","org.hipi.image.PixelArray"
448,"<org.hipi.image.PixelArray: void <init>(int,int)>","org.hipi.image.PixelArray"
449,"<org.hipi.util.ByteUtils: byte[] floatArrayToByteArray(float[])>","org.hipi.util.ByteUtils"
450,"<org.hipi.image.PixelArray: void <init>(int,int)>","org.hipi.image.PixelArray"
451,"<org.hipi.image.PixelArray: void <init>(int,int)>","org.hipi.image.PixelArray"
452,"<org.hipi.image.HipiImageHeader: org.hipi.image.HipiImageHeader$HipiImageFormat getStorageFormat()>","org.hipi.image.HipiImageHeader"
453,"<org.hipi.image.HipiImageHeader: org.hipi.image.HipiImageHeader$HipiColorSpace getColorSpace()>","org.hipi.image.HipiImageHeader"
454,"<org.hipi.image.HipiImageHeader: int getWidth()>","org.hipi.image.HipiImageHeader"
455,"<org.hipi.image.HipiImageHeader: int getHeight()>","org.hipi.image.HipiImageHeader"
456,"<org.hipi.image.HipiImageHeader: int getNumBands()>","org.hipi.image.HipiImageHeader"
457,"<org.hipi.image.HipiImageHeader: java.util.HashMap getAllMetaData()>","org.hipi.image.HipiImageHeader"
458,"<org.hipi.image.HipiImageHeader: java.util.HashMap getAllExifData()>","org.hipi.image.HipiImageHeader"
459,"<org.hipi.image.HipiImageHeader$HipiImageFormat: org.hipi.image.HipiImageHeader$HipiImageFormat fromInteger(int)>","org.hipi.image.HipiImageHeader$HipiImageFormat"
460,"<org.hipi.image.HipiImageHeader$HipiColorSpace: org.hipi.image.HipiImageHeader$HipiColorSpace fromInteger(int)>","org.hipi.image.HipiImageHeader$HipiColorSpace"
461,"<org.hipi.image.HipiImageHeader$HipiImageFormat: void <init>(java.lang.String,int,int)>","org.hipi.image.HipiImageHeader$HipiImageFormat"
462,"<org.hipi.image.HipiImageHeader$HipiImageFormat: void <init>(java.lang.String,int,int)>","org.hipi.image.HipiImageHeader$HipiImageFormat"
463,"<org.hipi.image.HipiImageHeader$HipiImageFormat: void <init>(java.lang.String,int,int)>","org.hipi.image.HipiImageHeader$HipiImageFormat"
464,"<org.hipi.image.HipiImageHeader$HipiImageFormat: void <init>(java.lang.String,int,int)>","org.hipi.image.HipiImageHeader$HipiImageFormat"
465,"<org.hipi.image.HipiImageHeader$HipiImageFormat: org.hipi.image.HipiImageHeader$HipiImageFormat[] values()>","org.hipi.image.HipiImageHeader$HipiImageFormat"
466,"<org.hipi.image.HipiImageHeader$HipiColorSpace: void <init>(java.lang.String,int,int)>","org.hipi.image.HipiImageHeader$HipiColorSpace"
467,"<org.hipi.image.HipiImageHeader$HipiColorSpace: void <init>(java.lang.String,int,int)>","org.hipi.image.HipiImageHeader$HipiColorSpace"
468,"<org.hipi.image.HipiImageHeader$HipiColorSpace: void <init>(java.lang.String,int,int)>","org.hipi.image.HipiImageHeader$HipiColorSpace"
469,"<org.hipi.image.HipiImageHeader$HipiColorSpace: org.hipi.image.HipiImageHeader$HipiColorSpace[] values()>","org.hipi.image.HipiImageHeader$HipiColorSpace"
470,"<org.hipi.image.HipiImageFactory: void findImageClass(java.lang.Class)>","org.hipi.image.HipiImageFactory"
471,"<org.hipi.image.HipiImageFactory: void <init>(org.hipi.image.HipiImage$HipiImageType)>","org.hipi.image.HipiImageFactory"
472,"<org.hipi.image.HipiImageFactory: void <init>(org.hipi.image.HipiImage$HipiImageType)>","org.hipi.image.HipiImageFactory"
473,"<org.hipi.image.HipiImage$HipiImageType: org.hipi.image.HipiImage$HipiImageType[] values()>","org.hipi.image.HipiImage$HipiImageType"
474,"<org.hipi.image.HipiImageHeader: int getWidth()>","org.hipi.image.HipiImageHeader"
475,"<org.hipi.image.HipiImageHeader: int getHeight()>","org.hipi.image.HipiImageHeader"
476,"<org.hipi.image.HipiImageHeader: int getNumBands()>","org.hipi.image.HipiImageHeader"
477,"<org.hipi.image.HipiImageHeader: int getWidth()>","org.hipi.image.HipiImageHeader"
478,"<org.hipi.image.HipiImageHeader: int getHeight()>","org.hipi.image.HipiImageHeader"
479,"<org.hipi.image.HipiImageHeader: int getNumBands()>","org.hipi.image.HipiImageHeader"
480,"<org.hipi.image.HipiImage$HipiImageType: void <init>(java.lang.String,int,int)>","org.hipi.image.HipiImage$HipiImageType"
481,"<org.hipi.image.HipiImage$HipiImageType: void <init>(java.lang.String,int,int)>","org.hipi.image.HipiImage$HipiImageType"
482,"<org.hipi.image.HipiImage$HipiImageType: void <init>(java.lang.String,int,int)>","org.hipi.image.HipiImage$HipiImageType"
483,"<org.hipi.image.HipiImage$HipiImageType: void <init>(java.lang.String,int,int)>","org.hipi.image.HipiImage$HipiImageType"
484,"<org.hipi.image.HipiImage$HipiImageType: org.hipi.image.HipiImage$HipiImageType[] values()>","org.hipi.image.HipiImage$HipiImageType"
485,"<org.hipi.image.FloatImage: float[] getData()>","org.hipi.image.FloatImage"
486,"<org.hipi.image.HipiImage: org.hipi.image.HipiImageHeader$HipiColorSpace getColorSpace()>","org.hipi.image.HipiImage"
487,"<org.hipi.image.HipiImage: int getWidth()>","org.hipi.image.HipiImage"
488,"<org.hipi.image.HipiImage: int getHeight()>","org.hipi.image.HipiImage"
489,"<org.hipi.image.HipiImage: int getNumBands()>","org.hipi.image.HipiImage"
490,"<org.hipi.image.FloatImage: float[] getData()>","org.hipi.image.FloatImage"
491,"<org.hipi.image.PixelArrayFloat: void <init>()>","org.hipi.image.PixelArrayFloat"
492,"<org.hipi.image.RasterImage: void <init>(org.hipi.image.PixelArray)>","org.hipi.image.RasterImage"
493,"<org.hipi.image.HipiImageHeader: void <init>(org.hipi.image.HipiImageHeader$HipiImageFormat,org.hipi.image.HipiImageHeader$HipiColorSpace,int,int,int,byte[],java.util.Map)>","org.hipi.image.HipiImageHeader"
494,"<org.hipi.image.PixelArrayFloat: void <init>()>","org.hipi.image.PixelArrayFloat"
495,"<org.hipi.image.RasterImage: void <init>(org.hipi.image.PixelArray)>","org.hipi.image.RasterImage"
496,"<org.hipi.image.HipiImageHeader: void <init>(org.hipi.image.HipiImageHeader$HipiImageFormat,org.hipi.image.HipiImageHeader$HipiColorSpace,int,int,int,byte[],java.util.Map)>","org.hipi.image.HipiImageHeader"
497,"<org.hipi.image.PixelArrayFloat: void <init>()>","org.hipi.image.PixelArrayFloat"
498,"<org.hipi.image.RasterImage: void <init>(org.hipi.image.PixelArray)>","org.hipi.image.RasterImage"
499,"<org.hipi.image.HipiImageHeader: void <init>(org.hipi.image.HipiImageHeader$HipiImageFormat,org.hipi.image.HipiImageHeader$HipiColorSpace,int,int,int,byte[],java.util.Map)>","org.hipi.image.HipiImageHeader"
500,"<org.hipi.image.PixelArrayFloat: void <init>()>","org.hipi.image.PixelArrayFloat"
501,"<org.hipi.image.RasterImage: void <init>(org.hipi.image.PixelArray)>","org.hipi.image.RasterImage"
502,"<org.hipi.util.ByteUtils: byte[] floatArrayToByteArray(float[])>","org.hipi.util.ByteUtils"
503,"<org.hipi.util.ByteUtils: java.lang.String asHex(byte[])>","org.hipi.util.ByteUtils"
504,"<org.hipi.image.HipiImage: org.hipi.image.HipiImageHeader$HipiColorSpace getColorSpace()>","org.hipi.image.HipiImage"
505,"<org.hipi.image.HipiImage: int getWidth()>","org.hipi.image.HipiImage"
506,"<org.hipi.image.HipiImage: int getHeight()>","org.hipi.image.HipiImage"
507,"<org.hipi.image.HipiImage: int getNumBands()>","org.hipi.image.HipiImage"
508,"<org.hipi.image.RasterImage: org.hipi.image.PixelArray getPixelArray()>","org.hipi.image.RasterImage"
509,"<org.hipi.image.PixelArrayByte: void <init>()>","org.hipi.image.PixelArrayByte"
510,"<org.hipi.image.RasterImage: void <init>(org.hipi.image.PixelArray)>","org.hipi.image.RasterImage"
511,"<org.hipi.util.ByteUtils: java.lang.String asHex(byte[])>","org.hipi.util.ByteUtils"
512,"<org.hipi.image.HipiImage: org.hipi.image.HipiImageHeader$HipiColorSpace getColorSpace()>","org.hipi.image.HipiImage"
513,"<org.hipi.image.HipiImage: int getWidth()>","org.hipi.image.HipiImage"
514,"<org.hipi.image.HipiImage: int getHeight()>","org.hipi.image.HipiImage"
515,"<org.hipi.image.HipiImage: int getNumBands()>","org.hipi.image.HipiImage"
516,"<org.hipi.image.RasterImage: org.hipi.image.PixelArray getPixelArray()>","org.hipi.image.RasterImage"
